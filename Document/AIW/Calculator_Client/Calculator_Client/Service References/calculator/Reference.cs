//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Calculator_Client.calculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://main", ConfigurationName="calculator.Calculator")]
    public interface Calculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="addReturn")]
        float add(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="addReturn")]
        System.Threading.Tasks.Task<float> addAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="mulReturn")]
        float mul(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="mulReturn")]
        System.Threading.Tasks.Task<float> mulAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="subReturn")]
        float sub(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="subReturn")]
        System.Threading.Tasks.Task<float> subAsync(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="divReturn")]
        float div(float a, float b);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [return: System.ServiceModel.MessageParameterAttribute(Name="divReturn")]
        System.Threading.Tasks.Task<float> divAsync(float a, float b);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface CalculatorChannel : Calculator_Client.calculator.Calculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<Calculator_Client.calculator.Calculator>, Calculator_Client.calculator.Calculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float add(float a, float b) {
            return base.Channel.add(a, b);
        }
        
        public System.Threading.Tasks.Task<float> addAsync(float a, float b) {
            return base.Channel.addAsync(a, b);
        }
        
        public float mul(float a, float b) {
            return base.Channel.mul(a, b);
        }
        
        public System.Threading.Tasks.Task<float> mulAsync(float a, float b) {
            return base.Channel.mulAsync(a, b);
        }
        
        public float sub(float a, float b) {
            return base.Channel.sub(a, b);
        }
        
        public System.Threading.Tasks.Task<float> subAsync(float a, float b) {
            return base.Channel.subAsync(a, b);
        }
        
        public float div(float a, float b) {
            return base.Channel.div(a, b);
        }
        
        public System.Threading.Tasks.Task<float> divAsync(float a, float b) {
            return base.Channel.divAsync(a, b);
        }
    }
}
