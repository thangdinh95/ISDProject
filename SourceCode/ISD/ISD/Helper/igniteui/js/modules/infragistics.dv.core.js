/*!@license
* Infragistics.Web.ClientUI infragistics.dv.core.js 16.1.20161.2145
*
* Copyright (c) 2011-2016 Infragistics Inc.
*
* http://www.infragistics.com/
*
* Depends:
*     jquery-1.4.4.js
*     jquery.ui.core.js
*     jquery.ui.widget.js
*     infragistics.util.js
*/

(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine(["AbstractEnumerable:a", 
"Object:b", 
"Type:c", 
"Boolean:d", 
"ValueType:e", 
"Void:f", 
"IConvertible:g", 
"IFormatProvider:h", 
"Number:i", 
"String:j", 
"IComparable:k", 
"Number:l", 
"IComparable$1:m", 
"IEquatable$1:n", 
"Number:o", 
"Number:p", 
"Number:q", 
"NumberStyles:r", 
"Enum:s", 
"Array:t", 
"IList:u", 
"ICollection:v", 
"IEnumerable:w", 
"IEnumerator:x", 
"NotSupportedException:y", 
"Error:z", 
"Number:aa", 
"String:ab", 
"StringComparison:ac", 
"RegExp:ad", 
"CultureInfo:ae", 
"DateTimeFormatInfo:af", 
"Calendar:ag", 
"Date:ah", 
"Number:ai", 
"DayOfWeek:aj", 
"DateTimeKind:ak", 
"CalendarWeekRule:al", 
"NumberFormatInfo:am", 
"CompareInfo:an", 
"CompareOptions:ao", 
"IEnumerable$1:ap", 
"IEnumerator$1:aq", 
"IDisposable:ar", 
"StringSplitOptions:as", 
"Number:at", 
"Number:au", 
"Number:av", 
"Number:aw", 
"Number:ax", 
"Number:ay", 
"Assembly:az", 
"Stream:a0", 
"SeekOrigin:a1", 
"RuntimeTypeHandle:a2", 
"MethodInfo:a3", 
"MethodBase:a4", 
"MemberInfo:a5", 
"ParameterInfo:a6", 
"TypeCode:a7", 
"ConstructorInfo:a8", 
"PropertyInfo:a9", 
"Func$1:ba", 
"MulticastDelegate:bb", 
"IntPtr:bc", 
"AbstractEnumerator:bd", 
"ArgumentException:bg", 
"IArray:bi", 
"List$1:bj", 
"IList$1:bk", 
"ICollection$1:bl", 
"Script:bm", 
"IArrayList:bn", 
"Array:bo", 
"CompareCallback:bp", 
"Func$3:bq", 
"Action$1:br", 
"Comparer$1:bs", 
"IComparer:bt", 
"IComparer$1:bu", 
"DefaultComparer$1:bv", 
"Comparison$1:bw", 
"ReadOnlyCollection$1:bx", 
"Predicate$1:by", 
"NotImplementedException:bz", 
"IDictionary$2:b1", 
"Dictionary$2:b2", 
"IDictionary:b3", 
"Func$2:b4", 
"KeyValuePair$2:b5", 
"Enumerable:b6", 
"Thread:b7", 
"ThreadStart:b8", 
"IOrderedEnumerable$1:b9", 
"SortedList$1:ca", 
"Math:cb", 
"ArgumentNullException:cc", 
"IEqualityComparer$1:cd", 
"EqualityComparer$1:ce", 
"IEqualityComparer:cf", 
"DefaultEqualityComparer$1:cg", 
"Dictionary_EnumerableCollection$3:ch", 
"InvalidOperationException:ci", 
"GenericEnumerable$1:cj", 
"GenericEnumerator$1:ck", 
"INotifyCollectionChanged:cm", 
"NotifyCollectionChangedEventHandler:cn", 
"NotifyCollectionChangedEventArgs:co", 
"EventArgs:cp", 
"NotifyCollectionChangedAction:cq", 
"LinkedList$1:cr", 
"LinkedListNode$1:cs", 
"ObservableCollection$1:ct", 
"INotifyPropertyChanged:cu", 
"PropertyChangedEventHandler:cv", 
"PropertyChangedEventArgs:cw", 
"Delegate:cx", 
"Interlocked:cy", 
"Stack$1:c2", 
"ReverseArrayEnumerator$1:c3", 
"DependencyObject:de", 
"Dictionary:df", 
"DependencyProperty:dg", 
"PropertyMetadata:dh", 
"PropertyChangedCallback:di", 
"DependencyPropertyChangedEventArgs:dj", 
"DependencyPropertiesCollection:dk", 
"UnsetValue:dl", 
"Binding:dm", 
"PropertyPath:dn", 
"APIFactory:ds", 
"Point:dt", 
"Rect:du", 
"Size:dv", 
"Color:dw", 
"Environment:d5", 
"Debug:ee", 
"StringBuilder:eu", 
"JQueryPromise:e7", 
"Action:e8", 
"JQueryDeferred:fb", 
"JQuery:fc", 
"JQueryObject:fd", 
"Element:fe", 
"ElementAttributeCollection:ff", 
"ElementCollection:fg", 
"WebStyle:fh", 
"ElementNodeType:fi", 
"Document:fj", 
"EventListener:fk", 
"IElementEventHandler:fl", 
"ElementEventHandler:fm", 
"ElementAttribute:fn", 
"JQueryPosition:fo", 
"JQueryCallback:fp", 
"JQueryEvent:fq", 
"JQueryUICallback:fr", 
"Random:f6", 
"Tuple$2:f8", 
"UIElement:gd", 
"Transform:ge", 
"UIElementCollection:gf", 
"FrameworkElement:gg", 
"Visibility:gh", 
"Style:gi", 
"Control:gj", 
"Thickness:gk", 
"HorizontalAlignment:gl", 
"VerticalAlignment:gm", 
"ContentControl:gn", 
"DataTemplate:go", 
"DataTemplateRenderHandler:gp", 
"DataTemplateRenderInfo:gq", 
"DataTemplatePassInfo:gr", 
"DataTemplateMeasureHandler:gs", 
"DataTemplateMeasureInfo:gt", 
"DataTemplatePassHandler:gu", 
"Panel:gv", 
"Canvas:gw", 
"TextBlock:gy", 
"Brush:gz", 
"Key:g1", 
"ModifierKeys:g2", 
"MouseEventArgs:g3", 
"MouseButtonEventArgs:g4", 
"LinearGradientBrush:g5", 
"GradientStop:g6", 
"DoubleCollection:g7", 
"FillRule:g8", 
"GeometryType:g9", 
"Geometry:ha", 
"GeometryCollection:hb", 
"GeometryGroup:hc", 
"LineGeometry:hd", 
"RectangleGeometry:he", 
"EllipseGeometry:hf", 
"PathGeometry:hg", 
"PathFigureCollection:hh", 
"PathFigure:hi", 
"PathSegmentCollection:hj", 
"PathSegmentType:hk", 
"PathSegment:hl", 
"LineSegment:hm", 
"BezierSegment:hn", 
"PolyBezierSegment:ho", 
"PointCollection:hp", 
"PolyLineSegment:hq", 
"ArcSegment:hr", 
"SweepDirection:hs", 
"PenLineCap:ht", 
"RotateTransform:hv", 
"TranslateTransform:hw", 
"ScaleTransform:hx", 
"TransformGroup:hy", 
"TransformCollection:hz", 
"Shape:h1", 
"Line:h2", 
"Path:h3", 
"Polygon:h4", 
"Polyline:h5", 
"Rectangle:h6"]);


$.ig.util.defType('Visibility', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Visible";
			case 1: return "Collapsed";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('Visibility', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('VerticalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Top";
			case 1: return "Center";
			case 2: return "Bottom";
			case 3: return "Stretch";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('VerticalAlignment', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('PenLineCap', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Flat";
			case 1: return "Square";
			case 2: return "Round";
			case 3: return "Triangle";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('PenLineCap', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('HorizontalAlignment', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Left";
			case 1: return "Center";
			case 2: return "Right";
			case 3: return "Stretch";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('HorizontalAlignment', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('SweepDirection', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Counterclockwise";
			case 1: return "Clockwise";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('SweepDirection', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('PathSegmentType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Line";
			case 1: return "Bezier";
			case 2: return "PolyBezier";
			case 3: return "PolyLine";
			case 4: return "Arc";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('PathSegmentType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('GeometryType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Group";
			case 1: return "Line";
			case 2: return "Rectangle";
			case 3: return "Ellipse";
			case 4: return "Path";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('GeometryType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('FillRule', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "EvenOdd";
			case 1: return "Nonzero";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FillRule', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('ModifierKeys', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Alt";
			case 2: return "Control";
			case 4: return "Shift";
			case 8: return "Windows";
			case 8: return "Apple";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ModifierKeys', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('Key', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Back";
			case 2: return "Tab";
			case 3: return "Enter";
			case 4: return "Shift";
			case 5: return "Ctrl";
			case 6: return "Alt";
			case 7: return "CapsLock";
			case 8: return "Escape";
			case 9: return "Space";
			case 10: return "PageUp";
			case 11: return "PageDown";
			case 12: return "End";
			case 13: return "Home";
			case 14: return "Left";
			case 15: return "Up";
			case 16: return "Right";
			case 17: return "Down";
			case 18: return "Insert";
			case 19: return "Delete";
			case 20: return "D0";
			case 21: return "D1";
			case 22: return "D2";
			case 23: return "D3";
			case 24: return "D4";
			case 25: return "D5";
			case 26: return "D6";
			case 27: return "D7";
			case 28: return "D8";
			case 29: return "D9";
			case 30: return "A";
			case 31: return "B";
			case 32: return "C";
			case 33: return "D";
			case 34: return "E";
			case 35: return "F";
			case 36: return "G";
			case 37: return "H";
			case 38: return "I";
			case 39: return "J";
			case 40: return "K";
			case 41: return "L";
			case 42: return "M";
			case 43: return "N";
			case 44: return "O";
			case 45: return "P";
			case 46: return "Q";
			case 47: return "R";
			case 48: return "S";
			case 49: return "T";
			case 50: return "U";
			case 51: return "V";
			case 52: return "W";
			case 53: return "X";
			case 54: return "Y";
			case 55: return "Z";
			case 56: return "F1";
			case 57: return "F2";
			case 58: return "F3";
			case 59: return "F4";
			case 60: return "F5";
			case 61: return "F6";
			case 62: return "F7";
			case 63: return "F8";
			case 64: return "F9";
			case 65: return "F10";
			case 66: return "F11";
			case 67: return "F12";
			case 68: return "NumPad0";
			case 69: return "NumPad1";
			case 70: return "NumPad2";
			case 71: return "NumPad3";
			case 72: return "NumPad4";
			case 73: return "NumPad5";
			case 74: return "NumPad6";
			case 75: return "NumPad7";
			case 76: return "NumPad8";
			case 77: return "NumPad9";
			case 78: return "Multiply";
			case 79: return "Add";
			case 80: return "Subtract";
			case 81: return "Decimal";
			case 82: return "Divide";
			case 255: return "Unknown";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('Key', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('NotifyCollectionChangedAction', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Add";
			case 1: return "Remove";
			case 2: return "Replace";
			case 4: return "Reset";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('NotifyCollectionChangedAction', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('AbstractEnumerable', 'Object', {
	__inner: null,
	init: function (inner) {
		$.ig.Object.prototype.init.call(this);
		this.__inner = inner;
	},
	getEnumerator: function () {
		return new $.ig.AbstractEnumerator(this.__inner().getEnumerator());
	}
	,
	$type: new $.ig.Type('AbstractEnumerable', $.ig.Object.prototype.$type, [$.ig.IEnumerable.prototype.$type])
}, true);

$.ig.util.defType('AbstractEnumerator', 'Object', {
	__inner: null,
	init: function (inner) {
		$.ig.Object.prototype.init.call(this);
		this.__inner = inner;
	},
	current: function () {
		return this.__inner.current();
	}
	,
	moveNext: function () {
		return this.__inner.moveNext();
	}
	,
	reset: function () {
		this.__inner.reset();
	}
	,
	$type: new $.ig.Type('AbstractEnumerator', $.ig.Object.prototype.$type, [$.ig.IEnumerator.prototype.$type])
}, true);

$.ig.util.defType('IArray', 'Object', {
	$type: new $.ig.Type('IArray', null)
}, true);

$.ig.util.defType('List$1', 'Object', {
	$t: null,
	__inner: null,
	__useFastCompare: false,
	init: function ($t, initNumber) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		this.__syncRoot = {};
		$.ig.Object.prototype.init.call(this);
		this.__inner = [];
		this.__useFastCompare = this.$t.InstanceConstructor && this.$t.InstanceConstructor.prototype.equals === $.ig.Object.prototype.equals;
	},
	init1: function ($t, initNumber, source) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.List$1.prototype.init.call(this, this.$t, 0);
		if (this.tryArray(0, source)) {
			return;
		}
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			this.add(item);
		}
	},
	init2: function ($t, initNumber, capacity) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.List$1.prototype.init.call(this, this.$t, 0);
	},
	setItem: function (index, newItem) {
		this.__inner[index] = newItem;
	}
	,
	insertItem: function (index, newItem) {
		this.__inner.splice(index, 0, newItem);
	}
	,
	addItem: function (newItem) {
		this.__inner.push(newItem);
	}
	,
	removeItem: function (index) {
		this.__inner.splice(index, 1);
	}
	,
	clearItems: function () {
		this.__inner = [];
	}
	,
	item: function (index, value) {
		if (arguments.length === 2) {
			this.setItem(index, value);
			return value;
		} else {
			return this.__inner[index];
		}
	}
	,
	indexOf: function (item) {
		if (this.__useFastCompare) {
			return this.__inner.indexOf(item);
		}
		for (var i = 0; i < this.__inner.length; i++) {
			if ($.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$t, item), $.ig.util.getBoxIfEnum(this.$t, this.__inner[i]))) {
				return i;
			}
		}
		return -1;
	}
	,
	indexOf2: function (item, index) {
		if (this.__useFastCompare) {
			return this.__inner.indexOf(item, index);
		}
		for (; index < this.__inner.length; index++) {
			if ($.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$t, item), $.ig.util.getBoxIfEnum(this.$t, this.__inner[index]))) {
				return index;
			}
		}
		return -1;
	}
	,
	lastIndexOf: function (item) {
		if (this.__useFastCompare) {
			return this.__inner.lastIndexOf(item);
		}
		for (var i = this.__inner.length - 1; i >= 0; i--) {
			if ($.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$t, item), $.ig.util.getBoxIfEnum(this.$t, this.__inner[i]))) {
				return i;
			}
		}
		return -1;
	}
	,
	insert: function (index, item) {
		this.insertItem(index, item);
	}
	,
	removeAt: function (index) {
		this.removeItem(index);
	}
	,
	count: function () {
		return this.__inner.length;
	}
	,
	isReadOnly: function () {
		return false;
	}
	,
	add: function (item) {
		this.addItem(item);
	}
	,
	clear: function () {
		this.clearItems();
	}
	,
	contains: function (item) {
		return this.indexOf(item) >= 0;
	}
	,
	copyTo: function (array, arrayIndex) {
		for (var i = 0; i < this.__inner.length; i++) {
			array[arrayIndex + i] = this.__inner[i];
		}
	}
	,
	remove: function (item) {
		var indexOf = this.indexOf(item);
		if (indexOf < 0) {
			return false;
		}
		this.removeItem(indexOf);
		return true;
	}
	,
	getEnumerator: function () {
		return this.__inner.getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.__inner.getEnumerator();
	}
	,
	asArray: function () {
		return this.__inner;
	}
	,
	tryArray: function (index_, collection_) {
		var asArrayList = $.ig.util.cast($.ig.IArrayList.prototype.$type, collection_);
		if (asArrayList != null) {
			var a_ = asArrayList.asArrayList();
			Array.prototype.splice.apply(this.__inner, Array.prototype.concat.apply([index_, 0], a_));
			return true;
		}
		var asArray = $.ig.util.cast($.ig.IArray.prototype.$type, collection_);
		if (asArray != null) {
			var a_ = asArray.asArray();
			Array.prototype.splice.apply(this.__inner, Array.prototype.concat.apply([index_, 0], a_));
			return true;
		}
		var asList_ = $.ig.util.cast($.ig.IList$1.prototype.$type.specialize(this.$t), collection_);
		if (asList_ != null) {
			for (var i_ = 0; i_ < asList_.count(); i_++) {
				var item_ = asList_.item(i_);
				this.__inner.splice(index_ + i_, 0, item_);
			}
			return true;
		}
		var arr_ = $.isArray(collection_) ? collection_ : null;;
		if (arr_ != null) {
			var inn_ = this.__inner;
			if (this.__inner.length == 0) {
				for (var i_ = 0; i_ < arr_.length; i_++) {
					inn_[index_++] = $.ig.util.castObjTo$t(this.$t, arr_[i_]);
				}
			} else {
				for (var i_ = 0; i_ < arr_.length; i_++) {
					inn_.splice(index_++, 0, arr_[i_]);
				}
			}
			return true;
		}
		return false;
	}
	,
	insertRange1: function (index, collection) {
		if (this.tryArray(index, collection)) {
			return;
		}
		var j_ = index;
		var en = collection.getEnumerator();
		while (en.moveNext()) {
			var item_ = en.current();
			this.__inner.splice(j_, 0, item_);
			j_++;
		}
	}
	,
	insertRange: function (index, collection) {
		if (this.tryArray(index, collection)) {
			return;
		}
		var j_ = index;
		var en = collection.getEnumerator();
		while (en.moveNext()) {
			var item_ = en.current();
			this.__inner.splice(j_, 0, item_);
			j_++;
		}
	}
	,
	removeRange: function (index_, numToRemove_) {
		this.__inner.splice(index_, numToRemove_);
	}
	,
	copyTo1: function (array, index) {
		$.ig.util.arrayCopyTo(this.__inner, array, index);
	}
	,
	isFixedSize: function () {
		return false;
	}
	,
	add1: function (value) {
		this.addItem($.ig.util.castObjTo$t(this.$t, value));
		return this.__inner.length - 1;
	}
	,
	contains1: function (item) {
		return this.indexOf1(item) >= 0;
	}
	,
	indexOf1: function (item) {
		return this.indexOf($.ig.util.castObjTo$t(this.$t, item));
	}
	,
	insert1: function (index, value) {
		this.insertItem(index, $.ig.util.castObjTo$t(this.$t, value));
	}
	,
	remove1: function (value) {
		var indexOf = this.indexOf1(value);
		if (indexOf < 0) {
			return;
		}
		this.removeItem(indexOf);
	}
	,
	sort: function () {
		var c = null;
		if (this.$t == Number) {
			c = function (n1, n2) {
				var d1 = n1;
				var d2 = n2;
				if (d1 < d2) {
					return -1;
				}
				if (d1 == d2) {
					return 0;
				}
				return 1;
			};
		} else if (this.$t == $.ig.Number.prototype.$type) {
			c = function (n1, n2) {
				var f1 = n1;
				var f2 = n2;
				if (f1 < f2) {
					return -1;
				}
				if (f1 == f2) {
					return 0;
				}
				return 1;
			};
		} else if (this.$t == $.ig.Number.prototype.$type) {
			c = function (n1, n2) {
				var i1 = $.ig.util.getValue(n1);
				var i2 = $.ig.util.getValue(n2);
				if (i1 < i2) {
					return -1;
				}
				if (i1 == i2) {
					return 0;
				}
				return 1;
			};
		} else if (this.$t == $.ig.Date.prototype.$type) {
			c = function (n1, n2) {
				var d1 = n1;
				var d2 = n2;
				if (d1.getTime() < d2.getTime()) {
					return -1;
				}
				if (d1.getTime() == d2.getTime()) {
					return 0;
				}
				return 1;
			};
		} else {
			c = function (n1, n2) {
				return (n1).compareTo(n2);
			};
		}
		this.sortHelper(c);
	}
	,
	sortHelper: function (compare_) {
		this.__inner.sort(compare_);
	}
	,
	sort2: function (compare_) {
		this.__inner.sort(compare_);
	}
	,
	_capacity: 0,
	capacity: function (value) {
		if (arguments.length === 1) {
			this._capacity = value;
			return value;
		} else {
			return this._capacity;
		}
	}
	,
	addRange: function (values) {
		var en = values.getEnumerator();
		while (en.moveNext()) {
			var item_ = en.current();
			this.__inner.push(item_);
		}
	}
	,
	toArray: function () {
		return this.__inner;
	}
	,
	forEach: function (action) {
		for (var i = 0; i < this.__inner.length; i++) {
			action(this.__inner[i]);
		}
	}
	,
	isSynchronized: function () {
		return true;
	}
	,
	__syncRoot: null,
	syncRoot: function () {
		return this.__syncRoot;
	}
	,
	binarySearch: function (item) {
		return this.binarySearch1(item, $.ig.Comparer$1.prototype.defaultComparerValue(this.$t));
	}
	,
	binarySearch1: function (item, comparer) {
		var start = 0;
		var end = this.count() - 1;
		while (start <= end) {
			var mid = start + ($.ig.intDivide((end - start), 2));
			var testValue = this.__inner[mid];
			var compareResult = comparer.compare(testValue, item);
			if (compareResult == 0) {
				return mid;
			}
			if (compareResult < 0) {
				start = mid + 1;
			} else {
				end = mid - 1;
			}
		}
		return ~start;
	}
	,
	asReadOnly: function () {
		return new $.ig.ReadOnlyCollection$1(this.$t, 1, this);
	}
	,
	reverse: function () {
		for (var i = 0; i < $.ig.intDivide(this.count(), 2); i++) {
			var other = this.count() - i - 1;
			var temp = this.__inner[i];
			this.__inner[i] = this.__inner[other];
			this.__inner[other] = temp;
		}
	}
	,
	sort1: function (comparer) {
		this.sort2(comparer.compare.runOn(comparer));
	}
	,
	findIndex: function (match) {
		for (var i = 0; i < this.__inner.length; i++) {
			if (match(this.__inner[i])) {
				return i;
			}
		}
		return -1;
	}
	,
	removeAll: function (match) {
		throw new $.ig.NotImplementedException(0);
		return 0;
	}
	,
	$type: new $.ig.Type('List$1', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize(0), $.ig.IArray.prototype.$type, $.ig.IList.prototype.$type])
}, true);

$.ig.util.defType('IComparer', 'Object', {
	$type: new $.ig.Type('IComparer', null)
}, true);

$.ig.util.defType('IComparer$1', 'Object', {
	$type: new $.ig.Type('IComparer$1', null)
}, true);

$.ig.util.defType('Comparer$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
	},
	defaultComparerValue: function ($t) {
		return new $.ig.DefaultComparer$1($t);
	}
	,
	compare: function (x, y) {
	}
	,
	create: function ($t, comparison) {
		return null;
	}
	,
	$type: new $.ig.Type('Comparer$1', $.ig.Object.prototype.$type, [$.ig.IComparer.prototype.$type, $.ig.IComparer$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('DefaultComparer$1', 'Comparer$1', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Comparer$1.prototype.init.call(this, this.$t);
	},
	compare: function (x, y) {
		var xComparable = $.ig.util.cast($.ig.IComparable$1.prototype.$type.specialize(this.$t), x);
		if (xComparable != null) {
			return xComparable.compareTo(y);
		}
		var yComparable = $.ig.util.cast($.ig.IComparable$1.prototype.$type.specialize(this.$t), y);
		if (yComparable != null) {
			return -yComparable.compareTo(x);
		}
		return $.ig.util.compare(x, y);
	}
	,
	$type: new $.ig.Type('DefaultComparer$1', $.ig.Comparer$1.prototype.$type.specialize(0))
}, true);

$.ig.util.defType('KeyValuePair$2', 'ValueType', {
	$tKey: null,
	$tValue: null,
	init: function ($tKey, $tValue, initNumber) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	__key: null,
	__value: null,
	init1: function ($tKey, $tValue, initNumber, key, value) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.ValueType.prototype.init.call(this);
		this.__key = key;
		this.__value = value;
	},
	key: function () {
		return this.__key;
	}
	,
	value: function () {
		return this.__value;
	}
	,
	$type: new $.ig.Type('KeyValuePair$2', $.ig.ValueType.prototype.$type)
}, true);

$.ig.util.defType('IDictionary$2', 'Object', {
	$type: new $.ig.Type('IDictionary$2', null, [$.ig.ICollection$1.prototype.$type.specialize($.ig.KeyValuePair$2.prototype.$type.specialize(0, 1)), $.ig.IEnumerable$1.prototype.$type.specialize($.ig.KeyValuePair$2.prototype.$type.specialize(0, 1)), $.ig.IEnumerable.prototype.$type])
}, true);

$.ig.util.defType('Dictionary$2', 'Object', {
	$tKey: null,
	$tValue: null,
	__comparer: null,
	__count: 0,
	__useStrings: false,
	__needsEnsure: false,
	__assumeUniqueKeys: false,
	__keysUnique: null,
	__values: null,
	init: function ($tKey, $tValue, initNumber) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Dictionary$2.prototype.init4.call(this, this.$tKey, this.$tValue, 4, 0, null);
	},
	init1: function ($tKey, $tValue, initNumber, capacity) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.Dictionary$2.prototype.init4.call(this, this.$tKey, this.$tValue, 4, capacity, null);
	},
	init2: function ($tKey, $tValue, initNumber, comparer) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.Dictionary$2.prototype.init4.call(this, this.$tKey, this.$tValue, 4, 0, comparer);
	},
	init3: function ($tKey, $tValue, initNumber, dictionary) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.Dictionary$2.prototype.init1.call(this, this.$tKey, this.$tValue, 1, dictionary.count());
		var en = dictionary.getEnumerator();
		while (en.moveNext()) {
			var pair = en.current();
			this.item(pair.key(), pair.value());
		}
	},
	init4: function ($tKey, $tValue, initNumber, capacity, comparer) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.Object.prototype.init.call(this);
		this.__keysUnique = {};
		this.__values = {};
		this.__comparer = comparer || $.ig.EqualityComparer$1.prototype.defaultEqualityComparerValue(this.$tKey);
		this.__useStrings = comparer == null && ($tKey === $.ig.String.prototype.$type || $tKey === String);
		this.__needsEnsure = $tKey === $.ig.Object.prototype.$type || ($tKey.InstanceConstructor && !$tKey.InstanceConstructor.prototype.getHashCode);
		this.__assumeUniqueKeys = comparer == null && (this.__useStrings || this.__needsEnsure || $tKey.InstanceConstructor && $tKey.InstanceConstructor.prototype.getHashCode == $.ig.Object.prototype.getHashCode);
	},
	count: function () {
		return this.__count;
	}
	,
	item: function (key_, value) {
		if (arguments.length === 2) {
			this.addHelper(key_, value, false);
			return value;
		} else {
			var $self = this;
			var result;
			if ((function () { var $ret = $self.tryGetValue(key_, result); result = $ret.p1; return $ret.ret; }())) {
				return result;
			}
			return $.ig.util.getDefaultValue(this.$tValue);
		}
	}
	,
	length: function () {
		return this.__count;
	}
	,
	containsKey: function (key) {
		if (this.__assumeUniqueKeys) {
			var hash = this.hashUnique(key);
			return this.__keysUnique.hasOwnProperty(hash);
		} else {
			var hashCode = this.hashCode(key);
			var current = this.__values[hashCode];
			if (current) {
				if (current.$isHashSetBucket) {
					var $t = current;
					for (var i = 0; i < $t.length; i++) {
						var currentItem = $t[i];
						return this.__comparer.equalsC(currentItem.key, key);
					}
				} else {
					return this.__comparer.equalsC(current.key, key);
				}
			}
		}
		return false;
	}
	,
	remove: function (key) {
		if (this.__assumeUniqueKeys) {
			var hash = this.hashUnique(key);
			if (!this.__keysUnique.hasOwnProperty(hash)) {
				return false;
			}
			delete this.__keysUnique[hash];
			delete this.__values[hash];
			this.__count--;
			return true;
		}
		var hashCode = this.hashCode(key);
		var current = this.__values[hashCode];
		if (current) {
			if (current.$isHashSetBucket) {
				var $t = current;
				for (var i = 0; i < $t.length; i++) {
					var currentItem = $t[i];
					if (this.__comparer.equalsC(currentItem.key, key)) {
						current.removeItem(currentItem);
						if (current.length == 1) {
							this.__values[hashCode] = current[0];
						}
						this.__count--;
						return true;
					}
				}
			} else {
				if (this.__comparer.equalsC(current.key, key)) {
					delete this.__values[hashCode];
					this.__count--;
					return true;
				}
			}
		}
		return false;
	}
	,
	clear: function () {
		this.__count = 0;
		this.__keysUnique = {};
		this.__values = {};
	}
	,
	hashUnique: function (key) {
		if (this.__needsEnsure) {
			$.ig.util.ensureUniqueId(key);
		}
		if (this.__useStrings) {
			return $.ig.util.toString$1(this.$tKey, key);
		} else {
			return key.getHashCode().toString();
		}
	}
	,
	hashCode: function (key) {
		if (this.__needsEnsure) {
			$.ig.util.ensureUniqueId(key);
		} else {
			if (!key.getHashCode) {
				this.__needsEnsure = true;
				$.ig.util.ensureUniqueId(key);
			}
		}
		return this.__comparer.getHashCodeC(key);
	}
	,
	add: function (key, value) {
		this.addHelper(key, value, true);
	}
	,
	addHelper: function (key, value, add) {
		if (this.__assumeUniqueKeys) {
			var hash = this.hashUnique(key);
			if (!this.__keysUnique.hasOwnProperty(hash)) {
				this.__count++;
			} else if (add) {
				throw new $.ig.ArgumentException(1, "Duplicate key added to the dictionary");
			}
			this.__keysUnique[hash] = key;
			this.__values[hash] = value;
		} else {
			var hashCode = this.hashCode(key);
			var current = this.__values[hashCode];
			if (current) {
				if (current.$isHashSetBucket) {
					var $t = current;
					for (var i = 0; i < $t.length; i++) {
						var currentItem = $t[i];
						if (this.__comparer.equalsC(currentItem.key, key)) {
							if (add) {
								throw new $.ig.ArgumentException(1, "Duplicate key added to the dictionary");
							}
							currentItem.value = value;
							return;
						}
					}
					current.push({key: key, value: value});
					this.__count++;
				} else {
					if (this.__comparer.equalsC(current.key, key)) {
						if (add) {
							throw new $.ig.ArgumentException(1, "Duplicate key added to the dictionary");
						}
						current.value = value;
					} else {
						var bucket = [current, {key: key, value: value}];
						bucket.$isHashSetBucket = true;;
						this.__values[hashCode] = bucket;
						this.__count++;
					}
				}
			} else {
				this.__values[hashCode] = {key: key, value: value};
				this.__count++;
			}
		}
	}
	,
	tryGetValue: function (key, value) {
		if (this.__assumeUniqueKeys) {
			var hash = this.hashUnique(key);
			if (this.__keysUnique.hasOwnProperty(hash)) {
				value = this.__values[hash];
				return {
					ret: true,
					p1: value
				};
			}
		} else {
			var hashCode = this.hashCode(key);
			var current = this.__values[hashCode];
			if (current) {
				if (current.$isHashSetBucket) {
					var $t = current;
					for (var i = 0; i < $t.length; i++) {
						var currentItem = $t[i];
						if (this.__comparer.equalsC(currentItem.key, key)) {
							value = currentItem.value;
							return {
								ret: true,
								p1: value
							};
						}
					}
				} else {
					if (this.__comparer.equalsC(current.key, key)) {
						value = current.value;
						return {
							ret: true,
							p1: value
						};
					}
				}
			}
		}
		value = $.ig.util.getDefaultValue(this.$tValue);
		return {
			ret: false,
			p1: value
		};
	}
	,
	isReadOnly: function () {
		return false;
	}
	,
	add1: function (item) {
		this.add(item.key(), item.value());
	}
	,
	contains: function (item) {
		var $self = this;
		var test;
		return (function () { var $ret = $self.tryGetValue(item.key(), test); test = $ret.p1; return $ret.ret; }()) && $.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$tValue, test), $.ig.util.getBoxIfEnum(this.$tValue, item.value()));
	}
	,
	copyTo: function (array, arrayIndex) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	remove1: function (item) {
		this.remove(item.key());
		return true;
	}
	,
	getEnumerator: function () {
		return this.toEnumerable().getEnumerator();
	}
	,
	toEnumerable: function () {
		var d__ = new $.ig.Dictionary___ToEnumerable__IteratorClass$2(this.$tKey, this.$tValue, -2);
		d__.__4__this = this;
		return d__;
	}
	,
	getEnumerator: function () {
		return this.toEnumerable().getEnumerator();
	}
	,
	keys: function () {
		return new $.ig.Dictionary_EnumerableCollection$3(this.$tKey, this.$tValue, this.$tKey, this, $.ig.Enumerable.prototype.select$2($.ig.KeyValuePair$2.prototype.$type.specialize(this.$tKey, this.$tValue), this.$tKey, this.toEnumerable(), function (p) { return p.key(); }), this.__comparer || $.ig.EqualityComparer$1.prototype.defaultEqualityComparerValue(this.$tKey));
	}
	,
	values: function () {
		return new $.ig.Dictionary_EnumerableCollection$3(this.$tKey, this.$tValue, this.$tValue, this, $.ig.Enumerable.prototype.select$2($.ig.KeyValuePair$2.prototype.$type.specialize(this.$tKey, this.$tValue), this.$tValue, this.toEnumerable(), function (p) { return p.value(); }), $.ig.EqualityComparer$1.prototype.defaultEqualityComparerValue(this.$tValue));
	}
	,
	$type: new $.ig.Type('Dictionary$2', $.ig.Object.prototype.$type, [$.ig.IDictionary$2.prototype.$type.specialize(0, 1), $.ig.IDictionary.prototype.$type])
}, true);

$.ig.util.defType('Dictionary_EnumerableCollection$3', 'Object', {
	$tKey: null,
	$tValue: null,
	$t: null,
	__collection: null,
	__comparer: null,
	__owner: null,
	init: function ($tKey, $tValue, $t, owner, collection, comparer) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$t = $t;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue, this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__collection = collection;
		this.__comparer = comparer;
		this.__owner = owner;
	},
	count: function () {
		return this.__owner.count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	add: function (item) {
		throw new $.ig.InvalidOperationException(0);
	}
	,
	clear: function () {
		throw new $.ig.InvalidOperationException(0);
	}
	,
	contains: function (item) {
		var en = this.__collection.getEnumerator();
		while (en.moveNext()) {
			var i = en.current();
			if ($.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$t, i), $.ig.util.getBoxIfEnum(this.$t, item))) {
				return true;
			}
		}
		return false;
	}
	,
	copyTo: function (array, arrayIndex) {
		var en = this.__collection.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			array[arrayIndex++] = item;
		}
	}
	,
	remove: function (item) {
		throw new $.ig.InvalidOperationException(0);
	}
	,
	getEnumerator: function () {
		return this.__collection.getEnumerator();
	}
	,
	getEnumerator1: function () {
		return this.__collection.getEnumerator();
	}
	,
	$type: new $.ig.Type('Dictionary_EnumerableCollection$3', $.ig.Object.prototype.$type, [$.ig.ICollection$1.prototype.$type.specialize(2)])
}, true);

$.ig.util.defType('EqualityComparer$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
	},
	defaultEqualityComparerValue: function ($t) {
		return new $.ig.DefaultEqualityComparer$1($t);
	}
	,
	equalsC: function (x, y) {
	}
	,
	getHashCodeC: function (obj) {
	}
	,
	equalsC: function (x, y) {
		return this.equalsC($.ig.util.castObjTo$t(this.$t, x), $.ig.util.castObjTo$t(this.$t, y));
	}
	,
	getHashCodeC: function (obj) {
		return this.getHashCodeC($.ig.util.castObjTo$t(this.$t, obj));
	}
	,
	$type: new $.ig.Type('EqualityComparer$1', $.ig.Object.prototype.$type, [$.ig.IEqualityComparer.prototype.$type, $.ig.IEqualityComparer$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('DefaultEqualityComparer$1', 'EqualityComparer$1', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.EqualityComparer$1.prototype.init.call(this, this.$t);
	},
	equalsC: function (x, y) {
		return $.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum(this.$t, x), $.ig.util.getBoxIfEnum(this.$t, y));
	}
	,
	getHashCodeC: function (obj) {
		return obj.getHashCode();
	}
	,
	$type: new $.ig.Type('DefaultEqualityComparer$1', $.ig.EqualityComparer$1.prototype.$type.specialize(0))
}, true);

$.ig.util.defType('GenericEnumerable$1', 'Object', {
	$t: null,
	__inner: null,
	init: function ($t, inner) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__inner = inner;
	},
	getEnumerator: function () {
		return new $.ig.GenericEnumerator$1(this.$t, this.__inner().getEnumerator());
	}
	,
	getEnumerator: function () {
		return new $.ig.GenericEnumerator$1(this.$t, this.__inner().getEnumerator());
	}
	,
	$type: new $.ig.Type('GenericEnumerable$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('GenericEnumerator$1', 'Object', {
	$t: null,
	__inner: null,
	init: function ($t, inner) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__inner = inner;
	},
	current: function () {
		return this.__inner.current();
	}
	,
	moveNext: function () {
		return this.__inner.moveNext();
	}
	,
	reset: function () {
		this.__inner.reset();
	}
	,
	dispose: function () {
	}
	,
	$type: new $.ig.Type('GenericEnumerator$1', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('INotifyCollectionChanged', 'Object', {
	$type: new $.ig.Type('INotifyCollectionChanged', null)
}, true);

$.ig.util.defType('NotifyCollectionChangedEventArgs', 'EventArgs', {
	init: function (initNumber, action) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.EventArgs.prototype.init.call(this);
		this.__action = action;
		this.__oldItems = new $.ig.List$1($.ig.Object.prototype.$type, 0);
		this.__newItems = new $.ig.List$1($.ig.Object.prototype.$type, 0);
	},
	init1: function (initNumber, action, changedItem, index) {
		$.ig.EventArgs.prototype.init.call(this);
		this.__action = action;
		this.__oldItems = new $.ig.List$1($.ig.Object.prototype.$type, 0);
		if (this.__action == $.ig.NotifyCollectionChangedAction.prototype.remove || this.__action == $.ig.NotifyCollectionChangedAction.prototype.replace) {
			this.__oldItems.add(changedItem);
			this.__oldStartingIndex = index;
		}
		if (this.__action != $.ig.NotifyCollectionChangedAction.prototype.remove) {
			this.__newItems = (function () {
				var $ret = new $.ig.List$1($.ig.Object.prototype.$type, 0);
				$ret.add1(changedItem);
				return $ret;
			}());
		} else {
			this.__newItems = new $.ig.List$1($.ig.Object.prototype.$type, 0);
		}
		this.__newStartingIndex = index;
	},
	init2: function (initNumber, action, newItem, oldItem, index) {
		$.ig.EventArgs.prototype.init.call(this);
		this.__action = action;
		this.__newStartingIndex = index;
		this.__oldStartingIndex = index;
		this.__newItems = (function () {
			var $ret = new $.ig.List$1($.ig.Object.prototype.$type, 0);
			$ret.add1(newItem);
			return $ret;
		}());
		this.__oldItems = (function () {
			var $ret = new $.ig.List$1($.ig.Object.prototype.$type, 0);
			$ret.add1(oldItem);
			return $ret;
		}());
	},
	__action: 0,
	action: function () {
		return this.__action;
	}
	,
	__newItems: null,
	newItems: function () {
		return this.__newItems;
	}
	,
	__newStartingIndex: 0,
	newStartingIndex: function () {
		return this.__newStartingIndex;
	}
	,
	__oldItems: null,
	oldItems: function () {
		return this.__oldItems;
	}
	,
	__oldStartingIndex: 0,
	oldStartingIndex: function () {
		return this.__oldStartingIndex;
	}
	,
	$type: new $.ig.Type('NotifyCollectionChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('LinkedList$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
	},
	__first: null,
	first: function () {
		return this.__first;
	}
	,
	__last: null,
	last: function () {
		return this.__last;
	}
	,
	addFirst: function (item) {
		if (this.__first == null) {
			this.__first = new $.ig.LinkedListNode$1(this.$t, 1, item);
			this.__last = this.__first;
		} else {
			var oldFirst = this.__first;
			this.__first = new $.ig.LinkedListNode$1(this.$t, 1, item);
			this.__first._next = oldFirst;
			oldFirst._prev = this.__first;
		}
	}
	,
	addLast: function (item) {
		if (this.__last == null) {
			this.__first = new $.ig.LinkedListNode$1(this.$t, 1, item);
			this.__last = this.__first;
		} else {
			var oldLast = this.__last;
			this.__last = new $.ig.LinkedListNode$1(this.$t, 1, item);
			this.__last._prev = oldLast;
			oldLast._next = this.__last;
		}
	}
	,
	remove: function (node) {
		if (this.__first == node) {
			this.__first = node._next;
			if (node._next != null) {
				node._next._prev = null;
			}
		}
		if (this.__last == node) {
			this.__last = node._prev;
			if (node._prev != null) {
				node._prev._next = null;
			}
		}
		if (node._prev != null) {
			node._prev._next = node._next;
		}
		if (node._next != null) {
			node._next._prev = node._prev;
		}
		node._next = null;
		node._prev = null;
	}
	,
	$type: new $.ig.Type('LinkedList$1', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LinkedListNode$1', 'Object', {
	$t: null,
	_value: null,
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	,
	_prev: null,
	_next: null,
	init: function ($t, initNumber) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function ($t, initNumber, item) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.value(item);
	},
	$type: new $.ig.Type('LinkedListNode$1', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ObservableCollection$1', 'List$1', {
	$t: null,
	init: function ($t, initNumber) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.List$1.prototype.init.call(this, this.$t, 0);
	},
	init1: function ($t, initNumber, source) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.List$1.prototype.init1.call(this, this.$t, 1, source);
	},
	init2: function ($t, initNumber, capacity) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.List$1.prototype.init2.call(this, this.$t, 2, capacity);
	},
	setItem: function (index, newItem) {
		var oldItem = this.__inner[index];
		$.ig.List$1.prototype.setItem.call(this, index, newItem);
		if (this.propertyChanged != null) {
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Item[]"));
		}
		if (this.collectionChanged != null) {
			var args = new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, $.ig.util.getBoxIfEnum(this.$t, newItem), $.ig.util.getBoxIfEnum(this.$t, oldItem), index);
			this.onCollectionChanged(args);
		}
	}
	,
	clearItems: function () {
		$.ig.List$1.prototype.clearItems.call(this);
		if (this.propertyChanged != null) {
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Count"));
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Item[]"));
		}
		if (this.collectionChanged != null) {
			var args = new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset);
			this.onCollectionChanged(args);
		}
	}
	,
	insertItem: function (index, newItem) {
		$.ig.List$1.prototype.insertItem.call(this, index, newItem);
		if (this.propertyChanged != null) {
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Count"));
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Item[]"));
		}
		if (this.collectionChanged != null) {
			var args = new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, $.ig.util.getBoxIfEnum(this.$t, newItem), index);
			this.onCollectionChanged(args);
		}
	}
	,
	addItem: function (newItem) {
		$.ig.List$1.prototype.addItem.call(this, newItem);
		if (this.propertyChanged != null) {
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Count"));
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Item[]"));
		}
		if (this.collectionChanged != null) {
			var args = new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, $.ig.util.getBoxIfEnum(this.$t, newItem), this.count() - 1);
			this.onCollectionChanged(args);
		}
	}
	,
	removeItem: function (index) {
		var oldItem = this.__inner[index];
		$.ig.List$1.prototype.removeItem.call(this, index);
		if (this.propertyChanged != null) {
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Count"));
			this.onPropertyChanged(new $.ig.PropertyChangedEventArgs("Item[]"));
		}
		if (this.collectionChanged != null) {
			var args = new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.remove, $.ig.util.getBoxIfEnum(this.$t, oldItem), index);
			this.onCollectionChanged(args);
		}
	}
	,
	collectionChanged: null,
	propertyChanged: null,
	onPropertyChanged: function (args) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, args);
		}
	}
	,
	onCollectionChanged: function (args) {
		if (this.collectionChanged != null) {
			this.collectionChanged(this, args);
		}
	}
	,
	$type: new $.ig.Type('ObservableCollection$1', $.ig.List$1.prototype.$type.specialize(0), [$.ig.INotifyCollectionChanged.prototype.$type, $.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('ReadOnlyCollection$1', 'Object', {
	$t: null,
	init: function ($t, initNumber) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__syncRoot = {};
		$.ig.Object.prototype.init.call(this);
	},
	init1: function ($t, initNumber, source) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		this.__syncRoot = {};
		$.ig.Object.prototype.init.call(this);
		this.__inner = source;
	},
	__inner: null,
	item: function (index, value) {
		if (arguments.length === 2) {
			this.__inner.item(index, value);
			return value;
		} else {
			return this.__inner.item(index);
		}
	}
	,
	indexOf: function (item) {
		return this.__inner.indexOf(item);
	}
	,
	insert: function (index, item) {
	}
	,
	removeAt: function (index) {
	}
	,
	count: function () {
		return this.__inner.count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	add: function (item) {
	}
	,
	clear: function () {
	}
	,
	contains: function (item) {
		return this.__inner.contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		this.__inner.copyTo(array, arrayIndex);
	}
	,
	remove: function (item) {
		return false;
	}
	,
	getEnumerator: function () {
		return this.__inner.getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.__inner.getEnumerator();
	}
	,
	isFixedSize: function () {
		return true;
	}
	,
	add1: function (value) {
		return -1;
	}
	,
	contains1: function (value) {
		return this.__inner.contains($.ig.util.castObjTo$t(this.$t, value));
	}
	,
	indexOf1: function (value) {
		return this.__inner.indexOf($.ig.util.castObjTo$t(this.$t, value));
	}
	,
	insert1: function (index, value) {
	}
	,
	remove1: function (value) {
	}
	,
	copyTo1: function (array, index) {
		this.__inner.copyTo(array, index);
	}
	,
	items: function () {
		return this.__inner;
	}
	,
	isSynchronized: function () {
		return true;
	}
	,
	__syncRoot: null,
	syncRoot: function () {
		return this.__syncRoot;
	}
	,
	$type: new $.ig.Type('ReadOnlyCollection$1', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize(0), $.ig.IList.prototype.$type])
}, true);

$.ig.util.defType('Stack$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		this.__inner = new $.ig.Array();
		$.ig.Object.prototype.init.call(this);
	},
	__inner: null,
	push: function (item) {
		this.__inner.add($.ig.util.getBoxIfEnum(this.$t, item));
	}
	,
	peek: function () {
		if (this.__inner.length < 1) {
			return $.ig.util.getDefaultValue(this.$t);
		}
		return $.ig.util.castObjTo$t(this.$t, this.__inner[this.__inner.length - 1]);
	}
	,
	pop: function () {
		var ret = this.__inner[this.__inner.length - 1];
		this.__inner.removeAt(this.__inner.length - 1);
		return $.ig.util.castObjTo$t(this.$t, ret);
	}
	,
	count: function () {
		return this.__inner.length;
	}
	,
	clear: function () {
		this.__inner.clear();
	}
	,
	contains: function (item) {
		return this.__inner.contains($.ig.util.getBoxIfEnum(this.$t, item));
	}
	,
	getEnumerator: function () {
		return new $.ig.ReverseArrayEnumerator$1(this.$t, this.__inner);
	}
	,
	getEnumerator: function () {
		return new $.ig.ReverseArrayEnumerator$1(this.$t, this.__inner);
	}
	,
	$type: new $.ig.Type('Stack$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('ReverseArrayEnumerator$1', 'Object', {
	$t: null,
	__index: 0,
	__array: null,
	init: function ($t, array) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__array = array;
		this.__index = array.length;
	},
	current: function () {
		return $.ig.util.castObjTo$t(this.$t, this.__array[this.__index]);
	}
	,
	current: function () {
		return this.__array[this.__index];
	}
	,
	moveNext: function () {
		this.__index--;
		return this.__index >= 0;
	}
	,
	reset: function () {
		this.__index = this.__array.length;
	}
	,
	dispose: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	$type: new $.ig.Type('ReverseArrayEnumerator$1', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('IOrderedEnumerable$1', 'Object', {
	$type: new $.ig.Type('IOrderedEnumerable$1', null, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	where$1: function ($tSource, source, predicate) {
		var d__ = new $.ig.Enumerable___Where__IteratorClass$1($tSource, -2);
		d__.__3__source = source;
		d__.__3__predicate = predicate;
		return d__;
	}
	,
	where$11: function ($tSource, source, predicate) {
		var d__ = new $.ig.Enumerable___Where__IteratorClass1$1($tSource, -2);
		d__.__3__source = source;
		d__.__3__predicate = predicate;
		return d__;
	}
	,
	select$2: function ($tSource, $tResult, source, selector) {
		var d__ = new $.ig.Enumerable___Select__IteratorClass$2($tSource, $tResult, -2);
		d__.__3__source = source;
		d__.__3__selector = selector;
		return d__;
	}
	,
	selectMany$2: function ($tSource, $tResult, source, selector) {
		var d__ = new $.ig.Enumerable___SelectMany__IteratorClass$2($tSource, $tResult, -2);
		d__.__3__source = source;
		d__.__3__selector = selector;
		return d__;
	}
	,
	ofType$1: function ($tResult, source) {
		var d__ = new $.ig.Enumerable___OfType__IteratorClass$1($tResult, -2);
		d__.__3__source = source;
		return d__;
	}
	,
	last$1: function ($tSource, source) {
		var ilist = $.ig.util.cast($.ig.IList$1.prototype.$type.specialize($tSource), source);
		if (ilist != null) {
			return ilist.item(ilist.count() - 1);
		}
		var current = $.ig.util.getDefaultValue($tSource);
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			current = item;
		}
		return current;
	}
	,
	first$1: function ($tSource, source) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			return item;
		}
		return $.ig.util.getDefaultValue($tSource);
	}
	,
	first$11: function ($tSource, source, predicate) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (predicate(item)) {
				return item;
			}
		}
		return $.ig.util.getDefaultValue($tSource);
	}
	,
	firstOrDefault$1: function ($tSource, source) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			return item;
		}
		return $.ig.util.getDefaultValue($tSource);
	}
	,
	orderBy$2: function ($tSource, $tKey, source, keySelector) {
		var buffer = new $.ig.SortedList$1($tSource, source);
		buffer.sort2(function (o1, o2) {
			var t1 = o1;
			var t2 = o2;
			var k1 = keySelector(t1);
			var k2 = keySelector(t2);
			if ($.ig.util.cast($.ig.IComparable.prototype.$type, k1) !== null) {
				return ($.ig.util.cast($.ig.IComparable.prototype.$type, k1)).compareTo($.ig.util.getBoxIfEnum($tKey, k2));
			} else {
				return $.ig.util.toString$1($tKey, k1).compareTo($.ig.util.toString$1($tKey, k2));
			}
		});
		return buffer;
	}
	,
	orderByDescending$2: function ($tSource, $tKey, source, keySelector) {
		var buffer = new $.ig.SortedList$1($tSource, source);
		buffer.sort2(function (o2, o1) {
			var t1 = o1;
			var t2 = o2;
			var k1 = keySelector(t1);
			var k2 = keySelector(t2);
			if ($.ig.util.cast($.ig.IComparable.prototype.$type, k1) !== null) {
				return ($.ig.util.cast($.ig.IComparable.prototype.$type, k1)).compareTo($.ig.util.getBoxIfEnum($tKey, k2));
			} else {
				return $.ig.util.toString$1($tKey, k1).compareTo($.ig.util.toString$1($tKey, k2));
			}
		});
		return buffer;
	}
	,
	toList$1: function ($tSource, source) {
		var list = new $.ig.List$1($tSource, 1, source);
		return list;
	}
	,
	range: function (startValue, count) {
		var d__ = new $.ig.Enumerable___Range__IteratorClass(-2);
		d__.__3__startValue = startValue;
		d__.__3__count = count;
		return d__;
	}
	,
	concat$1: function ($tSource, source1, source2) {
		var d__ = new $.ig.Enumerable___Concat__IteratorClass$1($tSource, -2);
		d__.__3__source1 = source1;
		d__.__3__source2 = source2;
		return d__;
	}
	,
	max: function (source) {
		var first = true;
		var max = 0;
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (first) {
				first = false;
				max = item;
			} else {
				max = Math.max(max, item);
			}
		}
		return max;
	}
	,
	max$1: function ($tSource, source, selector) {
		return $.ig.Enumerable.prototype.max($.ig.Enumerable.prototype.select$2($tSource, $.ig.Number.prototype.$type, source, selector));
	}
	,
	min: function (source) {
		var first = true;
		var min = 0;
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (first) {
				first = false;
				min = item;
			} else {
				min = Math.min(min, item);
			}
		}
		return min;
	}
	,
	min$1: function ($tSource, source, selector) {
		return $.ig.Enumerable.prototype.max($.ig.Enumerable.prototype.select$2($tSource, $.ig.Number.prototype.$type, source, selector));
	}
	,
	count$1: function ($tSource, source) {
		var count = 0;
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			count++;
		}
		return count;
	}
	,
	reverse$1: function ($tSource, source) {
		var d__ = new $.ig.Enumerable___Reverse__IteratorClass$1($tSource, -2);
		d__.__3__source = source;
		return d__;
	}
	,
	cast$1: function ($tResult, source) {
		if (source == null) {
			throw new $.ig.ArgumentNullException(0, "source");
		}
		var enumerable = $.ig.util.cast($.ig.IEnumerable$1.prototype.$type.specialize($tResult), source);
		if (enumerable != null) {
			return enumerable;
		}
		var list = new $.ig.List$1($tResult, 0);
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if ($.ig.util.cast($tResult, item) !== null) {
				list.add($.ig.util.castObjTo$t($tResult, item));
			} else {
				list.add($.ig.util.getDefaultValue($tResult));
			}
		}
		return list;
	}
	,
	take$1: function ($tSource, source, toTake) {
		var d__ = new $.ig.Enumerable___Take__IteratorClass$1($tSource, -2);
		d__.__3__source = source;
		d__.__3__toTake = toTake;
		return d__;
	}
	,
	skip$1: function ($tSource, source, toSkip) {
		var d__ = new $.ig.Enumerable___Skip__IteratorClass$1($tSource, -2);
		d__.__3__source = source;
		d__.__3__toSkip = toSkip;
		return d__;
	}
	,
	any$1: function ($tSource, source) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			return true;
		}
		return false;
	}
	,
	contains$1: function ($tSource, source, value_) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item_ = en.current();
			if (item_ === value_)
                {
                    return true;
                };
		}
		return false;
	}
	,
	union$1: function ($tSource, first, second) {
		return null;
	}
	,
	toArray$1: function ($tSource, source) {
		var arr = $.ig.util.cast($.ig.List$1.prototype.$type.specialize($tSource), source);
		if (arr != null) {
			return arr.toArray();
		}
		arr = new $.ig.List$1($tSource, 1, source);
		return arr.asArray();
	}
	,
	elementAt$1: function ($tSource, source, index) {
		var iList = $.ig.util.cast($.ig.IList$1.prototype.$type.specialize($tSource), source);
		if (iList != null) {
			return iList.item(index);
		}
		return $.ig.Enumerable.prototype.first$1($tSource, $.ig.Enumerable.prototype.skip$1($tSource, source, index));
	}
	,
	sum: function (source) {
		var sum = 0;
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			sum += item;
		}
		return sum;
	}
	,
	sum$1: function ($tSource, source, selector) {
		return $.ig.Enumerable.prototype.sum($.ig.Enumerable.prototype.select$2($tSource, Number, source, selector));
	}
	,
	sequenceEqual$1: function ($tSource, first, second) {
		if (first == null) {
			throw new $.ig.ArgumentNullException(0, "first");
		}
		if (second == null) {
			throw new $.ig.ArgumentNullException(0, "second");
		}
		{
			var enumerator = first.getEnumerator();
			try {
				var enumerator2 = second.getEnumerator();
				try {
					while (enumerator.moveNext()) {
						if (!enumerator2.moveNext() || !$.ig.Object.prototype.equalsStatic($.ig.util.getBoxIfEnum($tSource, enumerator.current()), $.ig.util.getBoxIfEnum($tSource, enumerator2.current()))) {
							return false;
						}
					}
					return (enumerator2.moveNext() == false);
				}
				finally {
					if (enumerator2 != null) {
						enumerator2.dispose();
					}
				}
			}
			finally {
				if (enumerator != null) {
					enumerator.dispose();
				}
			}
		}
	}
	,
	empty$1: function ($tSource) {
		return new $.ig.Enumerable___Empty__IteratorClass$1($tSource, -2);
	}
	,
	selectMany$3: function ($tSource, $tCollection, $tResult, source, collectionSelector, resultSelector) {
		var d__ = new $.ig.Enumerable___SelectMany__IteratorClass1$3($tSource, $tCollection, $tResult, -2);
		d__.__3__source = source;
		d__.__3__collectionSelector = collectionSelector;
		d__.__3__resultSelector = resultSelector;
		return d__;
	}
	,
	any$11: function ($tSource, source, predicate) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (predicate(item)) {
				return true;
			}
		}
		return false;
	}
	,
	firstOrDefault$11: function ($tSource, source, predicate) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (predicate(item)) {
				return item;
			}
		}
		return $.ig.util.getDefaultValue($tSource);
	}
	,
	all$1: function ($tSource, source, predicate) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			if (predicate(item) == false) {
				return false;
			}
		}
		return true;
	}
	,
	toDictionary$2: function ($tSource, $tKey, source, keySelector) {
		var d = new $.ig.Dictionary$2($tKey, $tSource, 0);
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			d.item(keySelector(item), item);
		}
		return d;
	}
	,
	lastOrDefault$1: function ($tSource, source) {
		throw new $.ig.NotImplementedException(0);
		var ilist = $.ig.util.cast($.ig.IList$1.prototype.$type.specialize($tSource), source);
		if (ilist != null) {
			return ilist.count() == 0 ? $.ig.util.getDefaultValue($tSource) : ilist.item(ilist.count() - 1);
		}
		var current = $.ig.util.getDefaultValue($tSource);
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			current = item;
		}
		return current;
	}
	,
	zip$3: function ($tFirst, $tSecond, $tResult, first, second, resultSelector) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	distinct$1: function ($tSource, source) {
		throw new $.ig.NotImplementedException(0);
		return null;
	}
	,
	$type: new $.ig.Type('Enumerable', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SortedList$1', 'List$1', {
	$tElement: null,
	init: function ($tElement, source) {
		this.$tElement = $tElement;
		this.$type = this.$type.specialize(this.$tElement);
		$.ig.List$1.prototype.init1.call(this, this.$tElement, 1, source);
	},
	getEnumerator: function () {
		return $.ig.List$1.prototype.getEnumerator.call(this);
	}
	,
	$type: new $.ig.Type('SortedList$1', $.ig.List$1.prototype.$type.specialize(0), [$.ig.IOrderedEnumerable$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('IArrayList', 'Object', {
	$type: new $.ig.Type('IArrayList', null)
}, true);

$.ig.util.defType('DependencyObject', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this._localValues = new $.ig.Dictionary(0);
		this._bindings = new $.ig.Dictionary(0);
	},
	_localValues: null,
	_bindings: null,
	getValue: function (dp) {
		if (this._localValues.containsKey(dp.name())) {
			return this._localValues.item(dp.name());
		}
		return dp.propertyMetadata().defaultValue();
	}
	,
	setValue: function (dp_, value) {
		if (dp_.hasCallback()) {
			var oldValue_ = null;
			var old = this._localValues.proxy[dp_.__name]; if (typeof old != 'undefined') { oldValue_ = old };
			this._localValues.item(dp_.__name, value);
			dp_.propertyMetadata().propertyChangedCallback()(this, new $.ig.DependencyPropertyChangedEventArgs(dp_, value, oldValue_));
		} else {
			this._localValues.item(dp_.__name, value);
		}
	}
	,
	clearValue: function (dp) {
		this._localValues.remove(dp.__name);
	}
	,
	readLocalValue: function (dp) {
		if (this._localValues.containsKey(dp.__name)) {
			return this._localValues.item(dp.name());
		}
		return $.ig.DependencyProperty.prototype.unsetValue;
	}
	,
	setBinding: function (dp, binding) {
		if (dp == null) {
			return;
		}
		this._bindings.item(dp.name(), binding);
	}
	,
	$type: new $.ig.Type('DependencyObject', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PropertyMetadata', 'Object', {
	__defaultValue: null,
	defaultValue: function (value) {
		if (arguments.length === 1) {
			this.__defaultValue = value;
			return value;
		} else {
			return this.__defaultValue;
		}
	}
	,
	__propertyChangedCallback: null,
	propertyChangedCallback: function (value) {
		if (arguments.length === 1) {
			this.__propertyChangedCallback = value;
			return value;
		} else {
			return this.__propertyChangedCallback;
		}
	}
	,
	init: function (initNumber, defaultValue) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.defaultValue(defaultValue);
		this.propertyChangedCallback(null);
	},
	init1: function (initNumber, propertyChangedCallback) {
		$.ig.Object.prototype.init.call(this);
		this.defaultValue(null);
		this.propertyChangedCallback(propertyChangedCallback);
	},
	init2: function (initNumber, defaultValue, propertyChangedCallback) {
		$.ig.Object.prototype.init.call(this);
		this.defaultValue(defaultValue);
		this.propertyChangedCallback(propertyChangedCallback);
	},
	$type: new $.ig.Type('PropertyMetadata', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('UnsetValue', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('UnsetValue', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DependencyProperty', 'Object', {
	__name: null,
	__propertyType: null,
	__propertyMetadata: null,
	__hasCallback: false,
	hasCallback: function () {
		return this.__hasCallback;
	}
	,
	init: function (name, propertyType, propertyMetadata) {
		this.__hasCallback = false;
		$.ig.Object.prototype.init.call(this);
		this.__name = name;
		this.__propertyType = propertyType;
		this.__propertyMetadata = propertyMetadata;
		if (this.__propertyMetadata != null && this.__propertyMetadata.propertyChangedCallback() != null) {
			this.__hasCallback = true;
		} else {
			this.__hasCallback = false;
		}
	},
	propertyMetadata: function () {
		return this.__propertyMetadata;
	}
	,
	propertyType: function () {
		return this.__propertyType;
	}
	,
	name: function () {
		return this.__name;
	}
	,
	register: function (name, propertyType, ownerType, propertyMetadata) {
		return $.ig.DependencyPropertiesCollection.prototype.instance().register(name, propertyType, ownerType, propertyMetadata);
	}
	,
	queryRegisteredProperty: function (name, ownerType) {
		if (ownerType == null) {
			return null;
		}
		var dp = $.ig.DependencyPropertiesCollection.prototype.instance().getProperty(ownerType.typeName() + name);
		if (dp != null) {
			return dp;
		}
		return $.ig.DependencyProperty.prototype.queryRegisteredProperty(name, ownerType.baseType);
	}
	,
	$type: new $.ig.Type('DependencyProperty', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('APIFactory', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	createPoint: function (x, y) {
		return { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	createRect: function (left, top, width, height) {
		return new $.ig.Rect(0, left, top, width, height);
	}
	,
	createSize: function (width, height) {
		return new $.ig.Size(1, width, height);
	}
	,
	createColor: function (value) {
		var ret = new $.ig.Color();
		ret.colorString(value);
		return ret;
	}
	,
	$type: new $.ig.Type('APIFactory', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ArgumentException', 'Error', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Error.prototype.init.call(this, 0);
	},
	init1: function (initNumber, message) {
		$.ig.Error.prototype.init1.call(this, 1, message);
	},
	init2: function (initNumber, message, paramName) {
		$.ig.Error.prototype.init1.call(this, 1, message);
	},
	init3: function (initNumber, message, innerException) {
		$.ig.Error.prototype.init2.call(this, 2, message, innerException);
	},
	$type: new $.ig.Type('ArgumentException', $.ig.Error.prototype.$type)
}, true);

$.ig.util.defType('ArgumentNullException', 'Error', {
	init: function (initNumber, argumentName) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Error.prototype.init1.call(this, 1, argumentName + " cannot be null.");
	},
	init1: function (initNumber) {
		$.ig.Error.prototype.init.call(this, 0);
		throw new $.ig.NotImplementedException(0);
	},
	init2: function (initNumber, paramName, message) {
		$.ig.Error.prototype.init1.call(this, 1, message);
		throw new $.ig.NotImplementedException(0);
	},
	$type: new $.ig.Type('ArgumentNullException', $.ig.Error.prototype.$type)
}, true);

$.ig.util.defType('Environment', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	newLine: function () {
		return "\n";
	}
	,
	$type: new $.ig.Type('Environment', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('InvalidOperationException', 'Error', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Error.prototype.init1.call(this, 1, "Invalid operation");
	},
	init1: function (initNumber, errorMessage) {
		$.ig.Error.prototype.init1.call(this, 1, errorMessage);
	},
	init2: function (initNumber, errorMessage, innerException) {
		$.ig.Error.prototype.init2.call(this, 2, errorMessage, innerException);
		throw new $.ig.NotImplementedException(0);
	},
	$type: new $.ig.Type('InvalidOperationException', $.ig.Error.prototype.$type)
}, true);

$.ig.util.defType('Debug', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	assert1: function (condition, text) {
	}
	,
	writeLine: function (line) {
	}
	,
	assert: function (value) {
	}
	,
	fail: function (message) {
	}
	,
	$type: new $.ig.Type('Debug', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('StringBuilder', 'Object', {
	_internal: null,
	internal: function (value) {
		if (arguments.length === 1) {
			this._internal = value;
			return value;
		} else {
			return this._internal;
		}
	}
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.internal("");
	},
	init1: function (initNumber, capacity) {
		$.ig.StringBuilder.prototype.init.call(this, 0);
	},
	init2: function (initNumber, value) {
		$.ig.Object.prototype.init.call(this);
		this.internal(value);
	},
	append4: function (obj) {
		if (obj != null) {
			this.append5(obj.toString());
		}
		return this;
	}
	,
	append5: function (str_) {
		if (str_ != null)
        {
            this._internal = this._internal.concat(str_);
        };
		return this;
	}
	,
	append7: function (builder) {
		var str_ = builder.toString();
		this._internal = this._internal.concat(str_);
		return this;
	}
	,
	append1: function (chr_) {
		this._internal = this._internal.concat(chr_);
		return this;
	}
	,
	append2: function (chr_, count_) {
		this._internal = this._internal.concat(chr_.repeat(count_));
		return this;
	}
	,
	append3: function (value_) {
		this._internal = this._internal.concat(value_);
		return this;
	}
	,
	append6: function (value_, startIndex_, count_) {
		this._internal = this._internal.concat(value_.substr(startIndex_, count_));
		return this;
	}
	,
	append: function (value_, startIndex_, charCount_) {
		this._internal = this._internal.concat(value_.slice(startIndex_, startIndex_ + charCount_).join(''));
		return this;
	}
	,
	appendLine: function () {
		return this.appendLine1("");
	}
	,
	appendLine1: function (str_) {
		if (str_ != null)
        {
            this._internal = this._internal.concat(str_);
        }
        this._internal = this._internal.concat($.ig.Environment.prototype.newLine());;
		return this;
	}
	,
	clear: function () {
		this.internal("");
		return this;
	}
	,
	insert: function (index_, chr_) {
		if (index_ == this.length()) {
			this.append1(chr_);
		} else {
			this._internal = this._internal.substring(0, index_).concat(chr_).concat(this._internal.substring(index_, this._internal.length));
		}
		return this;
	}
	,
	insert1: function (index_, str_) {
		if (index_ == this.length()) {
			this.append5(str_);
		} else {
			this._internal = this._internal.substring(0, index_).concat(str_).concat(this._internal.substring(index_, this._internal.length));
		}
		return this;
	}
	,
	remove: function (startIndex_, length_) {
		this._internal = this._internal.substring(0, startIndex_).concat(this._internal.substring(startIndex_ + length_, this._internal.length));
		return this;
	}
	,
	toString: function () {
		return this.internal();
	}
	,
	toString1: function (startIndex, length) {
		return this.internal().substr(startIndex, length);
	}
	,
	length: function (value) {
		if (arguments.length === 1) {
			if (value <= this.length()) {
				this._internal = this._internal.substring(0, value);
			} else {
				throw new $.ig.NotImplementedException(0);
			}
			return value;
		} else {
			return this.internal().length;
		}
	}
	,
	item: function (index_, value) {
		if (arguments.length === 2) {
			this._internal = this._internal.substring(0, index_).concat(value).concat(this._internal.substring(index_ + 1, this._internal.length));
			return value;
		} else {
			return this.internal().charAt(index_);
		}
	}
	,
	appendFormat2: function (format, arg0) {
		return this.append5($.ig.util.stringFormat(format, arg0));
	}
	,
	appendFormat1: function (format, args) {
		return this.append5($.ig.util.stringFormat1(format, args));
	}
	,
	appendFormat: function (provider, format, args) {
		return this.append5($.ig.util.stringFormat2(provider, format, args));
	}
	,
	appendFormat3: function (format, arg0, arg1) {
		return this.append5($.ig.util.stringFormat(format, arg0, arg1));
	}
	,
	appendFormat4: function (format, arg0, arg1, arg2) {
		return this.append5($.ig.util.stringFormat(format, arg0, arg1, arg2));
	}
	,
	_capacity: 0,
	capacity: function (value) {
		if (arguments.length === 1) {
			this._capacity = value;
			return value;
		} else {
			return this._capacity;
		}
	}
	,
	$type: new $.ig.Type('StringBuilder', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('NotImplementedException', 'Error', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Error.prototype.init1.call(this, 1, "not implemented");
	},
	init1: function (initNumber, message) {
		$.ig.Error.prototype.init1.call(this, 1, message);
		throw new $.ig.NotImplementedException(0);
	},
	$type: new $.ig.Type('NotImplementedException', $.ig.Error.prototype.$type)
}, true);

$.ig.util.defType('Random', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, Seed) {
		$.ig.Object.prototype.init.call(this);
	},
	nextDouble: function () {
		return Math.random();
	}
	,
	next: function () {
		return this.next1(0x7FFFFFFF);
	}
	,
	next1: function (value) {
		return $.ig.truncate(Math.round(this.nextDouble() * (value - 1)));
	}
	,
	next2: function (low, high) {
		return low + $.ig.truncate(Math.round(this.nextDouble() * ((high - low) - 1)));
	}
	,
	$type: new $.ig.Type('Random', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Tuple$2', 'Object', {
	$t1: null,
	$t2: null,
	_item1: null,
	item1: function (value) {
		if (arguments.length === 1) {
			this._item1 = value;
			return value;
		} else {
			return this._item1;
		}
	}
	,
	_item2: null,
	item2: function (value) {
		if (arguments.length === 1) {
			this._item2 = value;
			return value;
		} else {
			return this._item2;
		}
	}
	,
	init: function ($t1, $t2, item1, item2) {
		this.$t1 = $t1;
		this.$t2 = $t2;
		this.$type = this.$type.specialize(this.$t1, this.$t2);
		$.ig.Object.prototype.init.call(this);
		this.item1(item1);
		this.item2(item2);
	},
	$type: new $.ig.Type('Tuple$2', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('UIElement', 'DependencyObject', {
	init: function () {
		$.ig.DependencyObject.prototype.init.call(this);
	},
	_renderTransform: null,
	renderTransform: function (value) {
		if (arguments.length === 1) {
			this._renderTransform = value;
			return value;
		} else {
			return this._renderTransform;
		}
	}
	,
	$type: new $.ig.Type('UIElement', $.ig.DependencyObject.prototype.$type)
}, true);

$.ig.util.defType('UIElementCollection', 'ObservableCollection$1', {
	__owner: null,
	init: function (owner) {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.UIElement.prototype.$type, 0);
		this.__owner = owner;
	},
	onCollectionChanged: function (args) {
		$.ig.ObservableCollection$1.prototype.onCollectionChanged.call(this, args);
		if (args.oldItems() != null) {
			var en = args.oldItems().getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				(item).parent(null);
			}
		}
		if (args.newItems() != null) {
			var en1 = args.newItems().getEnumerator();
			while (en1.moveNext()) {
				var item1 = en1.current();
				(item1).parent(this.__owner);
			}
		}
	}
	,
	clearItems: function () {
		var en = this.getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			(item).parent(null);
		}
		$.ig.ObservableCollection$1.prototype.clearItems.call(this);
	}
	,
	$type: new $.ig.Type('UIElementCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.UIElement.prototype.$type))
}, true);

$.ig.util.defType('FrameworkElement', 'UIElement', {
	init: function () {
		this.__opacity = 1;
		$.ig.UIElement.prototype.init.call(this);
		this.__opacity = 1;
		this.canvasZIndex(0);
		this.__visibility = $.ig.Visibility.prototype.visible;
		this.width(NaN);
		this.height(NaN);
	},
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	_actualWidth: 0,
	actualWidth: function (value) {
		if (arguments.length === 1) {
			this._actualWidth = value;
			return value;
		} else {
			return this._actualWidth;
		}
	}
	,
	_actualHeight: 0,
	actualHeight: function (value) {
		if (arguments.length === 1) {
			this._actualHeight = value;
			return value;
		} else {
			return this._actualHeight;
		}
	}
	,
	__visibility: 0,
	visibility: function (value) {
		if (arguments.length === 1) {
			this.__visibility = value;
			return value;
		} else {
			return this.__visibility;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_canvasTop: 0,
	canvasTop: function (value) {
		if (arguments.length === 1) {
			this._canvasTop = value;
			return value;
		} else {
			return this._canvasTop;
		}
	}
	,
	_canvasLeft: 0,
	canvasLeft: function (value) {
		if (arguments.length === 1) {
			this._canvasLeft = value;
			return value;
		} else {
			return this._canvasLeft;
		}
	}
	,
	_canvasZIndex: 0,
	canvasZIndex: function (value) {
		if (arguments.length === 1) {
			this._canvasZIndex = value;
			return value;
		} else {
			return this._canvasZIndex;
		}
	}
	,
	_parent: null,
	parent: function (value) {
		if (arguments.length === 1) {
			this._parent = value;
			return value;
		} else {
			return this._parent;
		}
	}
	,
	_dataContext: null,
	dataContext: function (value) {
		if (arguments.length === 1) {
			this._dataContext = value;
			return value;
		} else {
			return this._dataContext;
		}
	}
	,
	__opacity: 0,
	opacity: function (value) {
		if (arguments.length === 1) {
			if (this.__opacity != value) {
				this.__opacity = value;
				this.onOpacityChanged();
			}
			return value;
		} else {
			return this.__opacity;
		}
	}
	,
	onOpacityChanged: function () {
	}
	,
	_style: null,
	style: function (value) {
		if (arguments.length === 1) {
			this._style = value;
			return value;
		} else {
			return this._style;
		}
	}
	,
	$type: new $.ig.Type('FrameworkElement', $.ig.UIElement.prototype.$type)
}, true);

$.ig.util.defType('Control', 'FrameworkElement', {
	init: function () {
		$.ig.FrameworkElement.prototype.init.call(this);
	},
	_defaultStyleKey: null,
	defaultStyleKey: function (value) {
		if (arguments.length === 1) {
			this._defaultStyleKey = value;
			return value;
		} else {
			return this._defaultStyleKey;
		}
	}
	,
	_padding: null,
	padding: function (value) {
		if (arguments.length === 1) {
			this._padding = value;
			return value;
		} else {
			return this._padding;
		}
	}
	,
	onApplyTemplate: function () {
	}
	,
	_horizontalContentAlignment: 0,
	horizontalContentAlignment: function (value) {
		if (arguments.length === 1) {
			this._horizontalContentAlignment = value;
			return value;
		} else {
			return this._horizontalContentAlignment;
		}
	}
	,
	_verticalContentAlignment: 0,
	verticalContentAlignment: function (value) {
		if (arguments.length === 1) {
			this._verticalContentAlignment = value;
			return value;
		} else {
			return this._verticalContentAlignment;
		}
	}
	,
	$type: new $.ig.Type('Control', $.ig.FrameworkElement.prototype.$type)
}, true);

$.ig.util.defType('ContentControl', 'Control', {
	init: function () {
		$.ig.Control.prototype.init.call(this);
	},
	_content: null,
	content: function (value) {
		if (arguments.length === 1) {
			this._content = value;
			return value;
		} else {
			return this._content;
		}
	}
	,
	_contentTemplate: null,
	contentTemplate: function (value) {
		if (arguments.length === 1) {
			this._contentTemplate = value;
			return value;
		} else {
			return this._contentTemplate;
		}
	}
	,
	$type: new $.ig.Type('ContentControl', $.ig.Control.prototype.$type)
}, true);

$.ig.util.defType('Panel', 'FrameworkElement', {
	init: function () {
		$.ig.FrameworkElement.prototype.init.call(this);
		this.children(new $.ig.UIElementCollection(this));
	},
	_children: null,
	children: function (value) {
		if (arguments.length === 1) {
			this._children = value;
			return value;
		} else {
			return this._children;
		}
	}
	,
	$type: new $.ig.Type('Panel', $.ig.FrameworkElement.prototype.$type)
}, true);

$.ig.util.defType('Canvas', 'Panel', {
	init: function () {
		$.ig.Panel.prototype.init.call(this);
	},
	$type: new $.ig.Type('Canvas', $.ig.Panel.prototype.$type)
}, true);

$.ig.util.defType('TextBlock', 'FrameworkElement', {
	init: function () {
		$.ig.FrameworkElement.prototype.init.call(this);
	},
	__text: null,
	text: function (value) {
		if (arguments.length === 1) {
			if (this.__text != value) {
				this.__text = value;
				this.textWidthCache(-1);
			}
			return value;
		} else {
			return this.__text;
		}
	}
	,
	_fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this._fill = value;
			return value;
		} else {
			return this._fill;
		}
	}
	,
	_textWidthCache: 0,
	textWidthCache: function (value) {
		if (arguments.length === 1) {
			this._textWidthCache = value;
			return value;
		} else {
			return this._textWidthCache;
		}
	}
	,
	$type: new $.ig.Type('TextBlock', $.ig.FrameworkElement.prototype.$type)
}, true);

$.ig.util.defType('DataTemplate', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_render: null,
	render: function (value) {
		if (arguments.length === 1) {
			this._render = value;
			return value;
		} else {
			return this._render;
		}
	}
	,
	_measure: null,
	measure: function (value) {
		if (arguments.length === 1) {
			this._measure = value;
			return value;
		} else {
			return this._measure;
		}
	}
	,
	_passStarting: null,
	passStarting: function (value) {
		if (arguments.length === 1) {
			this._passStarting = value;
			return value;
		} else {
			return this._passStarting;
		}
	}
	,
	_passCompleted: null,
	passCompleted: function (value) {
		if (arguments.length === 1) {
			this._passCompleted = value;
			return value;
		} else {
			return this._passCompleted;
		}
	}
	,
	$type: new $.ig.Type('DataTemplate', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DataTemplatePassInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	renderContext: null,
	context: null,
	viewportTop: 0,
	viewportLeft: 0,
	viewportWidth: 0,
	viewportHeight: 0,
	isHitTestRender: false,
	passID: null,
	$type: new $.ig.Type('DataTemplatePassInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DataTemplateMeasureInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	renderContext: null,
	context: null,
	width: 0,
	height: 0,
	isConstant: false,
	data: null,
	passInfo: null,
	renderOffsetX: 0,
	renderOffsetY: 0,
	$type: new $.ig.Type('DataTemplateMeasureInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DataTemplateRenderInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	renderContext: null,
	context: null,
	xPosition: 0,
	yPosition: 0,
	availableWidth: 0,
	availableHeight: 0,
	data: null,
	isHitTestRender: false,
	passInfo: null,
	renderOffsetX: 0,
	renderOffsetY: 0,
	$type: new $.ig.Type('DataTemplateRenderInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Binding', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__satisfied = false;
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, path) {
		this.__satisfied = false;
		$.ig.Object.prototype.init.call(this);
		this.__path = new $.ig.PropertyPath(path);
	},
	__source: null,
	source: function (value) {
		if (arguments.length === 1) {
			this.__source = value;
			return value;
		} else {
			return this.__source;
		}
	}
	,
	__path: null,
	path: function (value) {
		if (arguments.length === 1) {
			this.__path = value;
			return value;
		} else {
			return this.__path;
		}
	}
	,
	__satisfied: false,
	satisfied: function (value) {
		if (arguments.length === 1) {
			this.__satisfied = value;
			return value;
		} else {
			return this.__satisfied;
		}
	}
	,
	$type: new $.ig.Type('Binding', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DependencyPropertiesCollection', 'Object', {
	__dependencyProperties: null,
	instance: function () {
		if ($.ig.DependencyPropertiesCollection.prototype.__instance == null) {
			$.ig.DependencyPropertiesCollection.prototype.__instance = new $.ig.DependencyPropertiesCollection();
		}
		return $.ig.DependencyPropertiesCollection.prototype.__instance;
	}
	,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		if (this.__dependencyProperties == null) {
			this.__dependencyProperties = new $.ig.Dictionary(0);
		}
	},
	getProperty: function (key) {
		return this.__dependencyProperties.item(key);
	}
	,
	register: function (name, propertyType, ownerType, propertyMetadata) {
		var dependencyProperty = new $.ig.DependencyProperty(name, propertyType, propertyMetadata);
		this.__dependencyProperties.item(ownerType.typeName() + name, dependencyProperty);
		return dependencyProperty;
	}
	,
	$type: new $.ig.Type('DependencyPropertiesCollection', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DependencyPropertyChangedEventArgs', 'Object', {
	__newValue: null,
	__oldValue: null,
	init: function (dp, newValue, oldValue) {
		$.ig.Object.prototype.init.call(this);
		this.__newValue = newValue;
		this.__oldValue = oldValue;
		this.__property = dp;
	},
	__property: null,
	property: function (value) {
		if (arguments.length === 1) {
			this.__property = value;
			return value;
		} else {
			return this.__property;
		}
	}
	,
	newValue: function () {
		return this.__newValue;
	}
	,
	oldValue: function () {
		return this.__oldValue;
	}
	,
	$type: new $.ig.Type('DependencyPropertyChangedEventArgs', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('MouseEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_position: null,
	position: function (value) {
		if (arguments.length === 1) {
			this._position = value;
			return value;
		} else {
			return this._position;
		}
	}
	,
	_originalSource: null,
	originalSource: function (value) {
		if (arguments.length === 1) {
			this._originalSource = value;
			return value;
		} else {
			return this._originalSource;
		}
	}
	,
	getPosition: function (relativeTo) {
		return this.position();
	}
	,
	$type: new $.ig.Type('MouseEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('MouseButtonEventArgs', 'MouseEventArgs', {
	init: function () {
		$.ig.MouseEventArgs.prototype.init.call(this);
	},
	_handled: false,
	handled: function (value) {
		if (arguments.length === 1) {
			this._handled = value;
			return value;
		} else {
			return this._handled;
		}
	}
	,
	$type: new $.ig.Type('MouseButtonEventArgs', $.ig.MouseEventArgs.prototype.$type)
}, true);

$.ig.util.defType('Brush', 'Object', {
	init: function () {
		this.__fill = null;
		this.__cachedFill = null;
		this.__cachedColor = new $.ig.Color();
		$.ig.Object.prototype.init.call(this);
	},
	_isGradient: false,
	_isRadialGradient: false,
	_isImageFill: false,
	__fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this.__fill = value;
			return value;
		} else {
			return this.__fill;
		}
	}
	,
	__cachedFill: null,
	__cachedColor: null,
	color: function (value) {
		if (arguments.length === 1) {
			this.__cachedColor = value;
			this.__cachedFill = this.__cachedColor.colorString();
			this.__fill = this.__cachedFill;
			return value;
		} else {
			if (this.__fill == null && (this._isGradient || this._isRadialGradient)) {
				this.__fill = this.getPrimaryColor();
			}
			if (this.__fill == this.__cachedFill) {
				return this.__cachedColor;
			}
			var color = new $.ig.Color();
			if (this.__fill != null) {
				color.colorString(this.__fill);
				this.__cachedColor = color;
				this.__cachedFill = this.__fill;
			}
			return color;
		}
	}
	,
	getPrimaryColor: function () {
		return null;
	}
	,
	equals: function (obj) {
		if (obj == null) {
			return false;
		}
		var other = obj;
		return this.__fill.equals(other.__fill) && this.color().equals(other.color()) && this._isGradient == other._isGradient && this._isImageFill == other._isImageFill && this._isRadialGradient == other._isRadialGradient;
	}
	,
	create: function (val_) {
		var b_ = new $.ig.Brush();
		if (!val_) {
			return null;
			}
			
			if (typeof val_ == 'string') {
				if ($.ig.CssGradientUtil.prototype.isGradient(val_)) {
                    b_ = $.ig.CssGradientUtil.prototype.brushFromGradientString(val_);
                } else {
                    b_ = new $.ig.Brush();
                    b_.fill(val_);
                }
			} else if (val_.type == 'linearGradient') {
				b_ = new $.ig.LinearGradientBrush();
				if (val_.startPoint && val_.endPoint) {
					b_._useCustomDirection = true;
					b_._startX = val_.startPoint.x;
					b_._startY = val_.startPoint.y;
					b_._endX = val_.endPoint.x;
					b_._endY = val_.endPoint.y;
				}
				
				if (val_.colorStops) {
					stops = [];
					for (var i = 0; i < val_.colorStops.length; i++) {
						colorStop = new $.ig.GradientStop();
						colorStop._offset = val_.colorStops[i].offset;
						colorStop.__fill = val_.colorStops[i].color;
						stops.push(colorStop);
					}
					b_._gradientStops = stops;
				}};
		return b_;
	}
	,
	$type: new $.ig.Type('Brush', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LinearGradientBrush', 'Brush', {
	init: function () {
		$.ig.Brush.prototype.init.call(this);
		this._useCustomDirection = false;
		this._startX = 0;
		this._startY = 0;
		this._endX = 0;
		this._endY = 1;
		this._isAbsolute = false;
		this._gradientStops = new Array(0);
		this._isGradient = true;
	},
	_useCustomDirection: false,
	_startX: 0,
	_startY: 0,
	_endX: 0,
	_endY: 0,
	_isAbsolute: false,
	_gradientStops: null,
	clone: function () {
		var newBrush = new $.ig.LinearGradientBrush();
		newBrush._startX = this._startX;
		newBrush._startY = this._startY;
		newBrush._endX = this._endX;
		newBrush._endY = this._endY;
		newBrush._useCustomDirection = this._useCustomDirection;
		newBrush._isAbsolute = this._isAbsolute;
		if (this._gradientStops != null) {
			newBrush._gradientStops = new Array(this._gradientStops.length);
			for (var i = 0; i < this._gradientStops.length; i++) {
				newBrush._gradientStops[i] = this._gradientStops[i].clone();
			}
		}
		return newBrush;
	}
	,
	equals: function (obj) {
		if (obj == null) {
			return false;
		}
		var other = obj;
		var retval = $.ig.Brush.prototype.equals.call(this, obj) && this._startX == other._startX && this._startY == other._startY && this._endX == other._endX && this._endY == other._endY && this._isAbsolute == other._isAbsolute && this._useCustomDirection == other._useCustomDirection;
		if (retval == false) {
			return false;
		}
		if (this._gradientStops.length != other._gradientStops.length) {
			return false;
		}
		for (var i = 0, length = this._gradientStops.length; i < length; i++) {
			if (!this._gradientStops[i].equals(other._gradientStops[i])) {
				return false;
			}
		}
		return true;
	}
	,
	getPrimaryColor: function () {
		if (this._gradientStops != null && this._gradientStops.length > 0) {
			return this._gradientStops[0].color().colorString();
		}
		return $.ig.Brush.prototype.getPrimaryColor.call(this);
	}
	,
	$type: new $.ig.Type('LinearGradientBrush', $.ig.Brush.prototype.$type)
}, true);

$.ig.util.defType('GradientStop', 'Object', {
	init: function () {
		this.__fill = null;
		this.__cachedFill = null;
		this.__cachedColor = new $.ig.Color();
		$.ig.Object.prototype.init.call(this);
		this._offset = 0;
	},
	_offset: 0,
	clone: function () {
		var newStop = new $.ig.GradientStop();
		newStop._offset = this._offset;
		newStop.__fill = this.__fill;
		return newStop;
	}
	,
	__fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this.__fill = value;
			return value;
		} else {
			return this.__fill;
		}
	}
	,
	__cachedFill: null,
	__cachedColor: null,
	color: function (value) {
		if (arguments.length === 1) {
			this.__cachedColor = value;
			this.__cachedFill = this.__cachedColor.colorString();
			this.__fill = this.__cachedFill;
			return value;
		} else {
			if (this.__fill == this.__cachedFill) {
				return this.__cachedColor;
			}
			var color = new $.ig.Color();
			if (this.__fill != null) {
				color.colorString(this.__fill);
				this.__cachedColor = color;
				this.__cachedFill = this.__fill;
			}
			return color;
		}
	}
	,
	equals: function (obj) {
		if (obj == null) {
			return false;
		}
		var other = obj;
		return this._offset == other._offset && this.color().equals(other.color()) && this.__fill.equals(other.__fill);
	}
	,
	$type: new $.ig.Type('GradientStop', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Color', 'ValueType', {
	init: function () {
		$.ig.ValueType.prototype.init.call(this);
	},
	__a: 0,
	a: function (value) {
		if (arguments.length === 1) {
			this.__a = $.ig.truncate(Math.round(value));
			this.__stringDirty = true;
			return value;
		} else {
			return this.__a;
		}
	}
	,
	__r: 0,
	r: function (value) {
		if (arguments.length === 1) {
			this.__r = $.ig.truncate(Math.round(value));
			this.__stringDirty = true;
			return value;
		} else {
			return this.__r;
		}
	}
	,
	__g: 0,
	g: function (value) {
		if (arguments.length === 1) {
			this.__g = $.ig.truncate(Math.round(value));
			this.__stringDirty = true;
			return value;
		} else {
			return this.__g;
		}
	}
	,
	__b: 0,
	b: function (value) {
		if (arguments.length === 1) {
			this.__b = $.ig.truncate(Math.round(value));
			this.__stringDirty = true;
			return value;
		} else {
			return this.__b;
		}
	}
	,
	__colorString: null,
	colorString: function (value) {
		if (arguments.length === 1) {
			this.__colorString = value;
			this.updateColors();
			return value;
		} else {
			if (this.__stringDirty || this.__colorString == null) {
				this.__stringDirty = false;
				this.updateColorString();
			}
			return this.__colorString;
		}
	}
	,
	__stringDirty: false,
	create: function (value) {
		if ($.ig.util.cast($.ig.Color.prototype.$type, value) !== null) {
			return value;
		}
		var ret = new $.ig.Color();
		if (typeof value === 'string') {
			ret.colorString(value);
		} else if (value != null) {
			throw new $.ig.ArgumentException(1, "Unknown color type");
		}
		return ret;
	}
	,
	updateColorString: function () {
		this.__colorString = "rgba(" + this.__r + "," + this.__g + "," + this.__b + "," + this.__a / 255 + ")";
	}
	,
	updateColors: function () {
		var obj_ = $.ig.util.stringToColor(this.__colorString);
		this.__a = typeof obj_.a != 'undefined' ? Math.round(obj_.a) : 0;
		this.__r = typeof obj_.r != 'undefined' ? Math.round(obj_.r) : 0;
		this.__g = typeof obj_.g != 'undefined' ? Math.round(obj_.g) : 0;
		this.__b = typeof obj_.b != 'undefined' ? Math.round(obj_.b) : 0;
	}
	,
	fromArgb: function (a_, r_, g_, b_) {
		var c = new $.ig.Color();
		c.__a = a_ | 0;
		c.__r = r_ | 0;
		c.__g = g_ | 0;
		c.__b = b_ | 0;
		c.__stringDirty = true;
		return c;
	}
	,
	equals: function (obj) {
		if (($.ig.util.cast($.ig.Color.prototype.$type, obj) !== null) == false) {
			return false;
		}
		var other = obj;
		return this.__a == other.__a && this.__r == other.__r && this.__g == other.__g && this.__b == other.__b;
	}
	,
	getHashCode: function () {
		return (this.__a << 24) | (this.__r << 16) | (this.__g << 8) | this.__b;
	}
	,
	l_op_Inequality: function (left, right) {
		return !($.ig.Color.prototype.l_op_Equality(left, right));
	}
	,
	l_op_Inequality_Lifted: function (left, right) {
		if (!left.hasValue()) {
			return right.hasValue();
		} else if (!right.hasValue()) {
			return true;
		}
		return $.ig.Color.prototype.l_op_Inequality(left.value(), right.value());
	}
	,
	l_op_Equality: function (left, right) {
		return left.__a == right.__a && left.__r == right.__r && left.__g == right.__g && left.__b == right.__b;
	}
	,
	l_op_Equality_Lifted: function (left, right) {
		if (!left.hasValue()) {
			return !right.hasValue();
		} else if (!right.hasValue()) {
			return false;
		}
		return $.ig.Color.prototype.l_op_Equality(left.value(), right.value());
	}
	,
	$type: new $.ig.Type('Color', $.ig.ValueType.prototype.$type)
}, true);

$.ig.util.defType('DoubleCollection', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, Number, 0);
	},
	$type: new $.ig.Type('DoubleCollection', $.ig.List$1.prototype.$type.specialize(Number))
}, true);

$.ig.util.defType('Geometry', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	type: function () {
	}
	,
	$type: new $.ig.Type('Geometry', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('GeometryCollection', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.Geometry.prototype.$type, 0);
	},
	$type: new $.ig.Type('GeometryCollection', $.ig.List$1.prototype.$type.specialize($.ig.Geometry.prototype.$type))
}, true);

$.ig.util.defType('GeometryGroup', 'Geometry', {
	init: function () {
		$.ig.Geometry.prototype.init.call(this);
		this.children(new $.ig.GeometryCollection());
	},
	_children: null,
	children: function (value) {
		if (arguments.length === 1) {
			this._children = value;
			return value;
		} else {
			return this._children;
		}
	}
	,
	type: function () {
		return $.ig.GeometryType.prototype.group;
	}
	,
	_fillRule: 0,
	fillRule: function (value) {
		if (arguments.length === 1) {
			this._fillRule = value;
			return value;
		} else {
			return this._fillRule;
		}
	}
	,
	$type: new $.ig.Type('GeometryGroup', $.ig.Geometry.prototype.$type)
}, true);

$.ig.util.defType('LineGeometry', 'Geometry', {
	init: function () {
		$.ig.Geometry.prototype.init.call(this);
	},
	_startPoint: null,
	startPoint: function (value) {
		if (arguments.length === 1) {
			this._startPoint = value;
			return value;
		} else {
			return this._startPoint;
		}
	}
	,
	_endPoint: null,
	endPoint: function (value) {
		if (arguments.length === 1) {
			this._endPoint = value;
			return value;
		} else {
			return this._endPoint;
		}
	}
	,
	type: function () {
		return $.ig.GeometryType.prototype.line;
	}
	,
	$type: new $.ig.Type('LineGeometry', $.ig.Geometry.prototype.$type)
}, true);

$.ig.util.defType('RectangleGeometry', 'Geometry', {
	init: function () {
		$.ig.Geometry.prototype.init.call(this);
	},
	_rect: null,
	rect: function (value) {
		if (arguments.length === 1) {
			this._rect = value;
			return value;
		} else {
			return this._rect;
		}
	}
	,
	_radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this._radiusX = value;
			return value;
		} else {
			return this._radiusX;
		}
	}
	,
	_radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this._radiusY = value;
			return value;
		} else {
			return this._radiusY;
		}
	}
	,
	type: function () {
		return $.ig.GeometryType.prototype.rectangle;
	}
	,
	$type: new $.ig.Type('RectangleGeometry', $.ig.Geometry.prototype.$type)
}, true);

$.ig.util.defType('EllipseGeometry', 'Geometry', {
	init: function () {
		$.ig.Geometry.prototype.init.call(this);
	},
	_center: null,
	center: function (value) {
		if (arguments.length === 1) {
			this._center = value;
			return value;
		} else {
			return this._center;
		}
	}
	,
	_radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this._radiusX = value;
			return value;
		} else {
			return this._radiusX;
		}
	}
	,
	_radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this._radiusY = value;
			return value;
		} else {
			return this._radiusY;
		}
	}
	,
	type: function () {
		return $.ig.GeometryType.prototype.ellipse;
	}
	,
	$type: new $.ig.Type('EllipseGeometry', $.ig.Geometry.prototype.$type)
}, true);

$.ig.util.defType('PathGeometry', 'Geometry', {
	init: function () {
		$.ig.Geometry.prototype.init.call(this);
		this.figures(new $.ig.PathFigureCollection());
	},
	_figures: null,
	figures: function (value) {
		if (arguments.length === 1) {
			this._figures = value;
			return value;
		} else {
			return this._figures;
		}
	}
	,
	type: function () {
		return $.ig.GeometryType.prototype.path;
	}
	,
	$type: new $.ig.Type('PathGeometry', $.ig.Geometry.prototype.$type)
}, true);

$.ig.util.defType('PathFigure', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__segments = new $.ig.PathSegmentCollection();
		this.__isClosed = false;
		this.__isFilled = true;
	},
	__segments: null,
	segments: function (value) {
		if (arguments.length === 1) {
			this.__segments = value;
			return value;
		} else {
			return this.__segments;
		}
	}
	,
	__startPoint: null,
	startPoint: function (value) {
		if (arguments.length === 1) {
			this.__startPoint = value;
			return value;
		} else {
			return this.__startPoint;
		}
	}
	,
	__isFilled: false,
	isFilled: function (value) {
		if (arguments.length === 1) {
			this.__isFilled = value;
			return value;
		} else {
			return this.__isFilled;
		}
	}
	,
	__isClosed: false,
	isClosed: function (value) {
		if (arguments.length === 1) {
			this.__isClosed = value;
			return value;
		} else {
			return this.__isClosed;
		}
	}
	,
	$type: new $.ig.Type('PathFigure', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PathFigureCollection', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.PathFigure.prototype.$type, 0);
	},
	$type: new $.ig.Type('PathFigureCollection', $.ig.List$1.prototype.$type.specialize($.ig.PathFigure.prototype.$type))
}, true);

$.ig.util.defType('PathSegment', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	type: function () {
	}
	,
	$type: new $.ig.Type('PathSegment', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PathSegmentCollection', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.PathSegment.prototype.$type, 0);
	},
	$type: new $.ig.Type('PathSegmentCollection', $.ig.List$1.prototype.$type.specialize($.ig.PathSegment.prototype.$type))
}, true);

$.ig.util.defType('LineSegment', 'PathSegment', {
	__point: null,
	point: function (value) {
		if (arguments.length === 1) {
			this.__point = value;
			return value;
		} else {
			return this.__point;
		}
	}
	,
	init: function (initNumber, point) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PathSegment.prototype.init.call(this);
		this.point(point);
	},
	init1: function (initNumber) {
		$.ig.PathSegment.prototype.init.call(this);
	},
	type: function () {
		return $.ig.PathSegmentType.prototype.line;
	}
	,
	$type: new $.ig.Type('LineSegment', $.ig.PathSegment.prototype.$type)
}, true);

$.ig.util.defType('BezierSegment', 'PathSegment', {
	__point1: null,
	point1: function (value) {
		if (arguments.length === 1) {
			this.__point1 = value;
			return value;
		} else {
			return this.__point1;
		}
	}
	,
	__point2: null,
	point2: function (value) {
		if (arguments.length === 1) {
			this.__point2 = value;
			return value;
		} else {
			return this.__point2;
		}
	}
	,
	__point3: null,
	point3: function (value) {
		if (arguments.length === 1) {
			this.__point3 = value;
			return value;
		} else {
			return this.__point3;
		}
	}
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PathSegment.prototype.init.call(this);
		this.point1(this.point2(this.point3({ __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName })));
	},
	init1: function (initNumber, cp1, cp2, p) {
		$.ig.PathSegment.prototype.init.call(this);
		this.point1(cp1);
		this.point2(cp2);
		this.point3(p);
	},
	type: function () {
		return $.ig.PathSegmentType.prototype.bezier;
	}
	,
	$type: new $.ig.Type('BezierSegment', $.ig.PathSegment.prototype.$type)
}, true);

$.ig.util.defType('PolyBezierSegment', 'PathSegment', {
	init: function () {
		$.ig.PathSegment.prototype.init.call(this);
		this.points(new $.ig.PointCollection(0));
	},
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	type: function () {
		return $.ig.PathSegmentType.prototype.polyBezier;
	}
	,
	$type: new $.ig.Type('PolyBezierSegment', $.ig.PathSegment.prototype.$type)
}, true);

$.ig.util.defType('PolyLineSegment', 'PathSegment', {
	init: function () {
		$.ig.PathSegment.prototype.init.call(this);
		this.__points = new $.ig.PointCollection(0);
	},
	__points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this.__points = value;
			return value;
		} else {
			return this.__points;
		}
	}
	,
	type: function () {
		return $.ig.PathSegmentType.prototype.polyLine;
	}
	,
	$type: new $.ig.Type('PolyLineSegment', $.ig.PathSegment.prototype.$type)
}, true);

$.ig.util.defType('ArcSegment', 'PathSegment', {
	init: function () {
		this._size = new $.ig.Size();
		$.ig.PathSegment.prototype.init.call(this);
		this.isLargeArc(false);
		this.sweepDirection($.ig.SweepDirection.prototype.counterclockwise);
	},
	_point: null,
	point: function (value) {
		if (arguments.length === 1) {
			this._point = value;
			return value;
		} else {
			return this._point;
		}
	}
	,
	_isLargeArc: false,
	isLargeArc: function (value) {
		if (arguments.length === 1) {
			this._isLargeArc = value;
			return value;
		} else {
			return this._isLargeArc;
		}
	}
	,
	_sweepDirection: 0,
	sweepDirection: function (value) {
		if (arguments.length === 1) {
			this._sweepDirection = value;
			return value;
		} else {
			return this._sweepDirection;
		}
	}
	,
	_size: null,
	size: function (value) {
		if (arguments.length === 1) {
			this._size = value;
			return value;
		} else {
			return this._size;
		}
	}
	,
	_rotationAngle: 0,
	rotationAngle: function (value) {
		if (arguments.length === 1) {
			this._rotationAngle = value;
			return value;
		} else {
			return this._rotationAngle;
		}
	}
	,
	type: function () {
		return $.ig.PathSegmentType.prototype.arc;
	}
	,
	$type: new $.ig.Type('ArcSegment', $.ig.PathSegment.prototype.$type)
}, true);

$.ig.util.defType('Transform', 'DependencyObject', {
	init: function () {
		$.ig.DependencyObject.prototype.init.call(this);
	},
	$type: new $.ig.Type('Transform', $.ig.DependencyObject.prototype.$type)
}, true);

$.ig.util.defType('RotateTransform', 'Transform', {
	init: function () {
		$.ig.Transform.prototype.init.call(this);
	},
	_angle: 0,
	angle: function (value) {
		if (arguments.length === 1) {
			this._angle = value;
			return value;
		} else {
			return this._angle;
		}
	}
	,
	_centerX: 0,
	centerX: function (value) {
		if (arguments.length === 1) {
			this._centerX = value;
			return value;
		} else {
			return this._centerX;
		}
	}
	,
	_centerY: 0,
	centerY: function (value) {
		if (arguments.length === 1) {
			this._centerY = value;
			return value;
		} else {
			return this._centerY;
		}
	}
	,
	$type: new $.ig.Type('RotateTransform', $.ig.Transform.prototype.$type)
}, true);

$.ig.util.defType('TranslateTransform', 'Transform', {
	init: function () {
		$.ig.Transform.prototype.init.call(this);
	},
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	$type: new $.ig.Type('TranslateTransform', $.ig.Transform.prototype.$type)
}, true);

$.ig.util.defType('ScaleTransform', 'Transform', {
	init: function () {
		$.ig.Transform.prototype.init.call(this);
	},
	_scaleX: 0,
	scaleX: function (value) {
		if (arguments.length === 1) {
			this._scaleX = value;
			return value;
		} else {
			return this._scaleX;
		}
	}
	,
	_scaleY: 0,
	scaleY: function (value) {
		if (arguments.length === 1) {
			this._scaleY = value;
			return value;
		} else {
			return this._scaleY;
		}
	}
	,
	_centerX: 0,
	centerX: function (value) {
		if (arguments.length === 1) {
			this._centerX = value;
			return value;
		} else {
			return this._centerX;
		}
	}
	,
	_centerY: 0,
	centerY: function (value) {
		if (arguments.length === 1) {
			this._centerY = value;
			return value;
		} else {
			return this._centerY;
		}
	}
	,
	$type: new $.ig.Type('ScaleTransform', $.ig.Transform.prototype.$type)
}, true);

$.ig.util.defType('TransformGroup', 'Transform', {
	_children: null,
	children: function (value) {
		if (arguments.length === 1) {
			this._children = value;
			return value;
		} else {
			return this._children;
		}
	}
	,
	init: function () {
		$.ig.Transform.prototype.init.call(this);
		this.children(new $.ig.TransformCollection());
	},
	$type: new $.ig.Type('TransformGroup', $.ig.Transform.prototype.$type)
}, true);

$.ig.util.defType('TransformCollection', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.Transform.prototype.$type, 0);
	},
	$type: new $.ig.Type('TransformCollection', $.ig.List$1.prototype.$type.specialize($.ig.Transform.prototype.$type))
}, true);

$.ig.util.defType('Thickness', 'Object', {
	init: function (initNumber, uniformLength) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.bottom(this.left(this.right(this.top(uniformLength))));
	},
	init1: function (initNumber, left, top, right, bottom) {
		$.ig.Object.prototype.init.call(this);
		this.left(left);
		this.top(top);
		this.right(right);
		this.bottom(bottom);
	},
	_bottom: 0,
	bottom: function (value) {
		if (arguments.length === 1) {
			this._bottom = value;
			return value;
		} else {
			return this._bottom;
		}
	}
	,
	_left: 0,
	left: function (value) {
		if (arguments.length === 1) {
			this._left = value;
			return value;
		} else {
			return this._left;
		}
	}
	,
	_right: 0,
	right: function (value) {
		if (arguments.length === 1) {
			this._right = value;
			return value;
		} else {
			return this._right;
		}
	}
	,
	_top: 0,
	top: function (value) {
		if (arguments.length === 1) {
			this._top = value;
			return value;
		} else {
			return this._top;
		}
	}
	,
	equals: function (thickness) {
		return this.bottom() == thickness.bottom() && this.top() == thickness.top() && this.left() == thickness.left() && this.right() == thickness.right();
	}
	,
	toString: function () {
		var marginsInfo = this.left().toString() + "," + this.top().toString() + "," + this.right().toString() + "," + this.bottom().toString();
		return marginsInfo;
	}
	,
	$type: new $.ig.Type('Thickness', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Point', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.__x = 0;
		this.__y = 0;
	},
	x: function (value) {
		if (arguments.length === 1) {
			this.__x = value;
			return value;
		} else {
			return this.__x;
		}
	}
	,
	y: function (value) {
		if (arguments.length === 1) {
			this.__y = value;
			return value;
		} else {
			return this.__y;
		}
	}
	,
	__x: 0,
	__y: 0,
	init1: function (initNumber, x, y) {
		$.ig.Object.prototype.init.call(this);
		this.__x = x;
		this.__y = y;
	},
	equals: function (obj) {
		if (obj == null) {
			return $.ig.Object.prototype.equals.call(this, obj);
		}
		var other = obj;
		return other.__x == this.__x && other.__y == this.__y;
	}
	,
	l_op_Equality: function (a, b) {
		if (a == null) {
			return b == null;
		} else if (b == null) {
			return false;
		}
		return a.__x == b.__x && a.__y == b.__y;
	}
	,
	l_op_Inequality: function (a, b) {
		return !($.ig.Point.prototype.l_op_Equality(a, b));
	}
	,
	$type: new $.ig.Type('Point', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PointCollection', 'List$1', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.List$1.prototype.init.call(this, $.ig.Point.prototype.$type, 0);
	},
	init1: function (initNumber, source_) {
		$.ig.List$1.prototype.init.call(this, $.ig.Point.prototype.$type, 0);
		this.__inner = source_.__inner;
	},
	$type: new $.ig.Type('PointCollection', $.ig.List$1.prototype.$type.specialize($.ig.Point.prototype.$type))
}, true);

$.ig.util.defType('PropertyPath', 'Object', {
	__path: null,
	path: function (value) {
		if (arguments.length === 1) {
			this.__path = value;
			return value;
		} else {
			return this.__path;
		}
	}
	,
	init: function (path) {
		$.ig.Object.prototype.init.call(this);
		this.path(path);
	},
	$type: new $.ig.Type('PropertyPath', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Rect', 'Object', {
	init: function (initNumber, left, top, width, height) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
				case 3:
					this.init3.apply(this, arguments);
					break;
				case 4:
					this.init4.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.top(top);
		this.left(left);
		this.width(width);
		this.height(height);
	},
	init1: function (initNumber, left, top, size) {
		$.ig.Object.prototype.init.call(this);
		this.top(top);
		this.left(left);
		this.width(size.width());
		this.height(size.height());
	},
	init2: function (initNumber, point1, point2) {
		$.ig.Object.prototype.init.call(this);
		this.top(Math.min(point1.__y, point2.__y));
		this.left(Math.min(point1.__x, point2.__x));
		this.width(Math.max(Math.max(point1.__x, point2.__x) - this.left(), 0));
		this.height(Math.max(Math.max(point1.__y, point2.__y) - this.top(), 0));
	},
	init3: function (initNumber, point1, size) {
		$.ig.Object.prototype.init.call(this);
		this.top(point1.__y);
		this.left(point1.__x);
		this.width(size.width());
		this.height(size.height());
	},
	init4: function (initNumber) {
		$.ig.Object.prototype.init.call(this);
		this.top(0);
		this.left(0);
		this.width(0);
		this.height(0);
	},
	__x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this.__x = value;
			this.__left = this.__x;
			this.__right = this.__left + this.__width;
			return value;
		} else {
			return this.__x;
		}
	}
	,
	__y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this.__y = value;
			this.__top = this.__y;
			this.__bottom = this.__top + this.__height;
			return value;
		} else {
			return this.__y;
		}
	}
	,
	__width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this.__width = value;
			this.__right = this.__left + this.__width;
			return value;
		} else {
			return this.__width;
		}
	}
	,
	__height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this.__height = value;
			this.__bottom = this.__top + this.__height;
			return value;
		} else {
			return this.__height;
		}
	}
	,
	__top: 0,
	top: function (value) {
		if (arguments.length === 1) {
			this.__top = value;
			this.y(this.__top);
			return value;
		} else {
			return this.__top;
		}
	}
	,
	__left: 0,
	left: function (value) {
		if (arguments.length === 1) {
			this.__left = value;
			this.x(this.__left);
			return value;
		} else {
			return this.__left;
		}
	}
	,
	__right: 0,
	right: function (value) {
		if (arguments.length === 1) {
			this.__right = value;
			this.__width = this.__right - this.__left;
			return value;
		} else {
			return this.__right;
		}
	}
	,
	__bottom: 0,
	bottom: function (value) {
		if (arguments.length === 1) {
			this.__bottom = value;
			this.__height = this.__bottom - this.__top;
			return value;
		} else {
			return this.__bottom;
		}
	}
	,
	isEmpty: function () {
		return this.__width < 0;
	}
	,
	empty: function () {
		return new $.ig.Rect(0, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY);
	}
	,
	equals1: function (value) {
		if ($.ig.Rect.prototype.l_op_Equality(value, null)) {
			return false;
		}
		if (value.x() == this.x() && value.y() == this.y() && value.width() == this.width() && value.height() == this.height()) {
			return true;
		}
		return false;
	}
	,
	containsInternal: function (x, y) {
		return x >= this.__x && x - this.__width <= this.__x && y >= this.__y && y - this.__height <= this.__y;
	}
	,
	containsLocation: function (x, y) {
		return !this.isEmpty() && this.containsInternal(x, y);
	}
	,
	containsPoint: function (point) {
		return this.containsLocation(point.__x, point.__y);
	}
	,
	containsRect: function (rect) {
		return !this.isEmpty() && !rect.isEmpty() && (this.__x <= rect.__x && this.__y <= rect.__y && this.__x + this.__width >= rect.__x + rect.__width) && this.__y + this.__height >= rect.__y + rect.__height;
	}
	,
	inflate: function (width, height) {
		this.x(this.x() - width);
		this.y(this.y() - height);
		this.width(this.width() + (width * 2));
		this.height(this.height() + (height * 2));
		if (this.__width < 0 || this.__height < 0) {
			this.makeEmpty();
		}
	}
	,
	makeEmpty: function () {
		this.top(Number.POSITIVE_INFINITY);
		this.left(Number.POSITIVE_INFINITY);
		this.width(Number.NEGATIVE_INFINITY);
		this.height(Number.NEGATIVE_INFINITY);
	}
	,
	intersectsWith: function (rect) {
		return !(rect.left() > this.right() || rect.right() < this.left() || rect.top() > this.bottom() || rect.bottom() < this.top());
	}
	,
	intersect: function (other) {
		if (!this.intersectsWith(other)) {
			this.makeEmpty();
		} else {
			var maxX = Math.max(this.x(), other.x());
			var maxY = Math.max(this.y(), other.y());
			var newWidth = Math.min(this.x() + this.width(), other.x() + other.width()) - maxX;
			var newHeight = Math.min(this.y() + this.height(), other.y() + other.height()) - maxY;
			if (newWidth < 0) {
				newWidth = 0;
			}
			if (newHeight < 0) {
				newHeight = 0;
			}
			this.__width = newWidth;
			this.__height = newHeight;
			this.__x = maxX;
			this.__y = maxY;
			this.__left = this.__x;
			this.__top = this.__y;
			this.__right = this.__left + this.__width;
			this.__bottom = this.__top + this.__height;
		}
	}
	,
	union: function (other) {
		if (this.isEmpty()) {
			this.__x = other.x();
			this.__y = other.y();
			this.__width = other.width();
			this.__height = other.height();
			this.__left = this.__x;
			this.__top = this.__y;
			this.__right = this.__left + this.__width;
			this.__bottom = this.__top + this.__height;
			return;
		}
		if (!other.isEmpty()) {
			var minX = Math.min(this.x(), other.x());
			var minY = Math.min(this.y(), other.y());
			var newWidth = this.width();
			var newHeight = this.height();
			if (other.width() == Number.POSITIVE_INFINITY || this.width() == Number.POSITIVE_INFINITY) {
				newWidth = Number.POSITIVE_INFINITY;
			} else {
				var maxRight = Math.max(this.right(), other.right());
				newWidth = maxRight - minX;
			}
			if (other.height() == Number.POSITIVE_INFINITY || this.height() == Number.POSITIVE_INFINITY) {
				newHeight = Number.POSITIVE_INFINITY;
			} else {
				var maxBottom = Math.max(this.bottom(), other.bottom());
				newHeight = maxBottom - minY;
			}
			this.__x = minX;
			this.__y = minY;
			this.__width = newWidth;
			this.__height = newHeight;
			this.__left = this.__x;
			this.__top = this.__y;
			this.__right = this.__left + this.__width;
			this.__bottom = this.__top + this.__height;
		}
	}
	,
	equals: function (obj) {
		if (obj == null) {
			return $.ig.Object.prototype.equals.call(this, obj);
		}
		var other = obj;
		return other.left() == this.left() && other.top() == this.top() && other.width() == this.width() && other.height() == this.height();
	}
	,
	getHashCode: function () {
		return (this.__x) ^ (this.__y) ^ (this.__width) ^ (this.__height);
	}
	,
	l_op_Equality: function (a, b) {
		if (a == null) {
			return b == null;
		} else if (b == null) {
			return false;
		}
		return a.__x == b.__x && a.__y == b.__y && a.__width == b.__width && a.__height == b.__height;
	}
	,
	l_op_Inequality: function (a, b) {
		if (a == null) {
			return b != null;
		} else if (b == null) {
			return true;
		}
		return a.__x != b.__x || a.__y != b.__y || a.__width != b.__width || a.__height != b.__height;
	}
	,
	$type: new $.ig.Type('Rect', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Shape', 'FrameworkElement', {
	init: function () {
		this.__fill = null;
		this.__stroke = null;
		$.ig.FrameworkElement.prototype.init.call(this);
	},
	__fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this.__fill = value;
			return value;
		} else {
			return this.__fill;
		}
	}
	,
	__stroke: null,
	stroke: function (value) {
		if (arguments.length === 1) {
			this.__stroke = value;
			return value;
		} else {
			return this.__stroke;
		}
	}
	,
	_isHitTestVisible: false,
	isHitTestVisible: function (value) {
		if (arguments.length === 1) {
			this._isHitTestVisible = value;
			return value;
		} else {
			return this._isHitTestVisible;
		}
	}
	,
	_strokeThickness: 0,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this._strokeThickness = value;
			return value;
		} else {
			return this._strokeThickness;
		}
	}
	,
	_strokeDashArray: null,
	strokeDashArray: function (value) {
		if (arguments.length === 1) {
			this._strokeDashArray = value;
			return value;
		} else {
			return this._strokeDashArray;
		}
	}
	,
	_strokeDashCap: 0,
	strokeDashCap: function (value) {
		if (arguments.length === 1) {
			this._strokeDashCap = value;
			return value;
		} else {
			return this._strokeDashCap;
		}
	}
	,
	$type: new $.ig.Type('Shape', $.ig.FrameworkElement.prototype.$type)
}, true);

$.ig.util.defType('Line', 'Shape', {
	init: function () {
		$.ig.Shape.prototype.init.call(this);
		this.x1(0);
		this.x2(0);
		this.y1(0);
		this.y2(0);
	},
	_x1: 0,
	x1: function (value) {
		if (arguments.length === 1) {
			this._x1 = value;
			return value;
		} else {
			return this._x1;
		}
	}
	,
	_x2: 0,
	x2: function (value) {
		if (arguments.length === 1) {
			this._x2 = value;
			return value;
		} else {
			return this._x2;
		}
	}
	,
	_y1: 0,
	y1: function (value) {
		if (arguments.length === 1) {
			this._y1 = value;
			return value;
		} else {
			return this._y1;
		}
	}
	,
	_y2: 0,
	y2: function (value) {
		if (arguments.length === 1) {
			this._y2 = value;
			return value;
		} else {
			return this._y2;
		}
	}
	,
	$type: new $.ig.Type('Line', $.ig.Shape.prototype.$type)
}, true);

$.ig.util.defType('Path', 'Shape', {
	init: function () {
		$.ig.Shape.prototype.init.call(this);
	},
	_data: null,
	data: function (value) {
		if (arguments.length === 1) {
			this._data = value;
			return value;
		} else {
			return this._data;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	$type: new $.ig.Type('Path', $.ig.Shape.prototype.$type)
}, true);

$.ig.util.defType('Polygon', 'Shape', {
	init: function () {
		$.ig.Shape.prototype.init.call(this);
		this.points(new $.ig.PointCollection(0));
	},
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	$type: new $.ig.Type('Polygon', $.ig.Shape.prototype.$type)
}, true);

$.ig.util.defType('Polyline', 'Shape', {
	init: function () {
		$.ig.Shape.prototype.init.call(this);
		this.points(new $.ig.PointCollection(0));
	},
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	$type: new $.ig.Type('Polyline', $.ig.Shape.prototype.$type)
}, true);

$.ig.util.defType('Rectangle', 'Shape', {
	__rect: null,
	__radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this.__radiusX = value;
			return value;
		} else {
			return this.__radiusX;
		}
	}
	,
	__radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this.__radiusY = value;
			return value;
		} else {
			return this.__radiusY;
		}
	}
	,
	init: function () {
		$.ig.Shape.prototype.init.call(this);
		this.__rect = new $.ig.Rect(0, 0, 0, 0, 0);
	},
	arrange: function (rect) {
	}
	,
	$type: new $.ig.Type('Rectangle', $.ig.Shape.prototype.$type)
}, true);

$.ig.util.defType('Size', 'ValueType', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.ValueType.prototype.init.call(this);
	},
	init1: function (initNumber, width, height) {
		$.ig.ValueType.prototype.init.call(this);
		this.__width = width;
		this.__height = height;
	},
	__width: 0,
	__height: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this.__width = value;
			return value;
		} else {
			return this.__width;
		}
	}
	,
	height: function (value) {
		if (arguments.length === 1) {
			this.__height = value;
			return value;
		} else {
			return this.__height;
		}
	}
	,
	isEmpty: function () {
		return this.__width < 0;
	}
	,
	empty: function () {
		var s = new $.ig.Size(0);
		s.__width = Number.NEGATIVE_INFINITY;
		s.__height = Number.NEGATIVE_INFINITY;
		return s;
	}
	,
	l_op_Inequality: function (left, right) {
		return !($.ig.Size.prototype.l_op_Equality(left, right));
	}
	,
	l_op_Inequality_Lifted: function (left, right) {
		if (!left.hasValue()) {
			return right.hasValue();
		} else if (!right.hasValue()) {
			return true;
		}
		return $.ig.Size.prototype.l_op_Inequality(left.value(), right.value());
	}
	,
	l_op_Equality: function (left, right) {
		return left.__width == right.__width && left.__height == right.__height;
	}
	,
	l_op_Equality_Lifted: function (left, right) {
		if (!left.hasValue()) {
			return !right.hasValue();
		} else if (!right.hasValue()) {
			return false;
		}
		return $.ig.Size.prototype.l_op_Equality(left.value(), right.value());
	}
	,
	$type: new $.ig.Type('Size', $.ig.ValueType.prototype.$type)
}, true);

$.ig.util.defType('Style', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('Style', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Enumerable___Skip__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_source: null,
	__3__source: null,
	_toSkip: 0,
	__3__toSkip: 0,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							if (this._toSkip <= 0) {
								this.__2__current = this.__item_5_0;
								this.__1__state = 2;
								return true;
							}
							this._toSkip--;
							this.__1__state = 2;
							break;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Skip__IteratorClass$1(this.$tSource, 0);
		}
		d__._source = this.__3__source;
		d__._toSkip = this.__3__toSkip;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Skip__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Take__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_source: null,
	__3__source: null,
	_toTake: 0,
	__3__toTake: 0,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							if (this._toTake > 0) {
								this._toTake--;
								this.__2__current = this.__item_5_0;
								this.__1__state = 2;
								return true;
							}
							return false;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Take__IteratorClass$1(this.$tSource, 0);
		}
		d__._source = this.__3__source;
		d__._toTake = this.__3__toTake;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Take__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___SelectMany__IteratorClass1$3', 'Object', {
	$tSource: null,
	$tCollection: null,
	$tResult: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_resultEnumerator: null,
	__result_5_1: null,
	_source: null,
	__3__source: null,
	_collectionSelector: null,
	__3__collectionSelector: null,
	_resultSelector: null,
	__3__resultSelector: null,
	init: function ($tSource, $tCollection, $tResult, _1__state) {
		this.$tSource = $tSource;
		this.$tCollection = $tCollection;
		this.$tResult = $tResult;
		this.$type = this.$type.specialize(this.$tSource, this.$tCollection, this.$tResult);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = 1;
		if (this._resultEnumerator != null) {
			this._resultEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							this.__1__state = 3;
							this._resultEnumerator = this._collectionSelector(this.__item_5_0).getEnumerator();
							this.__1__state = 4;
							break;
						}
						this._m_Finally0();
						break;
					case 4:
						this.__1__state = 3;
						if (this._resultEnumerator.moveNext()) {
							this.__result_5_1 = this._resultEnumerator.current();
							this.__2__current = this._resultSelector(this.__item_5_0, this.__result_5_1);
							this.__1__state = 4;
							return true;
						}
						this._m_Finally1();
						this.__1__state = 2;
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___SelectMany__IteratorClass1$3(this.$tSource, this.$tCollection, this.$tResult, 0);
		}
		d__._source = this.__3__source;
		d__._collectionSelector = this.__3__collectionSelector;
		d__._resultSelector = this.__3__resultSelector;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				try {
					this._m_Finally1();
				}
				finally {
					this._m_Finally0();
				}
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tResult, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___SelectMany__IteratorClass1$3', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(2), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(2), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Reverse__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	__list_5_0: null,
	__i_5_1: 0,
	_source: null,
	__3__source: null,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__list_5_0 = new $.ig.List$1(this.$tSource, 1, this._source);
					this.__i_5_1 = this.__list_5_0.count() - 1;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_1 >= 0) {
						this.__2__current = this.__list_5_0.__inner[this.__i_5_1];
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_1--;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Reverse__IteratorClass$1(this.$tSource, 0);
		}
		d__._source = this.__3__source;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Reverse__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Range__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__i_5_0: 0,
	_startValue: 0,
	__3__startValue: 0,
	_count: 0,
	__3__count: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = this._startValue;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this._count) {
						this.__2__current = this.__i_5_0;
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Range__IteratorClass(0);
		}
		d__._startValue = this.__3__startValue;
		d__._count = this.__3__count;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('Enumerable___Range__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Number.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Number.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___OfType__IteratorClass$1', 'Object', {
	$tResult: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_source: null,
	__3__source: null,
	init: function ($tResult, _1__state) {
		this.$tResult = $tResult;
		this.$type = this.$type.specialize(this.$tResult);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		var d__ = $.ig.util.cast($.ig.IDisposable.prototype.$type, this._itemEnumerator);
		if (d__ != null) {
			d__.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							if ($.ig.util.cast(this.$tResult, this.__item_5_0) !== null) {
								this.__2__current = $.ig.util.castObjTo$t(this.$tResult, this.__item_5_0);
								this.__1__state = 2;
								return true;
							}
							this.__1__state = 2;
							break;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___OfType__IteratorClass$1(this.$tResult, 0);
		}
		d__._source = this.__3__source;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tResult, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___OfType__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___SelectMany__IteratorClass$2', 'Object', {
	$tSource: null,
	$tResult: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_item2Enumerator: null,
	__item2_5_1: null,
	_source: null,
	__3__source: null,
	_selector: null,
	__3__selector: null,
	init: function ($tSource, $tResult, _1__state) {
		this.$tSource = $tSource;
		this.$tResult = $tResult;
		this.$type = this.$type.specialize(this.$tSource, this.$tResult);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = 1;
		if (this._item2Enumerator != null) {
			this._item2Enumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							this.__1__state = 3;
							this._item2Enumerator = this._selector(this.__item_5_0).getEnumerator();
							this.__1__state = 4;
							break;
						}
						this._m_Finally0();
						break;
					case 4:
						this.__1__state = 3;
						if (this._item2Enumerator.moveNext()) {
							this.__item2_5_1 = this._item2Enumerator.current();
							this.__2__current = this.__item2_5_1;
							this.__1__state = 4;
							return true;
						}
						this._m_Finally1();
						this.__1__state = 2;
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___SelectMany__IteratorClass$2(this.$tSource, this.$tResult, 0);
		}
		d__._source = this.__3__source;
		d__._selector = this.__3__selector;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				try {
					this._m_Finally1();
				}
				finally {
					this._m_Finally0();
				}
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tResult, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___SelectMany__IteratorClass$2', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(1), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(1), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Select__IteratorClass$2', 'Object', {
	$tSource: null,
	$tResult: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_source: null,
	__3__source: null,
	_selector: null,
	__3__selector: null,
	init: function ($tSource, $tResult, _1__state) {
		this.$tSource = $tSource;
		this.$tResult = $tResult;
		this.$type = this.$type.specialize(this.$tSource, this.$tResult);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							this.__2__current = this._selector(this.__item_5_0);
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Select__IteratorClass$2(this.$tSource, this.$tResult, 0);
		}
		d__._source = this.__3__source;
		d__._selector = this.__3__selector;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tResult, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Select__IteratorClass$2', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(1), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(1), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Where__IteratorClass1$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	__index_5_0: 0,
	_itemEnumerator: null,
	__item_5_1: null,
	_source: null,
	__3__source: null,
	_predicate: null,
	__3__predicate: null,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__index_5_0 = 0;
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_1 = this._itemEnumerator.current();
							if (this._predicate(this.__item_5_1, this.__index_5_0)) {
								this.__2__current = this.__item_5_1;
								this.__1__state = 3;
								return true;
							}
							this.__1__state = 3;
							break;
						}
						this._m_Finally0();
						break;
					case 3:
						this.__1__state = 1;
						this.__index_5_0++;
						this.__1__state = 2;
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Where__IteratorClass1$1(this.$tSource, 0);
		}
		d__._source = this.__3__source;
		d__._predicate = this.__3__predicate;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
			case 3:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Where__IteratorClass1$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Where__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_source: null,
	__3__source: null,
	_predicate: null,
	__3__predicate: null,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							if (this._predicate(this.__item_5_0)) {
								this.__2__current = this.__item_5_0;
								this.__1__state = 2;
								return true;
							}
							this.__1__state = 2;
							break;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Where__IteratorClass$1(this.$tSource, 0);
		}
		d__._source = this.__3__source;
		d__._predicate = this.__3__predicate;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Where__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Dictionary___ToEnumerable__IteratorClass$2', 'Object', {
	$tKey: null,
	$tValue: null,
	__1__state: 0,
	__2__current: null,
	__array_5_0: null,
	__i_5_1: 0,
	__array_5_2: null,
	__i_5_3: 0,
	__pair_5_4: null,
	__pArray_5_5: null,
	__j_5_6: 0,
	__4__this: null,
	init: function ($tKey, $tValue, _1__state) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		this.__2__current = new $.ig.KeyValuePair$2(this.$tKey, this.$tValue);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					if (this.__4__this.__assumeUniqueKeys) {
						this.__array_5_0 = $.ig.util.getArrayOfProperties(this.__4__this.__keysUnique);
						this.__i_5_1 = 0;
						this.__1__state = 1;
						break;
					}
					this.__array_5_2 = $.ig.util.getArrayOfProperties(this.__4__this.__values);
					this.__i_5_3 = 0;
					this.__1__state = 3;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_1 < this.__array_5_0.length) {
						this.__2__current = new $.ig.KeyValuePair$2(this.$tKey, this.$tValue, 1, this.__4__this.__keysUnique[this.__array_5_0[this.__i_5_1]], this.__4__this.__values[this.__array_5_0[this.__i_5_1]]);
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_1++;
					this.__1__state = 1;
					break;
				case 3:
					this.__1__state = -1;
					if (this.__i_5_3 < this.__array_5_2.length) {
						this.__pair_5_4 = this.__4__this.__values[this.__array_5_2[this.__i_5_3]];
						if (this.__pair_5_4.$isHashSetBucket) {
							this.__pArray_5_5 = this.__pair_5_4;
							this.__j_5_6 = 0;
							this.__1__state = 4;
							break;
						}
						this.__2__current = new $.ig.KeyValuePair$2(this.$tKey, this.$tValue, 1, this.__pair_5_4.key, this.__pair_5_4.value);
						this.__1__state = 6;
						return true;
					}
					break;
				case 4:
					this.__1__state = -1;
					if (this.__j_5_6 < this.__pArray_5_5.length) {
						var subItem_ = this.__pArray_5_5[this.__j_5_6];
						this.__2__current = new $.ig.KeyValuePair$2(this.$tKey, this.$tValue, 1, subItem_.key, subItem_.value);
						this.__1__state = 5;
						return true;
					}
					this.__1__state = 6;
					break;
				case 5:
					this.__1__state = -1;
					this.__j_5_6++;
					this.__1__state = 4;
					break;
				case 6:
					this.__1__state = -1;
					this.__i_5_3++;
					this.__1__state = 3;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Dictionary___ToEnumerable__IteratorClass$2(this.$tKey, this.$tValue, 0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('Dictionary___ToEnumerable__IteratorClass$2', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.KeyValuePair$2.prototype.$type.specialize(0, 1)), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.KeyValuePair$2.prototype.$type.specialize(0, 1)), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Concat__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	_itemEnumerator: null,
	__item_5_0: null,
	_itemEnumerator0: null,
	__item_5_1: null,
	_source1: null,
	__3__source1: null,
	_source2: null,
	__3__source2: null,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = -1;
		if (this._itemEnumerator0 != null) {
			this._itemEnumerator0.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._itemEnumerator = this._source1.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._itemEnumerator.moveNext()) {
							this.__item_5_0 = this._itemEnumerator.current();
							this.__2__current = this.__item_5_0;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						this.__1__state = 3;
						this._itemEnumerator0 = this._source2.getEnumerator();
						this.__1__state = 4;
						break;
					case 4:
						this.__1__state = 3;
						if (this._itemEnumerator0.moveNext()) {
							this.__item_5_1 = this._itemEnumerator0.current();
							this.__2__current = this.__item_5_1;
							this.__1__state = 4;
							return true;
						}
						this._m_Finally1();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Enumerable___Concat__IteratorClass$1(this.$tSource, 0);
		}
		d__._source1 = this.__3__source1;
		d__._source2 = this.__3__source2;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				this._m_Finally1();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Concat__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Enumerable___Empty__IteratorClass$1', 'Object', {
	$tSource: null,
	__1__state: 0,
	__2__current: null,
	init: function ($tSource, _1__state) {
		this.$tSource = $tSource;
		this.$type = this.$type.specialize(this.$tSource);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		switch (this.__1__state) {
			case 0:
				this.__1__state = -1;
				return false;
		}
		return false;
	}
	,
	getEnumerator: function () {
		if (this.__1__state == -2) {
			this.__1__state = 0;
			return this;
		}
		return new $.ig.Enumerable___Empty__IteratorClass$1(this.$tSource, 0);
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$tSource, this.__2__current);
	}
	,
	$type: new $.ig.Type('Enumerable___Empty__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(0), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.Visibility.prototype.visible = 0;
$.ig.Visibility.prototype.collapsed = 1;

$.ig.VerticalAlignment.prototype.top = 0;
$.ig.VerticalAlignment.prototype.center = 1;
$.ig.VerticalAlignment.prototype.bottom = 2;
$.ig.VerticalAlignment.prototype.stretch = 3;

$.ig.PenLineCap.prototype.flat = 0;
$.ig.PenLineCap.prototype.square = 1;
$.ig.PenLineCap.prototype.round = 2;
$.ig.PenLineCap.prototype.triangle = 3;

$.ig.HorizontalAlignment.prototype.left = 0;
$.ig.HorizontalAlignment.prototype.center = 1;
$.ig.HorizontalAlignment.prototype.right = 2;
$.ig.HorizontalAlignment.prototype.stretch = 3;

$.ig.SweepDirection.prototype.counterclockwise = 0;
$.ig.SweepDirection.prototype.clockwise = 1;

$.ig.PathSegmentType.prototype.line = 0;
$.ig.PathSegmentType.prototype.bezier = 1;
$.ig.PathSegmentType.prototype.polyBezier = 2;
$.ig.PathSegmentType.prototype.polyLine = 3;
$.ig.PathSegmentType.prototype.arc = 4;

$.ig.GeometryType.prototype.group = 0;
$.ig.GeometryType.prototype.line = 1;
$.ig.GeometryType.prototype.rectangle = 2;
$.ig.GeometryType.prototype.ellipse = 3;
$.ig.GeometryType.prototype.path = 4;

$.ig.FillRule.prototype.evenOdd = 0;
$.ig.FillRule.prototype.nonzero = 1;

$.ig.ModifierKeys.prototype.none = 0;
$.ig.ModifierKeys.prototype.alt = 1;
$.ig.ModifierKeys.prototype.control = 2;
$.ig.ModifierKeys.prototype.shift = 4;
$.ig.ModifierKeys.prototype.windows = 8;
$.ig.ModifierKeys.prototype.apple = 8;

$.ig.Key.prototype.none = 0;
$.ig.Key.prototype.back = 1;
$.ig.Key.prototype.tab = 2;
$.ig.Key.prototype.enter = 3;
$.ig.Key.prototype.shift = 4;
$.ig.Key.prototype.ctrl = 5;
$.ig.Key.prototype.alt = 6;
$.ig.Key.prototype.capsLock = 7;
$.ig.Key.prototype.escape = 8;
$.ig.Key.prototype.space = 9;
$.ig.Key.prototype.pageUp = 10;
$.ig.Key.prototype.pageDown = 11;
$.ig.Key.prototype.end = 12;
$.ig.Key.prototype.home = 13;
$.ig.Key.prototype.left = 14;
$.ig.Key.prototype.up = 15;
$.ig.Key.prototype.right = 16;
$.ig.Key.prototype.down = 17;
$.ig.Key.prototype.insert = 18;
$.ig.Key.prototype.del = 19;
$.ig.Key.prototype.d0 = 20;
$.ig.Key.prototype.d1 = 21;
$.ig.Key.prototype.d2 = 22;
$.ig.Key.prototype.d3 = 23;
$.ig.Key.prototype.d4 = 24;
$.ig.Key.prototype.d5 = 25;
$.ig.Key.prototype.d6 = 26;
$.ig.Key.prototype.d7 = 27;
$.ig.Key.prototype.d8 = 28;
$.ig.Key.prototype.d9 = 29;
$.ig.Key.prototype.a = 30;
$.ig.Key.prototype.b = 31;
$.ig.Key.prototype.c = 32;
$.ig.Key.prototype.d = 33;
$.ig.Key.prototype.e = 34;
$.ig.Key.prototype.f = 35;
$.ig.Key.prototype.g = 36;
$.ig.Key.prototype.h = 37;
$.ig.Key.prototype.i = 38;
$.ig.Key.prototype.j = 39;
$.ig.Key.prototype.k = 40;
$.ig.Key.prototype.l = 41;
$.ig.Key.prototype.m = 42;
$.ig.Key.prototype.n = 43;
$.ig.Key.prototype.o = 44;
$.ig.Key.prototype.p = 45;
$.ig.Key.prototype.q = 46;
$.ig.Key.prototype.r = 47;
$.ig.Key.prototype.s = 48;
$.ig.Key.prototype.t = 49;
$.ig.Key.prototype.u = 50;
$.ig.Key.prototype.v = 51;
$.ig.Key.prototype.w = 52;
$.ig.Key.prototype.x = 53;
$.ig.Key.prototype.y = 54;
$.ig.Key.prototype.z = 55;
$.ig.Key.prototype.f1 = 56;
$.ig.Key.prototype.f2 = 57;
$.ig.Key.prototype.f3 = 58;
$.ig.Key.prototype.f4 = 59;
$.ig.Key.prototype.f5 = 60;
$.ig.Key.prototype.f6 = 61;
$.ig.Key.prototype.f7 = 62;
$.ig.Key.prototype.f8 = 63;
$.ig.Key.prototype.f9 = 64;
$.ig.Key.prototype.f10 = 65;
$.ig.Key.prototype.f11 = 66;
$.ig.Key.prototype.f12 = 67;
$.ig.Key.prototype.numPad0 = 68;
$.ig.Key.prototype.numPad1 = 69;
$.ig.Key.prototype.numPad2 = 70;
$.ig.Key.prototype.numPad3 = 71;
$.ig.Key.prototype.numPad4 = 72;
$.ig.Key.prototype.numPad5 = 73;
$.ig.Key.prototype.numPad6 = 74;
$.ig.Key.prototype.numPad7 = 75;
$.ig.Key.prototype.numPad8 = 76;
$.ig.Key.prototype.numPad9 = 77;
$.ig.Key.prototype.multiply = 78;
$.ig.Key.prototype.add = 79;
$.ig.Key.prototype.subtract = 80;
$.ig.Key.prototype.decimal = 81;
$.ig.Key.prototype.divide = 82;
$.ig.Key.prototype.unknown = 255;

$.ig.NotifyCollectionChangedAction.prototype.add = 0;
$.ig.NotifyCollectionChangedAction.prototype.remove = 1;
$.ig.NotifyCollectionChangedAction.prototype.replace = 2;
$.ig.NotifyCollectionChangedAction.prototype.reset = 4;

$.ig.DependencyProperty.prototype.unsetValue = new $.ig.UnsetValue();

$.ig.DependencyPropertiesCollection.prototype.__instance = null;

} (jQuery));



(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine(["EventProxy:a", 
"Object:b", 
"Type:c", 
"Boolean:d", 
"ValueType:e", 
"Void:f", 
"IConvertible:g", 
"IFormatProvider:h", 
"Number:i", 
"String:j", 
"IComparable:k", 
"Number:l", 
"IComparable$1:m", 
"IEquatable$1:n", 
"Number:o", 
"Number:p", 
"Number:q", 
"NumberStyles:r", 
"Enum:s", 
"Array:t", 
"IList:u", 
"ICollection:v", 
"IEnumerable:w", 
"IEnumerator:x", 
"NotSupportedException:y", 
"Error:z", 
"Number:aa", 
"String:ab", 
"StringComparison:ac", 
"RegExp:ad", 
"CultureInfo:ae", 
"DateTimeFormatInfo:af", 
"Calendar:ag", 
"Date:ah", 
"Number:ai", 
"DayOfWeek:aj", 
"DateTimeKind:ak", 
"CalendarWeekRule:al", 
"NumberFormatInfo:am", 
"CompareInfo:an", 
"CompareOptions:ao", 
"IEnumerable$1:ap", 
"IEnumerator$1:aq", 
"IDisposable:ar", 
"StringSplitOptions:as", 
"Number:at", 
"Number:au", 
"Number:av", 
"Number:aw", 
"Number:ax", 
"Number:ay", 
"Assembly:az", 
"Stream:a0", 
"SeekOrigin:a1", 
"RuntimeTypeHandle:a2", 
"MethodInfo:a3", 
"MethodBase:a4", 
"MemberInfo:a5", 
"ParameterInfo:a6", 
"TypeCode:a7", 
"ConstructorInfo:a8", 
"PropertyInfo:a9", 
"Rect:ba", 
"Size:bb", 
"Point:bc", 
"Math:bd", 
"ModifierKeys:be", 
"Func$2:bf", 
"MulticastDelegate:bg", 
"IntPtr:bh", 
"MouseWheelHandler:bi", 
"Delegate:bj", 
"Interlocked:bk", 
"GestureHandler:bl", 
"ZoomGestureHandler:bm", 
"FlingGestureHandler:bn", 
"ContactHandler:bo", 
"TouchHandler:bp", 
"MouseOverHandler:bq", 
"MouseHandler:br", 
"KeyHandler:bs", 
"Key:bt", 
"BaseDOMEventProxy:bu", 
"JQueryObject:bv", 
"Element:bw", 
"ElementAttributeCollection:bx", 
"ElementCollection:by", 
"WebStyle:bz", 
"ElementNodeType:b0", 
"Document:b1", 
"EventListener:b2", 
"IElementEventHandler:b3", 
"ElementEventHandler:b4", 
"ElementAttribute:b5", 
"JQueryPosition:b6", 
"JQueryCallback:b7", 
"JQueryEvent:b8", 
"JQueryUICallback:b9", 
"DOMEventProxy:ca", 
"MSGesture:cb", 
"Script:cc", 
"JQuery:cd", 
"JQueryDeferred:ce", 
"JQueryPromise:cf", 
"Action:cg", 
"Action$1:ch", 
"Callback:ci", 
"window:cj", 
"MouseEventArgs:ck", 
"EventArgs:cl", 
"UIElement:cm", 
"DependencyObject:cn", 
"Dictionary:co", 
"DependencyProperty:cp", 
"PropertyMetadata:cq", 
"PropertyChangedCallback:cr", 
"DependencyPropertyChangedEventArgs:cs", 
"DependencyPropertiesCollection:ct", 
"UnsetValue:cu", 
"Binding:cv", 
"PropertyPath:cw", 
"Transform:cx", 
"CanvasGestureDOMEventProxy:cy", 
"List$1:cz", 
"IList$1:c0", 
"ICollection$1:c1", 
"IArray:c2", 
"IArrayList:c3", 
"Array:c4", 
"CompareCallback:c5", 
"Func$3:c6", 
"Comparer$1:c7", 
"IComparer:c8", 
"IComparer$1:c9", 
"DefaultComparer$1:da", 
"Comparison$1:db", 
"ReadOnlyCollection$1:dc", 
"Predicate$1:dd", 
"NotImplementedException:de", 
"TouchPointInfo:df", 
"DOMExecutionContext:dg", 
"IExecutionContext:dh", 
"ExecutionContextExecuteCallback:di", 
"TouchGestureRecognizer:dj", 
"TouchGestureState:dk", 
"TouchVelocityTracker:dl", 
"TouchHistoryItem:dm", 
"TouchVelocityReading:dn", 
"TouchGestureEventHandler:dp", 
"TouchGestureEventArgs:dq", 
"CancelableTouchGestureEventHandler:dr", 
"IFastItemColumnInternal:dt", 
"IFastItemColumnPropertyName:du", 
"IFastItemColumn$1:dv", 
"FastItemColumn:dw", 
"IFastItemsSource:dx", 
"EventHandler$1:dy", 
"FastItemsSourceEventArgs:dz", 
"FastItemsSourceEventAction:d0", 
"NotifyCollectionChangedEventArgs:d1", 
"NotifyCollectionChangedAction:d2", 
"FastReflectionHelper:d3", 
"FastItemDateTimeColumn:d4", 
"FastItemObjectColumn:d5", 
"FastItemIntColumn:d6", 
"FastItemsSource:d7", 
"Dictionary$2:d8", 
"IDictionary$2:d9", 
"IDictionary:ea", 
"KeyValuePair$2:eb", 
"Enumerable:ec", 
"Thread:ed", 
"ThreadStart:ee", 
"IOrderedEnumerable$1:ef", 
"SortedList$1:eg", 
"ArgumentNullException:eh", 
"IEqualityComparer$1:ei", 
"EqualityComparer$1:ej", 
"IEqualityComparer:ek", 
"DefaultEqualityComparer$1:el", 
"InvalidOperationException:em", 
"ArgumentException:en", 
"ColumnReference:eo", 
"FastItemsSourceReference:ep", 
"IFastItemsSourceProvider:eq", 
"IRenderer:er", 
"Rectangle:es", 
"Shape:et", 
"FrameworkElement:eu", 
"Visibility:ev", 
"Style:ew", 
"Brush:ex", 
"Color:ey", 
"DoubleCollection:ez", 
"Path:e0", 
"Geometry:e1", 
"GeometryType:e2", 
"TextBlock:e3", 
"Polygon:e4", 
"PointCollection:e5", 
"Polyline:e6", 
"DataTemplateRenderInfo:e7", 
"DataTemplatePassInfo:e8", 
"ContentControl:e9", 
"Control:fa", 
"Thickness:fb", 
"HorizontalAlignment:fc", 
"VerticalAlignment:fd", 
"DataTemplate:fe", 
"DataTemplateRenderHandler:ff", 
"DataTemplateMeasureHandler:fg", 
"DataTemplateMeasureInfo:fh", 
"DataTemplatePassHandler:fi", 
"Line:fj", 
"FontInfo:fk", 
"CanvasRenderScheduler:fl", 
"ISchedulableRender:fm", 
"RenderingContext:fn", 
"CanvasViewRenderer:fo", 
"CanvasContext2D:fp", 
"CanvasContext:fq", 
"TextMetrics:fr", 
"ImageData:fs", 
"CanvasElement:ft", 
"Gradient:fu", 
"LinearGradientBrush:fv", 
"GradientStop:fw", 
"GeometryGroup:fx", 
"GeometryCollection:fy", 
"FillRule:fz", 
"PathGeometry:f0", 
"PathFigureCollection:f1", 
"LineGeometry:f2", 
"RectangleGeometry:f3", 
"EllipseGeometry:f4", 
"ArcSegment:f5", 
"PathSegment:f6", 
"PathSegmentType:f7", 
"SweepDirection:f8", 
"PathFigure:f9", 
"PathSegmentCollection:ga", 
"LineSegment:gb", 
"PolyLineSegment:gc", 
"BezierSegment:gd", 
"PolyBezierSegment:ge", 
"GeometryUtil:gf", 
"Tuple$2:gg", 
"TransformGroup:gh", 
"TransformCollection:gi", 
"TranslateTransform:gj", 
"RotateTransform:gk", 
"ScaleTransform:gl", 
"INotifyPropertyChanged:gn", 
"PropertyChangedEventHandler:go", 
"PropertyChangedEventArgs:gp", 
"IOverviewPlusDetailControl:gq", 
"InteractionState:gr", 
"OverviewPlusDetailPaneMode:gt", 
"PropertyChangedEventArgs$1:gu", 
"XamOverviewPlusDetailPane:gv", 
"XamOverviewPlusDetailPaneView:gw", 
"XamOverviewPlusDetailPaneViewManager:gx", 
"DivElement:gy", 
"DoubleAnimator:gz", 
"EasingFunctionHandler:g0", 
"ImageElement:g1", 
"RectUtil:g2", 
"MathUtil:g3", 
"RuntimeHelpers:g4", 
"RuntimeFieldHandle:g5", 
"BrushUtil:g6", 
"ColorUtil:g7", 
"Random:g8", 
"InterpolationMode:g9", 
"BrushCollection:ha", 
"ObservableCollection$1:hb", 
"INotifyCollectionChanged:hc", 
"NotifyCollectionChangedEventHandler:hd", 
"CssHelper:he", 
"CssGradientUtil:hf", 
"FontUtil:hg", 
"Flattener:hi", 
"Stack$1:hj", 
"ReverseArrayEnumerator$1:hk", 
"SpiralTodo:hl", 
"FlattenerSettings:hm", 
"Clipper:hn", 
"EdgeClipper:ho", 
"LeftClipper:hp", 
"BottomClipper:hq", 
"RightClipper:hr", 
"TopClipper:hs", 
"Func$1:ib", 
"Debug:ic", 
"StringBuilder:ih", 
"Environment:ii", 
"EasingFunctions:im", 
"TrendCalculators:io", 
"TrendLineType:ip", 
"UnknownValuePlotting:iq", 
"RectChangedEventArgs:iw", 
"RectChangedEventHandler:ix", 
"LinkedList$1:i3", 
"LinkedListNode$1:i4", 
"ArrayUtil:jc", 
"IIndexedPool$1:jd", 
"IPool$1:je", 
"Panel:jg", 
"UIElementCollection:jh", 
"Numeric:jl", 
"LeastSquaresFit:jm", 
"PolygonUtil:jo", 
"Pool$1:jp", 
"IHashPool$2:jq", 
"HashPool$2:jr", 
"IVisualData:jt", 
"PrimitiveVisualDataList:ju", 
"PrimitiveVisualData:jv", 
"PrimitiveAppearanceData:jw", 
"BrushAppearanceData:jx", 
"AppearanceHelper:jy", 
"LinearGradientBrushAppearanceData:jz", 
"GradientStopAppearanceData:j0", 
"SolidBrushAppearanceData:j1", 
"GeometryData:j2", 
"GetPointsSettings:j3", 
"EllipseGeometryData:j4", 
"RectangleGeometryData:j5", 
"LineGeometryData:j6", 
"PathGeometryData:j7", 
"PathFigureData:j8", 
"SegmentData:j9", 
"LineSegmentData:ka", 
"PolylineSegmentData:kb", 
"ArcSegmentData:kc", 
"PolyBezierSegmentData:kd", 
"BezierSegmentData:ke", 
"LabelAppearanceData:kf", 
"ShapeTags:kg", 
"RectangleVisualData:kk", 
"PolyLineVisualData:km", 
"PolygonVisualData:kn", 
"PathVisualData:ko", 
"AbstractEnumerable:kp", 
"AbstractEnumerator:kq", 
"GenericEnumerable$1:kr", 
"GenericEnumerator$1:ks"]);


$.ig.util.defType('TouchGestureState', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Pan";
			case 2: return "Zoom";
			case 3: return "Hold";
			case 4: return "PendingPan";
			case 5: return "Flinging";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TouchGestureState', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('InteractionState', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "DragZoom";
			case 2: return "DragPan";
			case 3: return "Auto";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('InteractionState', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('FastItemsSourceEventAction', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Remove";
			case 1: return "Insert";
			case 2: return "Replace";
			case 3: return "Change";
			case 4: return "Reset";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('FastItemsSourceEventAction', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('UnknownValuePlotting', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "LinearInterpolate";
			case 1: return "DontPlot";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('UnknownValuePlotting', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('TrendLineType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "LinearFit";
			case 2: return "QuadraticFit";
			case 3: return "CubicFit";
			case 4: return "QuarticFit";
			case 5: return "QuinticFit";
			case 6: return "LogarithmicFit";
			case 7: return "ExponentialFit";
			case 8: return "PowerLawFit";
			case 9: return "SimpleAverage";
			case 10: return "ExponentialAverage";
			case 11: return "ModifiedAverage";
			case 12: return "CumulativeAverage";
			case 13: return "WeightedAverage";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TrendLineType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('InterpolationMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "RGB";
			case 1: return "HSV";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('InterpolationMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('OverviewPlusDetailPaneMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Minimal";
			case 1: return "Full";
			case 2: return "Compact";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('OverviewPlusDetailPaneMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('EventProxy', 'Object', {
	init: function () {
		this.__isInteractionDisabled = false;
		$.ig.Object.prototype.init.call(this);
	},
	onMouseWheel: null,
	onPinchStarted: null,
	onPinchDelta: null,
	onGestureCompleted: null,
	onZoomStarted: null,
	onZoomDelta: null,
	onZoomCompleted: null,
	onFlingStarted: null,
	onContactStarted: null,
	onDragStarted: null,
	onContactMoved: null,
	onDragDelta: null,
	onContactCompleted: null,
	onDragCompleted: null,
	onMouseLeave: null,
	onMouseOver: null,
	onMouseEnter: null,
	onMouseDown: null,
	onMouseUp: null,
	onDoubleTap: null,
	onHold: null,
	onKeyDown: null,
	onKeyUp: null,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_currentModifiers: 0,
	currentModifiers: function (value) {
		if (arguments.length === 1) {
			this._currentModifiers = value;
			return value;
		} else {
			return this._currentModifiers;
		}
	}
	,
	_rightButton: false,
	rightButton: function (value) {
		if (arguments.length === 1) {
			this._rightButton = value;
			return value;
		} else {
			return this._rightButton;
		}
	}
	,
	_shouldInteract: null,
	shouldInteract: function (value) {
		if (arguments.length === 1) {
			this._shouldInteract = value;
			return value;
		} else {
			return this._shouldInteract;
		}
	}
	,
	clone: function () {
	}
	,
	destroy: function () {
	}
	,
	supportsNonIsometricZoom: function () {
		return false;
	}
	,
	_originalEvent: null,
	originalEvent: function (value) {
		if (arguments.length === 1) {
			this._originalEvent = value;
			return value;
		} else {
			return this._originalEvent;
		}
	}
	,
	raiseOnMouseWheel: function (point, delta) {
		if (this.onMouseWheel != null && !this.isInteractionDisabled()) {
			return this.onMouseWheel(point, delta);
		}
		return false;
	}
	,
	raiseOnPinchStarted: function (point, scale) {
		if (this.onPinchStarted != null && !this.isInteractionDisabled()) {
			this.onPinchStarted(point, scale);
		}
	}
	,
	raiseOnZoomStarted: function (point, scaleX, scaleY, isoScaleDelta) {
		if (this.onZoomStarted != null && !this.isInteractionDisabled()) {
			this.onZoomStarted(point, scaleX, scaleY, isoScaleDelta);
		}
	}
	,
	raiseOnFlingStarted: function (point, velocityX, velocityY) {
		if (this.onFlingStarted != null && !this.isInteractionDisabled()) {
			return this.onFlingStarted(point, velocityX, velocityY);
		}
		return true;
	}
	,
	raiseOnPinchDelta: function (point, scale) {
		if (this.onPinchDelta != null && !this.isInteractionDisabled()) {
			this.onPinchDelta(point, scale);
		}
	}
	,
	raiseOnZoomDelta: function (point, scaleX, scaleY, isoScaleDelta) {
		if (this.onZoomDelta != null && !this.isInteractionDisabled()) {
			this.onZoomDelta(point, scaleX, scaleY, isoScaleDelta);
		}
	}
	,
	raiseOnZoomCompleted: function (point, scaleX, scaleY, isoScaleDelta) {
		if (this.onZoomCompleted != null && !this.isInteractionDisabled()) {
			this.onZoomCompleted(point, scaleX, scaleY, isoScaleDelta);
		}
	}
	,
	raiseOnGestureCompleted: function (point, scale) {
		if (this.onGestureCompleted != null && !this.isInteractionDisabled()) {
			this.onGestureCompleted(point, scale);
		}
	}
	,
	raiseOnContactStarted: function (point, isFinger) {
		if (this.onContactStarted != null && !this.isInteractionDisabled()) {
			this.onContactStarted(point, isFinger);
		}
	}
	,
	raiseOnDragStarted: function (point) {
		if (this.onDragStarted != null && !this.isInteractionDisabled()) {
			this.onDragStarted(point);
		}
	}
	,
	raiseOnContactMoved: function (point, isFinger) {
		if (this.onContactMoved != null && !this.isInteractionDisabled()) {
			this.onContactMoved(point, isFinger);
		}
	}
	,
	raiseOnDragDelta: function (point) {
		if (this.onDragDelta != null && !this.isInteractionDisabled()) {
			this.onDragDelta(point);
		}
	}
	,
	raiseOnContactCompleted: function (point, isFinger) {
		if (this.onContactCompleted != null && !this.isInteractionDisabled()) {
			this.onContactCompleted(point, isFinger);
		}
	}
	,
	raiseOnDragCompleted: function (point) {
		if (this.onDragCompleted != null && !this.isInteractionDisabled()) {
			this.onDragCompleted(point);
		}
	}
	,
	raiseOnMouseLeave: function (point) {
		if (this.onMouseLeave != null && !this.isInteractionDisabled()) {
			this.onMouseLeave(point);
		}
	}
	,
	raiseOnMouseOver: function (point, onMouseMove, isFinger) {
		if (this.onMouseOver != null && !this.isInteractionDisabled()) {
			this.onMouseOver(point, onMouseMove, isFinger);
		}
	}
	,
	raiseOnMouseEnter: function (point) {
		if (this.onMouseEnter != null && !this.isInteractionDisabled()) {
			this.onMouseEnter(point);
		}
	}
	,
	raiseOnMouseDown: function (point) {
		if (this.onMouseDown != null && !this.isInteractionDisabled()) {
			this.onMouseDown(point);
		}
	}
	,
	raiseOnMouseUp: function (point) {
		if (this.onMouseUp != null && !this.isInteractionDisabled()) {
			this.onMouseUp(point);
		}
	}
	,
	raiseOnKeyDown: function (key) {
		if (this.onKeyDown != null && !this.isInteractionDisabled()) {
			return this.onKeyDown(key);
		}
		return false;
	}
	,
	raiseOnKeyUp: function (key) {
		if (this.onKeyUp != null && !this.isInteractionDisabled()) {
			return this.onKeyUp(key);
		}
		return false;
	}
	,
	raiseOnDoubleTap: function (point) {
		if (this.onDoubleTap != null && !this.isInteractionDisabled()) {
			this.onDoubleTap(point);
		}
	}
	,
	raiseOnHold: function (point) {
		if (this.onHold != null && !this.isInteractionDisabled()) {
			this.onHold(point);
		}
	}
	,
	getSourceOffsets: function () {
	}
	,
	__isInteractionDisabled: false,
	isInteractionDisabled: function (value) {
		if (arguments.length === 1) {
			this.__isInteractionDisabled = value;
			this.onIsInteractionDisabledChanged();
			return value;
		} else {
			return this.__isInteractionDisabled;
		}
	}
	,
	_deferredTouchStartMode: false,
	deferredTouchStartMode: function (value) {
		if (arguments.length === 1) {
			this._deferredTouchStartMode = value;
			return value;
		} else {
			return this._deferredTouchStartMode;
		}
	}
	,
	_shouldInteractForDirection: null,
	shouldInteractForDirection: function (value) {
		if (arguments.length === 1) {
			this._shouldInteractForDirection = value;
			return value;
		} else {
			return this._shouldInteractForDirection;
		}
	}
	,
	onIsInteractionDisabledChanged: function () {
	}
	,
	bindToSource: function (source, sourceId) {
	}
	,
	unbindFromSource: function (source, sourceId) {
	}
	,
	$type: new $.ig.Type('EventProxy', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('BaseDOMEventProxy', 'EventProxy', {
	init: function () {
		this.__touchCaptureEnabled = false;
		this.__mouseX = 0;
		this.__mouseY = 0;
		this.__containerMouseX = 0;
		this.__containerMouseY = 0;
		this.__numTouches = 0;
		this.__suppressMouseEvents = false;
		this.__suppressId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
		this.__touchStartDeferred = false;
		this.__mouseCaptured = false;
		$.ig.EventProxy.prototype.init.call(this);
	},
	_eventSource: null,
	eventSource: function (value) {
		if (arguments.length === 1) {
			this._eventSource = value;
			return value;
		} else {
			return this._eventSource;
		}
	}
	,
	clone: function () {
		var ret = new $.ig.DOMEventProxy(this.eventSource());
		ret.deferredTouchStartMode(this.deferredTouchStartMode());
		ret.shouldInteractForDirection(this.shouldInteractForDirection());
		return ret;
	}
	,
	preventDefault: function (e) {
		if (!this.isInteractionDisabled()) {
			if (this.isCancelable(e)) {
				e.preventDefault();
			}
		}
	}
	,
	isCancelable: function (e_) {
		return e_.originalEvent.cancelable || e_.originalEvent.cancelable == undefined;
	}
	,
	__touchCaptureEnabled: false,
	enableTouchCapture: function () {
		var source_ = this.eventSource()[0];
		$.ig.BaseDOMEventProxy.prototype.grabTouches(source_);
	}
	,
	grabTouches: function (source_) {
		if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			source_.style.touchAction = 'none';
		} else {
			source_.style.msTouchAction = 'none';
		}
		source_.style.msUserSelect = 'none';
		source_.style.webkitTouchCallout = 'none';
		source_.style.webkitUserSelect = 'none';
		source_.style.khtmlUserSelect = 'none';
		source_.style.mozUserSelect = 'none';
		source_.style.userSelect = 'none';
	}
	,
	deferTouches: function (source_) {
		if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			source_.style.touchAction = 'auto';
		} else {
			source_.style.msTouchAction = 'auto';
		}
		source_.style.msUserSelect = 'auto';
		source_.style.webkitTouchCallout = 'none';
		source_.style.webkitUserSelect = 'auto';
		source_.style.khtmlUserSelect = 'auto';
		source_.style.mozUserSelect = 'auto';
		source_.style.userSelect = 'auto';
	}
	,
	disableTouchCapture: function () {
		var source_ = this.eventSource()[0];
		$.ig.BaseDOMEventProxy.prototype.deferTouches(source_);
	}
	,
	onIsInteractionDisabledChanged: function () {
		$.ig.EventProxy.prototype.onIsInteractionDisabledChanged.call(this);
		if (!this.isInteractionDisabled()) {
			this.enableTouchCapture();
		} else {
			this.disableTouchCapture();
		}
	}
	,
	getTridentVersion: function () {
		var ver_ = -1;
		var matchIE_ = /Trident\/([\d.]+)/;
		if (matchIE_.exec(navigator.userAgent) != null) {
			ver_ = parseFloat(RegExp.$1);
		}
		return ver_;
	}
	,
	getEdgeVersion: function () {
		var ver_ = -1;
		var matchIE_ = /Edge\/([\d.]+)/;
		if (matchIE_.exec(navigator.userAgent) != null) {
			ver_ = parseFloat(RegExp.$1);
		}
		return ver_;
	}
	,
	fixEvent: function (e_) {
		var ieHack = $.ig.BaseDOMEventProxy.prototype.tridentVersion >= 6;
		var oe_ = e_.originalEvent;
		if (((typeof e_.pageX == 'undefined') || ieHack) && oe_.clientX != null) {
			var od_ = e_.target.ownerDocument;
			var ed_ = od_ ? od_ : document;
			var doc_ = ed_.documentElement;
			var body_ = ed_.body;
			var clientX_ = oe_.clientX;
			var clientY_ = oe_.clientY;
			var scrollLeft_ = doc_ && doc_.scrollLeft || body_ && body_.scrollLeft || 0;
			var scrollTop_ = doc_ && doc_.scrollTop || body_ && body_.scrollTop || 0;
			var clientLeft_ = doc_ && doc_.clientLeft || body_ && body_.clientLeft || 0;
			var clientTop_ = doc_ && doc_.clientTop || body_ && body_.clientTop || 0;
			e_.pageX = clientX_ + (scrollLeft_ - clientLeft_);
			e_.pageY = clientY_ + (scrollTop_ - clientTop_);
		}
		if (!e_.pageX) {
			e_.pageX = e_.originalEvent.pageX;
		}
		if (!e_.pageY) {
			e_.pageY = e_.originalEvent.pageY;
		}
	}
	,
	getOffset: function (source) {
		var ieHack = $.ig.BaseDOMEventProxy.prototype.tridentVersion >= 6;
		var source_ = source[0];
		var d_ = source_.ownerDocument;
		var doc_ = d_ ? d_.documentElement : null;
		var z_ = doc_ ? doc_.msContentZoomFactor : null;
		var body_ = doc_.body;
		if (z_ && z_ > 1 || ieHack) {
			var rect_ = source_.getBoundingClientRect();
			var x_ = rect_.left;
			var y_ = rect_.top;
			var scrollLeft_ = doc_ && doc_.scrollLeft || body_ && body_.scrollLeft || 0;
			var scrollTop_ = doc_ && doc_.scrollTop || body_ && body_.scrollTop || 0;
			var clientLeft_ = doc_ && doc_.clientLeft || body_ && body_.clientLeft || 0;
			var clientTop_ = doc_ && doc_.clientTop || body_ && body_.clientTop || 0;
			var left = x_ + scrollLeft_ - clientLeft_;
			var top = y_ + scrollTop_ - clientTop_;
			return new $.ig.Rect(0, left, top, 0, 0);
		} else {
			var offset = source.offset();
			return new $.ig.Rect(0, offset.left, offset.top, 0, 0);
		}
	}
	,
	__mouseX: 0,
	__mouseY: 0,
	__containerMouseX: 0,
	__containerMouseY: 0,
	__numTouches: 0,
	_mousePoint: null,
	mousePoint: function (value) {
		if (arguments.length === 1) {
			this._mousePoint = value;
			return value;
		} else {
			return this._mousePoint;
		}
	}
	,
	_containerMousePoint: null,
	containerMousePoint: function (value) {
		if (arguments.length === 1) {
			this._containerMousePoint = value;
			return value;
		} else {
			return this._containerMousePoint;
		}
	}
	,
	numTouches: function (value) {
		if (arguments.length === 1) {
			this.__numTouches = value;
			return value;
		} else {
			return this.__numTouches;
		}
	}
	,
	updateMousePosition: function (e) {
		this.originalEvent(e);
		$.ig.BaseDOMEventProxy.prototype.fixEvent(e);
		var offset = $.ig.BaseDOMEventProxy.prototype.getOffset(this.eventSource());
		this.__mouseX = e.pageX - offset.left();
		this.__mouseY = e.pageY - offset.top();
		this.__containerMouseX = this.__mouseX - this.viewport().left();
		this.__containerMouseY = this.__mouseY - this.viewport().top();
		this.mousePoint({ __x: this.__mouseX, __y: this.__mouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.containerMousePoint({ __x: this.__containerMouseX, __y: this.__containerMouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	updateTouchPosition: function (e_) {
		this.originalEvent(e_);
		$.ig.BaseDOMEventProxy.prototype.fixEvent(e_);
		if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			var pageX = e_.pageX;
			var pageY = e_.pageY;
			var offset = $.ig.BaseDOMEventProxy.prototype.getOffset(this.eventSource());
			this.__mouseX = pageX - offset.left();
			this.__mouseY = pageY - offset.top();
		} else {
			this.__numTouches = 0;
			if (!e_.originalEvent.targetTouches || e_.originalEvent.targetTouches.length < 1) { return; };
			this.__numTouches = e_.originalEvent.targetTouches.length;
			var pageX1 = e_.originalEvent.targetTouches[0].pageX;
			var pageY1 = e_.originalEvent.targetTouches[0].pageY;
			var offset1 = $.ig.BaseDOMEventProxy.prototype.getOffset(this.eventSource());
			this.__mouseX = pageX1 - offset1.left();
			this.__mouseY = pageY1 - offset1.top();
		}
		this.__containerMouseX = this.__mouseX - this.viewport().left();
		this.__containerMouseY = this.__mouseY - this.viewport().top();
		this.mousePoint({ __x: this.__mouseX, __y: this.__mouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.containerMousePoint({ __x: this.__containerMouseX, __y: this.__containerMouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	canvasMouseScroll: function (e_) {
		this.updateModifiers(e_);
		if (this.shouldInteract()(this.mousePoint())) {
			var delta_ = 0;
			if (e_.wheelDelta) { delta_ = e_.wheelDelta/120; };
			if (e_.originalEvent && e_.originalEvent.wheelDelta) { delta_ = e_.originalEvent.wheelDelta/120; };
			if (e_.detail) { delta_ = -e_.detail/3; };
			if (e_.originalEvent && e_.originalEvent.detail) { delta_ = -e_.originalEvent.detail/3; };
			delta_ = delta_ / 10;
			var handled = this.raiseOnMouseWheel(this.containerMousePoint(), delta_);
			if (handled) {
				this.preventDefault(e_);
			}
		}
	}
	,
	__suppressMouseEvents: false,
	__suppressId: 0,
	endMouseSuppress: function () {
		if (this.__suppressMouseEvents) {
			if (this.__suppressId == $.ig.BaseDOMEventProxy.prototype.nullTimer) {
				this.__suppressId = window.setTimeout(this.doEndSuppress.runOn(this), 500);
			} else {
				window.clearTimeout(this.__suppressId);
				this.__suppressId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
				this.__suppressId = window.setTimeout(this.doEndSuppress.runOn(this), 500);
			}
		}
	}
	,
	beginMouseSuppress: function () {
		this.__suppressMouseEvents = true;
		if (this.__suppressId != $.ig.BaseDOMEventProxy.prototype.nullTimer) {
			window.clearTimeout(this.__suppressId);
			this.__suppressId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
		}
	}
	,
	doEndSuppress: function () {
		this.__suppressMouseEvents = false;
	}
	,
	_mouseIsOver: false,
	mouseIsOver: function (value) {
		if (arguments.length === 1) {
			this._mouseIsOver = value;
			return value;
		} else {
			return this._mouseIsOver;
		}
	}
	,
	__touchStartDeferred: false,
	touchStartDeferred: function (value) {
		if (arguments.length === 1) {
			this.__touchStartDeferred = value;
			return value;
		} else {
			return this.__touchStartDeferred;
		}
	}
	,
	canvasMouseLeave: function (e) {
		if (this.__touchStartDeferred || this.__suppressMouseEvents) {
			return;
		}
		this.updateMousePosition(e);
		if (this.mouseIsOver()) {
			this.mouseIsOver(false);
			this.raiseOnMouseLeave(this.containerMousePoint());
		}
	}
	,
	canvasMouseMove: function (e) {
		if (this.__touchStartDeferred || this.__suppressMouseEvents) {
			return;
		}
		this.updateMousePosition(e);
		this.updateModifiers(e);
		var me = new $.ig.MouseEventArgs();
		me.position(this.mousePoint());
		if (this.shouldInteract()(this.mousePoint())) {
			if (!this.mouseIsOver()) {
				this.mouseIsOver(true);
				this.raiseOnMouseEnter(this.mousePoint());
			}
			this.raiseOnMouseOver(this.mousePoint(), true, false);
			this.raiseOnContactMoved(this.containerMousePoint(), false);
		} else if (this.mouseIsOver()) {
			this.canvasMouseLeave(e);
		}
	}
	,
	__mouseCaptured: false,
	canvasMouseDown: function (e) {
		if (this.__touchStartDeferred || this.__suppressMouseEvents) {
			return;
		}
		this.eventSource().focus();
		this.updateMousePosition(e);
		this.updateModifiers(e);
		if (this.shouldInteract()(this.mousePoint())) {
			this.__mouseCaptured = true;
			this.raiseOnMouseDown(this.mousePoint());
			this.raiseOnContactStarted(this.containerMousePoint(), false);
			this.preventDefault(e);
		}
	}
	,
	windowMouseUp: function (e) {
		if (this.__touchStartDeferred || this.__suppressMouseEvents) {
			return;
		}
		if (this.__mouseCaptured) {
			this.canvasMouseUp(e);
		}
	}
	,
	canvasMouseUp: function (e) {
		if (this.__touchStartDeferred || this.__suppressMouseEvents) {
			return;
		}
		this.updateModifiers(e);
		this.__mouseCaptured = false;
		this.raiseOnMouseUp(this.mousePoint());
		this.raiseOnContactCompleted(this.containerMousePoint(), false);
		this.preventDefault(e);
	}
	,
	canvasKeyDown: function (e) {
		this.canvasKeyEvent(e, true);
	}
	,
	canvasKeyUp: function (e) {
		this.canvasKeyEvent(e, false);
	}
	,
	getKey: function (e) {
		var downKey = $.ig.Key.prototype.none;
		switch (e.which) {
			case 33:
				downKey = $.ig.Key.prototype.pageUp;
				break;
			case 34:
				downKey = $.ig.Key.prototype.pageDown;
				break;
			case 36:
				downKey = $.ig.Key.prototype.home;
				break;
			case 37:
				downKey = $.ig.Key.prototype.left;
				break;
			case 38:
				downKey = $.ig.Key.prototype.up;
				break;
			case 39:
				downKey = $.ig.Key.prototype.right;
				break;
			case 40:
				downKey = $.ig.Key.prototype.down;
				break;
			case 9:
				downKey = $.ig.Key.prototype.tab;
				break;
			case 32:
				downKey = $.ig.Key.prototype.space;
				break;
			case 13:
				downKey = $.ig.Key.prototype.enter;
				break;
			case 27:
				downKey = $.ig.Key.prototype.escape;
				break;
			case 16:
				downKey = $.ig.Key.prototype.shift;
				break;
			case 17:
				downKey = $.ig.Key.prototype.ctrl;
				break;
			case 18:
				downKey = $.ig.Key.prototype.alt;
				break;
			default:
				if (112 <= e.which && e.which <= 123) {
					downKey = ($.ig.Key.prototype.f1 + e.which - 112);
				}
				break;
		}
		return downKey;
	}
	,
	canvasKeyEvent: function (e, isDown) {
		var downKey = $.ig.BaseDOMEventProxy.prototype.getKey(e);
		var send = downKey != $.ig.Key.prototype.none;
		this.updateModifiers(e);
		if (send && this.shouldInteract()(this.mousePoint())) {
			var handled = false;
			if (isDown) {
				handled = this.raiseOnKeyDown(downKey);
			} else {
				handled = this.raiseOnKeyUp(downKey);
			}
			if (handled) {
				this.preventDefault(e);
			}
		}
	}
	,
	updateModifiers: function (e) {
		this.originalEvent(e);
		this.currentModifiers($.ig.ModifierKeys.prototype.none);
		if (e.shiftKey) {
			this.currentModifiers(this.currentModifiers() | $.ig.ModifierKeys.prototype.shift);
		}
		if (e.altKey) {
			this.currentModifiers(this.currentModifiers() | $.ig.ModifierKeys.prototype.alt);
		}
		if (e.ctrlKey) {
			this.currentModifiers(this.currentModifiers() | $.ig.ModifierKeys.prototype.control);
		}
		this.rightButton(e.button == 2);
	}
	,
	getSourceOffsets: function () {
		var offset = $.ig.BaseDOMEventProxy.prototype.getOffset(this.eventSource());
		var x = offset.left();
		var y = offset.top();
		return { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	$type: new $.ig.Type('BaseDOMEventProxy', $.ig.EventProxy.prototype.$type)
}, true);

$.ig.util.defType('CanvasGestureDOMEventProxy', 'BaseDOMEventProxy', {
	__proxyID: 0,
	__eventNS: null,
	__gestureRecognizer: null,
	clone: function () {
		var ret = new $.ig.CanvasGestureDOMEventProxy(this.eventSource());
		ret.deferredTouchStartMode(this.deferredTouchStartMode());
		ret.shouldInteractForDirection(this.shouldInteractForDirection());
		return ret;
	}
	,
	_mGesture: null,
	mGesture: function (value) {
		if (arguments.length === 1) {
			this._mGesture = value;
			return value;
		} else {
			return this._mGesture;
		}
	}
	,
	init: function (DOMEventSource) {
		this.__proxyID = 0;
		this.__eventNS = "";
		this.__lastScale = 1;
		this.__dragCaptured = false;
		this.__pointerIds = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		this.__pointerLocations = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		this.__touches = new $.ig.List$1($.ig.TouchPointInfo.prototype.$type, 0);
		this.__dragStart = null;
		$.ig.BaseDOMEventProxy.prototype.init.call(this);
		this.__gestureRecognizer = new $.ig.TouchGestureRecognizer(new $.ig.DOMExecutionContext());
		var $t = this.__gestureRecognizer;
		$t.holdEnding = $.ig.Delegate.prototype.combine($t.holdEnding, this._gestureRecognizer_HoldEnding.runOn(this));
		var $t1 = this.__gestureRecognizer;
		$t1.holdStarting = $.ig.Delegate.prototype.combine($t1.holdStarting, this._gestureRecognizer_HoldStarting.runOn(this));
		var $t2 = this.__gestureRecognizer;
		$t2.zoomStarting = $.ig.Delegate.prototype.combine($t2.zoomStarting, this._gestureRecognizer_ZoomStarting.runOn(this));
		var $t3 = this.__gestureRecognizer;
		$t3.zoomEnding = $.ig.Delegate.prototype.combine($t3.zoomEnding, this._gestureRecognizer_ZoomEnding.runOn(this));
		var $t4 = this.__gestureRecognizer;
		$t4.panStarting = $.ig.Delegate.prototype.combine($t4.panStarting, this._gestureRecognizer_PanStarting.runOn(this));
		var $t5 = this.__gestureRecognizer;
		$t5.panEnding = $.ig.Delegate.prototype.combine($t5.panEnding, this._gestureRecognizer_PanEnding.runOn(this));
		var $t6 = this.__gestureRecognizer;
		$t6.manipulationStarting = $.ig.Delegate.prototype.combine($t6.manipulationStarting, this._gestureRecognizer_ManipulationStarting.runOn(this));
		var $t7 = this.__gestureRecognizer;
		$t7.manipulationChanging = $.ig.Delegate.prototype.combine($t7.manipulationChanging, this._gestureRecognizer_ManipulationChanging.runOn(this));
		var $t8 = this.__gestureRecognizer;
		$t8.manipulationEnding = $.ig.Delegate.prototype.combine($t8.manipulationEnding, this._gestureRecognizer_ManipulationEnding.runOn(this));
		var $t9 = this.__gestureRecognizer;
		$t9.doubleTapped = $.ig.Delegate.prototype.combine($t9.doubleTapped, this._gestureRecognizer_DoubleTapped.runOn(this));
		var $t10 = this.__gestureRecognizer;
		$t10.flingStarting = $.ig.Delegate.prototype.combine($t10.flingStarting, this._gestureRecognizer_FlingStarting.runOn(this));
		this.shouldInteractForDirection(function (p) { return true; });
		this.deferredTouchStartMode(true);
		$.ig.CanvasGestureDOMEventProxy.prototype.__proxyCount++;
		this.__proxyID = $.ig.CanvasGestureDOMEventProxy.prototype.__proxyCount;
		this.__eventNS = ".DOMProxy" + this.__proxyID.toString();
		this.currentModifiers($.ig.ModifierKeys.prototype.none);
		this.eventSource(DOMEventSource);
		$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = window.navigator.msPointerEnabled && MSGesture !== undefined;
		}
		catch (e) {
		}
		$.ig.BaseDOMEventProxy.prototype.pointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.pointerEnabled = window.navigator.pointerEnabled;
		}
		catch (e1) {
		}
		if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			this.deferredTouchStartMode(false);
		}
		$.ig.BaseDOMEventProxy.prototype.tridentVersion = this.getTridentVersion();
		$.ig.BaseDOMEventProxy.prototype.edgeVersion = this.getEdgeVersion();
		this.bindToSource(this.eventSource(), "");
		this.shouldInteract(function (p) { return true; });
	},
	_gestureRecognizer_FlingStarting: function (sender, args) {
		return this.raiseOnFlingStarted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, args.velocityX(), args.velocityY());
	}
	,
	_gestureRecognizer_DoubleTapped: function (sender, args) {
		this.raiseOnDoubleTap({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	supportsNonIsometricZoom: function () {
		return true;
	}
	,
	_gestureRecognizer_ManipulationEnding: function (sender, args) {
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.raiseOnGestureCompleted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, args.scaleDeltaX());
			this.endMouseSuppress();
		}
	}
	,
	_gestureRecognizer_ManipulationChanging: function (sender, args) {
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.zoom) {
			this.raiseOnPinchDelta({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, args.scaleDeltaX());
			this.raiseOnZoomDelta({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, args.scaleDeltaX(), args.scaleDeltaY(), args.isoScaleDelta());
		}
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.pan || this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.flinging) {
			this.raiseOnContactMoved({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, true);
			this.raiseOnDragDelta({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	_gestureRecognizer_ManipulationStarting: function (sender, args) {
	}
	,
	_gestureRecognizer_PanEnding: function (sender, args) {
		this.__dragCaptured = false;
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.raiseOnContactCompleted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, true);
			this.raiseOnDragCompleted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	_gestureRecognizer_PanStarting: function (sender, args) {
		this.raiseOnDragStarted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	_gestureRecognizer_ZoomEnding: function (sender, args) {
		this.raiseOnZoomCompleted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, args.scaleDeltaX(), args.scaleDeltaY(), args.isoScaleDelta());
	}
	,
	_gestureRecognizer_ZoomStarting: function (sender, args) {
		this.raiseOnPinchStarted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, 1);
		this.raiseOnZoomStarted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, 1, 1, 1);
	}
	,
	_gestureRecognizer_HoldStarting: function (sender, args) {
		this.__dragCaptured = true;
		this.raiseOnHold({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	_gestureRecognizer_HoldEnding: function (sender, args) {
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.raiseOnContactCompleted({ __x: args.centroidX(), __y: args.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, true);
		}
	}
	,
	isPointerEnabled: function () {
		$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = window.navigator.msPointerEnabled && MSGesture !== undefined;
		}
		catch (e) {
		}
		$.ig.BaseDOMEventProxy.prototype.pointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.pointerEnabled = window.navigator.pointerEnabled;
		}
		catch (e1) {
		}
		return $.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled;
	}
	,
	bindToSource: function (objSource, sourceID) {
		var source = objSource;
		var ns = this.__eventNS + sourceID;
		if (!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled && !$.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			source.bind("mousemove" + ns, this.canvasMouseMove.runOn(this));
			source.bind("mouseleave" + ns, this.canvasMouseLeave.runOn(this));
			source.bind("mousedown" + ns, this.canvasMouseDown.runOn(this));
			source.bind("mouseup" + ns, this.canvasMouseUp.runOn(this));
			$(window).bind("mouseup" + ns, this.windowMouseUp.runOn(this));
		}
		source.bind("keydown" + ns, this.canvasKeyDown.runOn(this));
		source.bind("keyup" + ns, this.canvasKeyUp.runOn(this));
		if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			var source_ = this.eventSource()[0];
			$.ig.BaseDOMEventProxy.prototype.grabTouches(source_);
			var container = this.eventSource()[0];
			if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
				source.bind("pointerdown" + ns, this.canvasMSPointerDown.runOn(this));
				source.bind("pointerup" + ns, this.canvasMSPointerUp.runOn(this));
				source.bind("pointercancel" + ns, this.canvasMSPointerCancel.runOn(this));
				source.bind("pointermove" + ns, this.canvasMSPointerMove.runOn(this));
				source.bind("pointerout" + ns, this.canvasMSPointerOut.runOn(this));
				source.bind("lostpointercapture" + ns, this.canvasMSLostPointerCapture.runOn(this));
			} else {
				source.bind("MSPointerDown" + ns, this.canvasMSPointerDown.runOn(this));
				source.bind("MSPointerUp" + ns, this.canvasMSPointerUp.runOn(this));
				source.bind("MSPointerCancel" + ns, this.canvasMSPointerCancel.runOn(this));
				source.bind("MSPointerMove" + ns, this.canvasMSPointerMove.runOn(this));
				source.bind("MSPointerOut" + ns, this.canvasMSPointerOut.runOn(this));
				source.bind("MSLostPointerCapture" + ns, this.canvasMSLostPointerCapture.runOn(this));
			}
		}
		source.bind("DOMMouseScroll" + ns, this.canvasMouseScroll.runOn(this));
		source.bind("mousewheel" + ns, this.canvasMouseScroll.runOn(this));
		source.bind("touchstart" + ns, this.canvasTouchStart.runOn(this));
		source.bind("touchmove" + ns, this.canvasTouchMove.runOn(this));
		source.bind("touchend" + ns, this.canvasTouchEnd.runOn(this));
	}
	,
	__lastScale: 0,
	__touchContainerStart: null,
	__dragCaptured: false,
	canvasMSPointerUp: function (e_) {
		var isFinger = this.isFinger(e_);
		var index = this.__pointerIds.indexOf(e_.originalEvent.pointerId);
		if (index >= 0) {
			this.__pointerIds.removeAt(index);
			this.__pointerLocations.removeAt(index);
			this.numTouches(this.__pointerIds.count());
		}
		if (isFinger) {
			this.canvasTouchEnd(e_);
		} else {
			this.canvasMouseUp(e_);
		}
	}
	,
	canvasMSLostPointerCapture: function (e_) {
		var isFinger = this.isFinger(e_);
	}
	,
	canvasMSPointerCancel: function (e_) {
		var isFinger = this.isFinger(e_);
		var index = this.__pointerIds.indexOf(e_.originalEvent.pointerId);
		if (index >= 0) {
			this.__pointerIds.removeAt(index);
			this.__pointerLocations.removeAt(index);
			this.numTouches(this.__pointerIds.count());
		}
	}
	,
	__pointerIds: null,
	__pointerLocations: null,
	canvasMSPointerDown: function (e_) {
		var isFinger = this.isFinger(e_);
		$.ig.BaseDOMEventProxy.prototype.fixEvent(e_);
		this.__pointerIds.add(e_.originalEvent.pointerId);
		this.__pointerLocations.add({ __x: e_.pageX, __y: e_.pageY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.numTouches(this.__pointerIds.count());
		{
			var eventSource_ = this.eventSource()[0];
			if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
				eventSource_.setPointerCapture(e_.originalEvent.pointerId);
			} else {
				eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
			}
		}
		if (isFinger) {
			this.canvasTouchStart(e_);
		} else {
			this.canvasMouseDown(e_);
		}
	}
	,
	isFinger: function (e_) {
		var pointerEvent_ = e_.originalEvent;
		var isFinger = false;
		if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			isFinger = pointerEvent_.pointerType == 'touch';
		} else {
			isFinger = pointerEvent_.pointerType == pointerEvent_.MSPOINTER_TYPE_TOUCH;
		}
		return isFinger;
	}
	,
	canvasMSPointerMove: function (e_) {
		var isFinger = this.isFinger(e_);
		$.ig.BaseDOMEventProxy.prototype.fixEvent(e_);
		var index = this.__pointerIds.indexOf(e_.originalEvent.pointerId);
		if (index >= 0) {
			this.__pointerLocations.__inner[index] = { __x: e_.pageX, __y: e_.pageY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (isFinger) {
			this.canvasTouchMove(e_);
		} else {
			this.canvasMouseMove(e_);
		}
	}
	,
	canvasMSPointerOut: function (e_) {
		var isFinger = this.isFinger(e_);
		if (isFinger) {
		} else {
			this.canvasMouseLeave(e_);
		}
	}
	,
	canvasTouchStart: function (e_) {
		this.mouseIsOver(true);
		this.updateModifiers(e_);
		this.updateTouchPosition(e_);
		this.__touchContainerStart = this.containerMousePoint();
		if (this.shouldInteract()(this.mousePoint())) {
			if (!this.deferredTouchStartMode() || this.numTouches() > 1) {
				if (this.touchStartDeferred()) {
					this.touchStartDeferred(false);
					this.beginMouseSuppress();
				}
				this.preventDefault(e_);
			} else {
				this.touchStartDeferred(true);
				this.__dragCaptured = false;
			}
			this.raiseOnMouseOver(this.mousePoint(), false, true);
			this.raiseOnMouseDown(this.mousePoint());
			this.raiseOnContactStarted(this.containerMousePoint(), true);
			this.__gestureRecognizer.processTouches(this.getTouches(e_));
		}
	}
	,
	__touches: null,
	getTouches: function (e_) {
		var offset = $.ig.BaseDOMEventProxy.prototype.getOffset(this.eventSource());
		var viewport = this.viewport();
		this.__touches.clear();
		if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			var i = this.__pointerIds.count();
			for (var j_ = 0; j_ < i; j_++) {
				var pointerId = this.__pointerIds.__inner[j_];
				var pageLocation = this.__pointerLocations.__inner[j_];
				var pageX = pageLocation.__x;
				var pageY = pageLocation.__y;
				var info = new $.ig.TouchPointInfo(1);
				info.x((pageX - offset.left()) - viewport.left());
				info.y((pageY - offset.top()) - viewport.top());
				this.__touches.add(info);
			}
		} else {
			var i1 = e_.originalEvent.targetTouches.length;
			for (var j_ = 0; j_ < i1; j_++) {
				var pageX1 = e_.originalEvent.targetTouches[j_].pageX;
				var pageY1 = e_.originalEvent.targetTouches[j_].pageY;
				var info1 = new $.ig.TouchPointInfo(1);
				info1.x((pageX1 - offset.left()) - viewport.left());
				info1.y((pageY1 - offset.top()) - viewport.top());
				this.__touches.add(info1);
			}
		}
		return this.__touches;
	}
	,
	__dragStart: null,
	canvasTouchMove: function (e) {
		this.mouseIsOver(true);
		this.updateModifiers(e);
		this.updateTouchPosition(e);
		if (this.touchStartDeferred()) {
			if ((this.shouldInteract()(this.mousePoint()) && this.shouldAllowTouchDrag()) || this.__dragCaptured == true || this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.zoom) {
				this.touchStartDeferred(false);
				this.beginMouseSuppress();
			}
		}
		if ((this.__dragCaptured || this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.zoom || this.shouldInteract()(this.mousePoint())) && !this.touchStartDeferred()) {
			this.__dragCaptured = true;
			this.preventDefault(e);
			this.__gestureRecognizer.processTouches(this.getTouches(e));
		}
	}
	,
	shouldAllowTouchDrag: function () {
		var direction = { __x: this.__touchContainerStart.__x - this.containerMousePoint().__x, __y: this.__touchContainerStart.__y - this.containerMousePoint().__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		if (Math.abs(direction.__x) > Math.abs(direction.__y)) {
			direction.__y = 0;
		}
		if (Math.abs(direction.__y) > Math.abs(direction.__x)) {
			direction.__x = 0;
		}
		return this.shouldInteractForDirection()(direction);
	}
	,
	canvasTouchEnd: function (e) {
		this.mouseIsOver(false);
		this.updateModifiers(e);
		this.updateTouchPosition(e);
		if (this.touchStartDeferred()) {
			this.touchStartDeferred(false);
			this.beginMouseSuppress();
		}
		this.preventDefault(e);
		if (this.__gestureRecognizer.currentState() != $.ig.TouchGestureState.prototype.zoom && this.__gestureRecognizer.currentState() != $.ig.TouchGestureState.prototype.flinging) {
			this.raiseOnMouseOver(this.mousePoint(), false, true);
			this.raiseOnMouseUp(this.mousePoint());
		}
		var wasZooming = this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.zoom;
		if (wasZooming) {
			this.raiseOnContactCompleted({ __x: this.__gestureRecognizer.centroidX(), __y: this.__gestureRecognizer.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, true);
		}
		this.__gestureRecognizer.processTouches(this.getTouches(e));
		if (this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.endMouseSuppress();
		}
		if (!wasZooming && this.__gestureRecognizer.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.raiseOnContactCompleted({ __x: this.__gestureRecognizer.centroidX(), __y: this.__gestureRecognizer.centroidY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, true);
		}
	}
	,
	unbindFromSource: function (objSource, sourceID) {
		var source = objSource;
		var ns = this.__eventNS + sourceID;
		source.unbind(ns);
		if (!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled) {
			$(window).unbind(ns);
		}
	}
	,
	destroy: function () {
		if (this.eventSource() == null) {
			return;
		}
		this.eventSource().unbind(this.__eventNS);
		if (!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled) {
			$(window).unbind(this.__eventNS);
		}
		this.eventSource(null);
	}
	,
	$type: new $.ig.Type('CanvasGestureDOMEventProxy', $.ig.BaseDOMEventProxy.prototype.$type)
}, true);

$.ig.util.defType('IExecutionContext', 'Object', {
	$type: new $.ig.Type('IExecutionContext', null)
}, true);

$.ig.util.defType('DOMExecutionContext', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.requestAnimationFrame(window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback) {
                window.setTimeout(callback, 1000 / 60);
            });
		this.__startTime = $.ig.Date.prototype.now().getTime();
	},
	__startTime: 0,
	_requestAnimationFrame: null,
	requestAnimationFrame: function (value) {
		if (arguments.length === 1) {
			this._requestAnimationFrame = value;
			return value;
		} else {
			return this._requestAnimationFrame;
		}
	}
	,
	execute: function (callback) {
		callback();
	}
	,
	enqueueAction: function (callback) {
		window.setTimeout(callback, 0);
	}
	,
	enqueueAnimationAction: function (callback) {
		this.requestAnimationFrame()(callback);
	}
	,
	executeDelayed: function (callback, delayMilliseconds) {
		window.setTimeout(callback, delayMilliseconds);
	}
	,
	getCurrentRelativeTime: function () {
		return $.ig.Date.prototype.now().getTime() - this.__startTime;
	}
	,
	$type: new $.ig.Type('DOMExecutionContext', $.ig.Object.prototype.$type, [$.ig.IExecutionContext.prototype.$type])
}, true);

$.ig.util.defType('DOMEventProxy', 'BaseDOMEventProxy', {
	__proxyID: 0,
	__eventNS: null,
	__pinching: false,
	_mGesture: null,
	mGesture: function (value) {
		if (arguments.length === 1) {
			this._mGesture = value;
			return value;
		} else {
			return this._mGesture;
		}
	}
	,
	init: function (DOMEventSource) {
		this.__proxyID = 0;
		this.__eventNS = "";
		this.__pinching = false;
		this.__lastScale = 1;
		this.__holdId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
		this.__tapArea = null;
		this.__holdStartX = 0;
		this.__holdStartY = 0;
		this.__holdCancelDistance = 5;
		this.__dragging = false;
		this.__dragStart = null;
		$.ig.BaseDOMEventProxy.prototype.init.call(this);
		this.shouldInteractForDirection(function (p) { return true; });
		this.deferredTouchStartMode(false);
		$.ig.DOMEventProxy.prototype.__proxyCount++;
		this.__proxyID = $.ig.DOMEventProxy.prototype.__proxyCount;
		this.__eventNS = ".DOMProxy" + this.__proxyID.toString();
		this.currentModifiers($.ig.ModifierKeys.prototype.none);
		this.eventSource(DOMEventSource);
		$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = window.navigator.msPointerEnabled && MSGesture !== undefined;
		}
		catch (e) {
		}
		$.ig.BaseDOMEventProxy.prototype.pointerEnabled = false;
		try {
			$.ig.BaseDOMEventProxy.prototype.pointerEnabled = window.navigator.pointerEnabled;
		}
		catch (e1) {
		}
		$.ig.BaseDOMEventProxy.prototype.tridentVersion = this.getTridentVersion();
		$.ig.BaseDOMEventProxy.prototype.edgeVersion = this.getEdgeVersion();
		this.bindToSource(this.eventSource(), "");
		this.shouldInteract(function (p) { return true; });
	},
	bindToSource: function (objSource, sourceID) {
		var source = objSource;
		var ns = this.__eventNS + sourceID;
		if ((!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled && !$.ig.BaseDOMEventProxy.prototype.pointerEnabled)) {
			source.bind("mousemove" + ns, this.canvasMouseMove.runOn(this));
			source.bind("mouseleave" + ns, this.canvasMouseLeave.runOn(this));
			source.bind("mousedown" + ns, this.canvasMouseDown.runOn(this));
			source.bind("mouseup" + ns, this.canvasMouseUp.runOn(this));
			$(window).bind("mouseup" + ns, this.windowMouseUp.runOn(this));
		}
		source.bind("keydown" + ns, this.canvasKeyDown.runOn(this));
		source.bind("keyup" + ns, this.canvasKeyUp.runOn(this));
		var source_ = this.eventSource()[0];
		if (!this.isInteractionDisabled()) {
			$.ig.BaseDOMEventProxy.prototype.grabTouches(source_);
		}
		if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			var container = this.eventSource()[0];
			if (window.MSGesture !== undefined) {
				var gesture = new MSGesture();
				gesture.target = container;
				this.mGesture(gesture);
				source.bind("MSGestureStart" + ns, this.canvasGestureStart.runOn(this));
				source.bind("MSGestureChange" + ns, this.canvasGestureChange.runOn(this));
				source.bind("MSGestureEnd" + ns, this.canvasGestureEnd.runOn(this));
			}
			if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
				source.bind("pointerdown" + ns, this.canvasMSPointerDown.runOn(this));
				source.bind("pointerup" + ns, this.canvasMSPointerUp.runOn(this));
				source.bind("pointercancel" + ns, this.canvasMSPointerCancel.runOn(this));
				source.bind("pointermove" + ns, this.canvasMSPointerMove.runOn(this));
				source.bind("pointerout" + ns, this.canvasMSPointerOut.runOn(this));
				source.bind("lostpointercapture" + ns, this.canvasMSLostPointerCapture.runOn(this));
			} else {
				source.bind("MSPointerDown" + ns, this.canvasMSPointerDown.runOn(this));
				source.bind("MSPointerUp" + ns, this.canvasMSPointerUp.runOn(this));
				source.bind("MSPointerCancel" + ns, this.canvasMSPointerCancel.runOn(this));
				source.bind("MSPointerMove" + ns, this.canvasMSPointerMove.runOn(this));
				source.bind("MSPointerOut" + ns, this.canvasMSPointerOut.runOn(this));
				source.bind("MSLostPointerCapture" + ns, this.canvasMSLostPointerCapture.runOn(this));
			}
		}
		source.bind("DOMMouseScroll" + ns, this.canvasMouseScroll.runOn(this));
		source.bind("mousewheel" + ns, this.canvasMouseScroll.runOn(this));
		source.bind("gesturestart" + ns, this.canvasGestureStart.runOn(this));
		source.bind("gesturechange" + ns, this.canvasGestureChange.runOn(this));
		source.bind("gestureend" + ns, this.canvasGestureEnd.runOn(this));
		source.bind("touchstart" + ns, this.canvasTouchStart.runOn(this));
		source.bind("touchmove" + ns, this.canvasTouchMove.runOn(this));
		source.bind("touchend" + ns, this.canvasTouchEnd.runOn(this));
	}
	,
	__lastScale: 0,
	canvasMSPointerUp: function (e_) {
		var isFinger = this.isFinger(e_);
		if (isFinger) {
			this.numTouches(this.numTouches() - 1);
			if (this.numTouches() < 0) {
				this.numTouches(0);
			}
		}
		if (this.numTouches() < 2 && this.__pinching && isFinger) {
			this.__pinching = false;
			var scale = e_.originalEvent.scale;
			this.raiseOnGestureCompleted(this.containerMousePoint(), scale);
		} else {
			if (isFinger) {
				this.canvasTouchEnd(e_);
			} else {
				this.canvasMouseUp(e_);
			}
		}
	}
	,
	canvasMSLostPointerCapture: function (e_) {
		var isFinger = this.isFinger(e_);
		if (isFinger) {
			(function ($obj) { var $value = $obj.numTouches(); $obj.numTouches($value - 1); return $value; }(this));
			if (this.numTouches() < 0) {
				this.numTouches(0);
			}
		}
		if (this.numTouches() < 2 && this.__pinching && isFinger) {
			this.__pinching = false;
			var scale = e_.originalEvent.scale;
			this.raiseOnGestureCompleted(this.containerMousePoint(), scale);
		}
	}
	,
	canvasMSPointerCancel: function (e_) {
		var isFinger = this.isFinger(e_);
		if (isFinger) {
			(function ($obj) { var $value = $obj.numTouches(); $obj.numTouches($value - 1); return $value; }(this));
			if (this.numTouches() < 0) {
				this.numTouches(0);
			}
		}
		if (this.numTouches() < 2 && this.__pinching && isFinger) {
			this.__pinching = false;
			var scale = e_.originalEvent.scale;
			this.raiseOnGestureCompleted(this.containerMousePoint(), scale);
		}
	}
	,
	canvasMSPointerDown: function (e_) {
		var isFinger = this.isFinger(e_);
		if (this.mGesture() != null && isFinger) {
			(function ($obj) { var $value = $obj.numTouches(); $obj.numTouches($value + 1); return $value; }(this));
			this.mGesture().addPointer(e_.originalEvent.pointerId);
		}
		var eventSource_ = this.eventSource()[0];
		if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			eventSource_.setPointerCapture(e_.originalEvent.pointerId);
		} else {
			eventSource_.msSetPointerCapture(e_.originalEvent.pointerId);
		}
		if (this.numTouches() > 1 && !this.__pinching && isFinger) {
			this.__pinching = true;
			this.updateTouchPosition(e_);
			var scale = e_.originalEvent.scale;
			this.raiseOnPinchStarted(this.containerMousePoint(), scale);
		} else {
			if (isFinger) {
				this.canvasTouchStart(e_);
			} else {
				this.canvasMouseDown(e_);
			}
		}
	}
	,
	isFinger: function (e_) {
		var pointerEvent_ = e_.originalEvent;
		var isFinger = false;
		if ($.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
			isFinger = pointerEvent_.pointerType == 'touch';
		} else {
			isFinger = pointerEvent_.pointerType == pointerEvent_.MSPOINTER_TYPE_TOUCH;
		}
		return isFinger;
	}
	,
	canvasMSPointerMove: function (e_) {
		var isFinger = this.isFinger(e_);
		if (this.__pinching) {
			return;
		}
		if (isFinger) {
			this.canvasTouchMove(e_);
		} else {
			this.canvasMouseMove(e_);
		}
	}
	,
	canvasMSPointerOut: function (e_) {
		var isFinger = this.isFinger(e_);
		if (this.__pinching) {
			return;
		}
		if (isFinger) {
		} else {
			this.canvasMouseLeave(e_);
		}
	}
	,
	canvasGestureStart: function (e_) {
		this.mouseIsOver(true);
		this.updateModifiers(e_);
		this.updateTouchPosition(e_);
		this.dragStopHoldTimer();
		if (this.shouldInteract()(this.mousePoint())) {
			this.preventDefault(e_);
			if ($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) {
				this.__lastScale = 1;
			}
			if (($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) && this.numTouches() < 2) {
				return;
			}
			var scale = e_.originalEvent.scale;
			this.raiseOnPinchStarted(this.containerMousePoint(), scale);
		}
	}
	,
	canvasGestureChange: function (e_) {
		this.mouseIsOver(true);
		this.updateModifiers(e_);
		this.updateTouchPosition(e_);
		if (this.shouldInteract()(this.mousePoint())) {
			this.preventDefault(e_);
			if (($.ig.BaseDOMEventProxy.prototype.mSPointerEnabled || $.ig.BaseDOMEventProxy.prototype.pointerEnabled) && this.numTouches() < 2) {
				return;
			}
			var scale = e_.originalEvent.scale;
			this.raiseOnPinchDelta(this.containerMousePoint(), scale);
		}
	}
	,
	canvasGestureEnd: function (e_) {
		this.preventDefault(e_);
		var scale = e_.originalEvent.scale;
		this.mouseIsOver(false);
		this.updateModifiers(e_);
		this.updateTouchPosition(e_);
		if ((!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled && !$.ig.BaseDOMEventProxy.prototype.pointerEnabled) || this.__pinching) {
			this.raiseOnGestureCompleted(this.containerMousePoint(), scale);
		}
	}
	,
	__touchContainerStart: null,
	canvasTouchStart: function (e_) {
		this.mouseIsOver(true);
		this.updateModifiers(e_);
		this.updateTouchPosition(e_);
		this.__touchContainerStart = this.containerMousePoint();
		if (this.shouldInteract()(this.mousePoint())) {
			if (!this.deferredTouchStartMode()) {
				this.preventDefault(e_);
			} else {
				this.touchStartDeferred(true);
			}
			this.raiseOnMouseOver(this.mousePoint(), false, true);
			this.raiseOnMouseDown(this.mousePoint());
			this.raiseOnContactStarted(this.containerMousePoint(), true);
			this.startHoldTimer();
		}
	}
	,
	__holdId: 0,
	__tapArea: null,
	__holdStartX: 0,
	__holdStartY: 0,
	__holdCancelDistance: 0,
	startHoldTimer: function () {
		if (this.__holdId == $.ig.BaseDOMEventProxy.prototype.nullTimer) {
			this.__holdStartX = this.mousePoint().__x;
			this.__holdStartY = this.mousePoint().__y;
			this.__holdId = window.setTimeout(this.onHoldTimer.runOn(this), 1500);
		}
	}
	,
	dragStopHoldTimer: function () {
		if (Math.abs(this.__holdStartX - this.mousePoint().__x) > this.__holdCancelDistance || Math.abs(this.__holdStartY - this.mousePoint().__y) > this.__holdCancelDistance) {
			this.stopHoldTimer();
		}
	}
	,
	stopHoldTimer: function () {
		if (this.__holdId != $.ig.BaseDOMEventProxy.prototype.nullTimer) {
			window.clearTimeout(this.__holdId);
			this.__holdId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
		}
	}
	,
	onHoldTimer: function () {
		this.__holdId = $.ig.BaseDOMEventProxy.prototype.nullTimer;
		if (this.touchStartDeferred()) {
			this.touchStartDeferred(false);
			this.beginMouseSuppress();
		}
		this.raiseOnHold(this.containerMousePoint());
	}
	,
	__dragging: false,
	__dragStart: null,
	canvasTouchMove: function (e) {
		this.mouseIsOver(true);
		this.updateModifiers(e);
		this.updateTouchPosition(e);
		if (this.touchStartDeferred()) {
			if (this.shouldInteract()(this.mousePoint()) && this.shouldAllowTouchDrag()) {
				this.touchStartDeferred(false);
				this.beginMouseSuppress();
			}
		}
		this.dragStopHoldTimer();
		this.stopTapTimer();
		if (this.shouldInteract()(this.mousePoint()) && this.numTouches() == 1 && !this.touchStartDeferred()) {
			this.preventDefault(e);
			if (!this.__dragging) {
				this.__dragging = true;
				this.__dragStart = this.containerMousePoint();
				this.raiseOnDragStarted(this.__dragStart);
			} else {
				this.raiseOnMouseOver(this.mousePoint(), true, true);
				this.raiseOnContactMoved(this.containerMousePoint(), true);
				this.raiseOnDragDelta(this.containerMousePoint());
			}
		}
	}
	,
	shouldAllowTouchDrag: function () {
		var direction = { __x: this.__touchContainerStart.__x - this.containerMousePoint().__x, __y: this.__touchContainerStart.__y - this.containerMousePoint().__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		if (Math.abs(direction.__x) < 2 && Math.abs(direction.__y) < 2) {
			return false;
		}
		if (Math.abs(direction.__x) > Math.abs(direction.__y)) {
			direction.__y = 0;
		}
		if (Math.abs(direction.__y) > Math.abs(direction.__x)) {
			direction.__x = 0;
		}
		return this.shouldInteractForDirection()(direction);
	}
	,
	canvasTouchEnd: function (e) {
		this.mouseIsOver(false);
		this.updateModifiers(e);
		this.updateTouchPosition(e);
		this.stopHoldTimer();
		if (this.touchStartDeferred()) {
			this.touchStartDeferred(false);
			this.beginMouseSuppress();
		}
		this.preventDefault(e);
		this.raiseOnMouseOver(this.mousePoint(), false, true);
		this.raiseOnMouseUp(this.mousePoint());
		if (this.numTouches() == 0) {
			this.raiseDoubleTap(this.mousePoint());
			this.endMouseSuppress();
		}
		if (this.__dragging && this.numTouches() == 0) {
			this.__dragging = false;
			this.__dragStart = null;
			this.raiseOnDragCompleted(this.containerMousePoint());
			this.endMouseSuppress();
		}
		this.raiseOnContactCompleted(this.containerMousePoint(), true);
	}
	,
	raiseDoubleTap: function (pt) {
		if ($.ig.Rect.prototype.l_op_Equality(this.__tapArea, null)) {
			this.__tapArea = new $.ig.Rect(0, pt.__x - 50, pt.__y - 50, 100, 100);
			window.setTimeout(this.stopTapTimer.runOn(this), 500);
		} else {
			if (pt.__x >= this.__tapArea.x() && pt.__x <= this.__tapArea.right() && pt.__y >= this.__tapArea.y() && pt.__y <= this.__tapArea.bottom()) {
				this.stopTapTimer();
				this.raiseOnDoubleTap(pt);
			}
		}
	}
	,
	stopTapTimer: function () {
		this.__tapArea = null;
	}
	,
	unbindFromSource: function (objSource, sourceID) {
		var source = objSource;
		var ns = this.__eventNS + sourceID;
		source.unbind(ns);
		if ((!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled && !$.ig.BaseDOMEventProxy.prototype.pointerEnabled)) {
			$(window).unbind(ns);
		}
	}
	,
	destroy: function () {
		if (this.eventSource() == null) {
			return;
		}
		this.eventSource().unbind(this.__eventNS);
		if ((!$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled && !$.ig.BaseDOMEventProxy.prototype.pointerEnabled)) {
			$(window).unbind(this.__eventNS);
		}
		this.eventSource(null);
	}
	,
	$type: new $.ig.Type('DOMEventProxy', $.ig.BaseDOMEventProxy.prototype.$type)
}, true);

$.ig.util.defType('IFastItemColumnInternal', 'Object', {
	$type: new $.ig.Type('IFastItemColumnInternal', null)
}, true);

$.ig.util.defType('IFastItemColumnPropertyName', 'Object', {
	$type: new $.ig.Type('IFastItemColumnPropertyName', null)
}, true);

$.ig.util.defType('IFastItemColumn$1', 'Object', {
	$type: new $.ig.Type('IFastItemColumn$1', null, [$.ig.IList$1.prototype.$type.specialize(0), $.ig.IFastItemColumnPropertyName.prototype.$type])
}, true);

$.ig.util.defType('FastItemColumn', 'Object', {
	__coerceValue: null,
	__expectFunctions: false,
	init: function (fastItemsSource, propertyName, coerceValue, expectFunctions) {
		this.__coerceValue = null;
		this.__expectFunctions = false;
		this.__propertyName = null;
		$.ig.Object.prototype.init.call(this);
		this.__coerceValue = coerceValue;
		this.__expectFunctions = expectFunctions;
		this.propertyName(propertyName);
		this.fastItemsSource(fastItemsSource);
	},
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this._fastItemsSource = value;
			this.reset();
			return value;
		} else {
			return this._fastItemsSource;
		}
	}
	,
	_fastItemsSource: null,
	__propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this.__propertyName = value;
			return value;
		} else {
			return this.__propertyName;
		}
	}
	,
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			if ($.ig.util.isNaN(this._minimum) && this.values() != null) {
				this._minimum = Number.POSITIVE_INFINITY;
				var en = this.values().getEnumerator();
				while (en.moveNext()) {
					var value = en.current();
					if (!$.ig.util.isNaN(value)) {
						this._minimum = Math.min(this._minimum, value);
					}
				}
			}
			return this._minimum;
		}
	}
	,
	_minimum: 0,
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			if ($.ig.util.isNaN(this._maximum) && this.values() != null) {
				this._maximum = Number.NEGATIVE_INFINITY;
				var en = this.values().getEnumerator();
				while (en.moveNext()) {
					var value = en.current();
					if (!$.ig.util.isNaN(value)) {
						this._maximum = Math.max(this._maximum, value);
					}
				}
			}
			return this._maximum;
		}
	}
	,
	_maximum: 0,
	item: function (index, value) {
		if (arguments.length === 2) {
			this.values().__inner[index] = value;
			return value;
		} else {
			return this.values().__inner[index];
		}
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	contains: function (item) {
		return this.values().contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		this.values().copyTo(array, arrayIndex);
	}
	,
	count: function () {
		return this.values().count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	indexOf: function (item) {
		return this.values().indexOf(item);
	}
	,
	add: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	clear: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	remove: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	insert: function (index, item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	removeAt: function (index) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	reset: function () {
		this.values(null);
		this.minimum(NaN);
		this.maximum(NaN);
		return this.fastItemsSource() != null ? this.insertRange(0, this.fastItemsSource().count()) : true;
	}
	,
	insertRange: function (position, count) {
		var newValues = new Array(count);
		var source_ = this._fastItemsSource.asArray();
		var item_;
		var minimum = this.minimum();
		var maximum = this.maximum();
		var minimumIsNaN = $.ig.util.isNaN(this.minimum());
		var maximumIsNaN = $.ig.util.isNaN(this.maximum());
		var newCount = 0;
		var newValue;
		var coerce = this.__coerceValue;
		var sourceItem_ = null;
		if (this.__coerceValue != null || this.__expectFunctions) {
			for (var i_ = position; i_ < position + count; ++i_) {
				sourceItem_ = source_[i_];
				if (sourceItem_ == null) {
					item_ = NaN;
				} else {
					item_ = sourceItem_[this.__propertyName];
				}
				if (this.__expectFunctions) {
					if (typeof(item_) == 'function') {
						item_ = item_();
					}
				}
				if (coerce != null) {
					item_ = coerce(item_);
				}
				newValue = item_ == null ? NaN : item_;
				var valIsNaN = (newValue != newValue);
				if (minimumIsNaN || newValue < minimum) {
					minimum = newValue;
					minimumIsNaN = valIsNaN;
				}
				if (maximumIsNaN || newValue > maximum) {
					maximum = newValue;
					maximumIsNaN = valIsNaN;
				}
				newValues[newCount] = newValue;
				newCount++;
			}
		} else {
			for (var i_ = position; i_ < position + count; ++i_) {
				sourceItem_ = source_[i_];
				if (sourceItem_ == null) {
					item_ = NaN;
				} else {
					item_ = sourceItem_[this.__propertyName];
				}
				newValue = item_ == null ? NaN : item_;
				var valIsNaN1 = (newValue != newValue);
				if (minimumIsNaN || newValue < minimum) {
					minimum = newValue;
					minimumIsNaN = valIsNaN1;
				}
				if (maximumIsNaN || newValue > maximum) {
					maximum = newValue;
					maximumIsNaN = valIsNaN1;
				}
				newValues[newCount] = newValue;
				newCount++;
			}
		}
		this.minimum(minimum);
		this.maximum(maximum);
		if (this.values() == null) {
			this.values(new $.ig.List$1(Number, 1, newValues));
		} else {
			this.values().insertRange(position, newValues);
		}
		return true;
	}
	,
	removeRange: function (position, count) {
		for (var i = position; i < position + count && !$.ig.util.isNaN(this.minimum()) && !$.ig.util.isNaN(this.maximum()); ++i) {
			if (this.item(i) == this.minimum()) {
				this.minimum(NaN);
			}
			if (this.item(i) == this.maximum()) {
				this.maximum(NaN);
			}
		}
		this.values().removeRange(position, count);
		return true;
	}
	,
	replaceMinMax: function (oldValue, newValue) {
		if ($.ig.util.isNaN(oldValue)) {
			if (!$.ig.util.isNaN(newValue)) {
				if (!$.ig.util.isNaN(this.minimum())) {
					this.minimum(Math.min(newValue, this.minimum()));
				}
				if (!$.ig.util.isNaN(this.maximum())) {
					this.maximum(Math.max(newValue, this.maximum()));
				}
			}
			return;
		}
		if ($.ig.util.isNaN(newValue)) {
			this.minimum(!$.ig.util.isNaN(this.minimum()) && oldValue == this.minimum() ? NaN : this.minimum());
			this.maximum(!$.ig.util.isNaN(this.maximum()) && oldValue == this.maximum() ? NaN : this.maximum());
			return;
		}
		if (!$.ig.util.isNaN(this.minimum())) {
			if (oldValue == this.minimum() && newValue > this.minimum()) {
				this.minimum(NaN);
			} else {
				this.minimum(Math.min(newValue, this.minimum()));
			}
		}
		if (!$.ig.util.isNaN(this.maximum())) {
			if (oldValue == this.maximum() && newValue < this.maximum()) {
				this.maximum(NaN);
			} else {
				this.maximum(Math.max(newValue, this.maximum()));
			}
		}
	}
	,
	replaceRange: function (position, count) {
		var ret = false;
		for (var i = 0; i < count; ++i) {
			var oldValue = this.values().__inner[position + i];
			var newValue = this.toDouble(this.fastItemsSource().item(position + i));
			if (oldValue != newValue) {
				this.values().__inner[position + i] = newValue;
				ret = true;
				this.replaceMinMax(oldValue, newValue);
			}
		}
		return ret;
	}
	,
	_fastReflectionHelper: null,
	toDouble: function (item) {
		if (item == null) {
			return NaN;
		}
		var from_ = item;
		item = from_[this.__propertyName];
		if (this.__expectFunctions) {
			from_ = item;
			if (typeof(from_) == 'function') {
				item = from_();
			}
		}
		if (this.__coerceValue != null) {
			item = this.__coerceValue(item);
		}
		if (item == null) {
			return NaN;
		}
		return item;
		if (typeof item === 'number') {
			return item;
		}
	}
	,
	_values: null,
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	,
	quickSort: function (list, comparison) {
		$.ig.FastItemColumn.prototype.quickSort1(list, 0, list.count() - 1, comparison);
	}
	,
	quickSort1: function (list, low, high, comparison) {
		if (low < high) {
			var pp = $.ig.FastItemColumn.prototype.partition(list, low, high, comparison);
			$.ig.FastItemColumn.prototype.quickSort1(list, low, pp - 1, comparison);
			$.ig.FastItemColumn.prototype.quickSort1(list, pp + 1, high, comparison);
		}
	}
	,
	partition: function (list, low, high, comparison) {
		var pivot = list.item(high);
		var ii = low;
		for (var jj = low; jj < high; jj++) {
			if (comparison(list.item(jj), pivot) <= 0) {
				var swapA = list.item(ii);
				list.item(ii, list.item(jj));
				list.item(jj, swapA);
				ii++;
			}
		}
		var swapB = list.item(ii);
		list.item(ii, list.item(high));
		list.item(high, swapB);
		return ii;
	}
	,
	getSortedIndices1: function (values, comparison) {
		var result = new $.ig.List$1($.ig.Number.prototype.$type, 2, values.count());
		for (var i = 0; i < values.count(); i++) {
			result.add(i);
		}
		if (values.count() < 22) {
			$.ig.FastItemColumn.prototype.quickSort(result, function (i1, i2) {
				var v1 = values.item($.ig.util.getValue(i1));
				var v2 = values.item($.ig.util.getValue(i2));
				return comparison(v1, v2);
			});
		} else {
			result.sort2(function (i1, i2) {
				var v1 = values.item(i1);
				var v2 = values.item(i2);
				return comparison(v1, v2);
			});
		}
		return result;
	}
	,
	getSortedIndices: function () {
		return $.ig.FastItemColumn.prototype.getSortedIndices1(this.values(), function (o1, o2) {
			var d1 = o1;
			var d2 = o2;
			if (d1 < d2) {
				return -1;
			}
			if (d1 > d2) {
				return 1;
			}
			return 0;
		});
	}
	,
	asArray: function () {
		return this.values().asArray();
	}
	,
	$type: new $.ig.Type('FastItemColumn', $.ig.Object.prototype.$type, [$.ig.IFastItemColumnInternal.prototype.$type, $.ig.IFastItemColumn$1.prototype.$type.specialize(Number)])
}, true);

$.ig.util.defType('FastItemDateTimeColumn', 'Object', {
	__coerceValue: null,
	__expectFunctions: false,
	init: function (fastItemsSource, propertyName, coerceValue, expectFunctions) {
		this.__propertyName = null;
		this._hasMinimum = false;
		this._hasMaximum = false;
		$.ig.Object.prototype.init.call(this);
		this.__coerceValue = coerceValue;
		this.__expectFunctions = expectFunctions;
		this.propertyName(propertyName);
		this.fastItemsSource(fastItemsSource);
	},
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this._fastItemsSource = value;
			this.reset();
			return value;
		} else {
			return this._fastItemsSource;
		}
	}
	,
	_fastItemsSource: null,
	__propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this.__propertyName = value;
			return value;
		} else {
			return this.__propertyName;
		}
	}
	,
	_hasMinimum: false,
	_hasMaximum: false,
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			if (!this._hasMinimum && this.values() != null) {
				var en = this.values().getEnumerator();
				while (en.moveNext()) {
					var value = en.current();
					if (value < this._minimum) {
						this._minimum = value;
					}
				}
				if (this.values().count() > 0) {
					this._hasMinimum = true;
				}
			}
			return this._minimum;
		}
	}
	,
	_minimum: new Date(),
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			if (!this._hasMaximum && this.values() != null) {
				var en = this.values().getEnumerator();
				while (en.moveNext()) {
					var value = en.current();
					if (value > this._maximum) {
						this._maximum = value;
					}
				}
				if (this.values().count() > 0) {
					this._hasMaximum = true;
				}
			}
			return this._maximum;
		}
	}
	,
	_maximum: new Date(),
	item: function (index, value) {
		if (arguments.length === 2) {
			throw new $.ig.NotImplementedException(0);
			return value;
		} else {
			return this.values().__inner[index];
		}
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	contains: function (item) {
		return this.values().contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		this.values().copyTo(array, arrayIndex);
	}
	,
	count: function () {
		return this.values().count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	indexOf: function (item) {
		return this.values().indexOf(item);
	}
	,
	add: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	clear: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	remove: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	insert: function (index, item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	removeAt: function (index) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	reset: function () {
		this.values(null);
		this._hasMinimum = false;
		this._hasMaximum = false;
		return this.fastItemsSource() != null ? this.insertRange(0, this.fastItemsSource().count()) : true;
	}
	,
	insertRange: function (position, count) {
		var newValues = new Array(count);
		var source_ = this._fastItemsSource.asArray();
		var item_;
		var minimum = this.minimum();
		var maximum = this.maximum();
		var newValue;
		var newCount = 0;
		var coerce = this.__coerceValue;
		if (this.__coerceValue != null || this.__expectFunctions) {
			for (var i_ = position; i_ < position + count; ++i_) {
				item_ = source_[i_][this.__propertyName];
				if (this.__expectFunctions) {
					if (typeof(item_) == 'function') {
						item_ = item_();
					}
				}
				if (coerce != null) {
					item_ = coerce(item_);
				}
				newValue = item_ == null ? new Date() : item_;
				if (!this._hasMinimum) {
					minimum = newValue;
					this._hasMinimum = true;
				} else if (newValue < minimum) {
					minimum = newValue;
				}
				if (!this._hasMaximum) {
					maximum = newValue;
					this._hasMaximum = true;
				} else if (newValue > maximum) {
					maximum = newValue;
				}
				newValues[newCount] = newValue;
				newCount++;
			}
		} else {
			for (var i_ = position; i_ < position + count; ++i_) {
				item_ = source_[i_][this.__propertyName];
				newValue = item_ == null ? new Date() : item_;
				if (!this._hasMinimum) {
					minimum = newValue;
					this._hasMinimum = true;
				} else if (newValue < minimum) {
					minimum = newValue;
				}
				if (!this._hasMaximum) {
					maximum = newValue;
					this._hasMaximum = true;
				} else if (newValue > maximum) {
					maximum = newValue;
				}
				newValues[newCount] = newValue;
				newCount++;
			}
		}
		this.minimum(minimum);
		this.maximum(maximum);
		if (this.values() == null) {
			this.values(new $.ig.List$1($.ig.Date.prototype.$type, 1, newValues));
		} else {
			this.values().insertRange(position, newValues);
		}
		return true;
	}
	,
	removeRange: function (position, count) {
		for (var i = position; i < position + count; ++i) {
			if (+(this.item(i)) == +(this.minimum())) {
				this._hasMinimum = false;
			}
			if (+(this.item(i)) == +(this.maximum())) {
				this._hasMaximum = false;
			}
		}
		this.values().removeRange(position, count);
		return true;
	}
	,
	replaceMinMax: function (oldValue, newValue) {
		if (+oldValue != +($.ig.Date.prototype.minValue())) {
			if (+newValue != +($.ig.Date.prototype.minValue())) {
				this.minimum(newValue < this.minimum() ? newValue : this.minimum());
				this.maximum(newValue > this.maximum() ? newValue : this.maximum());
			}
			return;
		}
		this.minimum(newValue < this.minimum() ? newValue : this.minimum());
		this.maximum(newValue > this.maximum() ? newValue : this.maximum());
	}
	,
	replaceRange: function (position, count) {
		var ret = false;
		for (var i = 0; i < count; ++i) {
			var oldValue = this.values().__inner[position + i];
			var newValue = this.toDateTime(this.fastItemsSource().item(position + i));
			if (+oldValue != +newValue) {
				this.values().__inner[position + i] = newValue;
				ret = true;
				this.replaceMinMax(oldValue, newValue);
			}
		}
		return ret;
	}
	,
	_fastReflectionHelper: null,
	toDateTime: function (item) {
		if (item == null) {
			return $.ig.Date.prototype.minValue();
		}
		var from_ = item;
		item = from_[this.__propertyName];
		if (this.__expectFunctions) {
			from_ = item;
			if (typeof(from_) == 'function') {
				item = from_();
			}
		}
		if (this.__coerceValue != null) {
			item = this.__coerceValue(item);
		}
		if (item == null) {
			return $.ig.Date.prototype.minValue();
		}
		return item;
	}
	,
	_values: null,
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	,
	getSortedIndices: function () {
		return $.ig.FastItemColumn.prototype.getSortedIndices1(this.values(), function (o1, o2) {
			var d1 = o1;
			var d2 = o2;
			if (d1 < d2) {
				return -1;
			}
			if (d1 > d2) {
				return 1;
			}
			return 0;
		});
	}
	,
	asArray: function () {
		return this.values().asArray();
	}
	,
	$type: new $.ig.Type('FastItemDateTimeColumn', $.ig.Object.prototype.$type, [$.ig.IFastItemColumnInternal.prototype.$type, $.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Date.prototype.$type)])
}, true);

$.ig.util.defType('FastItemObjectColumn', 'Object', {
	__coerceValue: null,
	__expectFunctions: false,
	init: function (fastItemsSource, propertyName, coerceValue, expectFunctions) {
		$.ig.Object.prototype.init.call(this);
		this.__coerceValue = coerceValue;
		this.__expectFunctions = expectFunctions;
		this.propertyName(propertyName);
		this.fastItemsSource(fastItemsSource);
	},
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this._fastItemsSource = value;
			this.reset();
			return value;
		} else {
			return this._fastItemsSource;
		}
	}
	,
	_fastItemsSource: null,
	__propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this.__propertyName = value;
			return value;
		} else {
			return this.__propertyName;
		}
	}
	,
	minimum: function (value) {
		if (arguments.length === 1) {
			this.__minimum = value;
			return value;
		} else {
			return this.__minimum;
		}
	}
	,
	__minimum: null,
	maximum: function (value) {
		if (arguments.length === 1) {
			this.__maximum = value;
			return value;
		} else {
			return this.__maximum;
		}
	}
	,
	__maximum: null,
	item: function (index, value) {
		if (arguments.length === 2) {
			throw new $.ig.NotImplementedException(0);
			return value;
		} else {
			return this.values().__inner[index];
		}
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	contains: function (item) {
		return this.values().contains1(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		this.values().copyTo(array, arrayIndex);
	}
	,
	count: function () {
		return this.values().count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	indexOf: function (item) {
		return this.values().indexOf1(item);
	}
	,
	add: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	clear: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	remove: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	insert: function (index, item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	removeAt: function (index) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	reset: function () {
		this.values(null);
		return this.fastItemsSource() != null ? this.insertRange(0, this.fastItemsSource().count()) : true;
	}
	,
	insertRange: function (position, count) {
		var newValues = (function () {
			var $ret = new $.ig.List$1($.ig.Object.prototype.$type, 0);
			$ret.capacity(count);
			return $ret;
		}());
		for (var i = position; i < position + count; ++i) {
			var newValue = this.toObject(this.fastItemsSource().item(i));
			newValues.add1(newValue);
		}
		if (this.values() == null) {
			this.values(newValues);
		} else {
			this.values().insertRange(position, newValues);
		}
		return true;
	}
	,
	replaceRange: function (position, count) {
		var ret = false;
		for (var i = 0; i < count; ++i) {
			var oldValue = this.values().__inner[position + i];
			var newValue = this.toObject(this.fastItemsSource().item(position + i));
			if (oldValue != newValue) {
				this.values().__inner[position + i] = newValue;
				ret = true;
			}
		}
		return ret;
	}
	,
	removeRange: function (position, count) {
		this.values().removeRange(position, count);
		return true;
	}
	,
	_fastReflectionHelper: null,
	toObject: function (item) {
		if (item == null) {
			return null;
		}
		var from_ = item;
		item = from_[this.__propertyName];
		if (this.__expectFunctions) {
			from_ = item;
			if (typeof(from_) == 'function') {
				item = from_();
			}
		}
		if (this.__coerceValue != null) {
			item = this.__coerceValue(item);
		}
		return item;
	}
	,
	_values: null,
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	,
	getSortedIndices: function () {
		return $.ig.FastItemColumn.prototype.getSortedIndices1(this.values(), function (o1, o2) {
			var d1 = parseFloat(o1);
			var d2 = parseFloat(o2);
			if (d1 < d2) {
				return -1;
			}
			if (d1 > d2) {
				return 1;
			}
			return 0;
		});
	}
	,
	asArray: function () {
		return this.values().asArray();
	}
	,
	$type: new $.ig.Type('FastItemObjectColumn', $.ig.Object.prototype.$type, [$.ig.IFastItemColumnInternal.prototype.$type, $.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Object.prototype.$type)])
}, true);

$.ig.util.defType('FastItemIntColumn', 'Object', {
	__coerceValue: null,
	__expectFunctions: false,
	init: function (fastItemsSource, propertyName, coerceValue, expectFunctions) {
		this.__propertyName = null;
		$.ig.Object.prototype.init.call(this);
		this.__coerceValue = coerceValue;
		this.__expectFunctions = expectFunctions;
		this.propertyName(propertyName);
		this.fastItemsSource(fastItemsSource);
	},
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this._fastItemsSource = value;
			this.reset();
			return value;
		} else {
			return this._fastItemsSource;
		}
	}
	,
	_fastItemsSource: null,
	__propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this.__propertyName = value;
			return value;
		} else {
			return this.__propertyName;
		}
	}
	,
	minimum: function (value) {
		if (arguments.length === 1) {
			this.__minimum = value;
			return value;
		} else {
			return this.__minimum;
		}
	}
	,
	__minimum: 0,
	maximum: function (value) {
		if (arguments.length === 1) {
			this.__maximum = value;
			return value;
		} else {
			return this.__maximum;
		}
	}
	,
	__maximum: 0,
	item: function (index, value) {
		if (arguments.length === 2) {
			throw new $.ig.NotImplementedException(0);
			return value;
		} else {
			return this.values().__inner[index];
		}
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	getEnumerator: function () {
		return this.values().getEnumerator();
	}
	,
	contains: function (item) {
		return this.values().contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		this.values().copyTo(array, arrayIndex);
	}
	,
	count: function () {
		return this.values().count();
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	indexOf: function (item) {
		return this.values().indexOf(item);
	}
	,
	add: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	clear: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	remove: function (item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	insert: function (index, item) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	removeAt: function (index) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	reset: function () {
		this.values(null);
		return this.fastItemsSource() != null ? this.insertRange(0, this.fastItemsSource().count()) : true;
	}
	,
	insertRange: function (position, count) {
		var newValues = new Array(count);
		var source_ = this._fastItemsSource.asArray();
		var item_;
		var minimum = this.minimum();
		var maximum = this.maximum();
		var newCount = 0;
		var coerce = this.__coerceValue;
		if (this.__coerceValue != null || this.__expectFunctions) {
			for (var i_ = position; i_ < position + count; ++i_) {
				item_ = source_[i_][this.__propertyName];
				if (this.__expectFunctions) {
					if (typeof(item_) == 'function') {
						item_ = item_();
					}
				}
				if (coerce != null) {
					item_ = coerce(item_);
				}
				var newValue = item_ == null ? 0 : $.ig.util.getValue(item_);
				newValues[newCount] = newValue;
				newCount++;
			}
		} else {
			for (var i_ = position; i_ < position + count; ++i_) {
				item_ = source_[i_][this.__propertyName];
				var newValue1 = item_ == null ? 0 : $.ig.util.getValue(item_);
				newValues[newCount] = newValue1;
				newCount++;
			}
		}
		if (this.values() == null) {
			this.values(new $.ig.List$1($.ig.Number.prototype.$type, 1, newValues));
		} else {
			this.values().insertRange(position, newValues);
		}
		return true;
	}
	,
	replaceRange: function (position, count) {
		var ret = false;
		for (var i = 0; i < count; ++i) {
			var oldValue = this.values().__inner[position + i];
			var newValue = this.toInt(this.fastItemsSource().item(position + i));
			if (oldValue != newValue) {
				this.values().__inner[position + i] = newValue;
				ret = true;
			}
		}
		return ret;
	}
	,
	removeRange: function (position, count) {
		this.values().removeRange(position, count);
		return true;
	}
	,
	_fastReflectionHelper: null,
	toInt: function (item) {
		var from_ = item;
		item = from_[this.__propertyName];
		if (this.__expectFunctions) {
			from_ = item;
			if (typeof(from_) == 'function') {
				item = from_();
			}
		}
		if (this.__coerceValue != null) {
			item = this.__coerceValue(item);
		}
		if (item == null) {
			return 0;
		}
		return $.ig.util.getValue(item);
	}
	,
	_values: null,
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	,
	getSortedIndices: function () {
		return $.ig.FastItemColumn.prototype.getSortedIndices1(this.values(), function (o1, o2) {
			var d1 = $.ig.util.getValue(o1);
			var d2 = $.ig.util.getValue(o2);
			if (d1 < d2) {
				return -1;
			}
			if (d1 > d2) {
				return 1;
			}
			return 0;
		});
	}
	,
	asArray: function () {
		return this.values().asArray();
	}
	,
	$type: new $.ig.Type('FastItemIntColumn', $.ig.Object.prototype.$type, [$.ig.IFastItemColumnInternal.prototype.$type, $.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Number.prototype.$type)])
}, true);

$.ig.util.defType('IFastItemsSource', 'Object', {
	$type: new $.ig.Type('IFastItemsSource', null)
}, true);

$.ig.util.defType('FastItemsSource', 'Object', {
	init: function () {
		this._columns = new $.ig.Dictionary$2(String, $.ig.ColumnReference.prototype.$type, 0);
		this._contents = new $.ig.List$1($.ig.Object.prototype.$type, 0);
		this._index = null;
		$.ig.Object.prototype.init.call(this);
	},
	event: null,
	raiseDataSourceEvent: function (action, position, count) {
		if (this.event != null) {
			this.event(this, new $.ig.FastItemsSourceEventArgs(0, action, position, count));
		}
	}
	,
	raiseDataSourceEvent1: function (position, propertyName) {
		if (this.event != null) {
			this.event(this, new $.ig.FastItemsSourceEventArgs(1, position, propertyName));
		}
	}
	,
	itemsSource: function (value) {
		if (arguments.length === 1) {
			if (this._itemsSource == value) {
				return;
			}
			this.detach();
			this._itemsSource = value;
			this._contents.clear();
			this._index = null;
			this.attach();
			var en = this._columns.values().getEnumerator();
			while (en.moveNext()) {
				var referencedColumn = en.current();
				referencedColumn._fastItemColumn.reset();
			}
			this.raiseDataSourceEvent($.ig.FastItemsSourceEventAction.prototype.insert, 0, this._contents.count());
			return value;
		} else {
			return this._itemsSource;
		}
	}
	,
	detach: function () {
	}
	,
	onItemsSourceEventProxyWeakCollectionChanged: function (fastItemsSource, sender, e) {
		var fis = fastItemsSource;
		switch (e.action()) {
			case $.ig.NotifyCollectionChangedAction.prototype.add:
				fis.dataSourceAdd(e.newStartingIndex(), e.newItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.remove:
				fis.dataSourceRemove(e.oldStartingIndex(), e.oldItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.replace:
				fis.dataSourceReplace(e.newStartingIndex(), e.oldItems(), e.newItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.reset:
				fis.dataSourceReset();
				break;
		}
	}
	,
	attach: function () {
		this._contents.insertRange1(this._contents.count(), this._itemsSource);
	}
	,
	dataSourceAdd: function (position, newItems) {
		if (this._index != null) {
			for (var i = 0; i < newItems.count(); ++i) {
				this._index.add(newItems.item(i), position + i);
			}
			for (var i1 = position; i1 < this._contents.count(); ++i1) {
				this._index.item(this._contents.__inner[i1], i1 + newItems.count());
			}
		}
		this._contents.insertRange1(position, newItems);
		var en = this._columns.values().getEnumerator();
		while (en.moveNext()) {
			var referencedColumn = en.current();
			referencedColumn._fastItemColumn.insertRange(position, newItems.count());
		}
		this.raiseDataSourceEvent($.ig.FastItemsSourceEventAction.prototype.insert, position, newItems.count());
	}
	,
	dataSourceRemove: function (position, oldItems) {
		this._contents.removeRange(position, oldItems.count());
		if (this._index != null) {
			var en = oldItems.getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				this._index.remove(item);
			}
			for (var i = position; i < this._contents.count(); ++i) {
				this._index.item(this._contents.__inner[i], i);
			}
		}
		var en1 = this._columns.values().getEnumerator();
		while (en1.moveNext()) {
			var referencedColumn = en1.current();
			referencedColumn._fastItemColumn.removeRange(position, oldItems.count());
		}
		this.raiseDataSourceEvent($.ig.FastItemsSourceEventAction.prototype.remove, position, oldItems.count());
	}
	,
	dataSourceReplace: function (position, oldItems, newItems) {
		for (var i = 0; i < newItems.count(); ++i) {
			this._contents.__inner[position + i] = newItems.item(i);
		}
		if (this._index != null) {
			var en = oldItems.getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				this._index.remove(item);
			}
			for (var i1 = 0; i1 < newItems.count(); ++i1) {
				this._index.add(newItems.item(i1), position + i1);
			}
		}
		var en1 = this._columns.values().getEnumerator();
		while (en1.moveNext()) {
			var referencedColumn = en1.current();
			referencedColumn._fastItemColumn.replaceRange(position, newItems.count());
		}
		this.raiseDataSourceEvent($.ig.FastItemsSourceEventAction.prototype.replace, position, oldItems.count());
	}
	,
	dataSourceReset: function () {
		this._contents.clear();
		this._index = null;
		this._contents.insertRange1(0, this._itemsSource);
		var en = this._columns.values().getEnumerator();
		while (en.moveNext()) {
			var referencedColumn = en.current();
			referencedColumn._fastItemColumn.reset();
		}
		this.raiseDataSourceEvent($.ig.FastItemsSourceEventAction.prototype.reset, 0, this._contents.count());
	}
	,
	dataSourceChange: function (item, propertyName) {
		var $self = this;
		var columnReference = null;
		var position = this.indexOf(item);
		if (position == -1) {
			throw new $.ig.ArgumentException(1, "item");
		}
		if (String.isNullOrEmpty(propertyName)) {
			var en = this._columns.getEnumerator();
			while (en.moveNext()) {
				var col = en.current();
				col.value()._fastItemColumn.replaceRange(position, 1);
				this.raiseDataSourceEvent1(position, col.value()._fastItemColumn.propertyName());
			}
		} else {
			if ((function () { var $ret = $self._columns.tryGetValue(propertyName, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
				columnReference._fastItemColumn.replaceRange(position, 1);
			}
			if ((function () { var $ret = $self._columns.tryGetValue(propertyName + "_object", columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
				columnReference._fastItemColumn.replaceRange(position, 1);
			}
			this.raiseDataSourceEvent1(position, propertyName);
		}
	}
	,
	count: function () {
		return this._contents.count();
	}
	,
	item: function (i) {
		return this._contents.__inner[i];
	}
	,
	getEnumerator: function () {
		return this._contents.getEnumerator();
	}
	,
	indexOf: function (item) {
		var $self = this;
		var ret;
		if (this._index == null && this._contents.count() > 0) {
			this._index = new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.Number.prototype.$type, 0);
			var contents_ = this._contents;
			var index_ = this._index;
			for (var j_ = 0; j_ < this._contents.count(); j_++) {
				var o = contents_.__inner[j_];
				if (!this._index.containsKey(o)) {
					this._index.add(o, j_);
				}
			}
		}
		if ((function () { var $ret = $self._index.tryGetValue(item, ret); ret = $ret.p1; return $ret.ret; }())) {
			return ret;
		} else {
			return -1;
		}
	}
	,
	registerColumnDateTime: function (propertyName, coerceValue, expectFunctions) {
		var $self = this;
		var fastItemColumn = null;
		if (propertyName != null) {
			var columnReference = null;
			if (!(function () { var $ret = $self._columns.tryGetValue(propertyName, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
				columnReference = new $.ig.ColumnReference(new $.ig.FastItemDateTimeColumn(this, propertyName, coerceValue, expectFunctions));
				this._columns.add(propertyName, columnReference);
			}
			columnReference.references(columnReference.references() + 1);
			fastItemColumn = $.ig.util.cast($.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Date.prototype.$type), columnReference._fastItemColumn);
		}
		return fastItemColumn;
	}
	,
	registerColumnObject: function (propertyName, coerceValue, expectFunctions) {
		var $self = this;
		var fastItemColumn = null;
		var key = propertyName + "_object";
		if (propertyName != null) {
			var columnReference = null;
			if (!(function () { var $ret = $self._columns.tryGetValue(key, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
				columnReference = new $.ig.ColumnReference(new $.ig.FastItemObjectColumn(this, propertyName, coerceValue, expectFunctions));
				this._columns.add(key, columnReference);
			}
			columnReference.references(columnReference.references() + 1);
			fastItemColumn = $.ig.util.cast($.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Object.prototype.$type), columnReference._fastItemColumn);
		}
		return fastItemColumn;
	}
	,
	registerColumnInt: function (propertyName, coerceValue, expectFunctions) {
		var $self = this;
		var fastItemColumn = null;
		if (propertyName == null) {
			propertyName = "";
		}
		var columnReference = null;
		if (!(function () { var $ret = $self._columns.tryGetValue(propertyName, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
			columnReference = new $.ig.ColumnReference(new $.ig.FastItemIntColumn(this, propertyName, coerceValue, expectFunctions));
			this._columns.add(propertyName, columnReference);
		}
		columnReference.references(columnReference.references() + 1);
		fastItemColumn = $.ig.util.cast($.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Number.prototype.$type), columnReference._fastItemColumn);
		return fastItemColumn;
	}
	,
	registerColumn: function (propertyName, coerceValue, expectFunctions) {
		var $self = this;
		var fastItemColumn = null;
		if (propertyName == null) {
			propertyName = "";
		}
		var columnReference = null;
		if (!(function () { var $ret = $self._columns.tryGetValue(propertyName, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
			columnReference = new $.ig.ColumnReference(new $.ig.FastItemColumn(this, propertyName, coerceValue, expectFunctions));
			this._columns.add(propertyName, columnReference);
		}
		columnReference.references(columnReference.references() + 1);
		fastItemColumn = $.ig.util.cast($.ig.IFastItemColumn$1.prototype.$type.specialize(Number), columnReference._fastItemColumn);
		return fastItemColumn;
	}
	,
	deregisterColumn: function (fastItemColumn) {
		var $self = this;
		var propertyName = fastItemColumn != null ? fastItemColumn.propertyName() : null;
		var key = propertyName;
		if ($.ig.util.cast($.ig.IFastItemColumn$1.prototype.$type.specialize($.ig.Object.prototype.$type), fastItemColumn) !== null) {
			key += "_object";
		}
		if (propertyName != null) {
			var columnReference = null;
			if ((function () { var $ret = $self._columns.tryGetValue(propertyName, columnReference); columnReference = $ret.p1; return $ret.ret; }())) {
				columnReference.references(columnReference.references() - 1);
				if (columnReference.references() == 0) {
					this._columns.remove(key);
				}
			}
		}
	}
	,
	_columns: null,
	_itemsSource: null,
	_contents: null,
	_index: null,
	asArray: function () {
		return this._contents.asArray();
	}
	,
	handleCollectionChanged: function (e) {
		switch (e.action()) {
			case $.ig.NotifyCollectionChangedAction.prototype.add:
				this.dataSourceAdd(e.newStartingIndex(), e.newItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.remove:
				this.dataSourceRemove(e.oldStartingIndex(), e.oldItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.replace:
				this.dataSourceReplace(e.newStartingIndex(), e.oldItems(), e.newItems());
				break;
			case $.ig.NotifyCollectionChangedAction.prototype.reset:
				this.dataSourceReset();
				break;
		}
	}
	,
	$type: new $.ig.Type('FastItemsSource', $.ig.Object.prototype.$type, [$.ig.IEnumerable.prototype.$type, $.ig.IFastItemsSource.prototype.$type])
}, true);

$.ig.util.defType('ColumnReference', 'Object', {
	init: function (fastItemColumn) {
		$.ig.Object.prototype.init.call(this);
		this._fastItemColumn = fastItemColumn;
		this.references(0);
	},
	_fastItemColumn: null,
	_references: 0,
	references: function (value) {
		if (arguments.length === 1) {
			this._references = value;
			return value;
		} else {
			return this._references;
		}
	}
	,
	$type: new $.ig.Type('ColumnReference', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FastItemsSourceReference', 'Object', {
	init: function (source) {
		$.ig.Object.prototype.init.call(this);
		this._fastItemsSource = source;
		this._references = 0;
	},
	_fastItemsSource: null,
	_references: 0,
	$type: new $.ig.Type('FastItemsSourceReference', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('IFastItemsSourceProvider', 'Object', {
	$type: new $.ig.Type('IFastItemsSourceProvider', null)
}, true);

$.ig.util.defType('FastReflectionHelper', 'Object', {
	init: function (useTraditionalReflection, propertyName) {
		$.ig.Object.prototype.init.call(this);
		this.useTraditionalReflection(useTraditionalReflection);
		this.updatePropertyName(propertyName);
	},
	__propertyName: null,
	updatePropertyName: function (propertyName) {
		this.__propertyName = propertyName;
	}
	,
	_useTraditionalReflection: false,
	useTraditionalReflection: function (value) {
		if (arguments.length === 1) {
			this._useTraditionalReflection = value;
			return value;
		} else {
			return this._useTraditionalReflection;
		}
	}
	,
	getPropertyValue: function (item) {
		var from_ = item;
		return from_[this.__propertyName];
	}
	,
	invalid: function () {
		return false;
	}
	,
	$type: new $.ig.Type('FastReflectionHelper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('IRenderer', 'Object', {
	$type: new $.ig.Type('IRenderer', null)
}, true);

$.ig.util.defType('CanvasRenderScheduler', 'Object', {
	init: function () {
		this.__sortDirty = true;
		this.__scheduled = false;
		this.__scheduledId = -1;
		$.ig.Object.prototype.init.call(this);
		this.targets(new $.ig.List$1($.ig.ISchedulableRender.prototype.$type, 0));
		this.dependsOn(new $.ig.List$1($.ig.CanvasRenderScheduler.prototype.$type, 0));
	},
	__sortDirty: false,
	_targets: null,
	targets: function (value) {
		if (arguments.length === 1) {
			this._targets = value;
			return value;
		} else {
			return this._targets;
		}
	}
	,
	_dependsOn: null,
	dependsOn: function (value) {
		if (arguments.length === 1) {
			this._dependsOn = value;
			return value;
		} else {
			return this._dependsOn;
		}
	}
	,
	register: function (target) {
		this.__sortDirty = true;
		this.targets().add(target);
	}
	,
	unRegister: function (target) {
		this.__sortDirty = true;
		this.targets().remove(target);
	}
	,
	sortDirty: function () {
		this.__sortDirty = true;
		this.schedule();
	}
	,
	isScheduled: function () {
		return this.__scheduled;
	}
	,
	__scheduled: false,
	__scheduledId: 0,
	schedule: function () {
		if (!this.__scheduled) {
			this.__scheduled = true;
			this.__scheduledId = window.setTimeout(this.refresh.runOn(this), 0);
		}
	}
	,
	schedule1: function (context1, context2) {
		this.schedule();
	}
	,
	flush: function () {
		if (this.__scheduledId != -1) {
			window.clearTimeout(this.__scheduledId);
			this.__scheduledId = -1;
		}
		if (this.__scheduled) {
			this.refresh();
		}
	}
	,
	refresh: function () {
		this.__scheduledId = -1;
		if (this.__scheduled) {
			this.__scheduled = false;
			if (this.dependsOn().count() > 0) {
				for (var i = 0; i < this.dependsOn().count(); i++) {
					this.dependsOn().__inner[i].flush();
				}
			}
			if (this.__sortDirty) {
				this.sortTargets();
			}
			this.renderTargets();
		}
	}
	,
	renderTargets: function () {
		if (this.isDisabled()) {
			return;
		}
		var first = true;
		for (var i = 0; i < this.targets().count(); i++) {
			var target = this.targets().__inner[i];
			target.preRender();
		}
		for (var i1 = 0; i1 < this.targets().count(); i1++) {
			var target1 = this.targets().__inner[i1];
			target1.undirty(first);
			first = false;
		}
		for (var i2 = 0; i2 < this.targets().count(); i2++) {
			var target2 = this.targets().__inner[i2];
			target2.postRender();
		}
	}
	,
	sortTargets: function () {
		this.targets().sort2(function (o1, o2) {
			var t1 = o1;
			var t2 = o2;
			if (t1.index() < t2.index()) {
				return -1;
			}
			if (t1.index() > t2.index()) {
				return 1;
			}
			return 0;
		});
		this.__sortDirty = false;
	}
	,
	_isDisabled: false,
	isDisabled: function (value) {
		if (arguments.length === 1) {
			this._isDisabled = value;
			return value;
		} else {
			return this._isDisabled;
		}
	}
	,
	$type: new $.ig.Type('CanvasRenderScheduler', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CanvasViewRenderer', 'Object', {
	init: function () {
		this.__trackBounds = false;
		this.__validBounds = false;
		this.__globalAlpha = 1;
		$.ig.Object.prototype.init.call(this);
	},
	__context: null,
	getUnderlyingContext: function () {
		return this.__context;
	}
	,
	data: function (value) {
		if (arguments.length === 1) {
			this.__context = value;
			return value;
		} else {
			return this.__context;
		}
	}
	,
	createGradient1: function (brush, minX, minY, maxX, maxY, lineWidth, isStroke) {
		return $.ig.CanvasViewRenderer.prototype.createGradient(this.__context, brush, minX, minY, maxX, maxY, lineWidth, isStroke);
	}
	,
	createGradient: function (context, brush, minX, minY, maxX, maxY, lineWidth, isStroke) {
		var gradient;
		if (brush._useCustomDirection) {
			var _minX, _minY, _maxX, _maxY, ratio;
			ratio = maxX - minX;
			_minX = minX + brush._startX * ratio;
			_maxX = minX + brush._endX * ratio;
			ratio = maxY - minY;
			_minY = minY + brush._startY * ratio;
			_maxY = minY + brush._endY * ratio;
			if (isStroke) {
				var halfWidth = lineWidth / 2;
				_minX -= halfWidth;
				_maxX += halfWidth;
				_minY -= halfWidth;
				_maxY += halfWidth;
			}
			gradient = context.createLinearGradient(_minX, _minY, _maxX, _maxY);
		} else {
			if (isStroke) {
				var halfWidth1 = lineWidth / 2;
				minX -= halfWidth1;
				maxX += halfWidth1;
				minY -= halfWidth1;
				maxY += halfWidth1;
			}
			gradient = context.createLinearGradient(minX, minY, minX, maxY);
		}
		for (var i = 0; i < brush._gradientStops.length; i++) {
			var stop = brush._gradientStops[i];
			gradient.addColorStop(stop._offset, stop.__fill);
		}
		return gradient;
	}
	,
	renderRectangle: function (rectangle) {
		if (rectangle.__visibility != $.ig.Visibility.prototype.visible) {
			return;
		}
		var left = rectangle.canvasLeft();
		var top = rectangle.canvasTop();
		var width = rectangle.width();
		var height = rectangle.height();
		var radiusX = rectangle.radiusX();
		var radiusY = rectangle.radiusY();
		this.__context.beginPath();
		this.__context.globalAlpha = (rectangle.__opacity * this.__globalAlpha);
		if (radiusX > 0 || radiusY > 0) {
			if (radiusX > width / 2) {
				radiusX = (width / 2);
			}
			if (radiusY > height / 2) {
				radiusY = (height / 2);
			}
			var radius = Math.min(radiusX, radiusY);
			this.__context.beginPath();
			this.__context.moveTo(left + radius, top);
			this.__context.lineTo(left + width - radius, top);
			this.__context.arc(left + width - radius, top + radius, radius, (3 / 2 * Math.PI), 0, false);
			this.__context.lineTo(left + width, top + height - radius);
			this.__context.arc(left + width - radius, top + height - radius, radius, 0, (Math.PI / 2), false);
			this.__context.lineTo(left + radius, top + height);
			this.__context.arc(left + radius, top + height - radius, radius, (Math.PI / 2), Math.PI, false);
			this.__context.lineTo(left, top + radius);
			this.__context.arc(left + radius, top + radius, radius, Math.PI, (3 / 2 * Math.PI), false);
			this.__context.closePath();
		} else {
			this.__context.rect(left, top, width, height);
		}
		var fill = rectangle.__fill;
		var stroke = rectangle.__stroke;
		if (fill != null) {
			if (fill._isGradient && top == top && left == left) {
				this.__context.fillStyle = this.createGradient1(fill, left, top, left + width, top + height, rectangle.strokeThickness(), false);
			} else {
				this.__context.fillStyle = fill.__fill;
			}
			this.__context.fill();
		}
		if (stroke != null) {
			if (stroke._isGradient && top == top && left == left) {
				this.__context.strokeStyle = this.createGradient1(stroke, left, top, left + width, top + height, rectangle.strokeThickness(), true);
			} else {
				this.__context.strokeStyle = stroke.__fill;
			}
			this.__context.lineWidth = rectangle.strokeThickness();
			this.__context.stroke();
		}
		this.__context.globalAlpha = 1;
	}
	,
	__minX: 0,
	__maxX: 0,
	__minY: 0,
	__maxY: 0,
	__trackBounds: false,
	__validBounds: false,
	renderPath: function (path) {
		if (path.__visibility != $.ig.Visibility.prototype.visible) {
			return;
		}
		this.__context.beginPath();
		if (path.__opacity < 1 || this.__globalAlpha < 1) {
			this.__context.globalAlpha = (path.__opacity * this.__globalAlpha);
		}
		var fill = path.__fill;
		var stroke = path.__stroke;
		this.__trackBounds = (fill != null && fill._isGradient) || (stroke != null && stroke._isGradient);
		if (this.__trackBounds) {
			this.__maxX = -1.7976931348623157E+308;
			this.__maxY = -1.7976931348623157E+308;
			this.__minX = 1.7976931348623157E+308;
			this.__minY = 1.7976931348623157E+308;
			this.__validBounds = false;
		}
		this.renderGeometry(path.data());
		if (fill != null) {
			if (fill._isGradient && this.__validBounds) {
				this.__context.fillStyle = this.createGradient1(fill, this.__minX, this.__minY, this.__maxX, this.__maxY, path.strokeThickness(), false);
			} else {
				this.__context.fillStyle = path.__fill.__fill;
			}
			this.__context.fill();
		}
		if (stroke != null) {
			if (stroke._isGradient && this.__validBounds) {
				this.__context.strokeStyle = this.createGradient1(stroke, this.__minX, this.__minY, this.__maxX, this.__maxY, path.strokeThickness(), true);
			} else {
				this.__context.strokeStyle = path.__stroke.__fill;
			}
			this.__context.lineWidth = path.strokeThickness();
			this.__context.stroke();
		}
		if (path.__opacity < 1 || this.__globalAlpha < 1) {
			this.__context.globalAlpha = 1;
		}
	}
	,
	renderGeometry: function (geometry) {
		if (geometry == null) {
			return;
		}
		var type = geometry.type();
		switch (type) {
			case $.ig.GeometryType.prototype.group:
				for (var i = 0; i < (geometry).children().count(); i++) {
					this.renderGeometry((geometry).children().__inner[i]);
				}
				break;
			case $.ig.GeometryType.prototype.path:
				this.renderPathGeometry(geometry);
				break;
			case $.ig.GeometryType.prototype.line:
				this.renderLineGeometry(geometry);
				break;
			case $.ig.GeometryType.prototype.rectangle:
				this.renderRectangleGeometry(geometry);
				break;
			case $.ig.GeometryType.prototype.ellipse:
				this.renderEllipseGeometry(geometry);
				break;
		}
	}
	,
	renderEllipseGeometry: function (ellipseGeometry) {
		this.__context.moveTo(ellipseGeometry.center().__x, (ellipseGeometry.center().__y - ellipseGeometry.radiusY()));
		this.__lastSegmentPoint = { __x: ellipseGeometry.center().__x, __y: ellipseGeometry.center().__y - ellipseGeometry.radiusY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var a1 = (function () {
			var $ret = new $.ig.ArcSegment();
			$ret.point({ __x: ellipseGeometry.center().__x, __y: ellipseGeometry.center().__y + ellipseGeometry.radiusY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			$ret.isLargeArc(false);
			$ret.size(new $.ig.Size(1, ellipseGeometry.radiusX(), ellipseGeometry.radiusY()));
			return $ret;
		}());
		var a2 = (function () {
			var $ret = new $.ig.ArcSegment();
			$ret.point({ __x: ellipseGeometry.center().__x, __y: ellipseGeometry.center().__y - ellipseGeometry.radiusY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			$ret.isLargeArc(false);
			$ret.size(new $.ig.Size(1, ellipseGeometry.radiusX(), ellipseGeometry.radiusY()));
			return $ret;
		}());
		var oldTrack = this.__trackBounds;
		this.__trackBounds = false;
		this.renderArcSegment(a1);
		this.renderArcSegment(a2);
		this.__trackBounds = oldTrack;
		if (!this.__trackBounds) {
			return;
		}
		var minX = ellipseGeometry.center().__x - ellipseGeometry.radiusX();
		var maxX = ellipseGeometry.center().__y + ellipseGeometry.radiusX();
		var minY = ellipseGeometry.center().__x - ellipseGeometry.radiusY();
		var maxY = ellipseGeometry.center().__y + ellipseGeometry.radiusY();
		var currMaxX = this.__maxX;
		var currMaxY = this.__maxY;
		var currMinX = this.__minX;
		var currMinY = this.__minY;
		this.__minX = minX < currMinX ? minX : currMinX;
		this.__minY = minY < currMinY ? minY : currMinY;
		this.__maxX = maxX > currMaxX ? maxX : currMaxX;
		this.__maxY = maxY > currMaxY ? maxY : currMaxY;
		this.__validBounds = true;
	}
	,
	renderPathGeometry: function (pathGeometry) {
		var figures = pathGeometry.figures();
		var count = figures.count();
		for (var i = 0; i < count; i++) {
			this.renderFigure(figures.__inner[i]);
		}
	}
	,
	renderFigure: function (figure) {
		var p = figure == null ? null : figure.__startPoint;
		if ($.ig.Point.prototype.l_op_Equality(p, null)) {
			return;
		}
		var x = p.__x;
		var y = p.__y;
		this.__context.moveTo(x, y);
		if (this.__trackBounds) {
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			this.__minX = x < currMinX ? x : currMinX;
			this.__minY = y < currMinY ? y : currMinY;
			this.__maxX = x > currMaxX ? x : currMaxX;
			this.__maxY = y > currMaxY ? y : currMaxY;
			this.__validBounds = true;
		}
		this.__lastSegmentPoint = p;
		var segments = figure.__segments;
		var count = segments.count();
		for (var i = 0; i < count; i++) {
			this.renderSegment(segments.__inner[i]);
		}
		if (figure.__isClosed) {
			this.__context.closePath();
		}
	}
	,
	renderSegment: function (segment) {
		var type = segment.type();
		switch (type) {
			case $.ig.PathSegmentType.prototype.line:
				this.renderLineSegment(segment);
				break;
			case $.ig.PathSegmentType.prototype.polyLine:
				this.renderPolyLineSegment(segment);
				break;
			case $.ig.PathSegmentType.prototype.arc:
				this.renderArcSegment(segment);
				break;
			case $.ig.PathSegmentType.prototype.bezier:
				this.renderBezierSegment(segment);
				break;
			case $.ig.PathSegmentType.prototype.polyBezier:
				this.renderPolyBezierSegment(segment);
				break;
		}
	}
	,
	__lastSegmentPoint: null,
	updateBoundsFromBezier: function (x0, y0, x1, y1, x2, y2, x3, y3) {
		var delta = 1 / 50;
		var oneMinusT;
		var oneMinusT2;
		var oneMinusT3;
		var t2;
		var t3;
		var currX;
		var currY;
		var currMinX = this.__minX;
		var currMinY = this.__minY;
		var currMaxX = this.__maxX;
		var currMaxY = this.__maxY;
		for (var t = 0; t <= 1; t += delta) {
			oneMinusT = 1 - t;
			oneMinusT2 = oneMinusT * oneMinusT;
			oneMinusT3 = oneMinusT2 * oneMinusT;
			t2 = t * t;
			t3 = t2 * t;
			currX = oneMinusT3 * x0 + 3 * oneMinusT2 * t * x1 + 3 * oneMinusT * t2 * x2 + t3 * x3;
			currY = oneMinusT3 * y0 + 3 * oneMinusT2 * t * y1 + 3 * oneMinusT * t2 * y2 + t3 * y3;
			currMinX = currX < currMinX ? currX : currMinX;
			currMinY = currY < currMinY ? currY : currMinY;
			currMaxX = currX > currMaxX ? currX : currMaxX;
			currMaxY = currY > currMaxY ? currY : currMaxY;
		}
		this.__minX = currMinX;
		this.__minY = currMinY;
		this.__maxX = currMaxX;
		this.__maxY = currMaxY;
		this.__validBounds = true;
	}
	,
	renderBezierSegment: function (segment) {
		this.__context.bezierCurveTo(segment.point1().__x, segment.point1().__y, segment.point2().__x, segment.point2().__y, segment.point3().__x, segment.point3().__y);
		if (this.__trackBounds) {
			this.updateBoundsFromBezier(this.__lastSegmentPoint.__x, this.__lastSegmentPoint.__y, segment.point1().__x, segment.point1().__y, segment.point2().__x, segment.point2().__y, segment.point3().__x, segment.point3().__y);
		}
	}
	,
	renderPolyBezierSegment: function (arcSegment) {
		var i = 0;
		var pointsCount = arcSegment.points().count();
		var points = arcSegment.points();
		var p1 = this.__lastSegmentPoint;
		var p2 = this.__lastSegmentPoint;
		var p3 = this.__lastSegmentPoint;
		var trackBounds = this.__trackBounds;
		while (i < pointsCount) {
			if (i + 1 < pointsCount && i + 2 < pointsCount) {
				p1 = points.__inner[i];
				p2 = points.__inner[i + 1];
				p3 = points.__inner[i + 2];
				this.__context.bezierCurveTo(p1.__x, p1.__y, p2.__x, p2.__y, p3.__x, p3.__y);
				if (trackBounds) {
					this.updateBoundsFromBezier(this.__lastSegmentPoint.__x, this.__lastSegmentPoint.__y, p1.__x, p1.__y, p2.__x, p2.__y, p3.__x, p3.__y);
					this.__lastSegmentPoint = p3;
				}
			}
			i = i + 3;
		}
		this.__lastSegmentPoint = p3;
	}
	,
	updateBoundsFromArc: function (center, startAngle, endAngle, radius, isCounter) {
		var points = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(center);
		points.add({ __x: center.__x + Math.cos(startAngle) * radius, __y: center.__y + Math.sin(startAngle) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		points.add({ __x: center.__x + Math.cos(endAngle) * radius, __y: center.__y + Math.sin(endAngle) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		var threeSixty = Math.PI * 2;
		var ninety = Math.PI / 2;
		var oneEighty = Math.PI;
		var twoSeventy = Math.PI * 3 / 2;
		while (startAngle < 0) {
			startAngle += threeSixty;
		}
		while (startAngle > threeSixty) {
			startAngle -= threeSixty;
		}
		while (endAngle < 0) {
			endAngle += threeSixty;
		}
		while (endAngle > threeSixty) {
			endAngle -= threeSixty;
		}
		if (isCounter) {
			if ((0 > endAngle && 0 < startAngle) || (threeSixty > endAngle && threeSixty < startAngle) || (startAngle < endAngle)) {
				points.add({ __x: center.__x + Math.cos(0) * radius, __y: center.__y + Math.sin(0) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (ninety > endAngle && ninety < startAngle) {
				points.add({ __x: center.__x + Math.cos(ninety) * radius, __y: center.__y + Math.sin(ninety) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (oneEighty > endAngle && oneEighty < startAngle) {
				points.add({ __x: center.__x + Math.cos(oneEighty) * radius, __y: center.__y + Math.sin(oneEighty) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (twoSeventy > endAngle && twoSeventy < startAngle) {
				points.add({ __x: center.__x + Math.cos(twoSeventy) * radius, __y: center.__y + Math.sin(twoSeventy) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
		} else {
			if ((0 > startAngle && 0 < endAngle) || (threeSixty > startAngle && threeSixty < endAngle) || (endAngle < startAngle)) {
				points.add({ __x: center.__x + Math.cos(0) * radius, __y: center.__y + Math.sin(0) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (ninety > startAngle && ninety < endAngle) {
				points.add({ __x: center.__x + Math.cos(ninety) * radius, __y: center.__y + Math.sin(ninety) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (oneEighty > startAngle && oneEighty < endAngle) {
				points.add({ __x: center.__x + Math.cos(oneEighty) * radius, __y: center.__y + Math.sin(oneEighty) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (twoSeventy > startAngle && twoSeventy < endAngle) {
				points.add({ __x: center.__x + Math.cos(twoSeventy) * radius, __y: center.__y + Math.sin(twoSeventy) * radius, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
		}
		var minX = 1.7976931348623157E+308;
		var minY = 1.7976931348623157E+308;
		var maxX = -1.7976931348623157E+308;
		var maxY = -1.7976931348623157E+308;
		for (var i = 0; i < points.count(); i++) {
			var point = points.__inner[i];
			minX = Math.min(minX, point.__x);
			minY = Math.min(minY, point.__y);
			maxX = Math.max(maxX, point.__x);
			maxY = Math.max(maxY, point.__y);
		}
		this.__minX = Math.min(this.__minX, minX);
		this.__minY = Math.min(this.__minY, minY);
		this.__maxX = Math.max(this.__maxX, maxX);
		this.__maxY = Math.max(this.__maxY, maxY);
		this.__validBounds = true;
	}
	,
	renderArcSegment: function (arcSegment) {
		var startPoint = this.__lastSegmentPoint;
		var endPoint = arcSegment.point();
		if (arcSegment.size().width() != arcSegment.size().height()) {
			this.__context.save();
			this.__context.scale(arcSegment.size().width() / arcSegment.size().height(), 1);
			startPoint = { __x: startPoint.__x * (arcSegment.size().height() / arcSegment.size().width()), __y: startPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			endPoint = { __x: endPoint.__x * (arcSegment.size().height() / arcSegment.size().width()), __y: endPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		var isCounter = arcSegment.sweepDirection() == $.ig.SweepDirection.prototype.counterclockwise;
		var center = $.ig.GeometryUtil.prototype.getCenterFromArcSegment(startPoint, endPoint, arcSegment.size().height(), isCounter, arcSegment.isLargeArc());
		var startAngle = Math.atan2(startPoint.__y - center.__y, startPoint.__x - center.__x);
		var endAngle = Math.atan2(endPoint.__y - center.__y, endPoint.__x - center.__x);
		var lessThan180 = (Math.abs(endAngle - startAngle) < Math.PI);
		if (arcSegment.isLargeArc() == lessThan180) {
			if (startAngle < endAngle) {
				startAngle += 2 * Math.PI;
			} else {
				endAngle += 2 * Math.PI;
			}
		}
		if (!$.ig.util.isNaN(center.__x) && !$.ig.util.isNaN(center.__y) && !$.ig.util.isNaN(arcSegment.size().height()) && !$.ig.util.isNaN(startAngle) && !$.ig.util.isNaN(endAngle)) {
			this.__context.arc(center.__x, center.__y, arcSegment.size().height(), startAngle, endAngle, isCounter);
			if (this.__trackBounds) {
				this.updateBoundsFromArc(center, startAngle, endAngle, arcSegment.size().height(), isCounter);
			}
		}
		this.__lastSegmentPoint = arcSegment.point();
		if (arcSegment.size().width() != arcSegment.size().height()) {
			this.__context.restore();
		}
	}
	,
	renderLineSegment: function (lineSegment) {
		var x = lineSegment.point().__x;
		var y = lineSegment.point().__y;
		this.__context.lineTo(x, y);
		this.__lastSegmentPoint = lineSegment.point();
		if (this.__trackBounds) {
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			this.__minX = x < currMinX ? x : currMinX;
			this.__minY = y < currMinY ? y : currMinY;
			this.__maxX = x > currMaxX ? x : currMaxX;
			this.__maxY = y > currMaxY ? y : currMaxY;
			this.__validBounds = true;
		}
	}
	,
	renderPolyLineSegment: function (polyLineSegment) {
		var points = polyLineSegment.__points;
		var count = points.count();
		if (this.__trackBounds) {
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var x;
			var y;
			for (var i = 0; i < count; i++) {
				x = points.__inner[i].__x;
				y = points.__inner[i].__y;
				this.__context.lineTo(x, y);
				currMinX = x < currMinX ? x : currMinX;
				currMinY = y < currMinY ? y : currMinY;
				currMaxX = x > currMaxX ? x : currMaxX;
				currMaxY = y > currMaxY ? y : currMaxY;
			}
			this.__minX = currMinX;
			this.__minY = currMinY;
			this.__maxX = currMaxX;
			this.__maxY = currMaxY;
			this.__validBounds = true;
		} else {
			for (var i1 = 0; i1 < count; i1++) {
				this.__context.lineTo(points.__inner[i1].__x, points.__inner[i1].__y);
			}
		}
		this.__lastSegmentPoint = polyLineSegment.__points.__inner[count - 1];
	}
	,
	renderRectangleGeometry: function (rectangleGeometry) {
		this.__context.rect(rectangleGeometry.rect().left(), rectangleGeometry.rect().top(), rectangleGeometry.rect().width(), rectangleGeometry.rect().height());
		if (this.__trackBounds) {
			var rect = rectangleGeometry.rect();
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var minX = rect.left();
			var maxX = rect.right();
			var minY = rect.top();
			var maxY = rect.bottom();
			this.__minX = minX < currMinX ? minX : currMinX;
			this.__minY = minY < currMinY ? minY : currMinY;
			this.__maxX = maxX > currMaxX ? maxX : currMaxX;
			this.__maxY = maxY > currMaxY ? maxY : currMaxY;
			this.__validBounds = true;
		}
	}
	,
	renderLineGeometry: function (lineGeometry) {
		this.__context.moveTo(lineGeometry.startPoint().__x, lineGeometry.startPoint().__y);
		this.__context.lineTo(lineGeometry.endPoint().__x, lineGeometry.endPoint().__y);
		if (this.__trackBounds) {
			var p1 = lineGeometry.startPoint();
			var p2 = lineGeometry.endPoint();
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var minX = p1.__x < p2.__x ? p1.__x : p2.__x;
			var maxX = p1.__x > p2.__x ? p1.__x : p2.__x;
			var minY = p1.__y < p2.__y ? p1.__y : p2.__y;
			var maxY = p1.__y > p2.__y ? p1.__y : p2.__y;
			this.__minX = minX < currMinX ? minX : currMinX;
			this.__minY = minY < currMinY ? minY : currMinY;
			this.__maxX = maxX > currMaxX ? maxX : currMaxX;
			this.__maxY = maxY > currMaxY ? maxY : currMaxY;
			this.__validBounds = true;
		}
	}
	,
	renderTextBlock: function (tb) {
		if (tb.__visibility == $.ig.Visibility.prototype.visible) {
			if (tb.__opacity < 1 || this.__globalAlpha < 1) {
				this.__context.globalAlpha = (tb.__opacity * this.__globalAlpha);
			}
			this.__context.fillStyle = tb.fill().__fill;
			this.__context.textBaseline = "top";
			this.__context.fillText(tb.text(), tb.canvasLeft(), tb.canvasTop());
			if (tb.__opacity < 1 || this.__globalAlpha < 1) {
				this.__context.globalAlpha = 1;
			}
		}
	}
	,
	renderTextBlockInRect: function (tb, rect, lineHeight) {
		if (tb.__visibility == $.ig.Visibility.prototype.visible) {
			if (tb.__opacity < 1 || this.__globalAlpha < 1) {
				this.__context.globalAlpha = (tb.__opacity * this.__globalAlpha);
			}
			var x = rect.left() + rect.width() / 2;
			var words = tb.text().split(' ');
			this.__context.fillStyle = tb.fill().__fill;
			this.__context.textBaseline = "top";
			this.__context.textAlign = "center";
			var maxWidth = rect.width();
			var maxHeight = rect.height();
			var currentY = rect.top();
			var line = "";
			for (var i = 0; i < words.length; i++) {
				var currentLine = line + words[i];
				var textMetrics = this.__context.measureText(currentLine);
				if (textMetrics.width > maxWidth) {
					this.__context.fillText(line, x, currentY);
					line = "";
					currentY = currentY + lineHeight;
				}
				line = line + words[i] + " ";
			}
			this.__context.fillText(line, x, currentY);
			if (tb.__opacity < 1 || this.__globalAlpha < 1) {
				this.__context.globalAlpha = 1;
			}
		}
	}
	,
	renderPolygon: function (polygon) {
		if (polygon.points() == null || polygon.points().count() < 1) {
			return;
		}
		this.__context.beginPath();
		this.__context.globalAlpha = (polygon.__opacity * this.__globalAlpha);
		var points = polygon.points();
		var startPoint = points.__inner[0];
		var fill = polygon.__fill;
		var stroke = polygon.__stroke;
		this.__trackBounds = (fill != null && fill._isGradient) || (stroke != null && stroke._isGradient);
		if (this.__trackBounds) {
			var minX = 1.7976931348623157E+308;
			var maxX = -1.7976931348623157E+308;
			var minY = 1.7976931348623157E+308;
			var maxY = -1.7976931348623157E+308;
			var x = startPoint.__x;
			var y = startPoint.__y;
			minX = x < minX ? x : minX;
			minY = y < minY ? y : minY;
			maxX = x > maxX ? x : maxX;
			maxY = y > maxY ? y : maxY;
			this.__context.moveTo(x, y);
			for (var i = 1; i < points.count(); i++) {
				x = points.__inner[i].__x;
				y = points.__inner[i].__y;
				this.__context.lineTo(x, y);
				minX = x < minX ? x : minX;
				minY = y < minY ? y : minY;
				maxX = x > maxX ? x : maxX;
				maxY = y > maxY ? y : maxY;
			}
			this.__context.closePath();
			this.__minX = minX;
			this.__minY = minY;
			this.__maxX = maxX;
			this.__maxY = maxY;
		} else {
			this.__context.moveTo(startPoint.__x, startPoint.__y);
			for (var i1 = 1; i1 < points.count(); i1++) {
				this.__context.lineTo(points.__inner[i1].__x, points.__inner[i1].__y);
			}
			this.__context.closePath();
		}
		if (fill != null) {
			if (fill._isGradient) {
				this.__context.fillStyle = this.createGradient1(fill, this.__minX, this.__minY, this.__maxX, this.__maxY, polygon.strokeThickness(), false);
			} else {
				this.__context.fillStyle = fill.__fill;
			}
			this.__context.fill();
		}
		if (stroke != null) {
			if (stroke._isGradient) {
				this.__context.strokeStyle = this.createGradient1(stroke, this.__minX, this.__minY, this.__maxX, this.__maxY, polygon.strokeThickness(), true);
			} else {
				this.__context.strokeStyle = stroke.__fill;
			}
			this.__context.lineWidth = polygon.strokeThickness();
			this.__context.stroke();
		}
		this.__context.globalAlpha = 1;
	}
	,
	renderPolyline: function (polyline) {
		if (polyline.points() == null || polyline.points().count() < 1) {
			return;
		}
		this.__context.beginPath();
		this.__context.globalAlpha = (polyline.__opacity * this.__globalAlpha);
		var points = polyline.points();
		var startPoint = points.__inner[0];
		var fill = polyline.__fill;
		var stroke = polyline.__stroke;
		this.__trackBounds = (fill != null && fill._isGradient) || (stroke != null && stroke._isGradient);
		if (this.__trackBounds) {
			var minX = 1.7976931348623157E+308;
			var maxX = -1.7976931348623157E+308;
			var minY = 1.7976931348623157E+308;
			var maxY = -1.7976931348623157E+308;
			var x = startPoint.__x;
			var y = startPoint.__y;
			minX = x < minX ? x : minX;
			minY = y < minY ? y : minY;
			maxX = x > maxX ? x : maxX;
			maxY = y > maxY ? y : maxY;
			this.__context.moveTo(x, y);
			for (var i = 1; i < points.count(); i++) {
				x = points.__inner[i].__x;
				y = points.__inner[i].__y;
				this.__context.lineTo(x, y);
				minX = x < minX ? x : minX;
				minY = y < minY ? y : minY;
				maxX = x > maxX ? x : maxX;
				maxY = y > maxY ? y : maxY;
			}
			this.__minX = minX;
			this.__minY = minY;
			this.__maxX = maxX;
			this.__maxY = maxY;
		} else {
			this.__context.moveTo(startPoint.__x, startPoint.__y);
			for (var i1 = 1; i1 < points.count(); i1++) {
				this.__context.lineTo(points.__inner[i1].__x, points.__inner[i1].__y);
			}
		}
		if (fill != null) {
			if (fill._isGradient) {
				this.__context.fillStyle = this.createGradient1(fill, this.__minX, this.__minY, this.__maxX, this.__maxY, polyline.strokeThickness(), false);
			} else {
				this.__context.fillStyle = fill.__fill;
			}
			this.__context.fill();
		}
		if (stroke != null) {
			if (stroke._isGradient) {
				this.__context.strokeStyle = this.createGradient1(stroke, this.__minX, this.__minY, this.__maxX, this.__maxY, polyline.strokeThickness(), true);
			} else {
				this.__context.strokeStyle = stroke.__fill;
			}
			this.__context.lineWidth = polyline.strokeThickness();
			this.__context.stroke();
		}
		this.__context.globalAlpha = 1;
	}
	,
	renderContentControl: function (renderInfo, marker) {
		if (marker.__visibility == $.ig.Visibility.prototype.collapsed) {
			return;
		}
		if ((marker.__opacity != 1 || this.__globalAlpha != 1) && !renderInfo.isHitTestRender) {
			this.__context.globalAlpha = (marker.__opacity * this.__globalAlpha);
		}
		var template = marker.contentTemplate();
		if (template != null && template.render() != null) {
			renderInfo.context = this.__context;
			renderInfo.xPosition = marker.canvasLeft();
			renderInfo.yPosition = marker.canvasTop();
			renderInfo.data = marker.content();
			template.render()(renderInfo);
		}
		this.__context.globalAlpha = 1;
	}
	,
	applyTransform: function (transform) {
		if ($.ig.util.cast($.ig.TransformGroup.prototype.$type, transform) !== null) {
			var tg = transform;
			for (var i = tg.children().count() - 1; i >= 0; i--) {
				var tran = tg.children().__inner[i];
				this.applyTransform(tran);
			}
		} else if ($.ig.util.cast($.ig.TranslateTransform.prototype.$type, transform) !== null) {
			var trans = transform;
			this.__context.translate(trans.x(), trans.y());
		} else if ($.ig.util.cast($.ig.RotateTransform.prototype.$type, transform) !== null) {
			var rot = transform;
			var angle = rot.angle() * Math.PI / 180;
			var x = Math.cos(angle);
			var y = Math.sin(angle);
			var offsetX = rot.centerX() * (1 - x) + rot.centerY() * y;
			var offsetY = rot.centerY() * (1 - x) - rot.centerX() * y;
			this.__context.transform(x, y, y * -1, x, offsetX, offsetY);
		} else if ($.ig.util.cast($.ig.ScaleTransform.prototype.$type, transform) !== null) {
			var scale = transform;
			this.__context.transform(scale.scaleX(), 0, 0, scale.scaleY(), scale.centerX() - scale.scaleX() * scale.centerX(), scale.centerY() - scale.scaleY() * scale.centerY());
		}
	}
	,
	renderLine: function (line) {
		if (line.__visibility != $.ig.Visibility.prototype.visible) {
			return;
		}
		this.__context.beginPath();
		this.__context.globalAlpha = (line.__opacity * this.__globalAlpha);
		this.__context.moveTo(line.x1(), line.y1());
		this.__context.lineTo(line.x2(), line.y2());
		if (this.__trackBounds) {
			this.__minX = 1.7976931348623157E+308;
			this.__maxX = -1.7976931348623157E+308;
			this.__minY = 1.7976931348623157E+308;
			this.__maxY = -1.7976931348623157E+308;
			var currMinX = this.__minX;
			var currMinY = this.__minY;
			var currMaxX = this.__maxX;
			var currMaxY = this.__maxY;
			var minX = line.x1() < line.x2() ? line.x1() : line.x2();
			var maxX = line.x1() > line.x2() ? line.x1() : line.x2();
			var minY = line.y1() < line.y2() ? line.y1() : line.y2();
			var maxY = line.y1() > line.y2() ? line.y1() : line.y2();
			this.__minX = minX < currMinX ? minX : currMinX;
			this.__minY = minY < currMinY ? minY : currMinY;
			this.__maxX = maxX > currMaxX ? maxX : currMaxX;
			this.__maxY = maxY > currMaxY ? maxY : currMaxY;
		}
		var fill = line.__fill;
		var stroke = line.__stroke;
		if (fill != null) {
			if (fill._isGradient) {
				this.__context.fillStyle = this.createGradient1(fill, this.__minX, this.__minY, this.__maxX, this.__maxX, line.strokeThickness(), false);
			} else {
				this.__context.fillStyle = fill.__fill;
			}
			this.__context.fill();
		}
		if (stroke != null) {
			if (stroke._isGradient) {
				this.__context.strokeStyle = this.createGradient1(stroke, this.__minX, this.__minY, this.__maxX, this.__maxX, line.strokeThickness(), true);
			} else {
				this.__context.strokeStyle = line.__stroke.__fill;
			}
			this.__context.lineWidth = line.strokeThickness();
			this.__context.stroke();
		}
		this.__context.globalAlpha = 1;
	}
	,
	setRectangleClip: function (rect) {
		this.__context.beginPath();
		this.__context.rect(rect.left(), rect.top(), rect.width(), rect.height());
		this.__context.clip();
	}
	,
	save: function () {
		this.__context.save();
	}
	,
	restore: function () {
		this.__context.restore();
	}
	,
	scale: function (x, y) {
		this.__context.scale(x, y);
	}
	,
	translate: function (x, y) {
		this.__context.translate(x, y);
	}
	,
	clearRectangle: function (left, top, width, height) {
		this.__context.clearRect(left, top, width, height);
	}
	,
	drawImage: function (image, opacity, left, top, width, height) {
		if (opacity != 1) {
			this.__context.globalAlpha = (opacity * this.__globalAlpha);
		}
		this.__context.drawImage(image, left, top, width, height);
		if (opacity != 1) {
			this.__context.globalAlpha = 1;
		}
	}
	,
	drawImage1: function (image, opacity, sourceLeft, sourceTop, sourceWidth, sourceHeight, left, top, width, height) {
		if (opacity != 1) {
			this.__context.globalAlpha = (opacity * this.__globalAlpha);
		}
		this.__context.drawImage(image, sourceLeft, sourceTop, sourceWidth, sourceHeight, left, top, width, height);
		if (opacity != 1) {
			this.__context.globalAlpha = 1;
		}
	}
	,
	getPixelAt: function (x, y) {
		var data = this.__context.getImageData(x, y, 1, 1);
		var ret = new Array(4);
		ret[0] = data.data[0];
		ret[1] = data.data[1];
		ret[2] = data.data[2];
		ret[3] = data.data[3];
		return ret;
	}
	,
	getFont: function () {
		return this.__context.font;
	}
	,
	getFontInfo: function () {
		return this.__fontInfo;
	}
	,
	setFont: function (font) {
		if (this.__context.font != font) {
			this.__context.font = font;
		}
	}
	,
	__fontInfo: null,
	setFontInfo: function (font) {
		this.__fontInfo = font;
		if (this.__context.font != font.fontString()) {
			this.__context.font = font.fontString();
		}
	}
	,
	measureTextWidth: function (text) {
		var metrics = this.__context.measureText(text);
		return metrics.width;
	}
	,
	__globalAlpha: 0,
	setOpacity: function (p) {
		this.__globalAlpha = p;
	}
	,
	applyStyle: function (shape_, style_) {
		if (style_ == null) {
			return;
		}
		var fillColor_ = null;
		var strokeColor_ = null;
		var strokeThickness_ = NaN;
		var opacity_ = NaN;
		if (style_.fill) { fillColor_ = style_.fill };
		if (style_.stroke) { strokeColor_ = style_.stroke };
		if (style_.strokeThickness) { strokeThickness_ = style_.strokeThickness };
		if (style_.opacity) { opacity_ = style_.opacity };
		if (fillColor_ != null) {
			shape_.__fill = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(fillColor_);
				return $ret;
			}());
		}
		if (strokeColor_ != null) {
			shape_.__stroke = (function () {
				var $ret = new $.ig.Brush();
				$ret.fill(strokeColor_);
				return $ret;
			}());
		}
		if (!$.ig.util.isNaN(strokeThickness_)) {
			shape_.strokeThickness(strokeThickness_);
		}
		if (!$.ig.util.isNaN(opacity_)) {
			shape_.__opacity = opacity_;
		}
	}
	,
	enableDropShadow: function (color, blur, offsetX, offsetY) {
		this.__context.shadowColor = color;
		this.__context.shadowBlur = blur;
		this.__context.shadowOffsetX = offsetX;
		this.__context.shadowOffsetY = offsetY;
	}
	,
	disableDropShadow: function () {
		this.__context.shadowColor = "rgba(0,0,0,0)";
		this.__context.shadowBlur = 0;
		this.__context.shadowOffsetX = 0;
		this.__context.shadowOffsetY = 0;
	}
	,
	$type: new $.ig.Type('CanvasViewRenderer', $.ig.Object.prototype.$type, [$.ig.IRenderer.prototype.$type])
}, true);

$.ig.util.defType('IOverviewPlusDetailControl', 'Object', {
	$type: new $.ig.Type('IOverviewPlusDetailControl', null)
}, true);

$.ig.util.defType('PropertyChangedEventArgs$1', 'PropertyChangedEventArgs', {
	$t: null,
	init: function ($t, propertyName, oldValue, newValue) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.PropertyChangedEventArgs.prototype.init.call(this, propertyName);
		this.oldValue(oldValue);
		this.newValue(newValue);
	},
	_oldValue: null,
	oldValue: function (value) {
		if (arguments.length === 1) {
			this._oldValue = value;
			return value;
		} else {
			return this._oldValue;
		}
	}
	,
	_newValue: null,
	newValue: function (value) {
		if (arguments.length === 1) {
			this._newValue = value;
			return value;
		} else {
			return this._newValue;
		}
	}
	,
	$type: new $.ig.Type('PropertyChangedEventArgs$1', $.ig.PropertyChangedEventArgs.prototype.$type)
}, true);

$.ig.util.defType('XamOverviewPlusDetailPane', 'Control', {
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	init: function () {
		this.__ignoreContactUp = false;
		this.__usesIsoScaling = false;
		this.__mobileMode = false;
		$.ig.Control.prototype.init.call(this);
		this.view(new $.ig.XamOverviewPlusDetailPaneView(this));
		this.view().onInit();
		this.defaultStyleKey($.ig.XamOverviewPlusDetailPane.prototype.$type);
		this.anchor({ __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	},
	windowChanging: null,
	onWindowChanging: function (e) {
		if (e == null) {
			throw new $.ig.ArgumentNullException(0, "e");
		}
		if (this.immediate()) {
			this.window(e.newValue());
		}
		if (this.windowChanging != null) {
			this.windowChanging(this, e);
		}
	}
	,
	windowChanged: null,
	onWindowChanged: function (a) {
		if (this.windowChanged != null) {
			this.windowChanged(this, a);
		}
	}
	,
	thumbnailSizeChanged: null,
	onThumbnailSizeChanged: function (e) {
		if (this.thumbnailSizeChanged != null) {
			this.thumbnailSizeChanged(this, e);
		}
	}
	,
	immediate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.immediateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.immediateProperty);
		}
	}
	,
	world: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.worldProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.worldProperty);
		}
	}
	,
	worldStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.worldStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.worldStyleProperty);
		}
	}
	,
	window: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.windowProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.windowProperty);
		}
	}
	,
	windowStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.windowStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.windowStyleProperty);
		}
	}
	,
	preview: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.previewProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.previewProperty);
		}
	}
	,
	previewStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.previewStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.previewStyleProperty);
		}
	}
	,
	shrinkToThumbnail: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.shrinkToThumbnailProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.shrinkToThumbnailProperty);
		}
	}
	,
	onShrinkToThumbnailChanged1: function (d, e) {
		(d).onShrinkToThumbnailChanged(e.oldValue(), e.newValue());
	}
	,
	onShrinkToThumbnailChanged: function (oldValue, newValue) {
		if (newValue) {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
		} else {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.compact);
		}
	}
	,
	mode: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.modeProperty, $.ig.OverviewPlusDetailPaneMode.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamOverviewPlusDetailPane.prototype.modeProperty));
		}
	}
	,
	onModeChanged1: function (d, e) {
		(d).onModeChanged($.ig.util.getEnumValue(e.oldValue()), $.ig.util.getEnumValue(e.newValue()));
	}
	,
	onModeChanged: function (oldValue, newValue) {
		this.goToState(newValue);
	}
	,
	goToState: function (mode) {
		switch (mode) {
			case $.ig.OverviewPlusDetailPaneMode.prototype.full:
				this.view().goToFullState();
				if (this.isZoomable()) {
					this.view().goToZoomEnabledState();
				} else {
					this.view().goToZoomDisabledState();
				}
				break;
			case $.ig.OverviewPlusDetailPaneMode.prototype.compact:
				this.view().goToMinimalState();
				if (this.isZoomable()) {
					this.view().goToZoomEnabledState();
				} else {
					this.view().goToZoomDisabledState();
				}
				break;
			case $.ig.OverviewPlusDetailPaneMode.prototype.minimal:
				this.view().goToMinimalState();
				this.view().goToZoomDisabledState();
				break;
		}
	}
	,
	updateVisualState: function () {
		if (this.shrinkToThumbnail()) {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
		} else {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.compact);
		}
	}
	,
	__surfaceViewer: null,
	surfaceViewer: function (value) {
		if (arguments.length === 1) {
			if (this.__surfaceViewer != null) {
				var asIPropChange = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, this.__surfaceViewer);
				if (asIPropChange != null) {
					asIPropChange.propertyChanged = $.ig.Delegate.prototype.remove(asIPropChange.propertyChanged, this.surfaceViewer_PropertyChanged.runOn(this));
				}
			}
			this.__surfaceViewer = value;
			if (this.__surfaceViewer != null) {
				var asIPropChange1 = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, this.__surfaceViewer);
				if (asIPropChange1 != null) {
					asIPropChange1.propertyChanged = $.ig.Delegate.prototype.combine(asIPropChange1.propertyChanged, this.surfaceViewer_PropertyChanged.runOn(this));
				}
			}
			this.view().setSurfaceBindings();
			return value;
		} else {
			return this.__surfaceViewer;
		}
	}
	,
	surfaceViewer_PropertyChanged: function (sender, e) {
		switch (e.propertyName()) {
			case "DefaultInteraction":
				this.view().updateInteractionButtonStates(this.__surfaceViewer.defaultInteraction());
				break;
		}
	}
	,
	previewViewportdRect: function () {
		var rect = this.worldToCanvas(this.world());
		return new $.ig.Rect(0, 0, 0, rect.width(), rect.height());
	}
	,
	zoomTo100ButtonVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.zoomTo100ButtonVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamOverviewPlusDetailPane.prototype.zoomTo100ButtonVisibilityProperty));
		}
	}
	,
	scaleToFitButtonVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.scaleToFitButtonVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamOverviewPlusDetailPane.prototype.scaleToFitButtonVisibilityProperty));
		}
	}
	,
	interactionStatesToolVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.interactionStatesToolVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamOverviewPlusDetailPane.prototype.interactionStatesToolVisibilityProperty));
		}
	}
	,
	zoomLevelLargeChange: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamOverviewPlusDetailPane.prototype.zoomLevelLargeChangeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamOverviewPlusDetailPane.prototype.zoomLevelLargeChangeProperty);
		}
	}
	,
	__isZoomable: false,
	isZoomable: function (value) {
		if (arguments.length === 1) {
			this.__isZoomable = value;
			this.updateVisualState();
			return value;
		} else {
			return this.__isZoomable;
		}
	}
	,
	viewport: function () {
		return this.view().viewport();
	}
	,
	_refreshPending: false,
	refreshPending: function (value) {
		if (arguments.length === 1) {
			this._refreshPending = value;
			return value;
		} else {
			return this._refreshPending;
		}
	}
	,
	getDesiredSize: function (availableSize) {
		var width = availableSize.width();
		var height = availableSize.height();
		var aspect = !this.world().isEmpty() ? this.world().width() / this.world().height() : 1;
		if (Number.isInfinity(height)) {
			if (Number.isInfinity(width)) {
				width = 128;
			}
			height = width / aspect;
		} else {
			if (Number.isInfinity(width)) {
				width = height * aspect;
			}
		}
		return new $.ig.Size(1, width, height);
	}
	,
	_isPanning: false,
	isPanning: function (value) {
		if (arguments.length === 1) {
			this._isPanning = value;
			return value;
		} else {
			return this._isPanning;
		}
	}
	,
	_anchor: null,
	anchor: function (value) {
		if (arguments.length === 1) {
			this._anchor = value;
			return value;
		} else {
			return this._anchor;
		}
	}
	,
	onMouseEnter: function () {
		if (this.shrinkToThumbnail()) {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.full);
		}
	}
	,
	onMouseLeave: function () {
		if (this.shrinkToThumbnail()) {
			this.goToState($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
		}
	}
	,
	onKeyDown: function (key) {
		switch (key) {
			case $.ig.Key.prototype.escape:
				if (this.isPanning()) {
					this.view().cancelMouseOperations();
					this.isPanning(false);
					this.preview($.ig.Rect.prototype.empty());
					return true;
				}
				break;
		}
		return false;
	}
	,
	onMouseLeftButtonDown: function (p) {
		if (!this.__pinching) {
			this.__ignoreContactUp = false;
		}
		this.__lastPosition = p;
		var canvasToWorld = this.worldToCanvas(this.world());
		if (canvasToWorld.containsPoint(p) == false) {
			return;
		}
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		var window = !world.isEmpty() ? this.window() : $.ig.Rect.prototype.empty();
		this.anchor(this.canvasToWorld(p));
		if (window.isEmpty() == false && this.view().captureMouse()) {
			this.isPanning(true);
			window = new $.ig.Rect(0, this.anchor().__x - 0.5 * window.width(), this.anchor().__y - 0.5 * window.height(), window.width(), window.height());
			if (!this.mobileMode()) {
				this.onWindowChanging(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), window));
			}
		}
	}
	,
	__lastPosition: null,
	onMouseMove: function (p, onMouseMove, isFinger) {
		if ($.ig.util.isNaN(this.anchor().__x) || $.ig.util.isNaN(this.anchor().__y)) {
			this.anchor(this.canvasToWorld(p));
		}
		var distance = $.ig.XamOverviewPlusDetailPane.prototype._dRAG_DISTANCE_NEAR;
		if (isFinger) {
			distance = $.ig.XamOverviewPlusDetailPane.prototype._dRAG_DISTANCE;
		}
		var farFromAnchor = false;
		var a = this.worldPointToCanvas(this.anchor());
		var rect = new $.ig.Rect(2, a, p);
		if (rect.width() > distance && rect.height() > distance) {
			farFromAnchor = true;
		}
		if (!this.__pinching) {
			if (farFromAnchor) {
				this.__ignoreContactUp = false;
			}
		}
		this.__lastPosition = p;
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		var window = !world.isEmpty() ? this.window() : $.ig.Rect.prototype.empty();
		if (this.isPanning() && !this.__ignoreContactUp) {
			var center = this.canvasToWorld(p);
			window = new $.ig.Rect(0, center.__x - 0.5 * window.width(), center.__y - 0.5 * window.height(), window.width(), window.height());
			this.onWindowChanging(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), window));
		}
	}
	,
	onMouseLeftButtonUp: function (p) {
		this.__lastPosition = p;
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		var window = !world.isEmpty() ? this.window() : $.ig.Rect.prototype.empty();
		if (this.isPanning() && !this.__ignoreContactUp) {
			this.view().cancelMouseOperations();
			this.isPanning(false);
			var center = this.canvasToWorld(p);
			window = new $.ig.Rect(0, center.__x - 0.5 * window.width(), center.__y - 0.5 * window.height(), window.width(), window.height());
			if (!this.mobileMode()) {
				this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), window));
			}
			return true;
		}
		return false;
	}
	,
	onMouseWheel: function (delta) {
		var center = $.ig.RectUtil.prototype.getCenter(this.window());
		var scale = 1 - $.ig.MathUtil.prototype.clamp(delta, -0.5, 0.5);
		var left = center.__x - scale * (center.__x - this.window().left());
		var bottom = center.__y + scale * (this.window().bottom() - center.__y);
		var right = center.__x + scale * (this.window().right() - center.__x);
		var top = center.__y - scale * (center.__y - this.window().top());
		var window = new $.ig.Rect(0, left, top, right - left, bottom - top);
		this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), window));
		return true;
	}
	,
	__ignoreContactUp: false,
	__lastDistanceRatio: 0,
	__previousZoomPosX: 0,
	__previousZoomPosY: 0,
	__zoomStartWindow: null,
	__currZoomScaleX: 0,
	__currZoomScaleY: 0,
	__currIsoZoomScale: 0,
	onZoomStarted: function (point, deltaScaleX, deltaScaleY, isoScaleDelta) {
		this.__previousZoomPosX = point.__x;
		this.__previousZoomPosY = point.__y;
		this.__currZoomScaleX = deltaScaleX;
		this.__currZoomScaleY = deltaScaleY;
		this.__currIsoZoomScale = isoScaleDelta;
		this.__zoomStartWindow = this.window();
		this.__pinching = true;
		this.__ignoreContactUp = true;
		this.__lastDistanceRatio = 1;
	}
	,
	onPinchStarted: function (point) {
		this.__pinching = true;
		this.__ignoreContactUp = true;
		this.__lastDistanceRatio = 1;
	}
	,
	onPinchDelta: function (p) {
		if (this.view().useDeltaZoom()) {
			this.doDeltaZoom(p);
		} else {
			this.doZoom(p);
			this.__lastDistanceRatio = p;
		}
	}
	,
	__usesIsoScaling: false,
	isIsoScaled: function () {
		if (this.surfaceViewer() == null) {
			return false;
		}
		return this.surfaceViewer().isIsoScaled();
	}
	,
	onZoomDelta: function (p, deltaScaleX, deltaScaleY, isoScaleDelta) {
		this.__currZoomScaleX = this.__currZoomScaleX * deltaScaleX;
		this.__currZoomScaleY = this.__currZoomScaleY * deltaScaleY;
		this.__currIsoZoomScale = this.__currIsoZoomScale * isoScaleDelta;
		if (this.isIsoScaled()) {
			this.__currZoomScaleX = this.__currIsoZoomScale;
			this.__currZoomScaleY = this.__currIsoZoomScale;
		}
		var currentWindow = this.window();
		var viewport = this.viewport();
		var transX = p.__x - this.__previousZoomPosX;
		var transY = p.__y - this.__previousZoomPosY;
		this.__previousZoomPosX = p.__x;
		this.__previousZoomPosY = p.__y;
		var prevWidth = currentWindow.width();
		var prevHeight = currentWindow.height();
		var newWindowWidth = this.__zoomStartWindow.width() / this.__currZoomScaleX;
		var newWindowHeight = this.__zoomStartWindow.height() / this.__currZoomScaleY;
		if (newWindowWidth > 1) {
			newWindowWidth = 1;
		}
		if (newWindowHeight > 1) {
			newWindowHeight = 1;
		}
		var origin = { __x: p.__x, __y: p.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var originAsWorld = { __x: (origin.__x - viewport.left()) / viewport.width() * currentWindow.width() + currentWindow.left(), __y: (origin.__y - viewport.top()) / viewport.height() * currentWindow.height() + currentWindow.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var newRect = new $.ig.Rect(0, currentWindow.left(), currentWindow.top(), newWindowWidth, newWindowHeight);
		var newOrigin = { __x: (originAsWorld.__x - newRect.left()) / newRect.width() * viewport.width() + viewport.left(), __y: (originAsWorld.__y - newRect.top()) / newRect.height() * viewport.height() + viewport.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var translateX = (newOrigin.__x - origin.__x) - transX;
		var translateY = (newOrigin.__y - origin.__y) - transY;
		var worldTranslateX = translateX / viewport.width() * newRect.width();
		var worldTranslateY = translateY / viewport.height() * newRect.height();
		newRect = new $.ig.Rect(0, newRect.left() + worldTranslateX, newRect.top() + worldTranslateY, newRect.width(), newRect.height());
		currentWindow = newRect;
		this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), newRect));
	}
	,
	onZoomCompleted: function (pt, scaleDeltaX, scaleDeltaY, isoScaleDelta) {
		this.onZoomDelta(pt, scaleDeltaX, scaleDeltaY, isoScaleDelta);
		this.__pinching = false;
		this.__ignoreContactUp = false;
	}
	,
	onPinchCompleted: function (p) {
		this.__pinching = false;
		this.__ignoreContactUp = false;
		if (this.view().useDeltaZoom()) {
			this.doDeltaZoom(p);
		} else {
			this.doZoom(p);
		}
	}
	,
	doZoom: function (distanceRatio) {
		var distanceRatioDiff = distanceRatio - this.__lastDistanceRatio;
		if (distanceRatioDiff != 0) {
			var p = 0.03;
			var f = distanceRatioDiff < 0 ? 1 + p : 1 - p;
			var wRectCenter = { __x: this.window().x() + this.window().width() / 2, __y: this.window().y() + this.window().height() / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var wRectOrigin = { __x: this.window().x() - wRectCenter.__x, __y: this.window().y() - wRectCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var scaledWindowRect = new $.ig.Rect(0, wRectOrigin.__x * f + wRectCenter.__x, wRectOrigin.__y * f + wRectCenter.__y, this.window().width() * f, this.window().height() * f);
			this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), scaledWindowRect));
		}
	}
	,
	doDeltaZoom: function (deltaZoom) {
		var f = 1 / deltaZoom;
		var wRectCenter = { __x: this.window().x() + this.window().width() / 2, __y: this.window().y() + this.window().height() / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var wRectOrigin = { __x: this.window().x() - wRectCenter.__x, __y: this.window().y() - wRectCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var scaledWindowRect = new $.ig.Rect(0, wRectOrigin.__x * f + wRectCenter.__x, wRectOrigin.__y * f + wRectCenter.__y, this.window().width() * f, this.window().height() * f);
		this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), scaledWindowRect));
	}
	,
	propertyChanged: null,
	onPropertyUpdated: function (propertyName, oldValue, newValue) {
		this.onPropertyChanged(new $.ig.PropertyChangedEventArgs(propertyName));
	}
	,
	onPropertyChanged: function (e) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, e);
		}
		switch (e.propertyName()) {
			case $.ig.XamOverviewPlusDetailPane.prototype._worldPropertyName:
				this.refresh(false);
				break;
			case $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName:
				this.refresh(false);
				break;
			case $.ig.XamOverviewPlusDetailPane.prototype._previewPropertyName:
				this.refresh(false);
				break;
		}
	}
	,
	setRenderOrigin: function () {
		this.view().setRenderOrigin();
	}
	,
	canvasToWorld: function (point) {
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		if (!world.isEmpty()) {
			var s = viewport.width() / viewport.height() > world.width() / world.height() ? viewport.height() / world.height() : viewport.width() / world.width();
			var tx = 0.5 * ((viewport.left() + viewport.right()) - (world.left() + world.right()) * s);
			var ty = 0.5 * ((viewport.top() + viewport.bottom()) - (world.top() + world.bottom()) * s);
			return { __x: (point.__x - tx) / s, __y: (point.__y - ty) / s, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	worldPointToCanvas: function (pt) {
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		if (!world.isEmpty()) {
			var s = viewport.width() / viewport.height() > world.width() / world.height() ? viewport.height() / world.height() : viewport.width() / world.width();
			var tx = 0.5 * ((viewport.left() + viewport.right()) - (world.left() + world.right()) * s);
			var ty = 0.5 * ((viewport.top() + viewport.bottom()) - (world.top() + world.bottom()) * s);
			return { __x: pt.__x * s + tx, __y: pt.__y * s + ty, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	worldToCanvas: function (rect) {
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		if (!world.isEmpty() && !rect.isEmpty()) {
			var s = viewport.width() / viewport.height() > world.width() / world.height() ? viewport.height() / world.height() : viewport.width() / world.width();
			var tx = 0.5 * ((viewport.left() + viewport.right()) - (world.left() + world.right()) * s);
			var ty = 0.5 * ((viewport.top() + viewport.bottom()) - (world.top() + world.bottom()) * s);
			return new $.ig.Rect(0, rect.left() * s + tx, rect.top() * s + ty, rect.width() * s, rect.height() * s);
		}
		return $.ig.Rect.prototype.empty();
	}
	,
	refresh: function (immediate) {
		var $self = this;
		this.updateSliderRanges();
		if (!immediate) {
			if (!this.refreshPending()) {
				this.refreshPending(true);
				this.view().queueWork(function () { $self.refresh(true); });
			}
			return;
		}
		this.refreshPending(false);
		var world = this.worldToCanvas(this.world());
		var windowRect = this.worldToCanvas(this.window());
		var preview = this.worldToCanvas(this.preview());
		if (this.__visibility != $.ig.Visibility.prototype.visible || world.isEmpty() || $.ig.util.isNaN(world.x()) || $.ig.util.isNaN(world.y())) {
			this.refreshPending(false);
			return;
		}
		this.view().updateWorldRect(world);
		this.view().positionPreview(world);
		this.view().updateWindowPath(world, windowRect);
		this.view().updatePreviewPath(world, preview);
		if (this.surfaceViewer() != null) {
			this.surfaceViewer().renderPreview();
		}
		this.view().makeDirty();
	}
	,
	_updatingSliderRanges: false,
	updatingSliderRanges: function (value) {
		if (arguments.length === 1) {
			this._updatingSliderRanges = value;
			return value;
		} else {
			return this._updatingSliderRanges;
		}
	}
	,
	updateSliderRanges: function () {
		if (this.__visibility != $.ig.Visibility.prototype.visible || this.surfaceViewer() == null || !this.view().isReady()) {
			return;
		}
		var viewportRect = this.surfaceViewer().viewportRect();
		var worldRect = this.surfaceViewer().worldRect();
		if (viewportRect.isEmpty() || worldRect.isEmpty()) {
			return;
		}
		this.updatingSliderRanges(true);
		var currentValue = this.view().getSliderValue();
		var min = this.surfaceViewer().minimumZoomLevel();
		var max = this.surfaceViewer().maximumZoomLevel();
		if ($.ig.util.isNaN(min)) {
			min = Math.min(viewportRect.width() / worldRect.width(), viewportRect.height() / worldRect.height());
			min = Math.min(min, 0.5);
			min = Math.min(min, currentValue);
		}
		if ($.ig.util.isNaN(max)) {
			max = $.ig.XamOverviewPlusDetailPane.prototype._maxZoom;
			max = Math.max(max, currentValue);
		}
		this.view().setSliderMin(min);
		this.view().setSliderMax(max);
		this.updatingSliderRanges(false);
	}
	,
	onDefaultInteraction: function (state) {
		if (this.surfaceViewer() != null) {
			this.surfaceViewer().defaultInteraction(state);
		}
	}
	,
	onScaleToFit: function () {
		if (this.surfaceViewer() != null) {
			this.surfaceViewer().scaleToFit();
		}
	}
	,
	onZoomTo100: function () {
		if (this.surfaceViewer() != null) {
			this.surfaceViewer().zoomTo100();
		}
	}
	,
	onContainerSizeChanged: function () {
		this.refresh(false);
	}
	,
	provideContainer: function (container) {
		this.view().onContainerProvided(container);
	}
	,
	provideContext: function (context) {
		this.view().onContextProvided(context);
	}
	,
	provideEventSource: function (eventSource) {
		this.view().onEventSourceProvided(eventSource);
	}
	,
	__isSurfaceInteractionDisabled: false,
	isSurfaceInteractionDisabled: function (value) {
		if (arguments.length === 1) {
			this.__isSurfaceInteractionDisabled = value;
			this.onIsSurfaceInteractionDisabledChanged();
			return value;
		} else {
			return this.__isSurfaceInteractionDisabled;
		}
	}
	,
	onIsSurfaceInteractionDisabledChanged: function () {
		this.view().onIsSurfaceInteractionDisabledChanged();
	}
	,
	__mobileMode: false,
	mobileMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__mobileMode;
			this.__mobileMode = value;
			if (oldValue != this.__mobileMode) {
				this.view().mobileModeChanged(this.__mobileMode);
			}
			return value;
		} else {
			return this.__mobileMode;
		}
	}
	,
	arrange: function (rect) {
		this.view().arrange(rect);
	}
	,
	pushZoomLevel: function (zoomLevel) {
		this.view().pushZoomLevel(zoomLevel);
	}
	,
	onMobileClosing: function () {
		if ($.ig.Point.prototype.l_op_Equality(this.__lastPosition, null)) {
			return;
		}
		var center = this.canvasToWorld(this.__lastPosition);
		var viewport = this.viewport();
		var world = !viewport.isEmpty() ? this.world() : $.ig.Rect.prototype.empty();
		var window = !world.isEmpty() ? this.window() : $.ig.Rect.prototype.empty();
		window = new $.ig.Rect(0, center.__x - 0.5 * window.width(), center.__y - 0.5 * window.height(), window.width(), window.height());
		this.onWindowChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, this.window(), this.window()));
	}
	,
	__pinching: false,
	pinching: function () {
		return this.__pinching;
	}
	,
	onGestureCompleted: function (pt) {
		this.__pinching = false;
		this.anchor({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('XamOverviewPlusDetailPane', $.ig.Control.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('ISchedulableRender', 'Object', {
	$type: new $.ig.Type('ISchedulableRender', null)
}, true);

$.ig.util.defType('XamOverviewPlusDetailPaneView', 'Object', {
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	init: function (model) {
		this.__scheduler = null;
		this.__isDirty = false;
		this.__loadingEle = null;
		this.__backgroundImage = null;
		this.__backgroundImageWidth = 0;
		this.__backgroundImageHeight = 0;
		this._thumbnailSize = new $.ig.Size();
		$.ig.Object.prototype.init.call(this);
		this.viewport($.ig.Rect.prototype.empty());
		this.model(model);
		this.thumbnailSize(new $.ig.Size(1, 0, 0));
	},
	_viewManager: null,
	viewManager: function (value) {
		if (arguments.length === 1) {
			this._viewManager = value;
			return value;
		} else {
			return this._viewManager;
		}
	}
	,
	onInit: function () {
		this.animator(new $.ig.DoubleAnimator(0, 1, 300));
		var $t = this.animator();
		$t.propertyChanged = $.ig.Delegate.prototype.combine($t.propertyChanged, this.animator_PropertyChanged.runOn(this));
		this.animationEnabled(true);
		this.viewManager(new $.ig.XamOverviewPlusDetailPaneViewManager(this));
		this.worldPath((function () {
			var $ret = new $.ig.Path();
			$ret.isHitTestVisible(true);
			$ret.data(new $.ig.RectangleGeometry());
			return $ret;
		}()));
		(this.worldPath().data()).rect($.ig.Rect.prototype.empty());
		this.backgroundPath((function () {
			var $ret = new $.ig.Path();
			$ret.isHitTestVisible(true);
			$ret.data(new $.ig.RectangleGeometry());
			return $ret;
		}()));
		this.windowPath((function () {
			var $ret = new $.ig.Path();
			$ret.isHitTestVisible(false);
			$ret.data(new $.ig.GeometryGroup());
			return $ret;
		}()));
		($.ig.util.cast($.ig.GeometryGroup.prototype.$type, this.windowPath().data())).children().add(new $.ig.PathGeometry());
		($.ig.util.cast($.ig.GeometryGroup.prototype.$type, this.windowPath().data())).children().add(new $.ig.PathGeometry());
		this.previewPath((function () {
			var $ret = new $.ig.Path();
			$ret.isHitTestVisible(false);
			$ret.data(new $.ig.GeometryGroup());
			return $ret;
		}()));
		($.ig.util.cast($.ig.GeometryGroup.prototype.$type, this.previewPath().data())).children().add(new $.ig.PathGeometry());
		($.ig.util.cast($.ig.GeometryGroup.prototype.$type, this.previewPath().data())).children().add(new $.ig.PathGeometry());
		this.startingProgress(0);
		this.transitionProgress(0);
		this.disableZooms(false);
	}
	,
	animator_PropertyChanged: function (sender, e) {
		if (this.isOpen()) {
			this.transitionProgress(this.startingProgress() + this.animator().transitionProgress() * (1 - this.startingProgress()));
		} else {
			this.transitionProgress(this.startingProgress() - this.animator().transitionProgress() * this.startingProgress());
		}
		if (this.transitionProgress() >= 1) {
			this.settingsVisible(true);
			this.arrange(this.fullSize());
			this.model().refresh(false);
		} else if (this.settingsVisible()) {
			this.settingsVisible(false);
			this.viewManager().hideSettingsPanel();
			this.arrange(this.fullSize());
			this.model().refresh(false);
		}
		this.makeDirty();
	}
	,
	_settingsVisible: false,
	settingsVisible: function (value) {
		if (arguments.length === 1) {
			this._settingsVisible = value;
			return value;
		} else {
			return this._settingsVisible;
		}
	}
	,
	_animator: null,
	animator: function (value) {
		if (arguments.length === 1) {
			this._animator = value;
			return value;
		} else {
			return this._animator;
		}
	}
	,
	_startingProgress: 0,
	startingProgress: function (value) {
		if (arguments.length === 1) {
			this._startingProgress = value;
			return value;
		} else {
			return this._startingProgress;
		}
	}
	,
	_transitionProgress: 0,
	transitionProgress: function (value) {
		if (arguments.length === 1) {
			this._transitionProgress = value;
			return value;
		} else {
			return this._transitionProgress;
		}
	}
	,
	_animationEnabled: false,
	animationEnabled: function (value) {
		if (arguments.length === 1) {
			this._animationEnabled = value;
			return value;
		} else {
			return this._animationEnabled;
		}
	}
	,
	_isOpen: false,
	isOpen: function (value) {
		if (arguments.length === 1) {
			this._isOpen = value;
			return value;
		} else {
			return this._isOpen;
		}
	}
	,
	goToFullState: function () {
		if (this.isOpen()) {
			return;
		}
		this.isOpen(true);
		if (this.animationEnabled()) {
			this.startingProgress(this.transitionProgress());
			this.animator().stop();
			this.animator().start();
		} else {
			this.startingProgress(1);
			this.transitionProgress(1);
			this.makeDirty();
		}
	}
	,
	goToCompactState: function () {
	}
	,
	goToMinimalState: function () {
		if (!this.isOpen()) {
			return;
		}
		this.isOpen(false);
		if (this.animationEnabled()) {
			this.startingProgress(this.transitionProgress());
			this.animator().stop();
			this.animator().start();
		} else {
			this.startingProgress(1);
			this.transitionProgress(1);
			this.makeDirty();
		}
	}
	,
	goToZoomEnabledState: function () {
	}
	,
	goToZoomDisabledState: function () {
	}
	,
	_worldPath: null,
	worldPath: function (value) {
		if (arguments.length === 1) {
			this._worldPath = value;
			return value;
		} else {
			return this._worldPath;
		}
	}
	,
	_windowPath: null,
	windowPath: function (value) {
		if (arguments.length === 1) {
			this._windowPath = value;
			return value;
		} else {
			return this._windowPath;
		}
	}
	,
	_previewPath: null,
	previewPath: function (value) {
		if (arguments.length === 1) {
			this._previewPath = value;
			return value;
		} else {
			return this._previewPath;
		}
	}
	,
	_backgroundPath: null,
	backgroundPath: function (value) {
		if (arguments.length === 1) {
			this._backgroundPath = value;
			return value;
		} else {
			return this._backgroundPath;
		}
	}
	,
	__viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this.__viewport = value;
			if (this.eventProxy() != null) {
				this.eventProxy().viewport(this.__viewport);
			}
			return value;
		} else {
			return this.__viewport;
		}
	}
	,
	setRenderOrigin: function () {
	}
	,
	_worldRect: null,
	worldRect: function (value) {
		if (arguments.length === 1) {
			this._worldRect = value;
			return value;
		} else {
			return this._worldRect;
		}
	}
	,
	_imageRect: null,
	imageRect: function (value) {
		if (arguments.length === 1) {
			this._imageRect = value;
			return value;
		} else {
			return this._imageRect;
		}
	}
	,
	updateWorldRect: function (world) {
		this.worldRect(world);
		if (this.backgroundImage() != null) {
			var img_ = this.backgroundImage();
			var widthScale = world.width() / this.__backgroundImageWidth;
			var heightScale = world.height() / this.__backgroundImageHeight;
			var scale = (widthScale < heightScale) ? widthScale : heightScale;
			var renderWidth = this.__backgroundImageWidth * scale;
			var renderHeight = this.__backgroundImageHeight * scale;
			var widthDiff = world.width() - renderWidth;
			var heightDiff = world.height() - renderHeight;
			this.imageRect(new $.ig.Rect(0, this.worldRect().left() + (widthDiff / 2), this.worldRect().top() + (heightDiff / 2), renderWidth, renderHeight));
		}
		(this.worldPath().data()).rect(world);
		this.worldPath().__visibility = world.isEmpty() ? $.ig.Visibility.prototype.collapsed : $.ig.Visibility.prototype.visible;
	}
	,
	updateWindowPath: function (world, window) {
		((this.windowPath().data()).children().__inner[0]).figures(this.toClockwisePath($.ig.RectUtil.prototype.inflate(world, 2)));
		((this.windowPath().data()).children().__inner[1]).figures(this.toAntiClockwisePath(window));
		this.windowPath().__visibility = window.isEmpty() ? $.ig.Visibility.prototype.collapsed : $.ig.Visibility.prototype.visible;
	}
	,
	updatePreviewPath: function (world, preview) {
		((this.previewPath().data()).children().__inner[0]).figures(this.toClockwisePath($.ig.RectUtil.prototype.inflate(world, 2)));
		((this.previewPath().data()).children().__inner[1]).figures(this.toAntiClockwisePath(preview));
		this.previewPath().__visibility = preview.isEmpty() ? $.ig.Visibility.prototype.collapsed : $.ig.Visibility.prototype.visible;
	}
	,
	toAntiClockwisePath: function (rect) {
		var figures = new $.ig.PathFigureCollection();
		var figure = new $.ig.PathFigure();
		figure.__isClosed = true;
		figure.__startPoint = { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figures.add(figure);
		return figures;
	}
	,
	toClockwisePath: function (rect) {
		var figures = new $.ig.PathFigureCollection();
		var figure = new $.ig.PathFigure();
		figure.__isClosed = true;
		figure.__startPoint = { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figures.add(figure);
		return figures;
	}
	,
	setSurfaceBindings: function () {
	}
	,
	isReady: function () {
		return this.context() != null;
	}
	,
	cancelMouseOperations: function () {
	}
	,
	captureMouse: function () {
		return true;
	}
	,
	positionPreview: function (world) {
		var sizeChanged = false;
		if (Math.round(this.thumbnailSize().width()) != Math.round(world.width())) {
			sizeChanged = true;
			this.viewManager().updateThumbnailWidth(world.width());
		}
		if (Math.round(this.thumbnailSize().height()) != Math.round(world.height())) {
			sizeChanged = true;
			this.viewManager().updateThumbnailHeight(world.height());
		}
		var oldSize = this.thumbnailSize();
		this.thumbnailSize(new $.ig.Size(1, world.width(), world.height()));
		if (sizeChanged) {
			this.model().onThumbnailSizeChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Size.prototype.$type, "ThumbnailSize", oldSize, this.thumbnailSize()));
		}
	}
	,
	_context: null,
	context: function (value) {
		if (arguments.length === 1) {
			this._context = value;
			return value;
		} else {
			return this._context;
		}
	}
	,
	onContextProvided: function (context) {
		this.context(context);
	}
	,
	__scheduler: null,
	scheduler: function (value) {
		if (arguments.length === 1) {
			if (this.__scheduler != null) {
				this.__scheduler.unRegister(this);
			}
			this.__scheduler = value;
			if (this.__scheduler != null) {
				this.__scheduler.register(this);
				this.makeDirty();
			}
			return value;
		} else {
			return this.__scheduler;
		}
	}
	,
	makeDirty: function () {
		if (!this.__isDirty && this.scheduler() != null) {
			this.__isDirty = true;
			this.scheduler().schedule();
		}
	}
	,
	__isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this.__isDirty = value;
			return value;
		} else {
			return this.__isDirty;
		}
	}
	,
	__backgroundImageUri: null,
	__loadingEle: null,
	backgroundImageUri: function (value) {
		if (arguments.length === 1) {
			this.__backgroundImageUri = value;
			if (this.__backgroundImageUri != null) {
				this.__loadingEle = $("<img></img>");
				var img = this.__loadingEle[0];
				var self_ = this;
				var ele_ = this.__loadingEle;
				ele_.bind('load readystatechange', function(e) { if (this.complete || (this.readyState == 'complete' && e.type == 'readystatechange')) { self_.downloadCompleted(e) }});
				img.src = this.__backgroundImageUri;
			} else {
				if (this.__loadingEle != null) {
					var ele_ = this.__loadingEle;
					ele_.unbind("load readystatechange");
					this.__loadingEle = null;
				}
				this.backgroundImage(null);
			}
			return value;
		} else {
			return this.__backgroundImageUri;
		}
	}
	,
	downloadCompleted: function (e) {
		if (!(this.__loadingEle[0]).complete) {
			return;
		}
		this.backgroundImage(this.__loadingEle[0]);
	}
	,
	__backgroundImage: null,
	__backgroundImageWidth: 0,
	__backgroundImageHeight: 0,
	backgroundImage: function (value) {
		if (arguments.length === 1) {
			this.__backgroundImage = value;
			if (this.__backgroundImage != null) {
				var img_ = this.__backgroundImage;
				this.__backgroundImageWidth = img_.width;
				this.__backgroundImageHeight = img_.height;
			} else {
				this.__backgroundImageWidth = 0;
				this.__backgroundImageHeight = 0;
			}
			if ($.ig.Rect.prototype.l_op_Inequality(this.worldRect(), null)) {
				this.updateWorldRect(this.worldRect());
			}
			this.makeDirty();
			return value;
		} else {
			return this.__backgroundImage;
		}
	}
	,
	undirty: function (clearRect) {
		this.isDirty(false);
		if (this.context() == null) {
			return;
		}
		if (this.model().__visibility == $.ig.Visibility.prototype.collapsed) {
			return;
		}
		if (this.model().mode() == $.ig.OverviewPlusDetailPaneMode.prototype.minimal && this.model().mobileMode()) {
			return;
		}
		if (this.context().shouldRender()) {
			var scaleX = 1;
			var scaleY = 1;
			var opacity = 1;
			scaleX = 0.6 + this.transitionProgress() * (1 - 0.6);
			scaleY = 0.6 + this.transitionProgress() * (1 - 0.6);
			opacity = 0.7 + this.transitionProgress() * (1 - 0.7);
			this.backgroundPath().__opacity = opacity;
			this.backgroundPath().strokeThickness(1);
			this.viewManager().setBackgroundPathDefaults(this.backgroundPath());
			this.worldPath().__opacity = opacity;
			this.worldPath().strokeThickness(1);
			this.viewManager().setWorldPathDefaults(this.worldPath());
			this.windowPath().__opacity = opacity;
			this.windowPath().strokeThickness(1.5);
			this.viewManager().setWindowPathDefaults(this.windowPath());
			this.previewPath().__opacity = opacity;
			this.previewPath().strokeThickness(2);
			this.viewManager().setPreviewPathDefaults(this.previewPath());
			var rect = (this.worldPath().data()).rect();
			if (rect.isEmpty()) {
				return;
			}
			this.context().save();
			this.context().translate(this.fullSize().right(), this.fullSize().bottom());
			this.context().scale(scaleX, scaleY);
			this.context().translate(-this.fullSize().right(), -this.fullSize().bottom());
			this.context().renderPath(this.backgroundPath());
			this.viewManager().drawThumbnailImage(this.context(), rect);
			this.context().setRectangleClip(rect);
			this.context().renderPath(this.worldPath());
			if (this.backgroundImage() != null) {
				this.context().drawImage(this.backgroundImage(), opacity, this.imageRect().left(), this.imageRect().top(), this.imageRect().width(), this.imageRect().height());
			}
			this.context().renderPath(this.previewPath());
			this.context().renderPath(this.windowPath());
			this.context().restore();
		}
	}
	,
	index: function () {
		return 10000;
	}
	,
	postRender: function () {
	}
	,
	updateInteractionButtonStates: function (activeState) {
	}
	,
	onContainerProvided: function (container) {
		this.mSPointerEnabled(window.navigator.msPointerEnabled);
		if (this.mSPointerEnabled()) {
			this.useDeltaZoom(true);
		}
		if (container == null) {
			if (this.eventProxy() != null) {
				this.eventProxy().destroy();
			}
			this.viewManager().onContainerProvided(null);
			this.thumbnailContext(null);
			this.eventProxy(null);
			return;
		}
		this.viewManager().onContainerProvided(container);
		this.thumbnailContext(this.viewManager().thumbnailContext());
	}
	,
	updateZoomLevel: function (value) {
		if (!this.disableZooms()) {
			var val_ = value;
			var obj_ = this.model().surfaceViewer();
			obj_.zoomLevel(val_);
		}
	}
	,
	_eventProxy: null,
	eventProxy: function (value) {
		if (arguments.length === 1) {
			this._eventProxy = value;
			return value;
		} else {
			return this._eventProxy;
		}
	}
	,
	onEventSourceProvided: function (eventSource) {
		var $self = this;
		if (eventSource == null) {
			return;
		}
		this.eventProxy(eventSource.clone());
		this.eventProxy().shouldInteract(this.shouldInteract.runOn(this));
		var $t = this.eventProxy();
		$t.onMouseWheel = $.ig.Delegate.prototype.combine($t.onMouseWheel, function (p, d) { return $self.model().onMouseWheel(d); });
		if (this.eventProxy().supportsNonIsometricZoom()) {
			var $t1 = this.eventProxy();
			$t1.onZoomDelta = $.ig.Delegate.prototype.combine($t1.onZoomDelta, function (p, dx, dy, isoScaleDelta) { $self.model().onZoomDelta(p, dx, dy, isoScaleDelta); });
			var $t2 = this.eventProxy();
			$t2.onZoomStarted = $.ig.Delegate.prototype.combine($t2.onZoomStarted, function (p, dx, dy, isoScaleDelta) { $self.model().onZoomStarted(p, dx, dy, isoScaleDelta); });
			var $t3 = this.eventProxy();
			$t3.onZoomCompleted = $.ig.Delegate.prototype.combine($t3.onZoomCompleted, function (p, dx, dy, isoScaleDelta) { $self.model().onZoomCompleted(p, dx, dy, isoScaleDelta); });
			var $t4 = this.eventProxy();
			$t4.onGestureCompleted = $.ig.Delegate.prototype.combine($t4.onGestureCompleted, function (p, d) { $self.model().onGestureCompleted(p); });
		} else {
			var $t5 = this.eventProxy();
			$t5.onPinchDelta = $.ig.Delegate.prototype.combine($t5.onPinchDelta, function (p, d) { $self.model().onPinchDelta(d); });
			var $t6 = this.eventProxy();
			$t6.onPinchStarted = $.ig.Delegate.prototype.combine($t6.onPinchStarted, function (p, d) { $self.model().onPinchStarted(p); });
			var $t7 = this.eventProxy();
			$t7.onGestureCompleted = $.ig.Delegate.prototype.combine($t7.onGestureCompleted, function (p, d) { $self.model().onGestureCompleted(p); });
		}
		var $t8 = this.eventProxy();
		$t8.onMouseEnter = $.ig.Delegate.prototype.combine($t8.onMouseEnter, function (p) { $self.model().onMouseEnter(); });
		var $t9 = this.eventProxy();
		$t9.onMouseOver = $.ig.Delegate.prototype.combine($t9.onMouseOver, function (p, mo, f) { $self.model().onMouseMove(p, mo, f); });
		var $t10 = this.eventProxy();
		$t10.onContactStarted = $.ig.Delegate.prototype.combine($t10.onContactStarted, this.eventProxy_OnContactStarted.runOn(this));
		var $t11 = this.eventProxy();
		$t11.onContactMoved = $.ig.Delegate.prototype.combine($t11.onContactMoved, this.eventProxy_OnContactMoved.runOn(this));
		var $t12 = this.eventProxy();
		$t12.onContactCompleted = $.ig.Delegate.prototype.combine($t12.onContactCompleted, this.eventProxy_OnContactCompleted.runOn(this));
		var $t13 = this.eventProxy();
		$t13.onKeyDown = $.ig.Delegate.prototype.combine($t13.onKeyDown, this.model().onKeyDown.runOn(this.model()));
		var $t14 = this.eventProxy();
		$t14.onMouseLeave = $.ig.Delegate.prototype.combine($t14.onMouseLeave, this.mouseLeave.runOn(this));
		this.eventProxy().viewport(this.viewport());
		this.viewManager().eventProxy(this.eventProxy());
	}
	,
	eventProxy_OnContactCompleted: function (point, isFinger) {
		point = { __x: point.__x + this.eventProxy().viewport().left(), __y: point.__y + this.eventProxy().viewport().top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		this.model().onMouseLeftButtonUp(point);
	}
	,
	eventProxy_OnContactMoved: function (point, isFinger) {
		point = { __x: point.__x + this.eventProxy().viewport().left(), __y: point.__y + this.eventProxy().viewport().top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		this.model().onMouseMove(point, false, isFinger);
	}
	,
	eventProxy_OnContactStarted: function (point, isFinger) {
		point = { __x: point.__x + this.eventProxy().viewport().left(), __y: point.__y + this.eventProxy().viewport().top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		this.model().onMouseLeftButtonDown(point);
	}
	,
	mouseLeave: function (p) {
		if (!this.shouldInteract({ __x: this.viewport().left() + p.__x, __y: this.viewport().top() + p.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName })) {
			this.model().onMouseLeave();
		}
	}
	,
	shouldInteract: function (p) {
		if ($.ig.Point.prototype.l_op_Equality(p, null)) {
			return false;
		}
		if (this.model().__visibility != $.ig.Visibility.prototype.visible) {
			return false;
		}
		if (this.model().mode() == $.ig.OverviewPlusDetailPaneMode.prototype.minimal && this.model().mobileMode()) {
			return false;
		}
		var mouseX = p.__x;
		var mouseY = p.__y;
		if (mouseX >= this.fullSize().left() && mouseY >= this.fullSize().top() && mouseX < this.fullSize().left() + this.fullSize().width() && mouseY < this.fullSize().top() + this.fullSize().height()) {
			return true;
		}
		return false;
	}
	,
	mobileModeChanged: function (mobileMode) {
		if (mobileMode) {
			this.animationEnabled(false);
			if (this.viewManager() != null && this.model().__visibility == $.ig.Visibility.prototype.visible) {
				this.viewManager().enableMobileOPD();
				this.model().mode($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
				this.model().refresh(true);
			}
		} else {
			if (this.viewManager() != null) {
				this.viewManager().disableMobileOPD();
				this.model().mode($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
				this.model().refresh(true);
				this.transitionProgress(0);
				this.startingProgress(0);
				this.animationEnabled(true);
				this.viewManager().hideSettingsPanel();
			}
		}
	}
	,
	_fullSize: null,
	fullSize: function (value) {
		if (arguments.length === 1) {
			this._fullSize = value;
			return value;
		} else {
			return this._fullSize;
		}
	}
	,
	arrange: function (rect) {
		this.fullSize(rect);
		(this.backgroundPath().data()).rect(this.fullSize());
		var height = rect.height() - 4;
		var width = rect.width() - 4;
		if (this.transitionProgress() >= 1 && !this.model().mobileMode()) {
			height -= 20;
			this.viewManager().showSettingsPanel(this.fullSize(), width, height);
		}
		if (this.viewManager().mobilePanel() != null) {
			if (this.model().mobileMode()) {
				this.viewManager().mobilePanel().show();
			} else {
				this.viewManager().hideMobileOPD(true);
			}
		}
		this.viewport(new $.ig.Rect(0, this.fullSize().left() + 2, this.fullSize().top() + 2, width, height));
		this.makeDirty();
	}
	,
	_disableZooms: false,
	disableZooms: function (value) {
		if (arguments.length === 1) {
			this._disableZooms = value;
			return value;
		} else {
			return this._disableZooms;
		}
	}
	,
	pushZoomLevel: function (zoomLevel) {
		this.disableZooms(true);
		this.viewManager().changeSliderZoomLevel(zoomLevel);
		this.disableZooms(false);
	}
	,
	onZoomTo100: function () {
		this.model().onZoomTo100();
	}
	,
	_thumbnailContext: null,
	thumbnailContext: function (value) {
		if (arguments.length === 1) {
			this._thumbnailContext = value;
			return value;
		} else {
			return this._thumbnailContext;
		}
	}
	,
	_thumbnailSize: null,
	thumbnailSize: function (value) {
		if (arguments.length === 1) {
			this._thumbnailSize = value;
			return value;
		} else {
			return this._thumbnailSize;
		}
	}
	,
	positionImage: function (world) {
	}
	,
	settingsMouseLeave: function (mouseX, mouseY) {
		if (!this.shouldInteract({ __x: mouseX, __y: mouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName })) {
			this.model().onMouseLeave();
		}
	}
	,
	getSliderValue: function () {
		return this.viewManager().getSliderValue();
	}
	,
	setSliderMin: function (min) {
		this.viewManager().setSliderMin(min);
	}
	,
	setSliderMax: function (max) {
		this.viewManager().setSliderMax(max);
	}
	,
	queueWork: function (work) {
		this.viewManager().queueWork(work);
	}
	,
	onMobileClosing: function () {
		this.model().onMobileClosing();
	}
	,
	_useDeltaZoom: false,
	useDeltaZoom: function (value) {
		if (arguments.length === 1) {
			this._useDeltaZoom = value;
			return value;
		} else {
			return this._useDeltaZoom;
		}
	}
	,
	_mSPointerEnabled: false,
	mSPointerEnabled: function (value) {
		if (arguments.length === 1) {
			this._mSPointerEnabled = value;
			return value;
		} else {
			return this._mSPointerEnabled;
		}
	}
	,
	preRender: function () {
	}
	,
	isValid: function () {
		return true;
	}
	,
	onIsSurfaceInteractionDisabledChanged: function () {
		if (this.eventProxy() != null) {
			this.eventProxy().isInteractionDisabled(this.model().isSurfaceInteractionDisabled());
		}
	}
	,
	$type: new $.ig.Type('XamOverviewPlusDetailPaneView', $.ig.Object.prototype.$type, [$.ig.ISchedulableRender.prototype.$type])
}, true);

$.ig.util.defType('XamOverviewPlusDetailPaneViewManager', 'Object', {
	_thumbnailCanvas: null,
	thumbnailCanvas: function (value) {
		if (arguments.length === 1) {
			this._thumbnailCanvas = value;
			return value;
		} else {
			return this._thumbnailCanvas;
		}
	}
	,
	_thumbnailContext: null,
	thumbnailContext: function (value) {
		if (arguments.length === 1) {
			this._thumbnailContext = value;
			return value;
		} else {
			return this._thumbnailContext;
		}
	}
	,
	_container: null,
	container: function (value) {
		if (arguments.length === 1) {
			this._container = value;
			return value;
		} else {
			return this._container;
		}
	}
	,
	_settingsPanel: null,
	settingsPanel: function (value) {
		if (arguments.length === 1) {
			this._settingsPanel = value;
			return value;
		} else {
			return this._settingsPanel;
		}
	}
	,
	_mobilePanel: null,
	mobilePanel: function (value) {
		if (arguments.length === 1) {
			this._mobilePanel = value;
			return value;
		} else {
			return this._mobilePanel;
		}
	}
	,
	_slider: null,
	slider: function (value) {
		if (arguments.length === 1) {
			this._slider = value;
			return value;
		} else {
			return this._slider;
		}
	}
	,
	_sliderEnabled: false,
	sliderEnabled: function (value) {
		if (arguments.length === 1) {
			this._sliderEnabled = value;
			return value;
		} else {
			return this._sliderEnabled;
		}
	}
	,
	_isJqueryMobile: false,
	isJqueryMobile: function (value) {
		if (arguments.length === 1) {
			this._isJqueryMobile = value;
			return value;
		} else {
			return this._isJqueryMobile;
		}
	}
	,
	__overviewText: null,
	__closeText: null,
	__zoomInText: null,
	__zoomOutText: null,
	__resetZoomText: null,
	__owner: null,
	init: function (owner) {
		this.__overviewText = "Overview";
		this.__closeText = "Close";
		this.__zoomInText = "Zoom In";
		this.__zoomOutText = "Zoom Out";
		this.__resetZoomText = "Reset Zoom";
		this.__mobileOPDShown = false;
		$.ig.Object.prototype.init.call(this);
		this.__owner = owner;
		this.isJqueryMobile(typeof $.mobile !== 'undefined' && $.mobile !== null);
		var overview_ = null;
		if ($.ig.Chart && $.ig.Chart.locale && $.ig.Chart.locale.overview) { overview_ = $.ig.Chart.locale.overview };
		var close_ = null;
		if ($.ig.Chart && $.ig.Chart.locale && $.ig.Chart.locale.close) { close_ = $.ig.Chart.locale.close };
		var zoomIn_ = null;
		if ($.ig.Chart && $.ig.Chart.locale && $.ig.Chart.locale.zoomIn) { zoomIn_ = $.ig.Chart.locale.zoomIn };
		var zoomOut_ = null;
		if ($.ig.Chart && $.ig.Chart.locale && $.ig.Chart.locale.zoomOut) { zoomOut_ = $.ig.Chart.locale.zoomOut };
		var resetZoom_ = null;
		if ($.ig.Chart && $.ig.Chart.locale && $.ig.Chart.locale.resetZoom) { resetZoom_ = $.ig.Chart.locale.resetZoom };
		if (overview_ != null) {
			this.__overviewText = overview_;
		}
		if (close_ != null) {
			this.__closeText = close_;
		}
		if (zoomIn_ != null) {
			this.__zoomInText = zoomIn_;
		}
		if (zoomOut_ != null) {
			this.__zoomOutText = zoomOut_;
		}
		if (resetZoom_ != null) {
			this.__resetZoomText = resetZoom_;
		}
		this.thumbnailCanvas($("<canvas></canvas>"));
		this.thumbnailContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.thumbnailCanvas()[0]).getContext("2d")));
	},
	_zoomIn: null,
	zoomIn: function (value) {
		if (arguments.length === 1) {
			this._zoomIn = value;
			return value;
		} else {
			return this._zoomIn;
		}
	}
	,
	_zoomOut: null,
	zoomOut: function (value) {
		if (arguments.length === 1) {
			this._zoomOut = value;
			return value;
		} else {
			return this._zoomOut;
		}
	}
	,
	_zoom100: null,
	zoom100: function (value) {
		if (arguments.length === 1) {
			this._zoom100 = value;
			return value;
		} else {
			return this._zoom100;
		}
	}
	,
	onContainerProvided: function (container) {
		if (container == null) {
			this.unbind();
			this.container(null);
			this.settingsPanel(null);
			this.slider(null);
			return;
		}
		this.container($(container));
		var settingsPanel = $("<div class=\"ui-chart-toolbar\"></div>");
		settingsPanel.hide();
		this.settingsPanel(settingsPanel);
		this.container().append(settingsPanel);
		this.mobileRender();
		if (!this.__owner.model().mobileMode()) {
			this.hideMobileOPD(true);
		}
		var items = $("<ul class=\"ui-widget\" style=\"margin: 0; padding: 0\"></ul>");
		settingsPanel.append(items);
		var sliderHolder = $("<div class=\"ui-chart-slider\"></div>");
		var slider_ = this.isJqueryMobile() ? $("<input type='range' style='display:none;' max='100' min='0' />") : $("<div></div>");
		sliderHolder.append(slider_);
		this.slider(slider_);
		if (slider_.slider) { slider_.slider({mini: true}); this.sliderEnabled(true); };
		if (this.sliderEnabled()) {
			slider_.bind(this.isJqueryMobile() ? "change" : "slide", this.slideChanged.runOn(this));
		}
		var zoomout_ = $("<button></button>");
		var zoomin_ = $("<button></button>");
		var zoom100_ = $("<button></button>");
		var zoomOutText_ = this.__zoomOutText;
		var zoomInText_ = this.__zoomInText;
		var resetZoomText_ = this.__resetZoomText;
		if (this.isJqueryMobile()) {
			zoomout_ = $("<div title=" + zoomOutText_ + "></div>");
			zoomout_.buttonMarkup({ iconpos: "notext", icon: "zoomout", mini: true, inline: true, corners: false });
			zoomin_ = $("<div title=" + zoomInText_ + "></div>");
			zoomin_.buttonMarkup({ iconpos: "notext", icon: "zoomin", mini: true, inline: true, corners: false });
			zoom100_ = $("<div title=" + resetZoomText_ + "></div>");
			zoom100_.buttonMarkup({ iconpos: "notext", icon: "reset", mini: true, inline: true, corners: false });
		} else {
			zoomout_.button({ icons: { primary: "ui-icon-zoomout"}, label: zoomOutText_, text: false });
			zoomin_.button({ icons: { primary: "ui-icon-zoomin"}, label: zoomInText_, text: false });
			zoom100_.button({ icons: { primary: "ui-icon-arrow-4-diag"}, label: resetZoomText_, text: false });
		}
		zoomout_.click(this.zoomOutClicked.runOn(this));
		zoomin_.click(this.zoomInClicked.runOn(this));
		zoom100_.click(this.zoom100Clicked.runOn(this));
		this.zoomOut(zoomout_);
		this.zoomIn(zoomin_);
		this.zoom100(zoom100_);
		this.addToUL(items, zoomout_, true);
		this.addToUL(items, sliderHolder, false);
		this.addToUL(items, zoomin_, true);
		this.addToUL(items, zoom100_, true);
		settingsPanel.mouseleave(this.settingsMouseLeave.runOn(this));
	}
	,
	unbind: function () {
		if (this.mobilePanel() != null) {
			this.mobilePanel().unbind("click");
		}
		if (this.zoomOut() != null) {
			this.zoomOut().unbind("click");
		}
		if (this.zoomIn() != null) {
			this.zoomIn().unbind("click");
		}
		if (this.zoom100() != null) {
			this.zoom100().unbind("click");
		}
		if (this.sliderEnabled() && this.slider() != null) {
			this.slider().unbind(this.isJqueryMobile() ? "change" : "slide");
		}
		this.zoomIn(null);
		this.zoomOut(null);
		this.zoom100(null);
		this.slider(null);
		this.mobilePanel(null);
	}
	,
	mobileRender: function () {
		var closeIcon_ = $("<button toggle=\"closed\" class=\"ui-chart-opd-button\"></button>");
		var overview_ = this.__overviewText;
		if (this.isJqueryMobile()) {
			closeIcon_ = $("<div toggle=\"closed\" class=\"ui-chart-opd-button\"></div>");
			closeIcon_.html(overview_).buttonMarkup({ icon: "arrow-d", iconpos: "left"  });
		} else {
			closeIcon_.button({ icons: { secondary: "ui-icon-carat-1-s"}, label: overview_ });
		}
		if (!this.__owner.model().mobileMode()) {
			closeIcon_.hide();
		}
		closeIcon_.click(this.toggleOpd.runOn(this));
		this.mobilePanel(closeIcon_);
		this.container().append(closeIcon_);
	}
	,
	settingsMouseLeave: function (e) {
		$.ig.DOMEventProxy.prototype.fixEvent(e);
		var offsets = this.eventProxy().getSourceOffsets();
		var mouseX = e.pageX - offsets.__x;
		var mouseY = e.pageY - offsets.__y;
		this.__owner.settingsMouseLeave(mouseX, mouseY);
	}
	,
	addToUL: function (items, item, stateDefault) {
		var classString = "";
		if (stateDefault) {
			classString = "class=\"ui-corner-all\" ";
		}
		var li = $("<li></li>");
		if (stateDefault) {
			li.mousedown($.ig.XamOverviewPlusDetailPaneViewManager.prototype.buttonMouseDown).mouseup($.ig.XamOverviewPlusDetailPaneViewManager.prototype.buttonMouseUp).hover($.ig.XamOverviewPlusDetailPaneViewManager.prototype.buttonHoverIn, $.ig.XamOverviewPlusDetailPaneViewManager.prototype.buttonHoverOut);
		} else {
			li.addClass("ui-chart-slider-holder");
		}
		li.append(item);
		items.append(li);
	}
	,
	zoomOutClicked: function (e) {
		this.changeSliderZoomLevel(this.getSliderValue() - 0.05);
		this.__owner.updateZoomLevel(this.getSliderValue());
		e.preventDefault();
	}
	,
	zoomInClicked: function (e) {
		this.changeSliderZoomLevel(this.getSliderValue() + 0.05);
		this.__owner.updateZoomLevel(this.getSliderValue());
		e.preventDefault();
	}
	,
	changeSliderZoomLevel: function (zoomLevel_) {
		if (this.sliderEnabled() && this.slider() != null) {
			var slider_ = this.slider();
			if (this.isJqueryMobile()) {
				slider_.slider("refresh", Math.round(zoomLevel_ * 100.0), true, false);
			} else {
				slider_.slider("option", "value", Math.round(zoomLevel_ * 100.0));
			}
		}
	}
	,
	zoom100Clicked: function (e) {
		this.__owner.onZoomTo100();
		e.preventDefault();
	}
	,
	toggleOpd: function (e) {
		if (this.mobilePanel().attr("toggle") == "closed" || (this.isJqueryMobile() && this.mobilePanel().attr("data-toggle") == "closed")) {
			this.showMobileOPD();
		} else {
			this.hideMobileOPD(false);
		}
		this.__owner.model().refresh(true);
		e.preventDefault();
	}
	,
	getSliderValue: function () {
		if (this.sliderEnabled() && this.slider() != null) {
			var slider_ = this.slider();
			if (this.isJqueryMobile()) {
				return parseInt(slider_.val() || 0) / 100;
			} else {
				return slider_.slider("option", "value") / 100;
			}
		} else {
			return 0;
		}
	}
	,
	setSliderMin: function (minimum) {
		var min_ = Math.round(minimum * 100);
		if (this.sliderEnabled() && this.slider() != null) {
			var slider_ = this.slider();
			if (this.isJqueryMobile()) {
				slider_.attr("min", min_);
			} else {
				slider_.slider("option", "min", min_);
			}
		}
	}
	,
	setSliderMax: function (maximum) {
		var max_ = Math.round(maximum * 100);
		if (this.sliderEnabled() && this.slider() != null) {
			var slider_ = this.slider();
			if (this.isJqueryMobile()) {
				slider_.attr("max", max_);
			} else {
				slider_.slider("option", "max", max_);
			}
		}
	}
	,
	buttonMouseDown: function (e) {
	}
	,
	buttonMouseUp: function (e) {
	}
	,
	buttonHoverIn: function (e) {
	}
	,
	buttonHoverOut: function (e) {
	}
	,
	slideChanged: function (e_, ui_) {
		var val = (ui_ ? ui_.value : e_.target.value) / 100;
		this.__owner.updateZoomLevel(val);
	}
	,
	updateThumbnailWidth: function (width) {
		this.thumbnailCanvas().attr("width", width.toString());
	}
	,
	updateThumbnailHeight: function (height) {
		this.thumbnailCanvas().attr("height", height.toString());
	}
	,
	setBackgroundPathDefaults: function (backgroundPath) {
		backgroundPath.__stroke = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#AEB8C2");
			return $ret;
		}());
		backgroundPath.__fill = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#C6CFD9");
			return $ret;
		}());
	}
	,
	setWorldPathDefaults: function (worldPath) {
		worldPath.__stroke = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("rgba(92,105,124,.4)");
			return $ret;
		}());
		worldPath.__fill = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("rgba(147,159,175,0)");
			return $ret;
		}());
	}
	,
	setWindowPathDefaults: function (windowPath) {
		windowPath.__stroke = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("rgba(68,76,88,.6)");
			return $ret;
		}());
		windowPath.__fill = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("rgba(92,105,118,.1)");
			return $ret;
		}());
	}
	,
	setPreviewPathDefaults: function (previewPath) {
		previewPath.__stroke = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#2A3037");
			return $ret;
		}());
	}
	,
	drawThumbnailImage: function (context, rect) {
		context.drawImage(this.thumbnailCanvas()[0], 1, rect.left(), rect.top(), rect.width(), rect.height());
	}
	,
	showSettingsPanel: function (fullSize, width, height) {
		this.settingsPanel().css("top", (fullSize.top() + 2 + height).toString() + "px");
		this.settingsPanel().css("left", (fullSize.left() + 2).toString() + "px");
		this.settingsPanel().css("width", width.toString() + "px");
		this.settingsPanel().css("height", "20px");
		this.settingsPanel().show();
	}
	,
	__mobileOPDShown: false,
	enableMobileOPD: function () {
		if (this.settingsPanel() != null) {
			this.settingsPanel().hide();
		}
	}
	,
	disableMobileOPD: function () {
		this.__owner.model().mode($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
	}
	,
	showMobileOPD: function () {
		this.__mobileOPDShown = true;
		this.__owner.model().__visibility = $.ig.Visibility.prototype.visible;
		this.enableMobileOPD();
		this.__owner.model().mode($.ig.OverviewPlusDetailPaneMode.prototype.full);
		var mp_ = this.mobilePanel();
		var close_ = this.__closeText;
		if (this.isJqueryMobile()) {
			mp_.find(".ui-btn-text").html(close_);
			mp_.find(".ui-icon").removeClass('ui-icon-arrow-d').addClass('ui-icon-delete');
		} else {
			mp_.button("option", "icons", { secondary: "ui-icon-close"});
			mp_.button("option", "label",  close_);
		}
		this.mobilePanel().attr("toggle", "open").attr("data-toggle", "open");
		this.settingsPanel().css("left", (this.__owner.model().view().fullSize().left() + 5).toString() + "px");
		this.settingsPanel().css("width", (this.__owner.model().view().fullSize().width() - 10).toString() + "px");
		this.settingsPanel().css("top", (this.__owner.model().view().fullSize().height() - this.settingsPanel().height()).toString() + "px");
		this.settingsPanel().show();
	}
	,
	hideMobileOPD: function (hideCloseIcon) {
		if (this.__mobileOPDShown) {
			this.__mobileOPDShown = false;
			this.__owner.model().__visibility = $.ig.Visibility.prototype.collapsed;
			var mp_ = this.mobilePanel();
			var overview_ = this.__overviewText;
			if (this.isJqueryMobile()) {
				mp_.find(".ui-btn-text").html(overview_);
				mp_.find(".ui-icon").removeClass('ui-icon-delete').addClass('ui-icon-arrow-d');
			} else {
				mp_.button("option", "icons", { secondary: "ui-icon-carat-1-s"});
				mp_.button("option", "label",  overview_);
			}
			this.mobilePanel().attr("toggle", "closed").attr("data-toggle", "closed");
			this.__owner.model().mode($.ig.OverviewPlusDetailPaneMode.prototype.minimal);
			this.settingsPanel().hide();
			this.__owner.onMobileClosing();
		}
		if (hideCloseIcon) {
			this.mobilePanel().hide();
		}
	}
	,
	hideSettingsPanel: function () {
		this.settingsPanel().hide();
	}
	,
	_eventProxy: null,
	eventProxy: function (value) {
		if (arguments.length === 1) {
			this._eventProxy = value;
			return value;
		} else {
			return this._eventProxy;
		}
	}
	,
	queueWork: function (work) {
		window.setTimeout(work, 0);
	}
	,
	jqueryMobilePresent: function () {
		return this.isJqueryMobile();
	}
	,
	$type: new $.ig.Type('XamOverviewPlusDetailPaneViewManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('BrushUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getLightened: function (brush, interpolation) {
		if (brush == null) {
			return brush;
		}
		if (brush._isGradient) {
			var newBrush = (brush).clone();
			for (var i = 0; i < newBrush._gradientStops.length; i++) {
				var currentStop = newBrush._gradientStops[i];
				currentStop.color($.ig.ColorUtil.prototype.getLightened(currentStop.color(), interpolation));
			}
			return newBrush;
		} else {
			var l = $.ig.ColorUtil.prototype.getLightened(brush.color(), interpolation);
			return (function () {
				var $ret = new $.ig.Brush();
				$ret.color(l);
				return $ret;
			}());
		}
	}
	,
	getInterpolation: function (minimum, interpolation, maximum, interpolationMode) {
		var target = new $.ig.Brush();
		if (minimum == null && maximum == null) {
			target.__fill = "transparent";
			return target;
		}
		var minSolid = null, maxSolid = null;
		var minLinear = null, maxLinear = null;
		if (minimum == null) {
			var c = maximum._isGradient ? (function () {
				var $ret = new $.ig.Color();
				$ret.a(0);
				$ret.r(255);
				$ret.g(255);
				$ret.b(255);
				return $ret;
			}()) : (function () {
				var $ret = new $.ig.Color();
				$ret.a(0);
				$ret.r(maximum.color().r());
				$ret.g(maximum.color().g());
				$ret.b(maximum.color().b());
				return $ret;
			}());
			minSolid = (function () {
				var $ret = new $.ig.Brush();
				$ret.color(c);
				return $ret;
			}());
		} else {
			if (minimum._isGradient) {
				minLinear = minimum;
			} else {
				minSolid = minimum;
			}
		}
		if (maximum == null) {
			var c1 = minimum._isGradient ? (function () {
				var $ret = new $.ig.Color();
				$ret.a(0);
				$ret.r(255);
				$ret.g(255);
				$ret.b(255);
				return $ret;
			}()) : (function () {
				var $ret = new $.ig.Color();
				$ret.a(0);
				$ret.r(minimum.color().r());
				$ret.g(minimum.color().g());
				$ret.b(minimum.color().b());
				return $ret;
			}());
			maxSolid = (function () {
				var $ret = new $.ig.Brush();
				$ret.color(c1);
				return $ret;
			}());
		} else {
			if (maximum._isGradient) {
				maxLinear = maximum;
			} else {
				maxSolid = maximum;
			}
		}
		if (minSolid != null && maxSolid != null) {
			return $.ig.BrushUtil.prototype.solidSolid(minSolid, interpolation, maxSolid, interpolationMode);
		}
		if (minSolid != null && maxLinear != null) {
			return $.ig.BrushUtil.prototype.solidLinear(minSolid, interpolation, maxLinear, interpolationMode);
		}
		if (minLinear != null && maxSolid != null) {
			return $.ig.BrushUtil.prototype.solidLinear(maxSolid, 1 - interpolation, minLinear, interpolationMode);
		}
		if (minLinear != null && maxLinear != null) {
			return $.ig.BrushUtil.prototype.linearLinear(minLinear, interpolation, maxLinear, interpolationMode);
		}
		return target;
	}
	,
	solidSolid: function (min, p, max, interpolationMode) {
		var b = new $.ig.Brush();
		b.color($.ig.ColorUtil.prototype.getInterpolation(min.color(), p, max.color(), interpolationMode));
		return b;
	}
	,
	solidLinear: function (min, p, max, interpolationMode) {
		var b = new $.ig.LinearGradientBrush();
		b._gradientStops = $.ig.BrushUtil.prototype.gradientStops1(min.color(), p, max._gradientStops, interpolationMode);
		if (max._useCustomDirection) {
			b._useCustomDirection = true;
			b._startX = max._startX;
			b._startY = max._startY;
			b._endX = max._endX;
			b._endY = max._endY;
		}
		return b;
	}
	,
	linearLinear: function (min, p, max, interpolationMode) {
		var b = new $.ig.LinearGradientBrush();
		b._gradientStops = $.ig.BrushUtil.prototype.gradientStops(min._gradientStops, p, max._gradientStops, interpolationMode);
		if (min._useCustomDirection || max._useCustomDirection) {
			b._useCustomDirection = true;
			b._startX = min._startX + p * (max._startX - min._startX);
			b._startY = min._startY + p * (max._startY - min._startY);
			b._endX = (1 - p) * min._endX + p * max._endX;
			b._endY = (1 - p) * min._endY + p * max._endY;
		}
		return b;
	}
	,
	gradientStops1: function (min, p, max, interpolationMode) {
		var gradientStopCollection = new Array(max.length);
		for (var i = 0; i < max.length; ++i) {
			gradientStopCollection[i] = (function () {
				var $ret = new $.ig.GradientStop();
				$ret._offset = max[i]._offset;
				$ret.color($.ig.ColorUtil.prototype.getInterpolation(min, p, max[i].color(), interpolationMode));
				return $ret;
			}());
		}
		return gradientStopCollection;
	}
	,
	gradientStops: function (min, p, max, interpolationMode) {
		var minimumCount = Math.min(min.length, max.length);
		var maxCount = Math.max(min.length, max.length);
		var gradientStopCollection = new Array(maxCount);
		var i = 0;
		for (; i < minimumCount; ++i) {
			gradientStopCollection[i] = (function () {
				var $ret = new $.ig.GradientStop();
				$ret._offset = (1 - p) * min[i]._offset + p * max[i]._offset;
				$ret.color($.ig.ColorUtil.prototype.getInterpolation(min[i].color(), p, max[i].color(), interpolationMode));
				return $ret;
			}());
		}
		for (; i < min.length; ++i) {
			gradientStopCollection[i] = (function () {
				var $ret = new $.ig.GradientStop();
				$ret._offset = (1 - p) * min[i]._offset + p * max[max.length - 1]._offset;
				$ret.color($.ig.ColorUtil.prototype.getInterpolation(min[i].color(), p, max[max.length - 1].color(), interpolationMode));
				return $ret;
			}());
		}
		for (; i < max.length; ++i) {
			gradientStopCollection[i] = (function () {
				var $ret = new $.ig.GradientStop();
				$ret._offset = (1 - p) * min[min.length - 1]._offset + p * max[i]._offset;
				$ret.color($.ig.ColorUtil.prototype.getInterpolation(min[min.length - 1].color(), p, max[i].color(), interpolationMode));
				return $ret;
			}());
		}
		return gradientStopCollection;
	}
	,
	isFullyTransparent: function (brush) {
		var linearBrush = $.ig.util.cast($.ig.LinearGradientBrush.prototype.$type, brush);
		if (linearBrush != null) {
			return $.ig.BrushUtil.prototype.isFullyTransparent2(linearBrush);
		}
		if (brush.color().a() == 0) {
			return true;
		}
		return false;
	}
	,
	isFullyTransparent2: function (brush) {
		var $t = brush._gradientStops;
		for (var i = 0; i < $t.length; i++) {
			var stop = $t[i];
			if (!$.ig.BrushUtil.prototype.isFullyTransparent1(stop)) {
				return false;
			}
		}
		return true;
	}
	,
	isFullyTransparent1: function (gradientStop) {
		if (gradientStop.color().a() == 0) {
			return true;
		}
		return false;
	}
	,
	getCssBrushColors: function (className, obj) {
		var brushes = new Array(2);
		obj.addClass(className);
		var fill = new $.ig.Brush();
		fill.__fill = obj.css("background-color");
		var outline = new $.ig.Brush();
		outline.__fill = obj.css("border-top-color");
		obj.removeClass(className);
		brushes[0] = fill;
		brushes[1] = outline;
		return brushes;
	}
	,
	getBrushCollection: function (palleteName_, container_, brushes, outlines, defaultColors) {
		brushes = new $.ig.BrushCollection();
		outlines = new $.ig.BrushCollection();
		var tempBrush;
		var names = new $.ig.List$1(String, 0);
		names.add("background-color");
		names.add("border-top-color");
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		var isNotInDom = false;
		if (container_ != null) {
			container_.append(discovery);
			isNotInDom = !jQuery.contains(document.documentElement, container_[0]);
			if (isNotInDom) {
				$("body").append(container_);
			}
		} else {
			$("body").append(discovery);
		}
		var palette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, "ui-" + palleteName_ + "-palette-", names);
		var numPaletteColors = palette.count();
		if (numPaletteColors == 0) {
			if (defaultColors == null) {
				defaultColors = [ "#B1BFC9", "#50a8be", "#798995", "#fc6754", "#4F606C", "#fec33c", "#374650", "#3c6399", "#162C3B", "#91af49" ];
			}
			for (var i = 0; i < defaultColors.length - 1; i += 2) {
				tempBrush = new $.ig.Brush();
				tempBrush.__fill = defaultColors[i];
				outlines.add(tempBrush);
				tempBrush = new $.ig.Brush();
				tempBrush.__fill = defaultColors[i + 1];
				brushes.add(tempBrush);
			}
		}
		for (var i1 = 0; i1 < numPaletteColors; i1++) {
			var fillBrush = new $.ig.Brush();
			fillBrush.__fill = palette.__inner[i1].__inner[0];
			var outlineBrush = new $.ig.Brush();
			outlineBrush.__fill = palette.__inner[i1].__inner[1];
			brushes.add(fillBrush);
			outlines.add(outlineBrush);
		}
		discovery.remove();
		if (isNotInDom) {
			container_.remove();
		}
		return {
			p2: brushes,
			p3: outlines
		};
	}
	,
	getGradientBrushCollection: function (fillGradientPaletteName, outlineGradientPaletteName, paletteName, container_, brushes, outlines, defaultColors) {
		brushes = new $.ig.BrushCollection();
		outlines = new $.ig.BrushCollection();
		if (defaultColors == null) {
			defaultColors = [ "#B1BFC9", "#50a8be", "#798995", "#fc6754", "#4F606C", "#fec33c", "#374650", "#3c6399", "#162C3B", "#91af49" ];
		}
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		var isNotInDom = false;
		if (container_ != null) {
			container_.append(discovery);
			isNotInDom = !jQuery.contains(document.documentElement, container_[0]);
			if (isNotInDom) {
				$("body").append(container_);
			}
		} else {
			$("body").append(discovery);
		}
		var names = new $.ig.List$1(String, 0);
		names.add("background-image");
		var fillsPalette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, fillGradientPaletteName, names);
		var numFillsPaletteColors = fillsPalette.count();
		var outlinesPalette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, outlineGradientPaletteName, names);
		var numOutlinesPaletteColors = outlinesPalette.count();
		for (var i = 0; i < numFillsPaletteColors; i++) {
			brushes.add($.ig.CssGradientUtil.prototype.brushFromGradientString(fillsPalette.__inner[i].__inner[0]));
		}
		for (var i1 = 0; i1 < numOutlinesPaletteColors; i1++) {
			outlines.add($.ig.CssGradientUtil.prototype.brushFromGradientString(outlinesPalette.__inner[i1].__inner[0]));
		}
		names.clear();
		var fillIndex = 0;
		var outlineIndex = 0;
		var numPaletteColors = Math.min(numFillsPaletteColors, numOutlinesPaletteColors);
		var palette = null;
		if (numFillsPaletteColors == 0) {
			names.add("background-color");
		}
		if (numOutlinesPaletteColors == 0) {
			names.add("border-top-color");
			outlineIndex = numFillsPaletteColors == 0 ? 1 : 0;
		}
		if (names.count() > 0) {
			palette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, paletteName, names);
			numPaletteColors = palette.count();
		}
		if (numFillsPaletteColors == 0) {
			if (numPaletteColors > 0) {
				for (var i2 = 0; i2 < numPaletteColors; i2++) {
					var fillBrush = new $.ig.Brush();
					fillBrush.__fill = palette.__inner[i2].__inner[fillIndex];
					brushes.add(fillBrush);
				}
			} else {
				for (var i3 = 0; i3 < defaultColors.length - 1; i3 += 2) {
					var fillBrush1 = new $.ig.Brush();
					fillBrush1 = new $.ig.Brush();
					fillBrush1.__fill = defaultColors[i3 + 1];
					brushes.add(fillBrush1);
				}
			}
		}
		if (numOutlinesPaletteColors == 0) {
			if (numPaletteColors > 0) {
				for (var i4 = 0; i4 < numPaletteColors; i4++) {
					var outlineBrush = new $.ig.Brush();
					outlineBrush.__fill = palette.__inner[i4].__inner[outlineIndex];
					outlines.add(outlineBrush);
				}
			} else {
				for (var i5 = 0; i5 < defaultColors.length - 1; i5 += 2) {
					var outlineBrush1 = new $.ig.Brush();
					outlineBrush1.__fill = defaultColors[i5];
					outlines.add(outlineBrush1);
				}
			}
		}
		discovery.remove();
		if (isNotInDom) {
			container_.remove();
		}
		return {
			p4: brushes,
			p5: outlines
		};
	}
	,
	getGradientBrush: function (gradientClassName, className, cssProp, container_, fallbackColor) {
		var b = null;
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		var isNotInDom = false;
		if (container_ != null) {
			container_.append(discovery);
			isNotInDom = !jQuery.contains(document.documentElement, container_[0]);
			if (isNotInDom) {
				$("body").append(container_);
			}
		} else {
			$("body").append(discovery);
		}
		var gradientString = $.ig.CssHelper.prototype.getPropertyValue(discovery, gradientClassName, "background-image");
		if (gradientString != null) {
			b = $.ig.CssGradientUtil.prototype.brushFromGradientString(gradientString);
		}
		if (b == null) {
			b = new $.ig.Brush();
			var fillColor = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, cssProp);
			b.__fill = fillColor != null ? fillColor : fallbackColor;
		}
		discovery.remove();
		if (isNotInDom) {
			container_.remove();
		}
		return b;
	}
	,
	$type: new $.ig.Type('BrushUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ColorUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	randomColor: function (alpha) {
		return $.ig.Color.prototype.fromArgb(alpha, $.ig.ColorUtil.prototype._r.next2(0, 255), $.ig.ColorUtil.prototype._r.next2(0, 255), $.ig.ColorUtil.prototype._r.next2(0, 255));
	}
	,
	randomHue: function (color) {
		var ahsv = $.ig.ColorUtil.prototype.getAHSV(color);
		return $.ig.ColorUtil.prototype.fromAHSV(ahsv[0], $.ig.ColorUtil.prototype._r.next2(0, 359), ahsv[2], ahsv[3]);
	}
	,
	getInterpolation: function (minimum, interpolation_, maximum_, interpolationMode) {
		var min_ = minimum;
		switch (interpolationMode) {
			case $.ig.InterpolationMode.prototype.hSV:
				{
					var b = $.ig.ColorUtil.prototype.getAHSV(minimum);
					var e = $.ig.ColorUtil.prototype.getAHSV(maximum_);
					var b1 = b[1] >= 0 ? b[1] : e[1];
					var e1 = e[1] >= 0 ? e[1] : b[1];
					if (b1 >= 0 && e1 >= 0 && Math.abs(e1 - b1) > 180) {
						if (e1 > b1) {
							b1 += 360;
						} else {
							e1 += 360;
						}
					}
					interpolation_ = Math.max(0, Math.min(1, interpolation_));
					return $.ig.ColorUtil.prototype.fromAHSV(b[0] + interpolation_ * (e[0] - b[0]), b1 + interpolation_ * (e1 - b1), b[2] + interpolation_ * (e[2] - b[2]), b[3] + interpolation_ * (e[3] - b[3]));
				}
			case $.ig.InterpolationMode.prototype.rGB: return $.ig.Color.prototype.fromArgb(min_.__a + interpolation_ * (maximum_.__a - min_.__a), min_.__r + interpolation_ * (maximum_.__r - min_.__r), min_.__g + interpolation_ * (maximum_.__g - min_.__g), min_.__b + interpolation_ * (maximum_.__b - min_.__b));
		}
		return minimum;
	}
	,
	getAHSVInterpolation: function (minimum, interpolation, maximum) {
		var b1 = minimum[1] >= 0 ? minimum[1] : maximum[1];
		var e1 = maximum[1] >= 0 ? maximum[1] : minimum[1];
		if (b1 >= 0 && e1 >= 0 && Math.abs(e1 - b1) > 180) {
			if (e1 > b1) {
				b1 += 360;
			} else {
				e1 += 360;
			}
		}
		interpolation = Math.max(0, Math.min(1, interpolation));
		return $.ig.ColorUtil.prototype.fromAHSV(minimum[0] + interpolation * (maximum[0] - minimum[0]), b1 + interpolation * (e1 - b1), minimum[2] + interpolation * (maximum[2] - minimum[2]), minimum[3] + interpolation * (maximum[3] - minimum[3]));
	}
	,
	getLightened: function (color, interpolation) {
		var ahsl = $.ig.ColorUtil.prototype.getAHSL(color);
		if (interpolation < 0) {
			return $.ig.ColorUtil.prototype.fromAHSL(ahsl[0], ahsl[1], ahsl[2], ahsl[3] * (1 - $.ig.MathUtil.prototype.clamp(-interpolation, 0, 1)));
		} else {
			return $.ig.ColorUtil.prototype.fromAHSL(ahsl[0], ahsl[1], ahsl[2], ahsl[3] + $.ig.MathUtil.prototype.clamp(interpolation, 0, 1) * (1 - ahsl[3]));
		}
	}
	,
	getAHSL: function (color) {
		var ahsl = new Array(4);
		var r = color.r() / 255;
		var g = color.g() / 255;
		var b = color.b() / 255;
		var min = Math.min(Math.min(r, g), b);
		var max = Math.max(Math.max(r, g), b);
		var delta = max - min;
		ahsl[0] = color.a() / 255;
		ahsl[3] = (max + min) / 2;
		if (delta == 0) {
			ahsl[1] = -1;
			ahsl[2] = 0;
		} else {
			ahsl[1] = $.ig.ColorUtil.prototype.h(max, delta, r, g, b);
			ahsl[2] = ahsl[3] < 0.5 ? delta / (max + min) : delta / (2 - max - min);
		}
		return ahsl;
	}
	,
	getAHSV: function (color) {
		var a = color.a() / 255;
		var r = color.r() / 255;
		var g = color.g() / 255;
		var b = color.b() / 255;
		var min = Math.min(r, Math.min(g, b));
		var max = Math.max(r, Math.max(g, b));
		var delta = max - min;
		var ahsv = new Array(4);
		ahsv[0] = a;
		ahsv[3] = max;
		if (delta == 0) {
			ahsv[1] = -1;
			ahsv[2] = 0;
		} else {
			ahsv[1] = $.ig.ColorUtil.prototype.h(max, delta, r, g, b);
			ahsv[2] = delta / max;
		}
		return ahsv;
	}
	,
	fromAHSL: function (alpha, hue, saturation, lightness) {
		var r;
		var g;
		var b;
		if (saturation == 0) {
			r = lightness;
			g = lightness;
			b = lightness;
		} else {
			var q = lightness < 0.5 ? lightness * (1 + saturation) : lightness + saturation - (lightness * saturation);
			var p = 2 * lightness - q;
			var hk = hue / 360;
			r = $.ig.ColorUtil.prototype.c(p, q, hk + 1 / 3);
			g = $.ig.ColorUtil.prototype.c(p, q, hk);
			b = $.ig.ColorUtil.prototype.c(p, q, hk - 1 / 3);
		}
		return $.ig.Color.prototype.fromArgb($.ig.truncate((alpha * 255)), $.ig.truncate((r * 255)), $.ig.truncate((g * 255)), $.ig.truncate((b * 255)));
	}
	,
	fromAHSV: function (alpha, hue, saturation, value) {
		var r;
		var g;
		var b;
		while (hue >= 360) {
			hue -= 360;
		}
		if (saturation == 0) {
			r = value;
			g = value;
			b = value;
		} else {
			hue /= 60;
			var i = Math.floor(hue);
			var f = hue - i;
			var p = value * (1 - saturation);
			var q = value * (1 - saturation * f);
			var t = value * (1 - saturation * (1 - f));
			switch ($.ig.truncate(i)) {
				case 0:
					r = value;
					g = t;
					b = p;
					break;
				case 1:
					r = q;
					g = value;
					b = p;
					break;
				case 2:
					r = p;
					g = value;
					b = t;
					break;
				case 3:
					r = p;
					g = q;
					b = value;
					break;
				case 4:
					r = t;
					g = p;
					b = value;
					break;
				default:
					r = value;
					g = p;
					b = q;
					break;
			}
		}
		return $.ig.Color.prototype.fromArgb($.ig.truncate((alpha * 255)), $.ig.truncate((r * 255)), $.ig.truncate((g * 255)), $.ig.truncate((b * 255)));
	}
	,
	h: function (max, delta, r, g, b) {
		var h = r == max ? (g - b) / delta : g == max ? 2 + (b - r) / delta : 4 + (r - g) / delta;
		h *= 60;
		if (h < 0) {
			h += 360;
		}
		return h;
	}
	,
	c: function (p, q, t) {
		t = t < 0 ? t + 1 : t > 1 ? t - 1 : t;
		if (t < 1 / 6) {
			return p + ((q - p) * 6 * t);
		}
		if (t < 1 / 2) {
			return q;
		}
		if (t < 2 / 3) {
			return p + ((q - p) * 6 * (2 / 3 - t));
		}
		return p;
	}
	,
	randomColors: function () {
		if ($.ig.ColorUtil.prototype.__randomColors == null) {
			$.ig.ColorUtil.prototype.__randomColors = new Array(100);
			$.ig.ColorUtil.prototype.__randomColors[0] = $.ig.Color.prototype.fromArgb(255, 70, 130, 180);
			$.ig.ColorUtil.prototype.__randomColors[1] = $.ig.Color.prototype.fromArgb(255, 65, 105, 225);
			$.ig.ColorUtil.prototype.__randomColors[2] = $.ig.Color.prototype.fromArgb(255, 100, 149, 237);
			$.ig.ColorUtil.prototype.__randomColors[3] = $.ig.Color.prototype.fromArgb(255, 176, 196, 222);
			$.ig.ColorUtil.prototype.__randomColors[4] = $.ig.Color.prototype.fromArgb(255, 123, 104, 238);
			$.ig.ColorUtil.prototype.__randomColors[5] = $.ig.Color.prototype.fromArgb(255, 106, 90, 205);
			$.ig.ColorUtil.prototype.__randomColors[6] = $.ig.Color.prototype.fromArgb(255, 72, 61, 139);
			$.ig.ColorUtil.prototype.__randomColors[7] = $.ig.Color.prototype.fromArgb(255, 25, 25, 112);
			for (var colorIndex = 8; colorIndex < 100; colorIndex++) {
				$.ig.ColorUtil.prototype.__randomColors[colorIndex] = $.ig.Color.prototype.fromArgb(255, $.ig.ColorUtil.prototype._r.next1(255), $.ig.ColorUtil.prototype._r.next1(255), $.ig.ColorUtil.prototype._r.next1(255));
			}
		}
		return $.ig.ColorUtil.prototype.__randomColors;
	}
	,
	getRandomColor: function (index) {
		index %= 100;
		return $.ig.ColorUtil.prototype.randomColors()[index];
	}
	,
	colorToInt: function (color) {
		var aa = color.a() / 255;
		var rr = $.ig.truncate((color.r() * aa));
		var gg = $.ig.truncate((color.g() * aa));
		var bb = $.ig.truncate((color.b() * aa));
		return color.a() << 24 | rr << 16 | gg << 8 | bb;
	}
	,
	getColor: function (brush) {
		return brush.color();
	}
	,
	$type: new $.ig.Type('ColorUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CssGradientUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	isGradient: function (value) {
		return value.contains("linear-gradient") || value.contains("radial-gradient");
	}
	,
	brushFromGradientString: function (value) {
		var regex = /hsl\([\s\S]+?\)[\s\S]*?[,\)]|rgba?\([\s\S]+?\)[\s\S]*?[,\)]|[^\(\)]*?[,\)]/gim, percentRegex = /\s*\d*%\s*$/, trimStartRegex = /^\s\s*/, trimEndRegex = /\s\s*$/, trimEndCharactersRegex = /[,\)]?$/;
		var match;
		var angle, i = 1, j = 0, length, offsetIndex;
		var hasUnsetOffsets = false;
		var stops;
		var matches = value.match(regex);
		if (matches == null || matches.length <= 1) {
			return null;
		}
		var b = new $.ig.LinearGradientBrush();
		length = matches.length;
		match = matches[0];
		if (match.contains("to") || match.contains("deg")) {
			angle = $.ig.CssGradientUtil.prototype.angleFromString(match);
			b._useCustomDirection = true;
			var points = $.ig.CssGradientUtil.prototype.calculatePointsFromAngle(angle);
			b._startX = points[0].__x;
			b._startY = points[0].__y;
			b._endX = points[1].__x;
			b._endY = points[1].__y;
			stops = new Array(length - 1);
		} else {
			stops = new Array(length);
			i = 0;
		}
		for (; i < length; i++) {
			var stop = new $.ig.GradientStop();
			match = matches[i];
			match = match.replace(trimStartRegex, "").replace(trimEndRegex, "").replace(trimEndCharactersRegex, "");
			offsetIndex = match.search(percentRegex);
			if (offsetIndex != -1) {
				stop.__fill = match.substr(0, offsetIndex);
				stop._offset = parseFloat(match.substr(offsetIndex + 1)) / 100;
			} else {
				stop.__fill = match;
				stop._offset = -1;
				hasUnsetOffsets = true;
			}
			stops[j] = stop;
			j++;
		}
		if (hasUnsetOffsets) {
			if (stops[0]._offset == -1) {
				stops[0]._offset = 0;
			}
			if (stops[stops.length - 1]._offset == -1) {
				stops[stops.length - 1]._offset = 1;
			}
			$.ig.CssGradientUtil.prototype.fixUnsetOffsets(stops);
			b._gradientStops = stops;
		}
		return b;
	}
	,
	fixUnsetOffsets: function (stops) {
		var i, j, k, offsetRange, maxOffset = -1, lastSetOffsetIndex = -1, lastSetOffset = 0;
		var hasUnsetOffsets = false;
		for (i = lastSetOffsetIndex + 1; i < stops.length; i++) {
			var stop = stops[i];
			if (stop._offset != -1) {
				maxOffset = Math.max(maxOffset, stop._offset);
				stop._offset = maxOffset;
				if (hasUnsetOffsets) {
					k = 1;
					offsetRange = $.ig.intDivide((maxOffset - lastSetOffset), (i - lastSetOffsetIndex));
					for (j = lastSetOffsetIndex + 1; j < i; j++) {
						stops[j]._offset = lastSetOffset + offsetRange * k;
						k++;
					}
					hasUnsetOffsets = false;
				}
				lastSetOffsetIndex = i;
				lastSetOffset = maxOffset;
			} else {
				hasUnsetOffsets = true;
			}
		}
	}
	,
	angleFromString: function (value) {
		var toTopRegex = /to\s*top\s*/i, toRightTopRegex = /to\s*right\s*top\s*/i, toRightRegex = /to\s*right\s*/i, toRightBottomRegex = /to\s*right\s*bottom\s*/i, toBottomRegex = /to\s*bottom\s*/i, toLeftBottomRegex = /to\s*left\s*bottom\s*/i, toLeftRegex = /to\s*left\s*/i, toLeftTopRegex = /to\s*left\s*top\s*/i;
		if (value.contains("deg")) {
			return parseFloat(value);
		}
		if (toTopRegex.test(value)) {
			return 0;
		}
		if (toRightTopRegex.test(value)) {
			return 45;
		}
		if (toRightRegex.test(value)) {
			return 90;
		}
		if (toRightBottomRegex.test(value)) {
			return 135;
		}
		if (toBottomRegex.test(value)) {
			return 180;
		}
		if (toLeftBottomRegex.test(value)) {
			return 225;
		}
		if (toLeftRegex.test(value)) {
			return 270;
		}
		return toLeftTopRegex.test(value) ? 315 : 180;
	}
	,
	calculatePointsFromAngle: function (inputAngle) {
		var points = new Array(2);
		var p1 = new $.ig.Point(0);
		var p2 = new $.ig.Point(0);
		var angle = $.ig.GeometryUtil.prototype.simplifyAngle(inputAngle);
		if (angle >= 0 && angle <= 45) {
			var tan = Math.tan($.ig.MathUtil.prototype.radians(angle));
			p1.__x = 0.5 - 0.5 * tan;
			p1.__y = 1;
			p2.__x = 0.5 + 0.5 * tan;
			p2.__y = 0;
		} else if (angle > 180 && angle <= 225) {
			var tan1 = Math.tan($.ig.MathUtil.prototype.radians(angle - 180));
			p1.__x = 0.5 + 0.5 * tan1;
			p1.__y = 0;
			p2.__x = 0.5 - 0.5 * tan1;
			p2.__y = 1;
		} else if (angle > 135 && angle <= 180) {
			var tan2 = Math.tan($.ig.MathUtil.prototype.radians(180 - angle));
			p1.__x = 0.5 - 0.5 * tan2;
			p1.__y = 0;
			p2.__x = 0.5 + 0.5 * tan2;
			p2.__y = 1;
		} else if (angle > 315 && angle < 360) {
			var tan3 = Math.tan($.ig.MathUtil.prototype.radians(360 - angle));
			p1.__x = 0.5 + 0.5 * tan3;
			p1.__y = 1;
			p2.__x = 0.5 - 0.5 * tan3;
			p2.__y = 0;
		} else if (angle > 45 && angle <= 90) {
			var tan4 = Math.tan($.ig.MathUtil.prototype.radians(90 - angle));
			p2.__y = 0.5 - 0.5 * tan4;
			p2.__x = 1;
			p1.__y = 0.5 + 0.5 * tan4;
			p1.__x = 0;
		} else if (angle > 90 && angle <= 135) {
			var tan5 = Math.tan($.ig.MathUtil.prototype.radians(angle - 90));
			p2.__y = 0.5 + 0.5 * tan5;
			p2.__x = 1;
			p1.__y = 0.5 - 0.5 * tan5;
			p1.__x = 0;
		} else if (angle > 225 && angle <= 270) {
			var tan6 = Math.tan($.ig.MathUtil.prototype.radians(270 - angle));
			p1.__y = 0.5 - 0.5 * tan6;
			p1.__x = 1;
			p2.__y = 0.5 + 0.5 * tan6;
			p2.__x = 0;
		} else if (angle > 270 && angle <= 315) {
			var tan7 = Math.tan($.ig.MathUtil.prototype.radians(angle - 270));
			p1.__y = 0.5 + 0.5 * tan7;
			p1.__x = 1;
			p2.__y = 0.5 - 0.5 * tan7;
			p2.__x = 0;
		}
		points[0] = p1;
		points[1] = p2;
		return points;
	}
	,
	$type: new $.ig.Type('CssGradientUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CssHelper', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getDisoveryElement: function () {
		var discoveryStyle = $("#fakediscoveryelementstyle");
		if (discoveryStyle.length == 0) {
			var styleText = "fakediscoveryelement\n" + "{\n" + "\tdisplay: block;\n" + "   position: absolute;\n" + "   box-sizing: content-box;\n" + "   -moz-box-sizing: content-box;\n" + "\tmargin: " + $.ig.CssHelper.prototype.defaultMarginValue + ";\n" + "\tcolor: " + $.ig.CssHelper.prototype.defaultColorValue + ";\n" + "   border-style: solid;\n" + "   border-color: " + $.ig.CssHelper.prototype.defaultColorValue + ";\n" + "   background-color: " + $.ig.CssHelper.prototype.defaultColorValue + ";\n" + "   background-image: " + $.ig.CssHelper.prototype.defaultBackgroundImageValue + ";\n" + "   border-width: " + $.ig.CssHelper.prototype.defaultWidthHeightValue + ";\n" + "   border-radius: " + $.ig.CssHelper.prototype.defaultWidthHeightValue + ";\n" + "   vertical-align: " + $.ig.CssHelper.prototype.defaultVerticalAlignValue + ";\n" + "   text-align: " + $.ig.CssHelper.prototype.defaultTextAlignValue + ";\n" + "   opacity: " + $.ig.CssHelper.prototype.defaultOpacityValue + ";\n" + "   visibility: " + $.ig.CssHelper.prototype.defaultVisibilityValue + ";\n" + "   width: " + $.ig.CssHelper.prototype.defaultWidthHeightValue + ";\n" + "   height: " + $.ig.CssHelper.prototype.defaultWidthHeightValue + ";\n" + "}\n";
			discoveryStyle = $("<style id='fakediscoveryelementstyle'></style>");
			discoveryStyle.html(styleText);
			$("head").append(discoveryStyle);
		}
		return $("<fakediscoveryelement></fakediscoveryelement>");
	}
	,
	getDefaultValue: function (propertyName) {
		if (propertyName == "color" || propertyName == "border-color" || propertyName == "border-top-color" || propertyName == "border-left-color" || propertyName == "border-right-color" || propertyName == "border-bottom-color" || propertyName == "background-color") {
			return $.ig.CssHelper.prototype.defaultColorValue;
		} else if (propertyName == "margin-left" || propertyName == "margin-top" || propertyName == "margin-right" || propertyName == "margin-bottom") {
			return $.ig.CssHelper.prototype.defaultMarginValue;
		} else if (propertyName == "vertical-align") {
			return $.ig.CssHelper.prototype.defaultVerticalAlignValue;
		} else if (propertyName == "opacity") {
			return $.ig.CssHelper.prototype.defaultOpacityValue;
		} else if (propertyName == "background-image") {
			return $.ig.CssHelper.prototype.defaultBackgroundImageValue;
		} else if (propertyName == "text-align") {
			return $.ig.CssHelper.prototype.defaultTextAlignValue;
		} else if (propertyName == "visibility") {
			return $.ig.CssHelper.prototype.defaultVisibilityValue;
		} else if ($.ig.CssHelper.prototype.isWidthProperty(propertyName)) {
			return $.ig.CssHelper.prototype.defaultWidthHeightValue;
		}
		return "DEFAULT";
	}
	,
	numberOfClasses: function (discoveryElement, classPrefix, propertyName) {
		var defaultValue = $.ig.CssHelper.prototype.getDefaultValue(propertyName);
		var curr = 1;
		var done = false;
		while (!done && curr < $.ig.CssHelper.prototype.maxClasses) {
			var className = classPrefix + curr.toString();
			discoveryElement.addClass(className);
			var propValue = discoveryElement.css(propertyName);
			if (propValue == defaultValue) {
				break;
			}
			curr++;
		}
		return curr;
	}
	,
	getPropertyValue: function (discoveryElement, className, propertyName) {
		discoveryElement.addClass(className);
		var ret_ = discoveryElement.css(propertyName);
		discoveryElement.removeClass(className);
		if (propertyName == "opacity") {
			ret_ = Math.round(1000.0 * ret_) / 1000.0;
		}
		if ($.ig.CssHelper.prototype.isEqualToDefault(ret_, $.ig.CssHelper.prototype.getDefaultValue(propertyName), propertyName)) {
			return null;
		}
		return ret_;
	}
	,
	isEqualToDefault: function (propValue, defaultValue, propertyName) {
		if (propValue == defaultValue) {
			return true;
		}
		if ($.ig.CssHelper.prototype.isWidthProperty(propertyName) && propValue != null && propValue.contains("px")) {
			var num = $.ig.util.replace(propValue, "px", "");
			var val = parseFloat(num);
			if (Math.abs(Math.round(val) - 4321) < 2) {
				return true;
			}
			return false;
		} else if ($.ig.CssHelper.prototype.isMarginProperty(propertyName) && propValue != null && propValue.contains("px")) {
			var num1 = $.ig.util.replace(propValue, "px", "");
			var val1 = parseFloat(num1);
			if (Math.abs(Math.round(val1) + 4321) < 2) {
				return true;
			}
			return false;
		} else {
			return propValue == defaultValue;
		}
	}
	,
	isWidthProperty: function (propertyName) {
		return propertyName == "width" || propertyName == "height" || propertyName == "border-top-width" || propertyName == "border-left-width" || propertyName == "border-right-width" || propertyName == "border-bottom-width" || propertyName == "border-top-left-radius";
	}
	,
	isMarginProperty: function (propertyName) {
		return propertyName == "margin-top" || propertyName == "margin-left" || propertyName == "margin-right" || propertyName == "margin-bottom";
	}
	,
	getValuesForClassCollection: function (discoveryElement, classPrefix, propertyNames) {
		var ret = new $.ig.List$1($.ig.List$1.prototype.$type.specialize(String), 0);
		var curr = 1;
		var done = false;
		while (!done && curr < $.ig.CssHelper.prototype.maxClasses) {
			var className = classPrefix + curr.toString();
			discoveryElement.addClass(className);
			var row = new $.ig.List$1(String, 0);
			for (var i = 0; i < propertyNames.count(); i++) {
				var propertyName = propertyNames.__inner[i];
				var defaultValue = $.ig.CssHelper.prototype.getDefaultValue(propertyName);
				var propValue = discoveryElement.css(propertyName);
				if ($.ig.CssHelper.prototype.isEqualToDefault(propValue, defaultValue, propertyName)) {
					done = true;
					break;
				}
				row.add(propValue);
			}
			discoveryElement.removeClass(className);
			if (!done) {
				ret.add(row);
			}
			curr++;
		}
		return ret;
	}
	,
	$type: new $.ig.Type('CssHelper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FontUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getCurrentFontHeight: function (font) {
		var tempSpan_ = $("<span>M</span>");
		var doc = $('body');
		doc.append(tempSpan_);
		var fontString = null;
		if (font != null) {
			fontString = font.fontString();
		}
		tempSpan_.css("font", fontString);
		var offset_ = tempSpan_.attr("offsetHeight");
		if (isNaN(offset_)) { offset_ = tempSpan_[0].offsetHeight; };
		tempSpan_.remove();
		return parseInt(offset_);
	}
	,
	measureStringHeight: function (text, font) {
		var tempSpan_ = $("<span>" + text + "</span>");
		var doc = $('body');
		doc.append(tempSpan_);
		tempSpan_.css("font", font.fontString());
		var height = tempSpan_.css("height");
		tempSpan_.remove();
		var h = parseFloat(height);
		return h;
	}
	,
	measureStringWidth1: function (text, font, context) {
		context.save();
		context.setFont(font);
		var width = context.measureTextWidth(text);
		context.restore();
		return width;
	}
	,
	measureStringWidth: function (text, font, context) {
		context.save();
		context.setFontInfo(font);
		var width = context.measureTextWidth(text);
		context.restore();
		return width;
	}
	,
	measureMultilineStringHeight: function (text, font, width) {
		var tempSpan_ = $("<div style=\"width:" + width + "\"><span>" + text + "</span></div>");
		var doc = $('body');
		doc.append(tempSpan_);
		tempSpan_.css("font", font.fontString());
		var height = tempSpan_.css("height");
		tempSpan_.remove();
		var h = parseFloat(height);
		return h;
	}
	,
	getFontSize: function (font) {
		var tempSpan_ = $("<span>M</span>");
		var doc = $('body');
		doc.append(tempSpan_);
		tempSpan_.css("font", font.fontString());
		var fontSize = tempSpan_.css("font-size");
		tempSpan_.remove();
		return parseFloat(fontSize);
	}
	,
	getFontWithNewFontSize: function (font, fontSize) {
		var tempFont = font.copyFontInfo();
		tempFont.fontSize(fontSize);
		tempFont.fontString(fontSize + "px " + font.fontFamily());
		return tempFont;
	}
	,
	getFontInfoFromString: function (font) {
		var returnFont = new $.ig.FontInfo();
		var tempSpan_ = $("<span>M</span>");
		var doc = $('body');
		doc.append(tempSpan_);
		tempSpan_.css("font", font);
		returnFont = $.ig.FontUtil.prototype.getFont(tempSpan_);
		tempSpan_.remove();
		return returnFont;
	}
	,
	getDefaultFont: function () {
		var newFont = new $.ig.FontInfo();
		var tempSpan_ = $("<span>M</span>");
		var doc = $('body');
		doc.append(tempSpan_);
		newFont = $.ig.FontUtil.prototype.getFont(tempSpan_);
		tempSpan_.remove();
		return newFont;
	}
	,
	getFont: function (container) {
		var font = String.empty();
		var fontStyle = container.css("font-style");
		var fontVariant = container.css("font-variant");
		var fontWeight = container.css("font-weight");
		var fontSize = container.css("font-size");
		var lineHeight = container.css("line-height");
		var fontFamily = container.css("font-family");
		var first = true;
		if (fontStyle.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontStyle;
		}
		if (fontVariant.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontVariant;
		}
		if (fontWeight.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontWeight;
		}
		if (fontSize.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontSize;
		}
		if (lineHeight.length > 0) {
			if (!first) {
				font += "/";
			} else {
				first = false;
			}
			font += lineHeight;
		}
		if (fontFamily.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontFamily;
		}
		var info = new $.ig.FontInfo();
		info.fontFamily(fontFamily);
		info.fontSize(parseFloat(fontSize));
		info.fontStretch("Normal");
		info.fontStyle(fontStyle);
		info.fontVariant(fontVariant);
		info.fontWeight(fontWeight);
		info.fontString(font);
		return info;
	}
	,
	updateFontString: function (fontInfo) {
		var font = String.empty();
		var fontStyle = fontInfo.fontStyle();
		var fontVariant = fontInfo.fontVariant();
		var fontWeight = fontInfo.fontWeight();
		var fontSize = fontInfo.fontSize().toString();
		var lineHeight = "normal";
		var fontFamily = fontInfo.fontFamily();
		var first = true;
		if (fontStyle.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontStyle;
		}
		if (fontVariant.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontVariant;
		}
		if (fontWeight.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontWeight;
		}
		if (fontSize.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontSize + "px";
		}
		if (lineHeight.length > 0) {
			if (!first) {
				font += "/";
			} else {
				first = false;
			}
			font += lineHeight;
		}
		if (fontFamily.length > 0) {
			if (!first) {
				font += " ";
			} else {
				first = false;
			}
			font += fontFamily;
		}
		fontInfo.fontString(font);
	}
	,
	getFontInfo: function (tb, fontDescriptor) {
		if (fontDescriptor == null) {
			var fi = new $.ig.FontInfo();
			var tempDiv = $("<div></div>");
			var fontStyle = tempDiv.css("font-style");
			var fontVariant = tempDiv.css("font-variant");
			var fontWeight = tempDiv.css("font-weight");
			var fontSize = tempDiv.css("font-size");
			var lineHeight = tempDiv.css("line-height");
			var fontFamily = tempDiv.css("font-family");
			tempDiv = null;
			fi.fontFamily($.ig.util.replace(fontFamily, "'", ""));
			fi.fontStyle($.ig.FontUtil.prototype.toUpperFirst(fontStyle));
			fi.fontWeight($.ig.FontUtil.prototype.toUpperFirst(fontWeight.toString()));
			fi.fontVariant(fontVariant);
			fi.lineHeight(parseFloat(lineHeight));
			fi.fontSize(parseFloat(fontSize));
			return fi;
		}
		return fontDescriptor;
	}
	,
	toUpperFirst: function (label) {
		if (String.isNullOrEmpty(label)) {
			return String.empty();
		}
		var result = label.substr(0, 1).toUpperCase();
		if (label.length > 1) {
			result += label.substr(1);
		}
		return result;
	}
	,
	toFontInfo: function (font) {
		if (font == null) {
			return null;
		}
		return $.ig.FontUtil.prototype.getFontInfoFromString(font);
	}
	,
	splitString: function (text, delimiters) {
		return $.ig.util.stringSplit(text, delimiters, $.ig.StringSplitOptions.prototype.none);
	}
	,
	charsEqual: function (text1, index1, chars, index2) {
		return text1.charAt(index1).equals(chars[index2]);
	}
	,
	$type: new $.ig.Type('FontUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FontInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.fontSize(NaN);
		this.lineHeight(NaN);
	},
	_fontStyle: null,
	fontStyle: function (value) {
		if (arguments.length === 1) {
			this._fontStyle = value;
			return value;
		} else {
			return this._fontStyle;
		}
	}
	,
	_fontVariant: null,
	fontVariant: function (value) {
		if (arguments.length === 1) {
			this._fontVariant = value;
			return value;
		} else {
			return this._fontVariant;
		}
	}
	,
	_fontWeight: null,
	fontWeight: function (value) {
		if (arguments.length === 1) {
			this._fontWeight = value;
			return value;
		} else {
			return this._fontWeight;
		}
	}
	,
	_fontSize: 0,
	fontSize: function (value) {
		if (arguments.length === 1) {
			this._fontSize = value;
			return value;
		} else {
			return this._fontSize;
		}
	}
	,
	_lineHeight: 0,
	lineHeight: function (value) {
		if (arguments.length === 1) {
			this._lineHeight = value;
			return value;
		} else {
			return this._lineHeight;
		}
	}
	,
	_fontFamily: null,
	fontFamily: function (value) {
		if (arguments.length === 1) {
			this._fontFamily = value;
			return value;
		} else {
			return this._fontFamily;
		}
	}
	,
	_fontStretch: null,
	fontStretch: function (value) {
		if (arguments.length === 1) {
			this._fontStretch = value;
			return value;
		} else {
			return this._fontStretch;
		}
	}
	,
	_fontString: null,
	fontString: function (value) {
		if (arguments.length === 1) {
			this._fontString = value;
			return value;
		} else {
			return this._fontString;
		}
	}
	,
	copyFontInfo: function () {
		var $self = this;
		return (function () {
			var $ret = new $.ig.FontInfo();
			$ret.fontStyle($self.fontStyle());
			$ret.fontVariant($self.fontVariant());
			$ret.fontWeight($self.fontWeight());
			$ret.fontSize($self.fontSize());
			$ret.lineHeight($self.lineHeight());
			$ret.fontFamily($self.fontFamily());
			$ret.fontStretch($self.fontStretch());
			$ret.fontString($self.fontString());
			return $ret;
		}());
	}
	,
	$type: new $.ig.Type('FontInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DoubleAnimator', 'Object', {
	needsFlush: function () {
		return this.transitionProgress() == 0;
	}
	,
	flush: function () {
		this.update(true);
	}
	,
	__transitionProgress: 0,
	transitionProgress: function (value) {
		if (arguments.length === 1) {
			this.__transitionProgress = value;
			if (this.propertyChanged != null) {
				this.propertyChanged(this, new $.ig.PropertyChangedEventArgs("TransitionProgress"));
			}
			return value;
		} else {
			return this.__transitionProgress;
		}
	}
	,
	__intervalMilliseconds: 0,
	intervalMilliseconds: function (value) {
		if (arguments.length === 1) {
			this.__intervalMilliseconds = value;
			return value;
		} else {
			return this.__intervalMilliseconds;
		}
	}
	,
	__easingFunction: null,
	easingFunction: function (value) {
		if (arguments.length === 1) {
			this.__easingFunction = value;
			return value;
		} else {
			return this.__easingFunction;
		}
	}
	,
	__from: 0,
	__to: 0,
	from: function (value) {
		if (arguments.length === 1) {
			this.__from = value;
			return value;
		} else {
			return this.__from;
		}
	}
	,
	to: function (value) {
		if (arguments.length === 1) {
			this.__to = value;
			return value;
		} else {
			return this.__to;
		}
	}
	,
	init: function (from, to, intervalMilliseconds) {
		this.__easingFunction = null;
		this.__from = 0;
		this.__to = 0;
		this.__active = false;
		this.__intervalId = -1;
		this.__lastRender = 0;
		$.ig.Object.prototype.init.call(this);
		this.__from = from;
		this.__to = to;
		this.__intervalMilliseconds = intervalMilliseconds;
		this.requestAnimationFrame(window.requestAnimationFrame ||
            window.webkitRequestAnimationFrame ||
            window.mozRequestAnimationFrame ||
            window.oRequestAnimationFrame ||
            window.msRequestAnimationFrame ||
            function(callback) {
                window.setTimeout(callback, 1000 / 60);
            });
	},
	_requestAnimationFrame: null,
	requestAnimationFrame: function (value) {
		if (arguments.length === 1) {
			this._requestAnimationFrame = value;
			return value;
		} else {
			return this._requestAnimationFrame;
		}
	}
	,
	__active: false,
	active: function (value) {
		if (arguments.length === 1) {
			this.__active = value;
			return value;
		} else {
			return this.__active;
		}
	}
	,
	start: function () {
		this.__transitionProgress = 0;
		this.__lastRender = 0;
		this.__startTime = $.ig.Date.prototype.now();
		if (!this.__active) {
			this.__active = true;
			this.requestAnimationFrame()(this.tick.runOn(this));
		}
	}
	,
	stop: function () {
		this.__active = false;
		this.__transitionProgress = 0;
		this.__lastRender = 0;
	}
	,
	__startTime: new Date(),
	__intervalId: 0,
	__lastRender: 0,
	tick: function () {
		this.update(false);
	}
	,
	update: function (flush) {
		if (!this.__active) {
			this.stop();
			return;
		}
		var currentTime = $.ig.Date.prototype.now();
		var ellapsedMilliseconds = currentTime.getTime() - this.__startTime.getTime();
		if (ellapsedMilliseconds > this.__intervalMilliseconds) {
			ellapsedMilliseconds = this.__intervalMilliseconds;
		}
		if ((ellapsedMilliseconds - this.__lastRender < 16 && ellapsedMilliseconds != this.__intervalMilliseconds) && !flush) {
			this.requestAnimationFrame()(this.tick.runOn(this));
			return;
		}
		this.__lastRender = ellapsedMilliseconds;
		var p = (ellapsedMilliseconds / this.__intervalMilliseconds);
		if (this.__easingFunction != null) {
			p = this.__easingFunction(p);
		}
		var interpolatedValue = this.__from + ((this.__to - this.__from) * p);
		if (!flush) {
			if (ellapsedMilliseconds == this.__intervalMilliseconds) {
				this.stop();
			} else {
				this.requestAnimationFrame()(this.tick.runOn(this));
			}
		}
		this.transitionProgress(interpolatedValue);
	}
	,
	getElapsedMilliseconds: function () {
		return this.__active ? $.ig.Date.prototype.now().getTime() - this.__startTime.getTime() : 0;
	}
	,
	animationActive: function () {
		return this.__active;
	}
	,
	propertyChanged: null,
	$type: new $.ig.Type('DoubleAnimator', $.ig.Object.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('RenderingContext', 'Object', {
	__renderer: null,
	getUnderlyingContext: function () {
		if (this.__renderer == null) {
			return null;
		}
		return this.__renderer.getUnderlyingContext();
	}
	,
	init: function (renderer, data) {
		this.__renderer = null;
		$.ig.Object.prototype.init.call(this);
		this.__renderer = renderer;
		if (this.__renderer != null) {
			this.__renderer.data(data);
		}
	},
	shouldRender: function () {
		if (this.__renderer == null) {
			return false;
		}
		return true;
	}
	,
	renderRectangle: function (rectangle) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderRectangle(rectangle);
	}
	,
	renderPath: function (path) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderPath(path);
	}
	,
	renderGeometry: function (geometry) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderGeometry(geometry);
	}
	,
	renderTextBlock: function (tb) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderTextBlock(tb);
	}
	,
	renderTextBlockInRect: function (tb, rect, lineHeight) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderTextBlockInRect(tb, rect, lineHeight);
	}
	,
	renderPolygon: function (polygon) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderPolygon(polygon);
	}
	,
	renderPolyline: function (polyline) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderPolyline(polyline);
	}
	,
	renderContentControl: function (info, marker) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderContentControl(info, marker);
	}
	,
	applyTransform: function (transform) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.applyTransform(transform);
	}
	,
	renderLine: function (line) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.renderLine(line);
	}
	,
	save: function () {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.save();
	}
	,
	restore: function () {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.restore();
	}
	,
	setRectangleClip: function (clipRectangle) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.setRectangleClip(clipRectangle);
	}
	,
	scale: function (x, y) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.scale(x, y);
	}
	,
	translate: function (x, y) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.translate(x, y);
	}
	,
	clearRectangle: function (left, top, width, height) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.clearRectangle(left, top, width, height);
	}
	,
	drawImage1: function (image, opacity, sourceLeft, sourceTop, sourceWidth, sourceHeight, left, top, width, height) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.drawImage1(image, opacity, sourceLeft, sourceTop, sourceWidth, sourceHeight, left, top, width, height);
	}
	,
	drawImage: function (image, opacity, left, top, width, height) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.drawImage(image, opacity, left, top, width, height);
	}
	,
	getPixelAt: function (x, y) {
		if (this.__renderer == null) {
			return null;
		}
		return this.__renderer.getPixelAt(x, y);
	}
	,
	getFont: function () {
		if (this.__renderer == null) {
			return null;
		}
		return this.__renderer.getFont();
	}
	,
	getFontInfo: function () {
		if (this.__renderer == null) {
			return null;
		}
		return this.__renderer.getFontInfo();
	}
	,
	setFont: function (font) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.setFont(font);
	}
	,
	setFontInfo: function (fontInfo) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.setFontInfo(fontInfo);
	}
	,
	measureTextWidth: function (text) {
		if (this.__renderer == null) {
			return NaN;
		}
		return this.__renderer.measureTextWidth(text);
	}
	,
	setOpacity: function (p) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.setOpacity(p);
	}
	,
	applyStyle: function (shape, style) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.applyStyle(shape, style);
	}
	,
	enableDropShadow: function (color, blur, offsetX, offsetY) {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.enableDropShadow(color, blur, offsetX, offsetY);
	}
	,
	disableDropShadow: function () {
		if (this.__renderer == null) {
			return;
		}
		this.__renderer.disableDropShadow();
	}
	,
	$type: new $.ig.Type('RenderingContext', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('EasingFunctions', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	cubic: function (p) {
		return p * p * p;
	}
	,
	exponential: function (p) {
		return (Math.exp(2 * p) - 1) / (Math.exp(2) - 1);
	}
	,
	circle: function (p) {
		return 1 - Math.sqrt(1 - p * p);
	}
	,
	doIn: function (t, func) {
		var fastTime = t * 2;
		return 0.5 * func(fastTime);
	}
	,
	doOut: function (t, func) {
		var fastTime = (1 - t) * 2;
		var y = 1 - func(fastTime);
		return 0.5 * y + 0.5;
	}
	,
	cubicEase: function (t) {
		if (t < 0.5) {
			return $.ig.EasingFunctions.prototype.doIn(t, $.ig.EasingFunctions.prototype.cubic);
		}
		return $.ig.EasingFunctions.prototype.doOut(t, $.ig.EasingFunctions.prototype.cubic);
	}
	,
	exponentialEase: function (t) {
		if (t < 0.5) {
			return $.ig.EasingFunctions.prototype.doIn(t, $.ig.EasingFunctions.prototype.exponential);
		}
		return $.ig.EasingFunctions.prototype.doOut(t, $.ig.EasingFunctions.prototype.exponential);
	}
	,
	circleEase: function (t) {
		if (t < 0.5) {
			return $.ig.EasingFunctions.prototype.doIn(t, $.ig.EasingFunctions.prototype.circle);
		}
		return $.ig.EasingFunctions.prototype.doOut(t, $.ig.EasingFunctions.prototype.circle);
	}
	,
	$type: new $.ig.Type('EasingFunctions', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('BrushCollection', 'ObservableCollection$1', {
	init: function () {
		this._interpolationMode = $.ig.InterpolationMode.prototype.rGB;
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.Brush.prototype.$type, 0);
	},
	selectRandom: function () {
		return this.item($.ig.BrushCollection.prototype._random.next1(this.count()));
	}
	,
	interpolateRandom: function () {
		return this.getInterpolatedBrush($.ig.BrushCollection.prototype._random.nextDouble() * (this.count() - 1));
	}
	,
	interpolationMode: function (value) {
		if (arguments.length === 1) {
			if (this._interpolationMode != value) {
				this._interpolationMode = value;
				this.onCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset));
			}
			return value;
		} else {
			return this._interpolationMode;
		}
	}
	,
	_interpolationMode: 0,
	item: function (index, value) {
		if (arguments.length === 2) {
			$.ig.ObservableCollection$1.prototype.item.call(this, index, value);
			return value;
		} else {
			if (index < 0 || index >= this.count()) {
				return null;
			}
			return $.ig.ObservableCollection$1.prototype.item.call(this, index);
		}
	}
	,
	getInterpolatedBrush: function (index) {
		if ($.ig.util.isNaN(index)) {
			return null;
		}
		index = $.ig.MathUtil.prototype.clamp(index, 0, this.count() - 1);
		var i = $.ig.truncate(Math.floor(index));
		if (i == index) {
			return this.item(i);
		}
		return this.interpolateBrushes(index - i, this.item(i), this.item(i + 1), this.interpolationMode());
	}
	,
	interpolateBrushes: function (p, minBrush, maxBrush, InterpolationMode) {
		var minFill = minBrush.color();
		var maxFill = maxBrush.color();
		var interp = $.ig.ColorUtil.prototype.getInterpolation(minFill, p, maxFill, InterpolationMode);
		var b = new $.ig.Brush();
		b.color(interp);
		return b;
	}
	,
	equals: function (obj) {
		if (obj == null) {
			return false;
		}
		var bc = obj;
		if (bc.count() != this.count()) {
			return false;
		}
		for (var i = 0; i < bc.count(); i++) {
			if (!bc.item(i).equals(this.item(i))) {
				return false;
			}
		}
		return true;
	}
	,
	$type: new $.ig.Type('BrushCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.Brush.prototype.$type))
}, true);

$.ig.util.defType('TrendCalculators', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	wMA: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___WMA__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	eMA: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___EMA__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	mMA: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___MMA__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	cMA: function (sequence) {
		var d__ = new $.ig.TrendCalculators___CMA__IteratorClass(-2);
		d__.__3__sequence = sequence;
		return d__;
	}
	,
	sMA: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___SMA__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	movingSum: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___MovingSum__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	sTDEV: function (sequence, period) {
		var d__ = new $.ig.TrendCalculators___STDEV__IteratorClass(-2);
		d__.__3__sequence = sequence;
		d__.__3__period = period;
		return d__;
	}
	,
	$type: new $.ig.Type('TrendCalculators', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FastItemsSourceEventArgs', 'EventArgs', {
	init: function (initNumber, action, position, count) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.EventArgs.prototype.init.call(this);
		this.action(action);
		this.position(position);
		this.count(count);
		this.propertyName(null);
	},
	init1: function (initNumber, position, propertyName) {
		$.ig.EventArgs.prototype.init.call(this);
		this.action($.ig.FastItemsSourceEventAction.prototype.change);
		this.position(position);
		this.count(1);
		this.propertyName(propertyName);
	},
	_action: 0,
	action: function (value) {
		if (arguments.length === 1) {
			this._action = value;
			return value;
		} else {
			return this._action;
		}
	}
	,
	_position: 0,
	position: function (value) {
		if (arguments.length === 1) {
			this._position = value;
			return value;
		} else {
			return this._position;
		}
	}
	,
	_count: 0,
	count: function (value) {
		if (arguments.length === 1) {
			this._count = value;
			return value;
		} else {
			return this._count;
		}
	}
	,
	_propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this._propertyName = value;
			return value;
		} else {
			return this._propertyName;
		}
	}
	,
	$type: new $.ig.Type('FastItemsSourceEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('RectChangedEventArgs', 'EventArgs', {
	init: function (oldRect, newRect) {
		$.ig.EventArgs.prototype.init.call(this);
		this.oldRect(oldRect);
		this.newRect(newRect);
	},
	_oldRect: null,
	oldRect: function (value) {
		if (arguments.length === 1) {
			this._oldRect = value;
			return value;
		} else {
			return this._oldRect;
		}
	}
	,
	_newRect: null,
	newRect: function (value) {
		if (arguments.length === 1) {
			this._newRect = value;
			return value;
		} else {
			return this._newRect;
		}
	}
	,
	$type: new $.ig.Type('RectChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('TouchPointInfo', 'Object', {
	init: function (initNumber, x, y) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.x(x);
		this.y(y);
	},
	init1: function (initNumber) {
		$.ig.Object.prototype.init.call(this);
	},
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	$type: new $.ig.Type('TouchPointInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TouchGestureRecognizer', 'Object', {
	init: function (executionContext) {
		this.__tracker = new $.ig.TouchVelocityTracker();
		this.__holdStartTime = -1;
		this.__startDistanceX = NaN;
		this.__startDistanceY = NaN;
		this.__startDistanceLine = NaN;
		this.__scaleX = 1;
		this.__scaleY = 1;
		this.__isoScale = 1;
		this.__tapTime = -1;
		this.__previousScaleX = 1;
		this.__previousScaleY = 1;
		this.__previousIsoScale = 1;
		this.__previousPosX = NaN;
		this.__previousPosY = NaN;
		this.__flingVel = null;
		this._decelFactor = 800;
		this.__flingTime = -1;
		this.__startHoldTime = -1;
		$.ig.Object.prototype.init.call(this);
		this.__executionContext = executionContext;
	},
	_currentState: 0,
	currentState: function (value) {
		if (arguments.length === 1) {
			this._currentState = value;
			return value;
		} else {
			return this._currentState;
		}
	}
	,
	__tracker: null,
	__holdStartTime: 0,
	__centroidX: 0,
	__centroidY: 0,
	__pendingX: 0,
	__pendingY: 0,
	__startDistanceX: 0,
	__startDistanceY: 0,
	__startDistanceLine: 0,
	__scaleX: 0,
	__scaleY: 0,
	__isoScale: 0,
	centroidX: function () {
		return this.__centroidX;
	}
	,
	centroidY: function () {
		return this.__centroidY;
	}
	,
	processTouches: function (touchPoints) {
		var newCount = touchPoints.count();
		var newState = this.currentState();
		var shouldEndHold = false;
		var shouldStartHoldTimer = false;
		var shouldStopHoldTimer = false;
		var shouldEndZoom = false;
		var shouldStartZoom = false;
		var shouldEndPan = false;
		var shouldStartPan = false;
		var shouldCancelFling = false;
		var currDistanceX = 0;
		var currDistanceY = 0;
		var currDistanceLine = 0;
		var previousState = this.currentState();
		if (newCount > 0 && newCount < 2) {
			switch (this.currentState()) {
				case $.ig.TouchGestureState.prototype.flinging:
					newState = $.ig.TouchGestureState.prototype.pendingPan;
					shouldStartHoldTimer = true;
					shouldStartPan = true;
					break;
				case $.ig.TouchGestureState.prototype.none:
					newState = $.ig.TouchGestureState.prototype.pendingPan;
					shouldStartHoldTimer = true;
					break;
				case $.ig.TouchGestureState.prototype.zoom:
					newState = $.ig.TouchGestureState.prototype.pan;
					shouldStartPan = true;
					shouldEndZoom = true;
					break;
			}
		}
		if (newCount > 1) {
			switch (this.currentState()) {
				case $.ig.TouchGestureState.prototype.flinging:
					newState = $.ig.TouchGestureState.prototype.zoom;
					shouldStartZoom = true;
					shouldCancelFling = true;
					break;
				case $.ig.TouchGestureState.prototype.pendingPan:
					shouldStopHoldTimer = true;
					newState = $.ig.TouchGestureState.prototype.zoom;
					shouldStartZoom = true;
					break;
				case $.ig.TouchGestureState.prototype.none:
					newState = $.ig.TouchGestureState.prototype.zoom;
					shouldStartZoom = true;
					break;
				case $.ig.TouchGestureState.prototype.pan:
					newState = $.ig.TouchGestureState.prototype.zoom;
					shouldEndPan = true;
					shouldStartZoom = true;
					break;
			}
		}
		if (newCount == 0) {
			switch (this.currentState()) {
				case $.ig.TouchGestureState.prototype.pendingPan:
					if (this.checkDoubleTap(new $.ig.TouchPointInfo(0, this.__centroidX, this.__centroidY))) {
						newState = $.ig.TouchGestureState.prototype.none;
						if (this.doubleTapped != null) {
							this.doubleTapped(this, this.getGestureArgs());
						}
					} else {
						shouldStopHoldTimer = true;
						newState = $.ig.TouchGestureState.prototype.none;
					}
					break;
				case $.ig.TouchGestureState.prototype.pan:
					newState = $.ig.TouchGestureState.prototype.none;
					shouldEndPan = true;
					break;
				case $.ig.TouchGestureState.prototype.zoom:
					newState = $.ig.TouchGestureState.prototype.none;
					shouldEndZoom = true;
					break;
				case $.ig.TouchGestureState.prototype.hold:
					newState = $.ig.TouchGestureState.prototype.none;
					shouldEndHold = true;
					break;
			}
		}
		if (shouldCancelFling) {
			if (shouldStartPan) {
				if (this.panEnding != null) {
					this.panEnding(this, this.getGestureArgs());
				}
				if (this.manipulationEnding != null) {
					this.manipulationEnding(this, this.getGestureArgs());
				}
			}
			this.cancelFling();
		}
		if (shouldStartHoldTimer) {
			this.__pendingX = touchPoints.__inner[0].x();
			this.__pendingY = touchPoints.__inner[0].y();
		}
		if (newState == $.ig.TouchGestureState.prototype.pendingPan) {
			if (!$.ig.util.isNaN(this.__pendingX) && !$.ig.util.isNaN(this.__pendingY)) {
				if (Math.abs(touchPoints.__inner[0].x() - this.__pendingX) > 10 || Math.abs(touchPoints.__inner[0].y() - this.__pendingY) > 10) {
					shouldStopHoldTimer = true;
					shouldStartPan = true;
					newState = $.ig.TouchGestureState.prototype.pan;
				}
			}
		}
		var newCentroidX = 0;
		var newCentroidY = 0;
		for (var i = 0; i < newCount; i++) {
			newCentroidX += touchPoints.__inner[i].x();
			newCentroidY += touchPoints.__inner[i].y();
		}
		newCentroidX /= newCount;
		newCentroidY /= newCount;
		if (newCount == 0) {
			newCentroidX = this.__previousPosX;
			newCentroidY = this.__previousPosY;
		}
		this.__centroidX = newCentroidX;
		this.__centroidY = newCentroidY;
		this.__tracker.trackPoint(this.__centroidX, this.__centroidY, this.getCurrentTime());
		if (shouldStartZoom) {
			var dx = touchPoints.__inner[0].x() - touchPoints.__inner[1].x();
			var dy = touchPoints.__inner[0].y() - touchPoints.__inner[1].y();
			this.__startDistanceX = Math.abs(dx);
			this.__startDistanceY = Math.abs(dy);
			this.__startDistanceLine = Math.sqrt(dx * dx + dy * dy);
			if (this.__startDistanceX < 1) {
				this.__startDistanceX = 1;
			}
			if (this.__startDistanceY < 1) {
				this.__startDistanceY = 1;
			}
			if (this.__startDistanceLine < 1) {
				this.__startDistanceLine = 1;
			}
		}
		if (newState == $.ig.TouchGestureState.prototype.zoom) {
			var dx1 = touchPoints.__inner[0].x() - touchPoints.__inner[1].x();
			var dy1 = touchPoints.__inner[0].y() - touchPoints.__inner[1].y();
			currDistanceX = Math.abs(dx1);
			currDistanceY = Math.abs(dy1);
			currDistanceLine = Math.sqrt(dx1 * dx1 + dy1 * dy1);
			if (currDistanceX < 1) {
				currDistanceX = 1;
			}
			if (currDistanceY < 1) {
				currDistanceY = 1;
			}
			if (currDistanceLine < 1) {
				currDistanceLine = 1;
			}
			this.__scaleX = currDistanceX / this.__startDistanceX;
			this.__scaleY = currDistanceY / this.__startDistanceY;
			this.__isoScale = currDistanceLine / this.__startDistanceLine;
		} else {
			this.__startDistanceX = NaN;
			this.__startDistanceY = NaN;
			this.__scaleX = 1;
			this.__scaleY = 1;
			this.__scaleDeltaX = 1;
			this.__scaleDeltaY = 1;
			this.__isoScaleDelta = 1;
		}
		this.currentState(newState);
		if (previousState == $.ig.TouchGestureState.prototype.none && this.currentState() == $.ig.TouchGestureState.prototype.pan || this.currentState() == $.ig.TouchGestureState.prototype.zoom) {
			if (this.manipulationStarting != null) {
				this.manipulationStarting(this, this.getGestureArgs());
			}
		}
		if (shouldEndZoom) {
			this.endZoom();
		}
		if (shouldEndPan) {
			this.endPan();
		}
		if (shouldEndHold) {
			this.endHold();
		}
		if (shouldStopHoldTimer) {
			this.stopHoldTimer();
		}
		if (shouldStartPan) {
			this.startPan();
		}
		if (shouldStartHoldTimer) {
			this.startHoldTimer();
		}
		if (shouldStartZoom) {
			this.startZoom();
		}
		if (this.currentState() == $.ig.TouchGestureState.prototype.zoom) {
			this.__scaleDeltaX = this.__scaleX / this.__previousScaleX;
			this.__scaleDeltaY = this.__scaleY / this.__previousScaleY;
			this.__isoScaleDelta = this.__isoScale / this.__previousIsoScale;
			this.__transDeltaX = this.__centroidX - this.__previousPosX;
			this.__transDeltaY = this.__centroidY - this.__previousPosY;
			this.__previousScaleX = this.__previousScaleX * this.__scaleDeltaX;
			this.__previousScaleY = this.__previousScaleY * this.__scaleDeltaY;
			this.__previousIsoScale = this.__previousIsoScale * this.__isoScaleDelta;
			this.__previousPosX = this.__centroidX;
			this.__previousPosY = this.__centroidY;
			if (this.manipulationChanging != null) {
				this.manipulationChanging(this, this.getGestureArgs());
			}
		}
		if (this.currentState() == $.ig.TouchGestureState.prototype.pan) {
			this.__transDeltaX = this.__centroidX - this.__previousPosX;
			this.__transDeltaY = this.__centroidY - this.__previousPosY;
			this.__previousPosX = this.__centroidX;
			this.__previousPosY = this.__centroidY;
			if (this.manipulationChanging != null) {
				this.manipulationChanging(this, this.getGestureArgs());
			}
		}
		this.__previousPosX = this.__centroidX;
		this.__previousPosY = this.__centroidY;
		if ((shouldEndPan || shouldEndZoom) && this.currentState() == $.ig.TouchGestureState.prototype.none) {
			if (this.manipulationEnding != null) {
				this.manipulationEnding(this, this.getGestureArgs());
			}
		}
	}
	,
	__tapTime: 0,
	__tapLocationX: 0,
	__tapLocationY: 0,
	checkDoubleTap: function (touchPointInfo) {
		var currentTime = this.getCurrentTime();
		if ((currentTime - this.__tapTime) < 500) {
			if (Math.abs(touchPointInfo.x() - this.__tapLocationX) < 50 && Math.abs(touchPointInfo.y() - this.__tapLocationY) < 50) {
				return true;
			}
		}
		this.__tapLocationX = touchPointInfo.x();
		this.__tapLocationY = touchPointInfo.y();
		this.__tapTime = currentTime;
		return false;
	}
	,
	startHoldTimer: function () {
		this.__startHoldTime = this.getCurrentTime();
		if (!this.__holding) {
			this.__holding = true;
			this.__executionContext.executeDelayed(this.checkHold.runOn(this), 1000);
		}
	}
	,
	checkHold: function () {
		if (!this.__holding) {
			return;
		}
		var currentTime = this.getCurrentTime();
		if (currentTime - this.__startHoldTime >= $.ig.TouchGestureRecognizer.prototype._checkHoldTime) {
			this.startHold();
		} else {
			this.__executionContext.executeDelayed(this.checkHold.runOn(this), ($.ig.TouchGestureRecognizer.prototype._checkHoldTime - (currentTime - this.__startHoldTime)));
		}
	}
	,
	stopHoldTimer: function () {
		this.__holding = false;
	}
	,
	endZoom: function () {
		this.__tracker.clear();
		if (this.zoomEnding != null) {
			this.zoomEnding(this, this.getGestureArgs());
		}
	}
	,
	startHold: function () {
		if (this.holdStarting != null) {
			this.holdStarting(this, this.getGestureArgs());
		}
	}
	,
	__previousScaleX: 0,
	__previousScaleY: 0,
	__previousIsoScale: 0,
	__previousPosX: 0,
	__previousPosY: 0,
	startZoom: function () {
		this.cancelFling();
		this.__previousScaleX = 1;
		this.__previousScaleY = 1;
		this.__previousIsoScale = 1;
		this.__previousPosX = this.__centroidX;
		this.__previousPosY = this.__centroidY;
		if (this.zoomStarting != null) {
			this.zoomStarting(this, this.getGestureArgs());
		}
	}
	,
	endHold: function () {
		if (this.holdEnding != null) {
			this.holdEnding(this, this.getGestureArgs());
		}
	}
	,
	startPan: function () {
		this.cancelFling();
		this.__previousPosX = this.__centroidX;
		this.__previousPosY = this.__centroidY;
		if (this.panStarting != null) {
			this.panStarting(this, this.getGestureArgs());
		}
	}
	,
	cancelFling: function () {
		if (this.currentState() == $.ig.TouchGestureState.prototype.flinging) {
			this.currentState($.ig.TouchGestureState.prototype.none);
		}
	}
	,
	__flingVel: null,
	_decelFactor: 0,
	__flingTime: 0,
	updateFling: function () {
		if (this.currentState() != $.ig.TouchGestureState.prototype.flinging) {
			return;
		}
		if (this.__flingVel == null || this.__flingTime == -1) {
			this.cancelFling();
			return;
		}
		var currentTime = this.getCurrentTime();
		var deltaTime = currentTime - this.__flingTime;
		if (deltaTime < 16) {
			this.queueFrame(this.updateFling.runOn(this));
			return;
		}
		this.__flingTime = currentTime;
		var deltaSeconds = deltaTime / 1000;
		var velDelta = this._decelFactor * deltaSeconds;
		var flingVel = this.__flingVel;
		if (flingVel.x() > 0) {
			flingVel.x(flingVel.x() - velDelta);
			if (flingVel.x() < 0) {
				flingVel.x(0);
			}
		}
		if (flingVel.x() < 0) {
			flingVel.x(flingVel.x() + velDelta);
			if (flingVel.x() > 0) {
				flingVel.x(0);
			}
		}
		if (flingVel.y() > 0) {
			flingVel.y(flingVel.y() - velDelta);
			if (flingVel.y() < 0) {
				flingVel.y(0);
			}
		}
		if (flingVel.y() < 0) {
			flingVel.y(flingVel.y() + velDelta);
			if (flingVel.y() > 0) {
				flingVel.y(0);
			}
		}
		if (flingVel.x() == 0 && flingVel.y() == 0) {
			this.currentState($.ig.TouchGestureState.prototype.none);
			if (this.panEnding != null) {
				this.panEnding(this, this.getGestureArgs());
			}
			if (this.manipulationEnding != null) {
				this.manipulationEnding(this, this.getGestureArgs());
			}
			this.cancelFling();
			return;
		}
		this.__centroidX += flingVel.x() * deltaSeconds;
		this.__centroidY += flingVel.y() * deltaSeconds;
		this.__transDeltaX = this.__centroidX - this.__previousPosX;
		this.__transDeltaY = this.__centroidY - this.__previousPosY;
		this.__previousPosX = this.__centroidX;
		this.__previousPosY = this.__centroidY;
		if (this.manipulationChanging != null) {
			this.manipulationChanging(this, this.getGestureArgs());
		}
		this.queueFrame(this.updateFling.runOn(this));
	}
	,
	__executionContext: null,
	__holding: false,
	__startHoldTime: 0,
	startFling: function (vel) {
		if (this.currentState() == $.ig.TouchGestureState.prototype.flinging) {
			this.cancelFling();
		}
		this.__flingTime = this.getCurrentTime();
		this.__flingVel = vel;
		this.currentState($.ig.TouchGestureState.prototype.flinging);
		this.queueFrame(this.updateFling.runOn(this));
		if (this.flingStarting != null) {
			if (!this.flingStarting(this, this.getGestureArgs())) {
				this.cancelFling();
				return false;
			}
		}
		return true;
	}
	,
	queueFrame: function (action) {
		this.__executionContext.enqueueAnimationAction(action);
	}
	,
	endPan: function () {
		var vel = this.__tracker.getVelocity(this.getCurrentTime());
		if ((vel.x() > 5 || vel.x() < -5 || vel.y() > 5 || vel.y() < -5) && this.currentState() == $.ig.TouchGestureState.prototype.none) {
			this.currentState($.ig.TouchGestureState.prototype.pan);
			if (!this.startFling(vel)) {
				if (this.currentState() == $.ig.TouchGestureState.prototype.none) {
					if (this.panEnding != null) {
						this.panEnding(this, this.getGestureArgs());
					}
					if (this.manipulationEnding != null) {
						this.manipulationEnding(this, this.getGestureArgs());
					}
				}
			}
		} else {
			if (this.panEnding != null) {
				this.panEnding(this, this.getGestureArgs());
			}
			if (this.currentState() == $.ig.TouchGestureState.prototype.none) {
				if (this.manipulationEnding != null) {
					this.manipulationEnding(this, this.getGestureArgs());
				}
			}
		}
	}
	,
	getGestureArgs: function () {
		var args = new $.ig.TouchGestureEventArgs();
		args.centroidX(this.__centroidX);
		args.centroidY(this.__centroidY);
		args.scaleDeltaX(this.__scaleDeltaX);
		args.scaleDeltaY(this.__scaleDeltaY);
		args.isoScaleDelta(this.__isoScaleDelta);
		args.translationDeltaX(this.__transDeltaX);
		args.translationDeltaY(this.__transDeltaY);
		args.velocityX(this.__flingVel != null ? this.__flingVel.x() : this.__tracker.getVelocity(this.getCurrentTime()).x());
		args.velocityY(this.__flingVel != null ? this.__flingVel.y() : this.__tracker.getVelocity(this.getCurrentTime()).y());
		return args;
	}
	,
	getCurrentTime: function () {
		return this.__executionContext.getCurrentRelativeTime();
	}
	,
	holdStarting: null,
	holdEnding: null,
	panStarting: null,
	manipulationStarting: null,
	manipulationChanging: null,
	manipulationEnding: null,
	panEnding: null,
	zoomStarting: null,
	zoomEnding: null,
	flingStarting: null,
	doubleTapped: null,
	__scaleDeltaX: 0,
	__scaleDeltaY: 0,
	__isoScaleDelta: 0,
	__transDeltaX: 0,
	__transDeltaY: 0,
	$type: new $.ig.Type('TouchGestureRecognizer', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TouchGestureEventArgs', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_scaleDeltaX: 0,
	scaleDeltaX: function (value) {
		if (arguments.length === 1) {
			this._scaleDeltaX = value;
			return value;
		} else {
			return this._scaleDeltaX;
		}
	}
	,
	_scaleDeltaY: 0,
	scaleDeltaY: function (value) {
		if (arguments.length === 1) {
			this._scaleDeltaY = value;
			return value;
		} else {
			return this._scaleDeltaY;
		}
	}
	,
	_isoScaleDelta: 0,
	isoScaleDelta: function (value) {
		if (arguments.length === 1) {
			this._isoScaleDelta = value;
			return value;
		} else {
			return this._isoScaleDelta;
		}
	}
	,
	_translationDeltaX: 0,
	translationDeltaX: function (value) {
		if (arguments.length === 1) {
			this._translationDeltaX = value;
			return value;
		} else {
			return this._translationDeltaX;
		}
	}
	,
	_translationDeltaY: 0,
	translationDeltaY: function (value) {
		if (arguments.length === 1) {
			this._translationDeltaY = value;
			return value;
		} else {
			return this._translationDeltaY;
		}
	}
	,
	_centroidX: 0,
	centroidX: function (value) {
		if (arguments.length === 1) {
			this._centroidX = value;
			return value;
		} else {
			return this._centroidX;
		}
	}
	,
	_centroidY: 0,
	centroidY: function (value) {
		if (arguments.length === 1) {
			this._centroidY = value;
			return value;
		} else {
			return this._centroidY;
		}
	}
	,
	_velocityX: 0,
	velocityX: function (value) {
		if (arguments.length === 1) {
			this._velocityX = value;
			return value;
		} else {
			return this._velocityX;
		}
	}
	,
	_velocityY: 0,
	velocityY: function (value) {
		if (arguments.length === 1) {
			this._velocityY = value;
			return value;
		} else {
			return this._velocityY;
		}
	}
	,
	$type: new $.ig.Type('TouchGestureEventArgs', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TouchHistoryItem', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	_time: 0,
	time: function (value) {
		if (arguments.length === 1) {
			this._time = value;
			return value;
		} else {
			return this._time;
		}
	}
	,
	$type: new $.ig.Type('TouchHistoryItem', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TouchVelocityReading', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	$type: new $.ig.Type('TouchVelocityReading', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TouchVelocityTracker', 'Object', {
	init: function () {
		this.__history = new Array($.ig.TouchVelocityTracker.prototype._touchHistoryLength);
		this.__touchHistoryPosition = 0;
		$.ig.Object.prototype.init.call(this);
	},
	__history: null,
	__touchHistoryPosition: 0,
	trackPoint: function (x, y, time) {
		if ($.ig.util.isNaN(x) || $.ig.util.isNaN(y)) {
			return;
		}
		var historyItem = (function () {
			var $ret = new $.ig.TouchHistoryItem();
			$ret.x(x);
			$ret.y(y);
			$ret.time(time);
			return $ret;
		}());
		this.__history[this.__touchHistoryPosition] = historyItem;
		this.__touchHistoryPosition++;
		if (this.__touchHistoryPosition > $.ig.TouchVelocityTracker.prototype._touchHistoryLength - 1) {
			this.__touchHistoryPosition = 0;
		}
	}
	,
	clear: function () {
		this.__touchHistoryPosition = 0;
		for (var i = 0; i < $.ig.TouchVelocityTracker.prototype._touchHistoryLength; i++) {
			this.__history[i] = null;
		}
	}
	,
	getVelocity: function (time) {
		var currentTime = time;
		var maxX = NaN;
		var minX = NaN;
		var maxY = NaN;
		var minY = NaN;
		var minTime = 0;
		var maxTime = 0;
		var first = true;
		for (var i = 0; i < $.ig.TouchVelocityTracker.prototype._touchHistoryLength; i++) {
			if (this.__history[i] == null) {
				continue;
			}
			var tooOld = (this.__history[i].time() - currentTime) > 300;
			if (tooOld) {
				continue;
			}
			if (first) {
				first = false;
				maxX = this.__history[i].x();
				minX = this.__history[i].x();
				maxY = this.__history[i].y();
				minY = this.__history[i].y();
				minTime = this.__history[i].time();
				maxTime = this.__history[i].time();
			} else {
				if (this.__history[i].time() < minTime) {
					minTime = this.__history[i].time();
					minX = this.__history[i].x();
					minY = this.__history[i].y();
				}
				if (this.__history[i].time() > maxTime) {
					maxTime = this.__history[i].time();
					maxX = this.__history[i].x();
					maxY = this.__history[i].y();
				}
			}
		}
		if (minTime == maxTime || $.ig.util.isNaN(maxX) || $.ig.util.isNaN(minX) || $.ig.util.isNaN(maxY) || $.ig.util.isNaN(minY)) {
			return (function () {
				var $ret = new $.ig.TouchVelocityReading();
				$ret.x(NaN);
				$ret.y(NaN);
				return $ret;
			}());
		}
		return (function () {
			var $ret = new $.ig.TouchVelocityReading();
			$ret.x((maxX - minX) / ((maxTime - minTime) / 1000));
			$ret.y((maxY - minY) / ((maxTime - minTime) / 1000));
			return $ret;
		}());
	}
	,
	$type: new $.ig.Type('TouchVelocityTracker', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ArrayUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	shuffle$1: function ($t, list) {
		if (list != null) {
			var random = new $.ig.Random(0);
			for (var n = list.count() - 1; n > 0; --n) {
				var k = random.next1(n);
				var temp = list.item(n);
				list.item(n, list.item(k));
				list.item(k, temp);
			}
		}
	}
	,
	insertionIndex$1: function ($t, collection, value) {
		var index = -1;
		var b = 0;
		var e = collection.count();
		while (index == -1) {
			if (e <= b) {
				index = b;
			} else {
				var m = $.ig.intDivide((b + e), 2);
				switch (Math.sign((value).compareTo($.ig.util.getBoxIfEnum($t, collection.item(m))))) {
					case -1:
						e = m;
						break;
					case 0:
						index = m;
						break;
					case 1:
						b = m + 1;
						break;
				}
			}
		}
		return index;
	}
	,
	insertionIndex$11: function ($t, collection, comparison, value) {
		var index = -1;
		var b = 0;
		var e = collection.count();
		while (index == -1) {
			if (e <= b) {
				index = b;
			} else {
				var m = $.ig.intDivide((b + e), 2);
				switch (Math.sign(comparison(value, collection.item(m)))) {
					case -1:
						e = m;
						break;
					case 0:
						index = m;
						break;
					case 1:
						b = m + 1;
						break;
				}
			}
		}
		return index;
	}
	,
	binarySearch$11: function ($t, list, comparisonFunction) {
		var currMin = 0;
		var currMax = list.count() - 1;
		while (currMin <= currMax) {
			var currMid = (currMin + ((currMax - currMin) >> 1));
			var compResult = comparisonFunction(list.item(currMid));
			if (compResult < 0) {
				currMax = currMid - 1;
			} else if (compResult > 0) {
				currMin = currMid + 1;
			} else {
				return currMid;
			}
		}
		return ~currMin;
	}
	,
	binarySearch$1: function ($t, list, comparisonFunction) {
		var currMin = 0;
		var currMax = list.count() - 1;
		while (currMin <= currMax) {
			var currMid = (currMin + ((currMax - currMin) >> 1));
			var compResult = comparisonFunction(list.item(currMid));
			if (compResult < 0) {
				currMax = currMid - 1;
			} else if (compResult > 0) {
				currMin = currMid + 1;
			} else {
				return currMid;
			}
		}
		return ~currMin;
	}
	,
	$type: new $.ig.Type('ArrayUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Clipper', 'Object', {
	target: function (value) {
		if (arguments.length === 1) {
			if (this.__firstClipper != null) {
				this.__firstClipper.clear();
			}
			this.__firstClipper = null;
			this._target = value;
			var headVal = this._target;
			if (this._leftClipper != null) {
				this._leftClipper.dst(headVal);
				headVal = this._leftClipper;
				this.__firstClipper = this._leftClipper;
			}
			if (this._bottomClipper != null) {
				this._bottomClipper.dst(headVal);
				headVal = this._bottomClipper;
				this._bottomClipper.__nextClipper = this.__firstClipper;
				this.__firstClipper = this._bottomClipper;
			}
			if (this._rightClipper != null) {
				this._rightClipper.dst(headVal);
				headVal = this._rightClipper;
				this._rightClipper.__nextClipper = this.__firstClipper;
				this.__firstClipper = this._rightClipper;
			}
			if (this._topClipper != null) {
				this._topClipper.dst(headVal);
				headVal = this._topClipper;
				this._topClipper.__nextClipper = this.__firstClipper;
				this.__firstClipper = this._topClipper;
			}
			this._head = headVal;
			return value;
		} else {
			return this._target;
		}
	}
	,
	_head: null,
	__firstClipper: null,
	_target: null,
	_leftClipper: null,
	_bottomClipper: null,
	_rightClipper: null,
	_topClipper: null,
	init: function (initNumber, clip, isClosed) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._leftClipper = (function () {
			var $ret = new $.ig.LeftClipper();
			$ret._edge = clip.left();
			$ret._isClosed = isClosed;
			return $ret;
		}());
		this._bottomClipper = (function () {
			var $ret = new $.ig.BottomClipper();
			$ret._edge = clip.bottom();
			$ret._isClosed = isClosed;
			return $ret;
		}());
		this._rightClipper = (function () {
			var $ret = new $.ig.RightClipper();
			$ret._edge = clip.right();
			$ret._isClosed = isClosed;
			return $ret;
		}());
		this._topClipper = (function () {
			var $ret = new $.ig.TopClipper();
			$ret._edge = clip.top();
			$ret._isClosed = isClosed;
			return $ret;
		}());
	},
	init1: function (initNumber, left, bottom, right, top, isClosed) {
		$.ig.Object.prototype.init.call(this);
		this._leftClipper = !$.ig.util.isNaN(left) ? (function () {
			var $ret = new $.ig.LeftClipper();
			$ret._edge = left;
			$ret._isClosed = isClosed;
			return $ret;
		}()) : null;
		this._bottomClipper = !$.ig.util.isNaN(bottom) ? (function () {
			var $ret = new $.ig.BottomClipper();
			$ret._edge = bottom;
			$ret._isClosed = isClosed;
			return $ret;
		}()) : null;
		this._rightClipper = !$.ig.util.isNaN(right) ? (function () {
			var $ret = new $.ig.RightClipper();
			$ret._edge = right;
			$ret._isClosed = isClosed;
			return $ret;
		}()) : null;
		this._topClipper = !$.ig.util.isNaN(top) ? (function () {
			var $ret = new $.ig.TopClipper();
			$ret._edge = top;
			$ret._isClosed = isClosed;
			return $ret;
		}()) : null;
	},
	add: function (point) {
		this._head.add(point);
	}
	,
	isClosed: function (value) {
		if (arguments.length === 1) {
			if (this._leftClipper != null) {
				this._leftClipper._isClosed = value;
			}
			if (this._bottomClipper != null) {
				this._bottomClipper._isClosed = value;
			}
			if (this._rightClipper != null) {
				this._rightClipper._isClosed = value;
			}
			if (this._topClipper != null) {
				this._topClipper._isClosed = value;
			}
			return value;
		} else {
			return (this._leftClipper == null || this._leftClipper._isClosed) && (this._bottomClipper == null || this._bottomClipper._isClosed) && (this._rightClipper == null || this._rightClipper._isClosed) && (this._topClipper == null || this._topClipper._isClosed);
		}
	}
	,
	$type: new $.ig.Type('Clipper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('EdgeClipper', 'Object', {
	init: function () {
		this._init = true;
		this._isOutput = false;
		$.ig.Object.prototype.init.call(this);
	},
	dst: function (value) {
		if (arguments.length === 1) {
			if (this._dst != value) {
				this._init = true;
				this._dst = value;
			}
			return value;
		} else {
			return this._dst;
		}
	}
	,
	_dst: null,
	__nextClipper: null,
	nextClipper: function (value) {
		if (arguments.length === 1) {
			this.__nextClipper = value;
			return value;
		} else {
			return this.__nextClipper;
		}
	}
	,
	_init: false,
	_first: null,
	_prev: null,
	_prevInside: false,
	_isClosed: false,
	_isOutput: false,
	add: function (cur) {
		var CurInside = this.isInside(cur);
		if (this._init) {
			this._init = false;
			this._first = cur;
		} else {
			if (true) {
				if (CurInside) {
					if (!this._prevInside) {
						this.dst().add(this.intersection(this._prev, cur));
					} else {
						if (!this._isClosed && !this._isOutput) {
							this.dst().add(this._prev);
							this._isOutput = true;
						}
					}
					this.dst().add(cur);
				} else {
					if (this._prevInside) {
						if (!this._isClosed && !this._isOutput) {
							this.dst().add(this._prev);
							this._isOutput = true;
						}
						this.dst().add(this.intersection(this._prev, cur));
					}
				}
			}
		}
		this._prev = cur;
		this._prevInside = CurInside;
	}
	,
	clear: function () {
		if (this._isClosed && !this._init) {
			this.add(this._first);
		}
		if (this.__nextClipper != null) {
			this.__nextClipper.clear();
		}
		this._init = true;
		this._isOutput = false;
	}
	,
	isInside: function (pt) {
	}
	,
	intersection: function (b, e) {
	}
	,
	getEnumerator: function () {
		return null;
	}
	,
	getEnumerator: function () {
		return null;
	}
	,
	isReadOnly: function () {
		return false;
	}
	,
	count: function () {
		return 0;
	}
	,
	remove: function (pt) {
		return false;
	}
	,
	removeAt: function (n) {
	}
	,
	copyTo: function (pt, n) {
	}
	,
	contains: function (pt) {
		return false;
	}
	,
	item: function (n, value) {
		if (arguments.length === 2) {
			return value;
		} else {
			return { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	insert: function (n, pt) {
	}
	,
	indexOf: function (pt) {
		return -1;
	}
	,
	$type: new $.ig.Type('EdgeClipper', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize($.ig.Point.prototype.$type)])
}, true);

$.ig.util.defType('LeftClipper', 'EdgeClipper', {
	init: function () {
		$.ig.EdgeClipper.prototype.init.call(this);
	},
	_edge: 0,
	isInside: function (pt) {
		return pt.__x >= this._edge;
	}
	,
	intersection: function (b, e) {
		return { __x: this._edge, __y: b.__y + (e.__y - b.__y) * (this._edge - b.__x) / (e.__x - b.__x), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	$type: new $.ig.Type('LeftClipper', $.ig.EdgeClipper.prototype.$type)
}, true);

$.ig.util.defType('BottomClipper', 'EdgeClipper', {
	init: function () {
		$.ig.EdgeClipper.prototype.init.call(this);
	},
	_edge: 0,
	isInside: function (pt) {
		return pt.__y <= this._edge;
	}
	,
	intersection: function (b, e) {
		return { __x: b.__x + (e.__x - b.__x) * (this._edge - b.__y) / (e.__y - b.__y), __y: this._edge, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	$type: new $.ig.Type('BottomClipper', $.ig.EdgeClipper.prototype.$type)
}, true);

$.ig.util.defType('RightClipper', 'EdgeClipper', {
	init: function () {
		$.ig.EdgeClipper.prototype.init.call(this);
	},
	_edge: 0,
	isInside: function (pt) {
		return pt.__x <= this._edge;
	}
	,
	intersection: function (b, e) {
		return { __x: this._edge, __y: b.__y + (e.__y - b.__y) * (this._edge - b.__x) / (e.__x - b.__x), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	$type: new $.ig.Type('RightClipper', $.ig.EdgeClipper.prototype.$type)
}, true);

$.ig.util.defType('TopClipper', 'EdgeClipper', {
	init: function () {
		$.ig.EdgeClipper.prototype.init.call(this);
	},
	_edge: 0,
	isInside: function (pt) {
		return pt.__y >= this._edge;
	}
	,
	intersection: function (b, e) {
		return { __x: b.__x + (e.__x - b.__x) * (this._edge - b.__y) / (e.__y - b.__y), __y: this._edge, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	$type: new $.ig.Type('TopClipper', $.ig.EdgeClipper.prototype.$type)
}, true);

$.ig.util.defType('Flattener', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	spiral: function (startAngle, startRadius, endAngle, endRadius, error) {
		if ($.ig.util.isNaN(error) || error <= 0) {
			error = 1;
		}
		var ret = new $.ig.List$1(Number, 0);
		var todo = new $.ig.Stack$1($.ig.SpiralTodo.prototype.$type);
		var b = (endRadius - startRadius) / (endAngle - startAngle);
		var a = startRadius - b * startAngle;
		var b2 = b * b;
		var a2 = a * a;
		var ab = a * b;
		todo.push((function () {
			var $ret = new $.ig.SpiralTodo();
			$ret._p0 = 0;
			$ret._p1 = 1;
			return $ret;
		}()));
		while (todo.count() != 0) {
			var s = todo.pop();
			var r0 = startRadius + s._p0 * (endRadius - startRadius);
			var t0 = startAngle + s._p0 * (endAngle - startAngle);
			var t02 = t0 * t0;
			var t03 = t02 * t0;
			var r1 = startRadius + s._p1 * (endRadius - startRadius);
			var t1 = startAngle + s._p1 * (endAngle - startAngle);
			var t12 = t1 * t1;
			var t13 = t12 * t1;
			var segment;
			if (b == 0) {
				segment = a2 * (t1 - t0) / 2 + ab * (t12 - t02) / 2 + b2 * (t13 - t03) / 6;
			} else {
				segment = (Math.pow(a + b * t1, 3) - Math.pow(a + b * t0, 3)) / (6 * b);
			}
			var triangle = 0.5 * r0 * r1 * Math.sin(t1 - t0);
			if (segment - triangle > error) {
				var pm = 0.5 * (s._p0 + s._p1);
				todo.push((function () {
					var $ret = new $.ig.SpiralTodo();
					$ret._p0 = pm;
					$ret._p1 = s._p1;
					return $ret;
				}()));
				todo.push((function () {
					var $ret = new $.ig.SpiralTodo();
					$ret._p0 = s._p0;
					$ret._p1 = pm;
					return $ret;
				}()));
			} else {
				ret.add(s._p0);
			}
		}
		ret.add(1);
		return ret;
	}
	,
	flatten3: function (count, X, Y, resolution) {
		var indices = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		$.ig.Flattener.prototype.flatten2(indices, X, Y, 0, count - 1, resolution);
		return indices;
	}
	,
	flatten2: function (result, X, Y, b, e, E) {
		return $.ig.Flattener.prototype.flatten1(result, function (i) {
			return i;
		}, X, Y, b, e, E);
	}
	,
	flatten: function (result, indices, X, Y, b, e, E) {
		return $.ig.Flattener.prototype.flatten1(result, function (i) {
			return indices.item(i);
		}, X, Y, b, e, E);
	}
	,
	flatten1: function (result, getIndex, X, Y, b, e, E) {
		if (b > e) {
			return result;
		}
		var Xb = X(getIndex(b));
		var Yb = Y(getIndex(b));
		while (($.ig.util.isNaN(Xb) || $.ig.util.isNaN(Yb)) && b < e) {
			++b;
			Xb = X(getIndex(b));
			Yb = Y(getIndex(b));
		}
		var Xe = X(getIndex(e));
		var Ye = Y(getIndex(e));
		while (($.ig.util.isNaN(Xe) || $.ig.util.isNaN(Ye)) && b < e) {
			--e;
			Xe = X(getIndex(e));
			Ye = Y(getIndex(e));
		}
		if (b == e) {
			result.add(getIndex(b));
			return result;
		}
		result.add(getIndex(b));
		$.ig.Flattener.prototype.flattenRecursive(result, getIndex, X, Y, b, e, E);
		result.add(getIndex(e));
		return result;
	}
	,
	fastFlatten2: function (result, X, Y, b, e, E) {
		if (b > e) {
			return result;
		}
		var Xb = X[b];
		var Yb = Y[b];
		while (($.ig.util.isNaN(Xb) || $.ig.util.isNaN(Yb)) && b < e) {
			++b;
			Xb = X[b];
			Yb = Y[b];
		}
		var Xe = X[e];
		var Ye = Y[e];
		while (($.ig.util.isNaN(Xe) || $.ig.util.isNaN(Ye)) && b < e) {
			--e;
			Xe = X[e];
			Ye = Y[e];
		}
		if (b == e) {
			result.add(b);
			return result;
		}
		result.add(b);
		$.ig.Flattener.prototype.fastFlattenRecursive(result, X, Y, b, e, E);
		result.add(e);
		return result;
	}
	,
	fastFlatten: function (count, buckets, point0, useX0AsX1, resolution) {
		var xIndex;
		var yIndex;
		if (point0) {
			xIndex = 0;
			yIndex = 1;
		} else if (useX0AsX1) {
			xIndex = 0;
			yIndex = 2;
		} else {
			xIndex = 2;
			yIndex = 3;
		}
		return $.ig.Flattener.prototype.fastFlatten1(count, buckets, xIndex, yIndex, resolution);
	}
	,
	chunkedFastFlatten1: function (count, buckets, point0, useX0AsX1, resolution) {
		var indices = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		var res = $.ig.Flattener.prototype.chunkedFastFlatten(indices, buckets, point0, useX0AsX1, 0, count - 1, resolution);
		return res;
	}
	,
	fastFlatten1: function (count, buckets, xIndex, yIndex, resolution) {
		var indices = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		$.ig.Flattener.prototype.fastFlatten4(indices, buckets, xIndex, yIndex, 0, count - 1, resolution);
		return indices;
	}
	,
	chunkedFastFlatten: function (result, buckets, point0, useX0AsX1, b, e, E) {
		var chunking = $.ig.FlattenerSettings.prototype.instance().chunkingAmount();
		if ((e - b + 1) <= chunking) {
			return $.ig.Flattener.prototype.fastFlatten3(result, buckets, point0, useX0AsX1, b, e, E);
		}
		var indices = result;
		if (chunking < 0) {
			for (var i = b; i <= e; i++) {
				indices.add(i);
			}
			return indices;
		}
		var start = b;
		var end = e;
		var toFlatten = end - start + 1;
		while (toFlatten > 0) {
			if (toFlatten <= chunking) {
				$.ig.Flattener.prototype.fastFlatten3(indices, buckets, point0, useX0AsX1, start, end, E);
				start = end + 1;
			} else {
				var currentEnd = start + chunking - 1;
				$.ig.Flattener.prototype.fastFlatten3(indices, buckets, point0, useX0AsX1, start, currentEnd, E);
				start = currentEnd + 1;
			}
			toFlatten = end - start + 1;
		}
		return indices;
	}
	,
	fastFlatten3: function (result, buckets, point0, useX0AsX1, b, e, E) {
		var xIndex;
		var yIndex;
		if (point0) {
			xIndex = 0;
			yIndex = 1;
		} else if (useX0AsX1) {
			xIndex = 0;
			yIndex = 2;
		} else {
			xIndex = 2;
			yIndex = 3;
		}
		return $.ig.Flattener.prototype.fastFlatten4(result, buckets, xIndex, yIndex, b, e, E);
	}
	,
	fastFlatten4: function (result, buckets, xIndex, yIndex, b, e, E) {
		if (b > e) {
			return result;
		}
		var bucketB = buckets.__inner[b];
		var Xb, Yb;
		Xb = bucketB[xIndex];
		Yb = bucketB[yIndex];
		while (($.ig.util.isNaN(Xb) || $.ig.util.isNaN(Yb)) && b < e) {
			++b;
			bucketB = buckets.__inner[b];
			Xb = bucketB[xIndex];
			Yb = bucketB[yIndex];
		}
		var bucketE = buckets.__inner[e];
		var Xe, Ye;
		Xe = bucketE[xIndex];
		Ye = bucketE[yIndex];
		while (($.ig.util.isNaN(Xe) || $.ig.util.isNaN(Ye)) && b < e) {
			--e;
			bucketE = buckets.__inner[e];
			Xe = bucketE[xIndex];
			Ye = bucketE[yIndex];
		}
		if (b == e) {
			result.add(b);
			return result;
		}
		result.add(b);
		$.ig.Flattener.prototype.fastFlattenRecursive1(result, buckets, xIndex, yIndex, b, e, E);
		result.add(e);
		return result;
	}
	,
	fastFlattenRecursive: function (result, X, Y, b, e, E) {
		var Xb = X[b];
		var Yb = Y[b];
		while (($.ig.util.isNaN(Xb) || $.ig.util.isNaN(Yb)) && b < e) {
			++b;
			Xb = X[b];
			Yb = Y[b];
		}
		var Xe = X[e];
		var Ye = Y[e];
		while (($.ig.util.isNaN(Xe) || $.ig.util.isNaN(Ye)) && b < e) {
			--e;
			Xe = X[e];
			Ye = Y[e];
		}
		if (b + 1 >= e) {
			return;
		}
		var si = -1;
		var se = E * E;
		var xDelt;
		var yDelt;
		xDelt = Xe - Xb;
		yDelt = Ye - Yb;
		var L = xDelt * xDelt + yDelt * yDelt;
		if (L == 0) {
			for (var i = b + 1; i < e; ++i) {
				var Xi = X[i];
				var Yi = Y[i];
				if ($.ig.util.isNaN(Xi) || $.ig.util.isNaN(Yi)) {
					continue;
				}
				xDelt = Xe - Xi;
				yDelt = Ye - Yi;
				var err = xDelt * xDelt + yDelt * yDelt;
				if (err >= se) {
					se = err;
					si = i;
				}
			}
		} else {
			var vx = Xe - Xb;
			var vy = Ye - Yb;
			for (var i1 = b + 1; i1 < e; ++i1) {
				var Xi1 = X[i1];
				var Yi1 = Y[i1];
				if ($.ig.util.isNaN(Xi1) || $.ig.util.isNaN(Yi1)) {
					continue;
				}
				var err1 = NaN;
				var wx = X[i1] - Xb;
				var wy = Y[i1] - Yb;
				var c1 = vx * wx + vy * wy;
				if (c1 <= 0) {
					xDelt = Xb - Xi1;
					yDelt = Yb - Yi1;
					err1 = xDelt * xDelt + yDelt * yDelt;
				} else {
					var c2 = vx * vx + vy * vy;
					if (c2 <= c1) {
						xDelt = Xe - Xi1;
						yDelt = Ye - Yi1;
						err1 = xDelt * xDelt + yDelt * yDelt;
					} else {
						var p = c1 / c2;
						xDelt = Xb + p * vx - Xi1;
						yDelt = Yb + p * vy - Yi1;
						err1 = xDelt * xDelt + yDelt * yDelt;
					}
				}
				if (err1 >= se) {
					se = err1;
					si = i1;
				}
			}
		}
		if (si != -1) {
			$.ig.Flattener.prototype.fastFlattenRecursive(result, X, Y, b, si, E);
			result.add(si);
			$.ig.Flattener.prototype.fastFlattenRecursive(result, X, Y, si, e, E);
		}
		return;
	}
	,
	fastFlattenRecursive1: function (result, buckets, xIndex, yIndex, b, e, E) {
		var bucketB = buckets.__inner[b];
		var Xb, Yb;
		Xb = bucketB[xIndex];
		Yb = bucketB[yIndex];
		while ((Xb != Xb) || (Yb != Yb) && b < e) {
			++b;
			bucketB = buckets.__inner[b];
			Xb = bucketB[xIndex];
			Yb = bucketB[yIndex];
		}
		var bucketE = buckets.__inner[e];
		var Xe, Ye;
		Xe = bucketE[xIndex];
		Ye = bucketE[yIndex];
		while ((Xe != Xe) || (Ye != Ye) && b < e) {
			--e;
			bucketE = buckets.__inner[e];
			Xe = bucketE[xIndex];
			Ye = bucketE[yIndex];
		}
		if (b + 1 >= e) {
			return;
		}
		var si = -1;
		var se = E * E;
		var xDelt;
		var yDelt;
		xDelt = Xe - Xb;
		yDelt = Ye - Yb;
		var L = xDelt * xDelt + yDelt * yDelt;
		if (L == 0) {
			for (var i = b + 1; i < e; ++i) {
				var bucketI = buckets.__inner[i];
				var Xi, Yi;
				Xi = bucketI[xIndex];
				Yi = bucketI[yIndex];
				if ((Xi != Xi) || (Yi != Yi)) {
					continue;
				}
				xDelt = Xe - Xi;
				yDelt = Ye - Yi;
				var err = xDelt * xDelt + yDelt * yDelt;
				if (err >= se) {
					se = err;
					si = i;
				}
			}
		} else {
			var vx = Xe - Xb;
			var vy = Ye - Yb;
			for (var i1 = b + 1; i1 < e; ++i1) {
				var bucketI1 = buckets.__inner[i1];
				var Xi1, Yi1;
				Xi1 = bucketI1[xIndex];
				Yi1 = bucketI1[yIndex];
				if ((Xi1 != Xi1) || (Yi1 != Yi1)) {
					continue;
				}
				var err1 = NaN;
				var wx = Xi1 - Xb;
				var wy = Yi1 - Yb;
				var c1 = vx * wx + vy * wy;
				if (c1 <= 0) {
					xDelt = Xb - Xi1;
					yDelt = Yb - Yi1;
					err1 = xDelt * xDelt + yDelt * yDelt;
				} else {
					var c2 = vx * vx + vy * vy;
					if (c2 <= c1) {
						xDelt = Xe - Xi1;
						yDelt = Ye - Yi1;
						err1 = xDelt * xDelt + yDelt * yDelt;
					} else {
						var p = c1 / c2;
						xDelt = Xb + p * vx - Xi1;
						yDelt = Yb + p * vy - Yi1;
						err1 = xDelt * xDelt + yDelt * yDelt;
					}
				}
				if (err1 >= se) {
					se = err1;
					si = i1;
				}
			}
		}
		if (si != -1) {
			$.ig.Flattener.prototype.fastFlattenRecursive1(result, buckets, xIndex, yIndex, b, si, E);
			result.add(si);
			$.ig.Flattener.prototype.fastFlattenRecursive1(result, buckets, xIndex, yIndex, si, e, E);
		}
		return;
	}
	,
	flattenRecursive: function (result, getIndex, X, Y, b, e, E) {
		var Xb = X(getIndex(b));
		var Yb = Y(getIndex(b));
		while (($.ig.util.isNaN(Xb) || $.ig.util.isNaN(Yb)) && b < e) {
			++b;
			Xb = X(getIndex(b));
			Yb = Y(getIndex(b));
		}
		var Xe = X(getIndex(e));
		var Ye = Y(getIndex(e));
		while (($.ig.util.isNaN(Xe) || $.ig.util.isNaN(Ye)) && b < e) {
			--e;
			Xe = X(getIndex(e));
			Ye = Y(getIndex(e));
		}
		if (b + 1 >= e) {
			return;
		}
		var si = -1;
		var se = E;
		var L = $.ig.MathUtil.prototype.hypot(Xe - Xb, Ye - Yb);
		if (L == 0) {
			for (var i = b + 1; i < e; ++i) {
				var Xi = X(getIndex(i));
				var Yi = Y(getIndex(i));
				if ($.ig.util.isNaN(Xi) || $.ig.util.isNaN(Yi)) {
					continue;
				}
				var err = $.ig.MathUtil.prototype.hypot(Xe - Xi, Ye - Yi);
				if (err >= se) {
					se = err;
					si = i;
				}
			}
		} else {
			var vx = Xe - Xb;
			var vy = Ye - Yb;
			for (var i1 = b + 1; i1 < e; ++i1) {
				var Xi1 = X(getIndex(i1));
				var Yi1 = Y(getIndex(i1));
				if ($.ig.util.isNaN(Xi1) || $.ig.util.isNaN(Yi1)) {
					continue;
				}
				var err1 = NaN;
				var wx = X(getIndex(i1)) - Xb;
				var wy = Y(getIndex(i1)) - Yb;
				var c1 = vx * wx + vy * wy;
				if (c1 <= 0) {
					err1 = $.ig.MathUtil.prototype.hypot(Xb - Xi1, Yb - Yi1);
				} else {
					var c2 = vx * vx + vy * vy;
					if (c2 <= c1) {
						err1 = $.ig.MathUtil.prototype.hypot(Xe - Xi1, Ye - Yi1);
					} else {
						var p = c1 / c2;
						err1 = $.ig.MathUtil.prototype.hypot(Xb + p * vx - Xi1, Yb + p * vy - Yi1);
					}
				}
				if (err1 >= se) {
					se = err1;
					si = i1;
				}
			}
		}
		if (si != -1) {
			$.ig.Flattener.prototype.flattenRecursive(result, getIndex, X, Y, b, si, E);
			result.add(getIndex(si));
			$.ig.Flattener.prototype.flattenRecursive(result, getIndex, X, Y, si, e, E);
		}
		return;
	}
	,
	spline: function (count, X, Y) {
		var spline = new $.ig.PointCollection(0);
		if (count < 5) {
			for (var i = 0; i < count; ++i) {
				spline.add({ __x: X(i), __y: Y(i), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			return spline;
		}
		spline.add({ __x: X(0), __y: Y(0), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		var n = count - 1;
		var pa;
		var pb = { __x: X(0), __y: Y(0), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var pc = { __x: X(0 + 1), __y: Y(0 + 1), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var pd = { __x: X(0 + 2), __y: Y(0 + 2), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var eab;
		var mab;
		var ebc = { __x: pc.__x - pb.__x, __y: pc.__y - pb.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var mbc = $.ig.MathUtil.prototype.hypot(ebc.__x, ebc.__y);
		var ecd = { __x: pd.__x - pc.__x, __y: pd.__y - pc.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var mcd = $.ig.MathUtil.prototype.hypot(ecd.__x, ecd.__y);
		var tc;
		var sc;
		var alpha = 0.1;
		var beta = 0.3;
		{
			tc = { __x: pd.__x - pb.__x, __y: pd.__y - pb.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			{
				var m = $.ig.MathUtil.prototype.hypot(tc.__x, tc.__y);
				tc.__x /= m;
				tc.__y /= m;
			}
			sc = 0.5 + (ebc.__x * ecd.__x + ebc.__y * ecd.__y) / (2 * mbc * mcd);
			spline.add({ __x: pc.__x - tc.__x * (alpha + beta * sc) * mbc, __y: pc.__y - tc.__y * (alpha + beta * sc) * mbc, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			spline.add(pc);
		}
		for (var i1 = 1; i1 < n - 1; ++i1) {
			pa = pb;
			pb = pc;
			pc = pd;
			pd = { __x: X(i1 + 2), __y: Y(i1 + 2), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			eab = ebc;
			mab = mbc;
			ebc = ecd;
			mbc = mcd;
			ecd = { __x: pd.__x - pc.__x, __y: pd.__y - pc.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			mcd = $.ig.MathUtil.prototype.hypot(ecd.__x, ecd.__y);
			var tb = tc;
			var sb = sc;
			tc = { __x: pd.__x - pb.__x, __y: pd.__y - pb.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			{
				var m1 = $.ig.MathUtil.prototype.hypot(tc.__x, tc.__y);
				tc.__x /= m1;
				tc.__y /= m1;
			}
			sc = 0.5 + (ebc.__x * ecd.__x + ebc.__y * ecd.__y) / (2 * mbc * mcd);
			spline.add({ __x: pb.__x + tb.__x * (alpha + beta * sb) * mbc, __y: pb.__y + tb.__y * (alpha + beta * sb) * mbc, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			spline.add({ __x: pc.__x - tc.__x * (alpha + beta * sc) * mbc, __y: pc.__y - tc.__y * (alpha + beta * sc) * mbc, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			spline.add(pc);
		}
		{
			pa = pb;
			pb = pc;
			pc = pd;
			eab = ebc;
			mab = mbc;
			ebc = ecd;
			mbc = mcd;
			var tb1 = tc;
			var sb1 = sc;
			spline.add({ __x: pb.__x + tb1.__x * (alpha + beta * sb1) * mbc, __y: pb.__y + tb1.__y * (alpha + beta * sb1) * mbc, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			spline.add(pc);
		}
		return spline;
	}
	,
	$type: new $.ig.Type('Flattener', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FlattenerSettings', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.chunkingAmount(3000);
	},
	instance: function () {
		if ($.ig.FlattenerSettings.prototype.__instance == null) {
			$.ig.FlattenerSettings.prototype.__instance = new $.ig.FlattenerSettings();
		}
		return $.ig.FlattenerSettings.prototype.__instance;
	}
	,
	_chunkingAmount: 0,
	chunkingAmount: function (value) {
		if (arguments.length === 1) {
			this._chunkingAmount = value;
			return value;
		} else {
			return this._chunkingAmount;
		}
	}
	,
	$type: new $.ig.Type('FlattenerSettings', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SpiralTodo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_p0: 0,
	_p1: 0,
	$type: new $.ig.Type('SpiralTodo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('GeometryUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	simplifyAngle: function (angle) {
		if ($.ig.util.isNaN(angle) || Number.isInfinity(angle)) {
			return angle;
		}
		while (angle > 360) {
			angle -= 360;
		}
		while (angle < 0) {
			angle += 360;
		}
		return angle;
	}
	,
	angleFromSlope: function (slope) {
		return Math.atan(slope);
	}
	,
	slope: function (point1, point2) {
		return (point2.__y - point1.__y) / (point2.__x - point1.__x);
	}
	,
	eccentricity: function (bounds) {
		return 1 - Math.pow(bounds.height() / 2, 2) / Math.pow(bounds.width() / 2, 2);
	}
	,
	pointOnEllipse: function (theta, eccentricity, center, halfHeight, extent) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var r = Math.sqrt(halfHeight * halfHeight / (1 - (eccentricity * Math.pow(cos, 2))));
		r *= extent;
		return { __x: r * cos + center.__x, __y: r * sin + center.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	findCenter: function (width, height, exploded, angle, radius) {
		var center;
		if (exploded) {
			center = $.ig.GeometryUtil.prototype.findRadialPoint({ __x: width / 2, __y: height / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, angle, radius);
		} else {
			center = { __x: width / 2, __y: height / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return center;
	}
	,
	findRadialPoint: function (center, angle, radius) {
		angle = angle / 180 * Math.PI;
		var y = center.__y + radius * Math.sin(angle);
		var x = center.__x + radius * Math.cos(angle);
		return { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	pointAtDistance: function (p1, p2, distance) {
		var x3 = p2.__x - p1.__x;
		var y3 = p2.__y - p1.__y;
		var length = Math.sqrt(x3 * x3 + y3 * y3);
		x3 = x3 / length * distance;
		y3 = y3 / length * distance;
		return { __x: p1.__x + x3, __y: p1.__y + y3, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getSegmentLength: function (p1, p2) {
		var a = Math.abs(p2.__x - p1.__x);
		var b = Math.abs(p2.__y - p1.__y);
		return Math.sqrt(a * a + b * b);
	}
	,
	getCenterFromArcSegment: function (startPoint, endPoint, radius, isCounter, isLargeArc) {
		var midway = { __x: (startPoint.__x + endPoint.__x) / 2, __y: (startPoint.__y + endPoint.__y) / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var vectorX = endPoint.__x - startPoint.__x;
		var vectorY = endPoint.__y - startPoint.__y;
		var vectorLength = Math.sqrt(vectorX * vectorX + vectorY * vectorY);
		var rotatedVectorX = vectorY;
		var rotatedVectorY = vectorX * -1;
		if (isLargeArc == isCounter) {
			rotatedVectorX = vectorY * -1;
			rotatedVectorY = vectorX;
		}
		var maxAbs = Math.max(Math.abs(rotatedVectorX), Math.abs(rotatedVectorY));
		rotatedVectorX = rotatedVectorX / maxAbs;
		rotatedVectorY = rotatedVectorY / maxAbs;
		var rotatedVectorLength = Math.sqrt(rotatedVectorX * rotatedVectorX + rotatedVectorY * rotatedVectorY);
		var normalizedVectorX = rotatedVectorX / rotatedVectorLength;
		var normalizedVectorY = rotatedVectorY / rotatedVectorLength;
		var halfChordLength = vectorLength / 2;
		var distToCenter = Math.sqrt(radius * radius - halfChordLength * halfChordLength);
		if ($.ig.util.isNaN(distToCenter)) {
			distToCenter = 0;
		}
		var centerVectorX = distToCenter * normalizedVectorX;
		var centerVectorY = distToCenter * normalizedVectorY;
		var center = { __x: midway.__x + centerVectorX, __y: midway.__y + centerVectorY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return center;
	}
	,
	getAngleTo: function (center, toPoint) {
		var radius = Math.sqrt(Math.pow(toPoint.__x - center.__x, 2) + Math.pow(toPoint.__y - center.__y, 2));
		var angle = Math.acos((toPoint.__x - center.__x) / radius);
		if ((toPoint.__y - center.__y) < 0) {
			angle = (2 * Math.PI) - angle;
		}
		return angle;
	}
	,
	getCircleIntersection: function (startPoint, endPoint, circleCenter, circleRadius) {
		var x1 = startPoint.__x - circleCenter.__x;
		var y1 = startPoint.__y - circleCenter.__y;
		var x2 = endPoint.__x - circleCenter.__x;
		var y2 = endPoint.__y - circleCenter.__y;
		var dx = x2 - x1;
		var dy = y2 - y1;
		var dr = Math.sqrt(dx * dx + dy * dy);
		var det = x1 * y2 - x2 * y1;
		var radSquared = circleRadius * circleRadius;
		var drSquared = dr * dr;
		var detSquared = det * det;
		var disc = radSquared * drSquared - detSquared;
		if (disc < 0) {
			return new $.ig.Tuple$2($.ig.Point.prototype.$type, $.ig.Point.prototype.$type, { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
		var signDy = 1;
		if (dy < 0) {
			signDy = -1;
		}
		var interX1 = (det * dy + signDy * dx * Math.sqrt(disc)) / drSquared;
		var interX2 = (det * dy - signDy * dx * Math.sqrt(disc)) / drSquared;
		var interY1 = (-1 * det * dx + Math.abs(dy) * Math.sqrt(disc)) / drSquared;
		var interY2 = (-1 * det * dx - Math.abs(dy) * Math.sqrt(disc)) / drSquared;
		return new $.ig.Tuple$2($.ig.Point.prototype.$type, $.ig.Point.prototype.$type, { __x: interX1 + circleCenter.__x, __y: interY1 + circleCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, { __x: interX2 + circleCenter.__x, __y: interY2 + circleCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	isPointNearLineSegment: function (targetPoint, startPoint, endPoint, closeness) {
		var closeness2 = closeness * closeness;
		var x1 = startPoint.__x;
		var y1 = startPoint.__y;
		var x2 = endPoint.__x;
		var y2 = endPoint.__y;
		var x0 = targetPoint.__x;
		var y0 = targetPoint.__y;
		if (y1 == y2) {
			var yClose = Math.abs(y1 - y0) < closeness;
			var xInRange = x0 >= Math.min(x1, x2) - closeness && x0 <= Math.max(x1, x2) + closeness;
			if (yClose && xInRange) {
				return true;
			} else {
				return false;
			}
		}
		if (x1 == x2) {
			var xClose = Math.abs(x1 - x0) < closeness;
			var yInRange = y0 >= Math.min(y1, y2) - closeness && y0 <= Math.max(y1, y2) + closeness;
			if (xClose && yInRange) {
				return true;
			} else {
				return false;
			}
		}
		var dx = x2 - x1;
		var dy = y2 - y1;
		var segDistance2 = dx * dx + dy * dy;
		if (segDistance2 == 0) {
			return (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) < closeness2;
		}
		var t = ((x0 - x1) * dx + (y0 - y1) * dy) / segDistance2;
		t = t < 0 ? 0 : (t > 1 ? 1 : t);
		var xt = x1 + dx * t;
		var yt = y1 + dy * t;
		var dist = (xt - x0) * (xt - x0) + (yt - y0) * (yt - y0);
		if (dist < closeness2) {
			return true;
		}
		return false;
	}
	,
	isPointNearPolyline: function (targetPoint, firstPoint, linePoints, closeness) {
		var startPoint;
		var endPoint;
		var closeness2 = closeness * closeness;
		var lineCount = linePoints.count();
		if (lineCount == 0) {
			return (targetPoint.__x - firstPoint.__x) * (targetPoint.__x - firstPoint.__x) + (targetPoint.__y - firstPoint.__y) * (targetPoint.__y - firstPoint.__y) < closeness2;
		}
		var x0 = targetPoint.__x;
		var y0 = targetPoint.__y;
		for (var i = 0; i < lineCount; i++) {
			if (i == 0) {
				endPoint = linePoints.item(i);
				startPoint = firstPoint;
			} else {
				endPoint = linePoints.item(i);
				startPoint = linePoints.item(i - 1);
			}
			var x1 = startPoint.__x;
			var y1 = startPoint.__y;
			var x2 = endPoint.__x;
			var y2 = endPoint.__y;
			if (y1 == y2) {
				var yClose = Math.abs(y1 - y0) < closeness;
				var xInRange = x0 >= Math.min(x1, x2) - closeness && x0 <= Math.max(x1, x2) + closeness;
				if (yClose && xInRange) {
					return true;
				} else {
					continue;
				}
			}
			if (x1 == x2) {
				var xClose = Math.abs(x1 - x0) < closeness;
				var yInRange = y0 >= Math.min(y1, y2) - closeness && y0 <= Math.max(y1, y2) + closeness;
				if (xClose && yInRange) {
					return true;
				} else {
					continue;
				}
			}
			var dx = x2 - x1;
			var dy = y2 - y1;
			var segDistance2 = dx * dx + dy * dy;
			if (segDistance2 == 0) {
				return (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) < closeness2;
			}
			var t = ((x0 - x1) * dx + (y0 - y1) * dy) / segDistance2;
			t = t < 0 ? 0 : (t > 1 ? 1 : t);
			var xt = x1 + dx * t;
			var yt = y1 + dy * t;
			var dist = (xt - x0) * (xt - x0) + (yt - y0) * (yt - y0);
			if (dist < closeness2) {
				return true;
			}
		}
		return false;
	}
	,
	$type: new $.ig.Type('GeometryUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('Numeric', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	solve1: function (a, b, c, r, u) {
		var j;
		var n = a.count();
		var gam = new Array(n);
		if (b.__inner[0] == 0) {
			return false;
		}
		var bet = b.__inner[0];
		u.__inner[0] = r.__inner[0] / (bet);
		for (j = 1; j < n; j++) {
			gam[j] = c.__inner[j - 1] / bet;
			bet = b.__inner[j] - a.__inner[j] * gam[j];
			if (bet == 0) {
				return false;
			}
			u.__inner[j] = (r.__inner[j] - a.__inner[j] * u.__inner[j - 1]) / bet;
		}
		for (j = (n - 2); j >= 0; j--) {
			u.__inner[j] -= gam[j + 1] * u.__inner[j + 1];
		}
		return true;
	}
	,
	solve: function (a, b) {
		var n = a.getLength(0);
		var indxc = new Array(n);
		var indxr = new Array(n);
		var ipiv = new Array(n);
		for (var i = 0; i < n; i++) {
			ipiv[i] = 0;
		}
		for (var i1 = 0; i1 < n; i1++) {
			var big = 0;
			var irow = 0;
			var icol = 0;
			for (var j = 0; j < n; j++) {
				if (ipiv[j] != 1) {
					for (var k = 0; k < n; k++) {
						if (ipiv[k] == 0) {
							if (Math.abs(a[j][k]) >= big) {
								big = Math.abs(a[j][k]);
								irow = j;
								icol = k;
							}
						}
					}
				}
			}
			++(ipiv[icol]);
			if (irow != icol) {
				for (var j1 = 0; j1 < n; j1++) {
					var t = a[irow][j1];
					a[irow][j1] = a[icol][j1];
					a[icol][j1] = t;
				}
				{
					var t1 = b[irow];
					b[irow] = b[icol];
					b[icol] = t1;
				}
			}
			indxr[i1] = irow;
			indxc[i1] = icol;
			if (a[icol][icol] == 0) {
				return false;
			}
			var pivinv = 1 / a[icol][icol];
			a[icol][icol] = 1;
			for (var j2 = 0; j2 < n; j2++) {
				a[icol][j2] *= pivinv;
			}
			b[icol] *= pivinv;
			for (var j3 = 0; j3 < n; j3++) {
				if (j3 != icol) {
					var dum = a[j3][icol];
					a[j3][icol] = 0;
					for (var l = 0; l < n; l++) {
						a[j3][l] -= a[icol][l] * dum;
					}
					b[j3] -= b[icol] * dum;
				}
			}
		}
		for (var i2 = n - 1; i2 >= 0; i2--) {
			if (indxr[i2] != indxc[i2]) {
				for (var j4 = 0; j4 < n; j4++) {
					var t2 = a[j4][indxr[i2]];
					a[j4][indxr[i2]] = a[j4][indxc[i2]];
					a[j4][indxc[i2]] = t2;
				}
			}
		}
		return true;
	}
	,
	safeCubicSplineFit: function (count, x, y, yp1, ypn) {
		var ret = new $.ig.List$1(Number, 0);
		for (var i = 0; i < count; ++i) {
			while (i < count && ($.ig.util.isNaN(x(i)) || $.ig.util.isNaN(y(i)))) {
				ret.add(NaN);
				++i;
			}
			var j = i;
			while (i < count && !$.ig.util.isNaN(x(i)) && !$.ig.util.isNaN(y(i))) {
				++i;
			}
			--i;
			if (i - j > 0) {
				ret.addRange($.ig.Numeric.prototype.cubicSplineFit1(j, i - j + 1, x, y, yp1, ypn));
			} else {
				for (; j <= i; ++j) {
					ret.add(NaN);
				}
			}
		}
		return ret.toArray();
	}
	,
	cubicSplineFit1: function (start, count, x, y, yp1, ypn) {
		return $.ig.Numeric.prototype.cubicSplineFit(count, function (i) { return x(i + start); }, function (i) { return y(i + start); }, yp1, ypn);
	}
	,
	cubicSplineFit: function (count, x, y, yp1, ypn) {
		var u = new Array(count - 1);
		var y2 = new Array(count);
		y2[0] = $.ig.util.isNaN(yp1) ? 0 : -0.5;
		u[0] = $.ig.util.isNaN(yp1) ? 0 : (3 / (x(1) - x(0))) * ((y(1) - y(0)) / (x(1) - x(0)) - yp1);
		for (var i = 1; i < count - 1; i++) {
			var sig = (x(i) - x(i - 1)) / (x(i + 1) - x(i - 1));
			var p = sig * y2[i - 1] + 2;
			y2[i] = (sig - 1) / p;
			u[i] = (y(i + 1) - y(i)) / (x(i + 1) - x(i)) - (y(i) - y(i - 1)) / (x(i) - x(i - 1));
			u[i] = (6 * u[i] / (x(i + 1) - x(i - 1)) - sig * u[i - 1]) / p;
		}
		var qn = $.ig.util.isNaN(ypn) ? 0 : 0.5;
		var un = $.ig.util.isNaN(ypn) ? 0 : (3 / (x(count - 1) - x(count - 2))) * (ypn - (y(count - 1) - y(count - 2)) / (x(count - 1) - x(count - 2)));
		y2[count - 1] = (un - qn * u[count - 2]) / (qn * y2[count - 2] + 1);
		for (var i1 = count - 2; i1 >= 0; i1--) {
			y2[i1] = y2[i1] * y2[i1 + 1] + u[i1];
		}
		return y2;
	}
	,
	cubicSplineEvaluate: function (x, x1, y1, x2, y2, u1, u2) {
		var h = x2 - x1;
		var a = (x2 - x) / h;
		var b = (x - x1) / h;
		return a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
	}
	,
	spline2D1: function (count, x, y, stiffness) {
		var result = new $.ig.PathFigureCollection();
		var currentSegmentStart = 0;
		var currentSegmentEnd = -1;
		var valueX = NaN;
		var valueY = NaN;
		for (var i = 0; i < count; i++) {
			valueX = x(i);
			valueY = y(i);
			if ($.ig.util.isNaN(valueX) || $.ig.util.isNaN(valueY)) {
				currentSegmentEnd = i - 1;
				if (currentSegmentEnd - currentSegmentStart > 0) {
					result.add($.ig.Numeric.prototype.spline2D(currentSegmentStart, currentSegmentEnd, x, y, stiffness));
				}
				currentSegmentStart = i + 1;
			}
		}
		if (!$.ig.util.isNaN(valueX) && !$.ig.util.isNaN(valueY)) {
			currentSegmentEnd = count - 1;
		}
		if (currentSegmentEnd - currentSegmentStart > 0) {
			result.add($.ig.Numeric.prototype.spline2D(currentSegmentStart, currentSegmentEnd, x, y, stiffness));
		}
		return result;
	}
	,
	spline2D: function (startIndex, endIndex, x, y, stiffness) {
		stiffness = 0.5 * $.ig.MathUtil.prototype.clamp($.ig.util.isNaN(stiffness) ? 0.5 : stiffness, 0, 1);
		var pathFigure = new $.ig.PathFigure();
		var count = endIndex - startIndex + 1;
		if (count < 2) {
			return pathFigure;
		}
		if (count == 2) {
			pathFigure.__startPoint = { __x: x(startIndex), __y: y(startIndex), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var newSeg = (function () {
				var $ret = new $.ig.LineSegment(1);
				$ret.point({ __x: x(startIndex + 1), __y: y(startIndex + 1), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				return $ret;
			}());
			pathFigure.__segments.add(newSeg);
			return pathFigure;
		}
		var Segment = new $.ig.PolyBezierSegment();
		var pix = x(startIndex);
		var piy = y(startIndex);
		var pixnext = x(startIndex + 1);
		var piynext = y(startIndex + 1);
		while (pixnext == pix && piynext == piy && startIndex + 1 <= endIndex) {
			startIndex++;
			pixnext = x(startIndex + 1);
			piynext = y(startIndex + 1);
		}
		var tix = pixnext - pix;
		var tiy = piynext - piy;
		var li = Math.sqrt(tix * tix + tiy * tiy);
		for (var j = startIndex + 1; j < endIndex; ++j) {
			var pjx = x(j);
			var pjy = y(j);
			if (pjx == pix && pjy == piy) {
				continue;
			}
			var tjx = x(j + 1) - x(j - 1);
			var tjy = y(j + 1) - y(j - 1);
			var lj = tjx * tjx + tjy * tjy;
			if (lj < 0.01) {
				tjx = -(y(j + 1) - y(j));
				tjy = x(j + 1) - x(j);
				lj = tjx * tjx + tjy * tjy;
			}
			lj = Math.sqrt(lj);
			var d = stiffness * Math.sqrt((pjx - pix) * (pjx - pix) + (pjy - piy) * (pjy - piy));
			if (lj > 0.01) {
				Segment.points().add({ __x: pix + tix * d / li, __y: piy + tiy * d / li, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				Segment.points().add({ __x: pjx - tjx * d / lj, __y: pjy - tjy * d / lj, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				Segment.points().add({ __x: pjx, __y: pjy, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				pix = pjx;
				piy = pjy;
				tix = tjx;
				tiy = tjy;
				li = lj;
			}
		}
		{
			var j1 = endIndex;
			var pjx1 = x(j1);
			var pjy1 = y(j1);
			var tjx1 = x(j1) - x(j1 - 1);
			var tjy1 = y(j1) - y(j1 - 1);
			var lj1 = tjx1 * tjx1 + tjy1 * tjy1;
			var d1 = stiffness * Math.sqrt((pjx1 - pix) * (pjx1 - pix) + (pjy1 - piy) * (pjy1 - piy));
			Segment.points().add({ __x: pix + tix * d1 / li, __y: piy + tiy * d1 / li, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			Segment.points().add({ __x: pjx1 - tjx1 * d1 / lj1, __y: pjy1 - tjy1 * d1 / lj1, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			Segment.points().add({ __x: pjx1, __y: pjy1, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
		pathFigure.__startPoint = { __x: x(startIndex), __y: y(startIndex), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		pathFigure.__segments.add(Segment);
		return pathFigure;
	}
	,
	$type: new $.ig.Type('Numeric', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LeastSquaresFit', 'Numeric', {
	test: function () {
		return $.ig.LeastSquaresFit.prototype.linearTest() && $.ig.LeastSquaresFit.prototype.logarithmicTest() && $.ig.LeastSquaresFit.prototype.exponentialTest() && $.ig.LeastSquaresFit.prototype.powerLawTest() && $.ig.LeastSquaresFit.prototype.quadraticTest() && $.ig.LeastSquaresFit.prototype.cubicTest() && $.ig.LeastSquaresFit.prototype.quarticTest() && $.ig.LeastSquaresFit.prototype.quinticTest();
	}
	,
	init: function () {
		$.ig.Numeric.prototype.init.call(this);
	},
	linearFit: function (n, x, y) {
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var N = 0;
		for (var i = 0; i < n; ++i) {
			var xi = x(i);
			var yi = y(i);
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi)) {
				s0 += yi;
				s1 += xi * xi;
				s2 += xi;
				s3 += xi * yi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var A = (s0 * s1 - s2 * s3) / (N * s1 - s2 * s2);
		var B = (N * s3 - s2 * s0) / (N * s1 - s2 * s2);
		return [ A, B ];
	}
	,
	linearEvaluate: function (a, x) {
		if (a.length != 2) {
			return NaN;
		}
		return a[0] + a[1] * x;
	}
	,
	linearTest: function () {
		var random = new $.ig.Random(0);
		var coeffs = new Array(2);
		for (var i = 0; i < coeffs.length; ++i) {
			coeffs[i] = 10 * random.nextDouble();
		}
		var x = new $.ig.List$1(Number, 0);
		var y = new $.ig.List$1(Number, 0);
		for (var i1 = -100; i1 < 100; ++i1) {
			var X = i1;
			var Y = $.ig.LeastSquaresFit.prototype.linearEvaluate(coeffs, X);
			if (!$.ig.util.isNaN(Y)) {
				x.add(X);
				y.add(Y);
			}
		}
		var fit = $.ig.LeastSquaresFit.prototype.linearFit(x.count(), function (i) {
			return x.__inner[i];
		}, function (i) {
			return y.__inner[i];
		});
		for (var i2 = 0; i2 < coeffs.length; ++i2) {
			if (Math.abs(coeffs[i2] - fit[i2]) > 0.0001) {
			}
		}
		return true;
	}
	,
	logarithmicFit: function (n, x, y) {
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var N = 0;
		for (var i = 0; i < n; ++i) {
			var xi = x(i);
			var yi = y(i);
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && xi > 0) {
				var lnxi = Math.log(xi);
				s0 += yi * lnxi;
				s1 += yi;
				s2 += lnxi;
				s3 += lnxi * lnxi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var B = (N * s0 - s1 * s2) / (N * s3 - s2 * s2);
		var A = (s1 - B * s2) / N;
		return [ A, B ];
	}
	,
	logarithmicEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || Number.isInfinity(x) || $.ig.util.isNaN(x)) {
			return NaN;
		}
		return a[0] + a[1] * Math.log(x);
	}
	,
	logarithmicTest: function () {
		var random = new $.ig.Random(0);
		var coeffs = new Array(2);
		for (var i = 0; i < coeffs.length; ++i) {
			coeffs[i] = 10 * random.nextDouble();
		}
		var x = new $.ig.List$1(Number, 0);
		var y = new $.ig.List$1(Number, 0);
		for (var i1 = 1; i1 < 100; ++i1) {
			var X = i1;
			var Y = $.ig.LeastSquaresFit.prototype.logarithmicEvaluate(coeffs, X);
			if (!$.ig.util.isNaN(Y)) {
				x.add(X);
				y.add(Y);
			}
		}
		var fit = $.ig.LeastSquaresFit.prototype.logarithmicFit(x.count(), function (i) {
			return x.__inner[i];
		}, function (i) {
			return y.__inner[i];
		});
		for (var i2 = 0; i2 < coeffs.length; ++i2) {
			if (Math.abs(coeffs[i2] - fit[i2]) > 0.0001) {
			}
		}
		return true;
	}
	,
	exponentialFit: function (n, x, y) {
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var s4 = 0;
		var N = 0;
		for (var i = 0; i < n; ++i) {
			var xi = x(i);
			var yi = y(i);
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && yi > 0) {
				var lnyi = Math.log(yi);
				s0 += xi * xi * yi;
				s1 += yi * lnyi;
				s2 += xi * yi;
				s3 += xi * yi * lnyi;
				s4 += yi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var a = (s0 * s1 - s2 * s3) / (s4 * s0 - s2 * s2);
		var B = (s4 * s3 - s2 * s1) / (s4 * s0 - s2 * s2);
		return [ Math.exp(a), B ];
	}
	,
	exponentialEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || Number.isInfinity(x) || $.ig.util.isNaN(x)) {
			return NaN;
		}
		return a[0] * Math.exp(a[1] * x);
	}
	,
	exponentialTest: function () {
		var random = new $.ig.Random(0);
		var coeffs = new Array(2);
		for (var i = 0; i < coeffs.length; ++i) {
			coeffs[i] = 2 * random.nextDouble();
		}
		var x = new $.ig.List$1(Number, 0);
		var y = new $.ig.List$1(Number, 0);
		for (var i1 = 1; i1 < 100; ++i1) {
			var X = i1;
			var Y = $.ig.LeastSquaresFit.prototype.exponentialEvaluate(coeffs, X);
			if (!$.ig.util.isNaN(Y)) {
				x.add(X);
				y.add(Y);
			}
		}
		var fit = $.ig.LeastSquaresFit.prototype.exponentialFit(x.count(), function (i) {
			return x.__inner[i];
		}, function (i) {
			return y.__inner[i];
		});
		for (var i2 = 0; i2 < coeffs.length; ++i2) {
			if (Math.abs(coeffs[i2] - fit[i2]) > 0.0001) {
				return false;
			}
		}
		return true;
	}
	,
	powerLawFit: function (n, x, y) {
		var s0 = 0;
		var s1 = 0;
		var s2 = 0;
		var s3 = 0;
		var N = 0;
		for (var i = 0; i < n; ++i) {
			var xi = x(i);
			var yi = y(i);
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(yi) && xi > 0 && yi > 0) {
				var lnxi = Math.log(x(i));
				var lnyi = Math.log(y(i));
				s0 += lnxi * lnyi;
				s1 += lnxi;
				s2 += lnyi;
				s3 += lnxi * lnxi;
				++N;
			}
		}
		if (N < 2) {
			return null;
		}
		var B = (N * s0 - s1 * s2) / (N * s3 - s1 * s1);
		var A = Math.exp((s2 - B * s1) / N);
		return [ A, B ];
	}
	,
	powerLawEvaluate: function (a, x) {
		if (a.length != 2 || x < 0 || Number.isInfinity(x) || $.ig.util.isNaN(x)) {
			return NaN;
		}
		return a[0] * Math.pow(x, a[1]);
	}
	,
	powerLawTest: function () {
		var random = new $.ig.Random(0);
		var coeffs = new Array(2);
		for (var i = 0; i < coeffs.length; ++i) {
			coeffs[i] = 10 * random.nextDouble();
		}
		var x = new $.ig.List$1(Number, 0);
		var y = new $.ig.List$1(Number, 0);
		for (var i1 = -100; i1 < 100; ++i1) {
			x.add(i1);
			y.add($.ig.LeastSquaresFit.prototype.powerLawEvaluate(coeffs, i1));
		}
		var fit = $.ig.LeastSquaresFit.prototype.powerLawFit(x.count(), function (i) {
			return x.__inner[i];
		}, function (i) {
			return y.__inner[i];
		});
		for (var i2 = 0; i2 < coeffs.length; ++i2) {
			if (Math.abs(coeffs[i2] - fit[i2]) > 0.0001) {
				return false;
			}
		}
		return true;
	}
	,
	quadraticFit: function (n, x, y) {
		return $.ig.LeastSquaresFit.prototype.polynomialFit(n, 2, x, y);
	}
	,
	quadraticEvaluate: function (a, x) {
		return $.ig.LeastSquaresFit.prototype.polynomialEvaluate(a, x);
	}
	,
	quadraticTest: function () {
		return $.ig.LeastSquaresFit.prototype.polynomialTest(2);
	}
	,
	cubicFit: function (n, x, y) {
		return $.ig.LeastSquaresFit.prototype.polynomialFit(n, 3, x, y);
	}
	,
	cubicEvaluate: function (a, x) {
		return $.ig.LeastSquaresFit.prototype.polynomialEvaluate(a, x);
	}
	,
	cubicTest: function () {
		return $.ig.LeastSquaresFit.prototype.polynomialTest(3);
	}
	,
	quarticFit: function (n, x, y) {
		return $.ig.LeastSquaresFit.prototype.polynomialFit(n, 4, x, y);
	}
	,
	quarticEvaluate: function (a, x) {
		return $.ig.LeastSquaresFit.prototype.polynomialEvaluate(a, x);
	}
	,
	quarticTest: function () {
		return $.ig.LeastSquaresFit.prototype.polynomialTest(4);
	}
	,
	quinticFit: function (n, x, y) {
		return $.ig.LeastSquaresFit.prototype.polynomialFit(n, 5, x, y);
	}
	,
	quinticEvaluate: function (a, x) {
		return $.ig.LeastSquaresFit.prototype.polynomialEvaluate(a, x);
	}
	,
	quinticTest: function () {
		return $.ig.LeastSquaresFit.prototype.polynomialTest(5);
	}
	,
	polynomialFit: function (n, k, x, y) {
		var ps = new Array(1 + 2 * k);
		for (var ind1 = 0; ind1 < ps.length; ind1++) {
			ps[ind1] = 0;
		}
		var A = (function () {
			var $ret = new Array($firstRank = k + 1);
			var $currRet = $ret;
			for (var $rankInit = 0; $rankInit < $firstRank; $rankInit++) {
				$currRet[$rankInit] = new Array(k + 1);
			}
			return $ret;
		}());
		var B = new Array(k + 1);
		for (var ind2 = 0; ind2 < B.length; ind2++) {
			B[ind2] = 0;
		}
		var N = 0;
		for (var i = 0; i < n; ++i) {
			var s = 1;
			var xi = x(i);
			if (!$.ig.util.isNaN(xi) && !$.ig.util.isNaN(y(i))) {
				for (var p = 0; p < ps.length; ++p) {
					ps[p] += s;
					s *= xi;
					++N;
				}
			}
		}
		if (N < k) {
			return null;
		}
		for (var i1 = 0; i1 <= k; ++i1) {
			for (var j = 0; j <= k; ++j) {
				A[i1][j] = ps[i1 + j];
			}
		}
		for (var i2 = 0; i2 < n; ++i2) {
			var xi1 = x(i2);
			var yi = y(i2);
			if (!$.ig.util.isNaN(xi1) && !$.ig.util.isNaN(yi)) {
				for (var j1 = 0; j1 <= k; ++j1) {
					B[j1] += (Math.pow(xi1, j1) * yi);
				}
			}
		}
		return $.ig.Numeric.prototype.solve(A, B) ? B : null;
	}
	,
	polynomialEvaluate: function (a, x) {
		if (a.length < 1 || Number.isInfinity(x) || $.ig.util.isNaN(x)) {
			return NaN;
		}
		var y = 0;
		for (var i = 0; i < a.length; ++i) {
			y += a[i] * Math.pow(x, i);
		}
		return y;
	}
	,
	polynomialTest: function (k) {
		var random = new $.ig.Random(0);
		var coeffs = new Array(k + 1);
		for (var i = 0; i < coeffs.length; ++i) {
			coeffs[i] = 2 * random.nextDouble();
		}
		var x = new $.ig.List$1(Number, 0);
		var y = new $.ig.List$1(Number, 0);
		for (var i1 = -100; i1 < 100; ++i1) {
			var X = i1;
			var Y = $.ig.LeastSquaresFit.prototype.polynomialEvaluate(coeffs, X);
			if (!$.ig.util.isNaN(Y)) {
				x.add(X);
				y.add(Y);
			}
		}
		var fit = $.ig.LeastSquaresFit.prototype.polynomialFit(x.count(), k, function (i) {
			return x.__inner[i];
		}, function (i) {
			return y.__inner[i];
		});
		for (var i2 = 0; i2 < k; ++i2) {
			if (Math.abs(coeffs[i2] - fit[i2]) > 0.0001) {
				return false;
			}
		}
		return true;
	}
	,
	$type: new $.ig.Type('LeastSquaresFit', $.ig.Numeric.prototype.$type)
}, true);

$.ig.util.defType('MathUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	asinh: function (angle) {
		return Math.log(angle + Math.sqrt(angle * angle + 1));
	}
	,
	hypot: function (x, y) {
		return Math.sqrt(x * x + y * y);
	}
	,
	sqr: function (x) {
		return x * x;
	}
	,
	gammaLn: function (x) {
		if (x <= 0) {
			return NaN;
		}
		var cof = [ 57.156235665862923, -59.597960355475493, 14.136097974741746, -0.49191381609762019, 3.3994649984811891E-05, 4.6523628927048578E-05, -9.8374475304879565E-05, 0.00015808870322491249, -0.00021026444172410488, 0.00021743961811521265, -0.00016431810653676389, 8.441822398385275E-05, -2.6190838401581408E-05, 3.6899182659531625E-06 ];
		var y = x;
		var t = (x + 0.5) * Math.log(x + 5.2421875) - (x + 5.2421875);
		var s = 0.99999999999999711;
		for (var j = 0; j < 14; j++) {
			s += cof[j] / ++y;
		}
		return t + Math.log(2.5066282746310007 * s / x);
	}
	,
	clamp: function (value, minimum, maximum) {
		return Math.min(maximum, Math.max(minimum, value));
	}
	,
	radians: function (degrees) {
		return Math.PI * degrees / 180;
	}
	,
	degrees: function (radians) {
		return 180 * radians / Math.PI;
	}
	,
	noise: function (x, y, z) {
		var X = $.ig.truncate(Math.floor(x)) & 255;
		var Y = $.ig.truncate(Math.floor(y)) & 255;
		var Z = $.ig.truncate(Math.floor(z)) & 255;
		x -= Math.floor(x);
		y -= Math.floor(y);
		z -= Math.floor(z);
		var u = $.ig.MathUtil.prototype.fade(x);
		var v = $.ig.MathUtil.prototype.fade(y);
		var w = $.ig.MathUtil.prototype.fade(z);
		var A = $.ig.MathUtil.prototype._basis[X] + Y;
		var AA = $.ig.MathUtil.prototype._basis[A] + Z;
		var AB = $.ig.MathUtil.prototype._basis[A + 1] + Z;
		var B = $.ig.MathUtil.prototype._basis[X + 1] + Y;
		var BA = $.ig.MathUtil.prototype._basis[B] + Z;
		var BB = $.ig.MathUtil.prototype._basis[B + 1] + Z;
		return $.ig.MathUtil.prototype.lerp(w, $.ig.MathUtil.prototype.lerp(v, $.ig.MathUtil.prototype.lerp(u, $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[AA], x, y, z), $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[BA], x - 1, y, z)), $.ig.MathUtil.prototype.lerp(u, $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[AB], x, y - 1, z), $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[BB], x - 1, y - 1, z))), $.ig.MathUtil.prototype.lerp(v, $.ig.MathUtil.prototype.lerp(u, $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[AA + 1], x, y, z - 1), $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[BA + 1], x - 1, y, z - 1)), $.ig.MathUtil.prototype.lerp(u, $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[AB + 1], x, y - 1, z - 1), $.ig.MathUtil.prototype.grad($.ig.MathUtil.prototype._basis[BB + 1], x - 1, y - 1, z - 1))));
	}
	,
	fade: function (t) {
		return t * t * t * (t * (t * 6 - 15) + 10);
	}
	,
	lerp: function (t, a, b) {
		return a + t * (b - a);
	}
	,
	grad: function (hash, x, y, z) {
		var h = hash & 15;
		var u = h < 8 ? x : y;
		var v = h < 4 ? y : h == 12 || h == 14 ? x : z;
		return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);
	}
	,
	niceFloor: function (value) {
		if (value == 0) {
			return 0;
		}
		if (value < 0) {
			return -$.ig.MathUtil.prototype.niceCeiling(-value);
		}
		var expv = $.ig.truncate(Math.floor(Math.log10(value)));
		var f = value / $.ig.MathUtil.prototype.expt(10, expv);
		var nf = f < 2 ? 1 : (f < 5 ? 2 : (f < 10 ? 5 : 10));
		return nf * $.ig.MathUtil.prototype.expt(10, expv);
	}
	,
	niceRound: function (value) {
		if (value == 0) {
			return 0;
		}
		if (value < 0) {
			return -$.ig.MathUtil.prototype.niceRound(-value);
		}
		var expv = $.ig.truncate(Math.floor(Math.log10(value)));
		var f = value / $.ig.MathUtil.prototype.expt(10, expv);
		var nf = f < 1 ? 1 : (f < 3 ? 2 : (f < 7 ? 5 : 10));
		return nf * $.ig.MathUtil.prototype.expt(10, expv);
	}
	,
	niceCeiling: function (value) {
		if (value == 0) {
			return 0;
		}
		if (value < 0) {
			return -$.ig.MathUtil.prototype.niceFloor(-value);
		}
		var expv = $.ig.truncate(Math.floor(Math.log10(value)));
		var f = value / $.ig.MathUtil.prototype.expt(10, expv);
		var nf = f <= 1 ? 1 : (f <= 2 ? 2 : (f <= 5 ? 5 : 10));
		return nf * $.ig.MathUtil.prototype.expt(10, expv);
	}
	,
	expt: function (a, n) {
		var x = 1;
		for (; n > 0; --n) {
			x *= a;
		}
		for (; n < 0; ++n) {
			x /= a;
		}
		return x;
	}
	,
	min3: function (v1, v2, v3) {
		return Math.min(v1, Math.min(v2, v3));
	}
	,
	max3: function (v1, v2, v3) {
		return Math.max(v1, Math.max(v2, v3));
	}
	,
	min: function (a) {
		var min = a[0];
		for (var i = 1; i < a.length; ++i) {
			min = Math.min(min, a[i]);
		}
		return min;
	}
	,
	max: function (a) {
		var max = a[0];
		for (var i = 1; i < a.length; ++i) {
			max = Math.max(max, a[i]);
		}
		return max;
	}
	,
	$type: new $.ig.Type('MathUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PolygonUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	polygonContainsPoint: function (points, pt) {
		if (points == null) {
			return false;
		}
		var pointsCount = points.count();
		if (pointsCount < 4) {
			return false;
		}
		var c = false;
		for (var i = 0, j = pointsCount - 1; i < pointsCount; j = i++) {
			if (((points.item(i).__y > pt.__y) != (points.item(j).__y > pt.__y)) && (pt.__x < (points.item(j).__x - points.item(i).__x) * (pt.__y - points.item(i).__y) / (points.item(j).__y - points.item(i).__y) + points.item(i).__x)) {
				c = !c;
			}
		}
		return c;
	}
	,
	$type: new $.ig.Type('PolygonUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('IPool$1', 'Object', {
	$type: new $.ig.Type('IPool$1', null)
}, true);

$.ig.util.defType('IIndexedPool$1', 'Object', {
	$type: new $.ig.Type('IIndexedPool$1', null, [$.ig.IPool$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('Pool$1', 'Object', {
	$t: null,
	init: function ($t) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.active(new $.ig.List$1(this.$t, 0));
		this.inactive(new $.ig.List$1(this.$t, 0));
	},
	_create: null,
	create: function (value) {
		if (arguments.length === 1) {
			this._create = value;
			return value;
		} else {
			return this._create;
		}
	}
	,
	_disactivate: null,
	disactivate: function (value) {
		if (arguments.length === 1) {
			this._disactivate = value;
			return value;
		} else {
			return this._disactivate;
		}
	}
	,
	_activate: null,
	activate: function (value) {
		if (arguments.length === 1) {
			this._activate = value;
			return value;
		} else {
			return this._activate;
		}
	}
	,
	_destroy: null,
	destroy: function (value) {
		if (arguments.length === 1) {
			this._destroy = value;
			return value;
		} else {
			return this._destroy;
		}
	}
	,
	item: function (index) {
		if (index >= this.count()) {
			this.count(index + 1);
		}
		return this.active().__inner[index];
	}
	,
	clear: function () {
		this.count(0);
	}
	,
	count: function (value) {
		if (arguments.length === 1) {
			var activeCount = this.active().count();
			while (value > this.active().count() && this.inactive().count() > 0) {
				var item = this.inactive().__inner[this.inactive().count() - 1];
				this.active().add(item);
				this.inactive().removeAt(this.inactive().count() - 1);
				if (this.activate() != null) {
					this.activate()(item);
				}
			}
			while (value > this.active().count() && this.inactive().count() == 0) {
				var item1 = this.create()();
				this.active().add(item1);
				if (this.activate() != null) {
					this.activate()(item1);
				}
			}
			var inactiveCount = 2;
			while (activeCount != 0) {
				activeCount >>= 1;
				inactiveCount <<= 1;
			}
			while (value < this.active().count()) {
				var item2 = this.active().__inner[this.active().count() - 1];
				this.active().removeAt(this.active().count() - 1);
				if (this.disactivate() != null) {
					this.disactivate()(item2);
				}
				if (this.inactive().count() < inactiveCount) {
					this.inactive().add(item2);
				} else {
					if (this.destroy() != null) {
						this.destroy()(item2);
					}
				}
			}
			if (inactiveCount < this.inactive().count()) {
				for (var i = inactiveCount; i < this.inactive().count(); ++i) {
					this.destroy()(this.inactive().__inner[i]);
				}
				this.inactive().removeRange(inactiveCount, this.inactive().count() - inactiveCount);
			}
			return value;
		} else {
			return this.active().count();
		}
	}
	,
	_active: null,
	active: function (value) {
		if (arguments.length === 1) {
			this._active = value;
			return value;
		} else {
			return this._active;
		}
	}
	,
	_inactive: null,
	inactive: function (value) {
		if (arguments.length === 1) {
			this._inactive = value;
			return value;
		} else {
			return this._inactive;
		}
	}
	,
	doToAll: function (action) {
		for (var i = 0; i < this.inactive().count(); i++) {
			action(this.inactive().__inner[i]);
		}
		for (var i1 = 0; i1 < this.active().count(); i1++) {
			action(this.active().__inner[i1]);
		}
	}
	,
	$type: new $.ig.Type('Pool$1', $.ig.Object.prototype.$type, [$.ig.IIndexedPool$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('IHashPool$2', 'Object', {
	$type: new $.ig.Type('IHashPool$2', null, [$.ig.IPool$1.prototype.$type.specialize(1)])
}, true);

$.ig.util.defType('HashPool$2', 'Object', {
	$tKey: null,
	$tValue: null,
	_inactive: null,
	inactive: function (value) {
		if (arguments.length === 1) {
			this._inactive = value;
			return value;
		} else {
			return this._inactive;
		}
	}
	,
	_active: null,
	active: function (value) {
		if (arguments.length === 1) {
			this._active = value;
			return value;
		} else {
			return this._active;
		}
	}
	,
	init: function ($tKey, $tValue) {
		this.$tKey = $tKey;
		this.$tValue = $tValue;
		this.$type = this.$type.specialize(this.$tKey, this.$tValue);
		$.ig.Object.prototype.init.call(this);
		this.inactive(new $.ig.List$1(this.$tValue, 0));
		this.active(new $.ig.Dictionary$2(this.$tKey, this.$tValue, 0));
	},
	_create: null,
	create: function (value) {
		if (arguments.length === 1) {
			this._create = value;
			return value;
		} else {
			return this._create;
		}
	}
	,
	_disactivate: null,
	disactivate: function (value) {
		if (arguments.length === 1) {
			this._disactivate = value;
			return value;
		} else {
			return this._disactivate;
		}
	}
	,
	_activate: null,
	activate: function (value) {
		if (arguments.length === 1) {
			this._activate = value;
			return value;
		} else {
			return this._activate;
		}
	}
	,
	_destroy: null,
	destroy: function (value) {
		if (arguments.length === 1) {
			this._destroy = value;
			return value;
		} else {
			return this._destroy;
		}
	}
	,
	item: function (key) {
		var $self = this;
		var ret;
		if (!(function () { var $ret = $self.active().tryGetValue(key, ret); ret = $ret.p1; return $ret.ret; }())) {
			if (this.inactive().count() > 0) {
				ret = this.inactive().__inner[this.inactive().count() - 1];
				this.inactive().removeAt(this.inactive().count() - 1);
			} else {
				ret = this.create()();
			}
			if (this.activate() != null) {
				this.activate()(ret);
			}
			this.active().item(key, ret);
		}
		return ret;
	}
	,
	activeKeys: function () {
		return this.active().keys();
	}
	,
	isActiveKey: function (key) {
		return this.active().containsKey(key);
	}
	,
	remove: function (key) {
		var $self = this;
		var remove;
		if ((function () { var $ret = $self.active().tryGetValue(key, remove); remove = $ret.p1; return $ret.ret; }())) {
			this.active().remove(key);
			if (this.disactivate() != null) {
				this.disactivate()(remove);
			}
			this.inactive().add(remove);
			var activeCount = this.active().count();
			var inactiveCount = 2;
			while (activeCount != 0) {
				activeCount >>= 1;
				inactiveCount <<= 1;
			}
			if (inactiveCount < this.inactive().count()) {
				for (var i = inactiveCount; i < this.inactive().count(); ++i) {
					this.destroy()(this.inactive().__inner[i]);
				}
				this.inactive().removeRange(inactiveCount, this.inactive().count() - inactiveCount);
			}
		}
	}
	,
	clear: function () {
		var deactivate = new $.ig.List$1(this.$tKey, 0);
		var en = this.active().keys().getEnumerator();
		while (en.moveNext()) {
			var active = en.current();
			deactivate.add(active);
		}
		var en1 = deactivate.getEnumerator();
		while (en1.moveNext()) {
			var key = en1.current();
			this.remove(key);
		}
	}
	,
	activeCount: function () {
		return this.active().count();
	}
	,
	doToAll: function (action) {
		for (var i = 0; i < this.inactive().count(); i++) {
			action(this.inactive().__inner[i]);
		}
		var en = this.active().values().getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			action(item);
		}
	}
	,
	$type: new $.ig.Type('HashPool$2', $.ig.Object.prototype.$type, [$.ig.IHashPool$2.prototype.$type.specialize(0, 1)])
}, true);

$.ig.util.defType('RectUtil', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getCenter: function (rect) {
		if (rect.isEmpty()) {
			return { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return { __x: 0.5 * (rect.left() + rect.right()), __y: 0.5 * (rect.bottom() + rect.top()), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getArea: function (rect) {
		if (rect.isEmpty()) {
			return 0;
		}
		return rect.width() * rect.height();
	}
	,
	duplicate: function (rect) {
		if (rect.isEmpty()) {
			return rect;
		}
		return new $.ig.Rect(0, rect.left(), rect.top(), rect.width(), rect.height());
	}
	,
	getLeader: function (rect, anchor) {
		if (rect.containsPoint(anchor)) {
			return anchor;
		}
		var C = { __x: rect.left() + 0.5 * rect.width(), __y: rect.top() + 0.5 * rect.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var D = { __x: anchor.__x - C.__x, __y: anchor.__y - C.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var p;
		if (D.__x != 0) {
			p = (rect.left() - C.__x) / D.__x;
			var y = C.__y + p * D.__y;
			if (y > rect.top() && y < rect.bottom()) {
				return p > 0 ? { __x: rect.left(), __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName } : { __x: rect.right(), __y: C.__y - p * D.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			}
		}
		p = (rect.top() - C.__y) / D.__y;
		var x = C.__x + p * D.__x;
		return p > 0 ? { __x: x, __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName } : { __x: C.__x - p * D.__x, __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getDistanceSquared1: function (rect, pt) {
		if (rect.isEmpty()) {
			return NaN;
		}
		return $.ig.RectUtil.prototype.getDistanceSquared(rect, pt.__x, pt.__y);
	}
	,
	getDistanceSquared2: function (rect, rc) {
		if (rect.isEmpty()) {
			return Number.POSITIVE_INFINITY;
		}
		var d2 = $.ig.RectUtil.prototype.getDistanceSquared(rect, rc.left(), rc.top());
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rect, rc.left(), rc.bottom()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rect, rc.right(), rc.bottom()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rect, rc.right(), rc.top()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rc, rect.left(), rect.top()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rc, rect.left(), rect.bottom()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rc, rect.right(), rect.bottom()));
		}
		if (d2 > 0) {
			d2 = Math.min(d2, $.ig.RectUtil.prototype.getDistanceSquared(rc, rect.right(), rect.top()));
		}
		return d2;
	}
	,
	getDistanceSquared: function (rc, X, Y) {
		var vs = X - rc.left();
		var vt = Y - rc.top();
		var s = rc.width() * vs;
		var t = rc.height() * vt;
		if (s > 0) {
			var s0 = rc.width() * rc.width();
			if (s < s0) {
				vs -= (s / s0) * rc.width();
			} else {
				vs -= rc.width();
			}
		}
		if (t > 0) {
			var t0 = rc.height() * rc.height();
			if (t < t0) {
				vt -= (t / t0) * rc.height();
			} else {
				vt -= rc.height();
			}
		}
		return vs * vs + vt * vt;
	}
	,
	contains: function (rect, rc) {
		if (rect.isEmpty() || rc.isEmpty()) {
			return false;
		}
		if (rect.left() > rc.left()) {
			return false;
		}
		if (rect.right() < rc.right()) {
			return false;
		}
		if (rect.top() > rc.top()) {
			return false;
		}
		if (rect.bottom() < rc.bottom()) {
			return false;
		}
		return true;
	}
	,
	intersectsWith: function (rect, rc) {
		if (rect.isEmpty() || rc.isEmpty()) {
			return false;
		}
		if (rect.right() < rc.left()) {
			return false;
		}
		if (rect.left() > rc.right()) {
			return false;
		}
		if (rect.top() > rc.bottom()) {
			return false;
		}
		if (rect.bottom() < rc.top()) {
			return false;
		}
		return true;
	}
	,
	intersectionArea: function (rect, rc) {
		if (rect.isEmpty() || rc.isEmpty()) {
			return 0;
		}
		var width = Math.min(rect.right(), rc.right()) - Math.max(rect.left(), rc.left());
		if (width <= 0) {
			return 0;
		}
		var height = Math.min(rect.bottom(), rc.bottom()) - Math.max(rect.top(), rc.top());
		if (height <= 0) {
			return 0;
		}
		return width * height;
	}
	,
	getInflated: function (rect, width, height) {
		if (rect.isEmpty()) {
			return rect;
		}
		return new $.ig.Rect(0, rect.x() - width, rect.y() - height, Math.max(0, rect.width() + 2 * width), Math.max(0, rect.height() + 2 * height));
	}
	,
	inflateBy: function (rect, dx, dy) {
		rect.x(rect.x() - dx);
		rect.y(rect.y() - dy);
		var width = rect.width() + 2 * dx;
		var height = rect.height() + 2 * dy;
		rect.width(width > 1 ? width : 1);
		rect.height(height > 1 ? height : 1);
		return rect;
	}
	,
	inflate1: function (rect, dx, dy) {
		rect.x(rect.x() - dx);
		rect.y(rect.y() - dy);
		var width = rect.width() + 2 * dx;
		var height = rect.height() + 2 * dy;
		rect.width(width > 1 ? width : 1);
		rect.height(height > 1 ? height : 1);
		return rect;
	}
	,
	inflate: function (rect, thickness) {
		var newX = rect.x() - thickness;
		var newY = rect.y() - thickness;
		var width = rect.width() + thickness + thickness;
		var height = rect.height() + thickness + thickness;
		var newWidth = width > 0 ? width : 0;
		var newHeight = height > 0 ? height : 0;
		return new $.ig.Rect(0, newX, newY, newWidth, newHeight);
	}
	,
	round: function (rect) {
		rect.x(Math.round(rect.x()));
		rect.y(Math.round(rect.y()));
		rect.width(Math.round(rect.width()));
		rect.height(Math.round(rect.height()));
		return rect;
	}
	,
	isNull: function (rect) {
		return rect.x() == 0 && rect.y() == 0 && rect.width() == 0 && rect.height() == 0;
	}
	,
	size: function (rect) {
		var value = new $.ig.Size(1, rect.width(), rect.height());
		return value;
	}
	,
	normalize: function (current, rect) {
		var normalizeRect = $.ig.RectUtil.prototype.normalize1(current, $.ig.RectUtil.prototype.size(rect));
		return normalizeRect;
	}
	,
	normalize1: function (current, size) {
		var normalizeRect = current;
		normalizeRect.x(current.x() / size.width());
		normalizeRect.y(current.y() / size.height());
		normalizeRect.width(current.width() / size.width());
		normalizeRect.height(current.height() / size.height());
		return normalizeRect;
	}
	,
	getTopLeft: function (rect) {
		var value = { __x: rect.x(), __y: rect.y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return value;
	}
	,
	getTopRight: function (rect) {
		var value = { __x: rect.x() + rect.width(), __y: rect.y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return value;
	}
	,
	getBottomLeft: function (rect) {
		var value = { __x: rect.x(), __y: rect.y() + rect.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return value;
	}
	,
	getBottomRight: function (rect) {
		var value = { __x: rect.x() + rect.width(), __y: rect.y() + rect.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return value;
	}
	,
	getCorners: function (rect) {
		var points = (function () {
			var $ret = new $.ig.List$1($.ig.Point.prototype.$type, 0);
			$ret.add($.ig.RectUtil.prototype.getTopLeft(rect));
			$ret.add($.ig.RectUtil.prototype.getTopRight(rect));
			$ret.add($.ig.RectUtil.prototype.getBottomRight(rect));
			$ret.add($.ig.RectUtil.prototype.getBottomLeft(rect));
			return $ret;
		}());
		return points;
	}
	,
	rotateAboutCenter: function (rect, angle) {
		angle = $.ig.GeometryUtil.prototype.simplifyAngle(angle);
		if (angle == 0 || angle == 180) {
			return new $.ig.Rect(0, rect.left(), rect.top(), rect.width(), rect.height());
		}
		var center = $.ig.RectUtil.prototype.getCenter(rect);
		if (angle == 90 || angle == 270) {
			var halfHeight = rect.height() / 2;
			var halfWidth = rect.width() / 2;
			return new $.ig.Rect(0, center.__x - halfHeight, center.__y - halfWidth, rect.height(), rect.width());
		}
		return $.ig.RectUtil.prototype.rotateAboutPoint(rect, center.__x, center.__y, angle);
	}
	,
	rotateAboutPoint: function (rect, x, y, angle) {
		var points = $.ig.RectUtil.prototype.getCorners(rect);
		var angleRadians = $.ig.MathUtil.prototype.radians(angle);
		var cos = Math.cos(angleRadians);
		var sin = Math.sin(angleRadians);
		var top = 1.7976931348623157E+308;
		var left = 1.7976931348623157E+308;
		var right = -1.7976931348623157E+308;
		var bottom = -1.7976931348623157E+308;
		var p;
		for (var i = 0; i < points.count(); i++) {
			p = points.__inner[i];
			var rotatedX = (cos * (p.__x - x) - sin * (p.__y - y) + x);
			var rotatedY = (sin * (p.__x - x) + cos * (p.__y - y) + y);
			top = Math.min(top, rotatedY);
			left = Math.min(left, rotatedX);
			right = Math.max(right, rotatedX);
			bottom = Math.max(bottom, rotatedY);
		}
		var ret = new $.ig.Rect(0, left, top, right - left, bottom - top);
		return ret;
	}
	,
	$type: new $.ig.Type('RectUtil', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('IVisualData', 'Object', {
	$type: new $.ig.Type('IVisualData', null)
}, true);

$.ig.util.defType('PrimitiveVisualData', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
	},
	init1: function (initNumber, name) {
		$.ig.Object.prototype.init.call(this);
		this.name(name);
		this.tags(new $.ig.ShapeTags());
		this.appearance(new $.ig.PrimitiveAppearanceData());
	},
	_appearance: null,
	appearance: function (value) {
		if (arguments.length === 1) {
			this._appearance = value;
			return value;
		} else {
			return this._appearance;
		}
	}
	,
	_tags: null,
	tags: function (value) {
		if (arguments.length === 1) {
			this._tags = value;
			return value;
		} else {
			return this._tags;
		}
	}
	,
	type: function () {
	}
	,
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	scaleByViewport: function (viewport) {
		this.appearance().scaleByViewport(viewport);
	}
	,
	getPoints: function (settings) {
		var points = new $.ig.List$1($.ig.List$1.prototype.$type.specialize($.ig.Point.prototype.$type), 0);
		this.getPointsOverride(points, settings);
		return points;
	}
	,
	getPointsOverride: function (points, settings) {
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("appearance: " + (this.appearance() != null ? this.appearance().serialize() : "null") + ", ");
		sb.appendLine1("tags: [");
		for (var i = 0; i < this.tags().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("\"" + this.tags().__inner[i] + "\"");
		}
		sb.appendLine1("],");
		sb.appendLine1("type: \"" + this.type() + "\", ");
		sb.appendLine1("name: \"" + this.name() + "\", ");
		sb.appendLine1(this.serializeOverride());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	serializeOverride: function () {
		return "";
	}
	,
	$type: new $.ig.Type('PrimitiveVisualData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('PrimitiveVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.PrimitiveVisualData.prototype.$type, 0);
	},
	containingTag: function (tag) {
		var ret = new $.ig.PrimitiveVisualDataList();
		for (var i = 0; i < this.count(); i++) {
			var curr = this.__inner[i];
			for (var j = 0; j < curr.tags().count(); j++) {
				if (curr.tags().__inner[j] == tag) {
					ret.add(curr);
					break;
				}
			}
		}
		return ret;
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.append5("{ items: [");
		for (var i = 0; i < this.count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.__inner[i].serialize());
		}
		return sb.toString();
	}
	,
	$type: new $.ig.Type('PrimitiveVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.PrimitiveVisualData.prototype.$type), [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('LabelAppearanceData', 'Object', {
	init: function () {
		this._labelBrush = new $.ig.Color();
		$.ig.Object.prototype.init.call(this);
	},
	_text: null,
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	,
	_horizontalAlignment: null,
	horizontalAlignment: function (value) {
		if (arguments.length === 1) {
			this._horizontalAlignment = value;
			return value;
		} else {
			return this._horizontalAlignment;
		}
	}
	,
	_verticalAlignment: null,
	verticalAlignment: function (value) {
		if (arguments.length === 1) {
			this._verticalAlignment = value;
			return value;
		} else {
			return this._verticalAlignment;
		}
	}
	,
	_textAlignment: null,
	textAlignment: function (value) {
		if (arguments.length === 1) {
			this._textAlignment = value;
			return value;
		} else {
			return this._textAlignment;
		}
	}
	,
	_textWrapping: null,
	textWrapping: function (value) {
		if (arguments.length === 1) {
			this._textWrapping = value;
			return value;
		} else {
			return this._textWrapping;
		}
	}
	,
	_textPosition: null,
	textPosition: function (value) {
		if (arguments.length === 1) {
			this._textPosition = value;
			return value;
		} else {
			return this._textPosition;
		}
	}
	,
	_labelBrush: null,
	labelBrush: function (value) {
		if (arguments.length === 1) {
			this._labelBrush = value;
			return value;
		} else {
			return this._labelBrush;
		}
	}
	,
	_labelBrushExtended: null,
	labelBrushExtended: function (value) {
		if (arguments.length === 1) {
			this._labelBrushExtended = value;
			return value;
		} else {
			return this._labelBrushExtended;
		}
	}
	,
	_angle: 0,
	angle: function (value) {
		if (arguments.length === 1) {
			this._angle = value;
			return value;
		} else {
			return this._angle;
		}
	}
	,
	_opacity: 0,
	opacity: function (value) {
		if (arguments.length === 1) {
			this._opacity = value;
			return value;
		} else {
			return this._opacity;
		}
	}
	,
	_visibility: false,
	visibility: function (value) {
		if (arguments.length === 1) {
			this._visibility = value;
			return value;
		} else {
			return this._visibility;
		}
	}
	,
	_font: null,
	font: function (value) {
		if (arguments.length === 1) {
			this._font = value;
			return value;
		} else {
			return this._font;
		}
	}
	,
	_fontFamily: null,
	fontFamily: function (value) {
		if (arguments.length === 1) {
			this._fontFamily = value;
			return value;
		} else {
			return this._fontFamily;
		}
	}
	,
	_fontSize: 0,
	fontSize: function (value) {
		if (arguments.length === 1) {
			this._fontSize = value;
			return value;
		} else {
			return this._fontSize;
		}
	}
	,
	_fontWeight: null,
	fontWeight: function (value) {
		if (arguments.length === 1) {
			this._fontWeight = value;
			return value;
		} else {
			return this._fontWeight;
		}
	}
	,
	_fontStyle: null,
	fontStyle: function (value) {
		if (arguments.length === 1) {
			this._fontStyle = value;
			return value;
		} else {
			return this._fontStyle;
		}
	}
	,
	_fontStretch: null,
	fontStretch: function (value) {
		if (arguments.length === 1) {
			this._fontStretch = value;
			return value;
		} else {
			return this._fontStretch;
		}
	}
	,
	_marginLeft: 0,
	marginLeft: function (value) {
		if (arguments.length === 1) {
			this._marginLeft = value;
			return value;
		} else {
			return this._marginLeft;
		}
	}
	,
	_marginRight: 0,
	marginRight: function (value) {
		if (arguments.length === 1) {
			this._marginRight = value;
			return value;
		} else {
			return this._marginRight;
		}
	}
	,
	_marginTop: 0,
	marginTop: function (value) {
		if (arguments.length === 1) {
			this._marginTop = value;
			return value;
		} else {
			return this._marginTop;
		}
	}
	,
	_marginBottom: 0,
	marginBottom: function (value) {
		if (arguments.length === 1) {
			this._marginBottom = value;
			return value;
		} else {
			return this._marginBottom;
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("text: \"" + (this.text() != null ? this.text() : "") + "\", ");
		if (this.textAlignment() != null) {
			sb.appendLine1("textAlignment: \"" + this.textAlignment() + "\", ");
		}
		if (this.textWrapping() != null) {
			sb.appendLine1("textWrapping: \"" + this.textWrapping() + "\", ");
		}
		sb.appendLine1("labelBrush: " + ($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.labelBrush()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? $.ig.AppearanceHelper.prototype.serializeColor(this.labelBrush()) : "null") + ", ");
		sb.appendLine1("labelBrushExtended: " + (this.labelBrushExtended() != null ? this.labelBrushExtended().serialize() : "null") + ", ");
		sb.appendLine1("angle: " + this.angle() + ", ");
		sb.appendLine1("marginLeft: " + this.marginLeft() + ", ");
		sb.appendLine1("marginRight: " + this.marginRight() + ", ");
		sb.appendLine1("marginTop: " + this.marginTop() + ", ");
		sb.appendLine1("marginBottom: " + this.marginBottom() + ", ");
		sb.appendLine1("opacity: " + this.opacity() + ", ");
		sb.appendLine1("visibility: " + (this.visibility() ? "true" : "false") + ", ");
		if (this.horizontalAlignment() != null) {
			sb.appendLine1("horizontalAlignment: \"" + this.horizontalAlignment() + "\", ");
		}
		if (this.verticalAlignment() != null) {
			sb.appendLine1("verticalAlignment: \"" + this.verticalAlignment() + "\", ");
		}
		if (this.font() != null) {
			sb.appendLine1("font: \"" + this.font() + "\",");
		}
		if (this.fontFamily() != null) {
			sb.appendLine1("fontFamily: \"" + $.ig.util.replace(this.fontFamily(), "\"", "'") + "\",");
		}
		if (this.fontWeight() != null) {
			sb.appendLine1("fontWeight: \"" + this.fontWeight() + "\",");
		}
		if (this.fontStyle() != null) {
			sb.appendLine1("fontStyle: \"" + this.fontStyle() + "\",");
		}
		if (this.fontStretch() != null) {
			sb.appendLine1("fontStretch: \"" + this.fontStretch() + "\",");
		}
		sb.appendLine1("fontSize: " + this.fontSize());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('LabelAppearanceData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('BrushAppearanceData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	type: function () {
	}
	,
	serialize: function () {
		return "{ type: \"" + this.type() + "\", " + this.serializeOverride() + " }";
	}
	,
	serializeOverride: function () {
		return "";
	}
	,
	$type: new $.ig.Type('BrushAppearanceData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('SolidBrushAppearanceData', 'BrushAppearanceData', {
	init: function () {
		this._colorValue = new $.ig.Color();
		$.ig.BrushAppearanceData.prototype.init.call(this);
	},
	type: function () {
		return "solid";
	}
	,
	_colorValue: null,
	colorValue: function (value) {
		if (arguments.length === 1) {
			this._colorValue = value;
			return value;
		} else {
			return this._colorValue;
		}
	}
	,
	serializeOverride: function () {
		return "colorValue: " + ($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.colorValue()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? $.ig.AppearanceHelper.prototype.serializeColor(this.colorValue()) : "null");
	}
	,
	$type: new $.ig.Type('SolidBrushAppearanceData', $.ig.BrushAppearanceData.prototype.$type)
}, true);

$.ig.util.defType('LinearGradientBrushAppearanceData', 'BrushAppearanceData', {
	init: function () {
		$.ig.BrushAppearanceData.prototype.init.call(this);
		this.stops(new $.ig.List$1($.ig.GradientStopAppearanceData.prototype.$type, 0));
	},
	type: function () {
		return "linear";
	}
	,
	_startX: 0,
	startX: function (value) {
		if (arguments.length === 1) {
			this._startX = value;
			return value;
		} else {
			return this._startX;
		}
	}
	,
	_startY: 0,
	startY: function (value) {
		if (arguments.length === 1) {
			this._startY = value;
			return value;
		} else {
			return this._startY;
		}
	}
	,
	_endX: 0,
	endX: function (value) {
		if (arguments.length === 1) {
			this._endX = value;
			return value;
		} else {
			return this._endX;
		}
	}
	,
	_endY: 0,
	endY: function (value) {
		if (arguments.length === 1) {
			this._endY = value;
			return value;
		} else {
			return this._endY;
		}
	}
	,
	_stops: null,
	stops: function (value) {
		if (arguments.length === 1) {
			this._stops = value;
			return value;
		} else {
			return this._stops;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.append5("startX: " + this.startX() + ", endX: " + this.endX() + ", startY: " + this.startY() + ", endY: " + this.endY());
		sb.append5(", stops: [");
		for (var i = 0; i < this.stops().count(); i++) {
			if (i > 0) {
				sb.append5(", ");
			}
			sb.append5(this.stops().__inner[i].serialize());
		}
		sb.append5("]");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('LinearGradientBrushAppearanceData', $.ig.BrushAppearanceData.prototype.$type)
}, true);

$.ig.util.defType('GradientStopAppearanceData', 'Object', {
	init: function () {
		this._colorValue = new $.ig.Color();
		$.ig.Object.prototype.init.call(this);
	},
	_colorValue: null,
	colorValue: function (value) {
		if (arguments.length === 1) {
			this._colorValue = value;
			return value;
		} else {
			return this._colorValue;
		}
	}
	,
	_offset: 0,
	offset: function (value) {
		if (arguments.length === 1) {
			this._offset = value;
			return value;
		} else {
			return this._offset;
		}
	}
	,
	serialize: function () {
		return "{ " + "colorValue: " + ($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.colorValue()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? $.ig.AppearanceHelper.prototype.serializeColor(this.colorValue()) : "null") + ", offset: " + this.offset() + " }";
	}
	,
	$type: new $.ig.Type('GradientStopAppearanceData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('PrimitiveAppearanceData', 'Object', {
	init: function () {
		this._stroke = new $.ig.Color();
		this._fill = new $.ig.Color();
		$.ig.Object.prototype.init.call(this);
	},
	_stroke: null,
	stroke: function (value) {
		if (arguments.length === 1) {
			this._stroke = value;
			return value;
		} else {
			return this._stroke;
		}
	}
	,
	_strokeExtended: null,
	strokeExtended: function (value) {
		if (arguments.length === 1) {
			this._strokeExtended = value;
			return value;
		} else {
			return this._strokeExtended;
		}
	}
	,
	_fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this._fill = value;
			return value;
		} else {
			return this._fill;
		}
	}
	,
	_fillExtended: null,
	fillExtended: function (value) {
		if (arguments.length === 1) {
			this._fillExtended = value;
			return value;
		} else {
			return this._fillExtended;
		}
	}
	,
	_strokeThickness: 0,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this._strokeThickness = value;
			return value;
		} else {
			return this._strokeThickness;
		}
	}
	,
	_visibility: 0,
	visibility: function (value) {
		if (arguments.length === 1) {
			this._visibility = value;
			return value;
		} else {
			return this._visibility;
		}
	}
	,
	_opacity: 0,
	opacity: function (value) {
		if (arguments.length === 1) {
			this._opacity = value;
			return value;
		} else {
			return this._opacity;
		}
	}
	,
	_canvasLeft: 0,
	canvasLeft: function (value) {
		if (arguments.length === 1) {
			this._canvasLeft = value;
			return value;
		} else {
			return this._canvasLeft;
		}
	}
	,
	_canvasTop: 0,
	canvasTop: function (value) {
		if (arguments.length === 1) {
			this._canvasTop = value;
			return value;
		} else {
			return this._canvasTop;
		}
	}
	,
	_canvaZIndex: 0,
	canvaZIndex: function (value) {
		if (arguments.length === 1) {
			this._canvaZIndex = value;
			return value;
		} else {
			return this._canvaZIndex;
		}
	}
	,
	_dashArray: null,
	dashArray: function (value) {
		if (arguments.length === 1) {
			this._dashArray = value;
			return value;
		} else {
			return this._dashArray;
		}
	}
	,
	_dashCap: 0,
	dashCap: function (value) {
		if (arguments.length === 1) {
			this._dashCap = value;
			return value;
		} else {
			return this._dashCap;
		}
	}
	,
	scaleByViewport: function (viewport) {
		this.canvasLeft((this.canvasLeft() - viewport.left()) / viewport.width());
		this.canvasTop((this.canvasTop() - viewport.top()) / viewport.height());
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("stroke: " + ($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.stroke()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? $.ig.AppearanceHelper.prototype.serializeColor(this.stroke()) : "null") + ", ");
		sb.appendLine1("fill: " + ($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.fill()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? $.ig.AppearanceHelper.prototype.serializeColor(this.fill()) : "null") + ", ");
		sb.appendLine1("strokeExtended: " + (this.strokeExtended() != null ? this.strokeExtended().serialize() : "null") + ", ");
		sb.appendLine1("fillExtended: " + (this.fillExtended() != null ? this.fillExtended().serialize() : "null") + ", ");
		sb.appendLine1("strokeThickness: " + this.strokeThickness() + ", ");
		sb.appendLine1("visibility: " + (this.visibility() == $.ig.Visibility.prototype.visible ? "true" : "false") + ", ");
		sb.appendLine1("opacity: " + this.opacity() + ", ");
		sb.appendLine1("canvasLeft: " + this.canvasLeft() + ", ");
		sb.appendLine1("canvasTop: " + this.canvasTop() + ", ");
		sb.appendLine1("canvasZIndex: " + this.canvaZIndex() + ", ");
		sb.appendLine1("dashArray: null, ");
		sb.appendLine1("dashCap: " + this.dashCap());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('PrimitiveAppearanceData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('GetPointsSettings', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_ignoreFigureStartPoint: false,
	ignoreFigureStartPoint: function (value) {
		if (arguments.length === 1) {
			this._ignoreFigureStartPoint = value;
			return value;
		} else {
			return this._ignoreFigureStartPoint;
		}
	}
	,
	$type: new $.ig.Type('GetPointsSettings', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('RectangleVisualData', 'PrimitiveVisualData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, "rect1");
	},
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this._radiusX = value;
			return value;
		} else {
			return this._radiusX;
		}
	}
	,
	_radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this._radiusY = value;
			return value;
		} else {
			return this._radiusY;
		}
	}
	,
	serializeOverride: function () {
		return "width: " + this.width() + ", height: " + this.height() + ", radiusX: " + this.radiusX() + ", radiusY: " + this.radiusY();
	}
	,
	init1: function (initNumber, name, rect) {
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, name);
		this.width(rect.width());
		this.height(rect.height());
		this.radiusX(rect.radiusX());
		this.radiusY(rect.radiusY());
		$.ig.AppearanceHelper.prototype.getShapeAppearance(this.appearance(), rect);
	},
	type: function () {
		return "Rectangle";
	}
	,
	scaleByViewport: function (viewport) {
		$.ig.PrimitiveVisualData.prototype.scaleByViewport.call(this, viewport);
		this.width(this.width() / viewport.width());
		this.height(this.height() / viewport.height());
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		current.add({ __x: this.appearance().canvasLeft(), __y: this.appearance().canvasTop(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.appearance().canvasLeft() + this.width(), __y: this.appearance().canvasTop(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.appearance().canvasLeft() + this.width(), __y: this.appearance().canvasTop() + this.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.appearance().canvasLeft(), __y: this.appearance().canvasTop() + this.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('RectangleVisualData', $.ig.PrimitiveVisualData.prototype.$type)
}, true);

$.ig.util.defType('ShapeTags', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, String, 0);
	},
	$type: new $.ig.Type('ShapeTags', $.ig.List$1.prototype.$type.specialize(String))
}, true);

$.ig.util.defType('PolyLineVisualData', 'PrimitiveVisualData', {
	type: function () {
		return "Polyline";
	}
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, "polyLine1");
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
	},
	init1: function (initNumber, name, line) {
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, name);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
		for (var i = 0; i < line.points().count(); i++) {
			this.points().add(line.points().__inner[i]);
		}
		$.ig.AppearanceHelper.prototype.getShapeAppearance(this.appearance(), line);
	},
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("points: [");
		for (var i = 0; i < this.points().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("{ x: " + this.points().__inner[i].__x + ", y: " + this.points().__inner[i].__y + "}");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		$.ig.PrimitiveVisualData.prototype.scaleByViewport.call(this, viewport);
		for (var i = 0; i < this.points().count(); i++) {
			this.points().__inner[i] = { __x: (this.points().__inner[i].__x - viewport.left()) / viewport.width(), __y: (this.points().__inner[i].__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		for (var i = 0; i < this.points().count(); i++) {
			current.add(this.points().__inner[i]);
		}
	}
	,
	$type: new $.ig.Type('PolyLineVisualData', $.ig.PrimitiveVisualData.prototype.$type)
}, true);

$.ig.util.defType('PolygonVisualData', 'PrimitiveVisualData', {
	type: function () {
		return "Polygon";
	}
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, "polygon1");
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
	},
	init1: function (initNumber, name, polygon) {
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, name);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
		for (var i = 0; i < polygon.points().count(); i++) {
			this.points().add(polygon.points().__inner[i]);
		}
		$.ig.AppearanceHelper.prototype.getShapeAppearance(this.appearance(), polygon);
	},
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("points: [");
		for (var i = 0; i < this.points().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("{ x: " + this.points().__inner[i].__x + ", y: " + this.points().__inner[i].__y + "}");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		$.ig.PrimitiveVisualData.prototype.scaleByViewport.call(this, viewport);
		for (var i = 0; i < this.points().count(); i++) {
			this.points().__inner[i] = { __x: (this.points().__inner[i].__x - viewport.left()) / viewport.width(), __y: (this.points().__inner[i].__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		for (var i = 0; i < this.points().count(); i++) {
			current.add(this.points().__inner[i]);
		}
	}
	,
	$type: new $.ig.Type('PolygonVisualData', $.ig.PrimitiveVisualData.prototype.$type)
}, true);

$.ig.util.defType('PathVisualData', 'PrimitiveVisualData', {
	type: function () {
		return "Path";
	}
	,
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
				case 2:
					this.init2.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, "path1");
		this.data(new $.ig.List$1($.ig.GeometryData.prototype.$type, 0));
	},
	init1: function (initNumber, name, path) {
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, name);
		this.data($.ig.AppearanceHelper.prototype.fromGeometry(path.data()));
		$.ig.AppearanceHelper.prototype.getShapeAppearance(this.appearance(), path);
	},
	init2: function (initNumber, name, line) {
		$.ig.PrimitiveVisualData.prototype.init1.call(this, 1, name);
		this.data($.ig.AppearanceHelper.prototype.fromLineData(line));
		$.ig.AppearanceHelper.prototype.getShapeAppearance(this.appearance(), line);
	},
	_data: null,
	data: function (value) {
		if (arguments.length === 1) {
			this._data = value;
			return value;
		} else {
			return this._data;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("data: [");
		for (var i = 0; i < this.data().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5((this.data().__inner[i] != null ? this.data().__inner[i].serialize() : "null"));
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		$.ig.PrimitiveVisualData.prototype.scaleByViewport.call(this, viewport);
		var en = this.data().getEnumerator();
		while (en.moveNext()) {
			var data = en.current();
			data.scaleByViewport(viewport);
		}
	}
	,
	getPointsOverride: function (points, settings) {
		for (var i = 0; i < this.data().count(); i++) {
			var data = this.data().__inner[i];
			data.getPointsOverride(points, settings);
		}
	}
	,
	$type: new $.ig.Type('PathVisualData', $.ig.PrimitiveVisualData.prototype.$type)
}, true);

$.ig.util.defType('GeometryData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	type: function () {
	}
	,
	scaleByViewport: function (viewport) {
	}
	,
	getPointsOverride: function (points, settings) {
	}
	,
	serialize: function () {
		return "{ type: \"" + this.type() + "\", " + this.serializeOverride() + "}";
	}
	,
	serializeOverride: function () {
		return "";
	}
	,
	$type: new $.ig.Type('GeometryData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('PathGeometryData', 'GeometryData', {
	init: function () {
		$.ig.GeometryData.prototype.init.call(this);
		this.figures(new $.ig.List$1($.ig.PathFigureData.prototype.$type, 0));
	},
	type: function () {
		return "Path";
	}
	,
	_figures: null,
	figures: function (value) {
		if (arguments.length === 1) {
			this._figures = value;
			return value;
		} else {
			return this._figures;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("figures: [");
		for (var i = 0; i < this.figures().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.figures().__inner[i].serialize());
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		var en = this.figures().getEnumerator();
		while (en.moveNext()) {
			var figure = en.current();
			figure.scaleByViewport(viewport);
		}
	}
	,
	getPointsOverride: function (points, settings) {
		for (var i = 0; i < this.figures().count(); i++) {
			var figure = this.figures().__inner[i];
			figure.getPointsOverride(points, settings);
		}
	}
	,
	$type: new $.ig.Type('PathGeometryData', $.ig.GeometryData.prototype.$type)
}, true);

$.ig.util.defType('LineGeometryData', 'GeometryData', {
	init: function () {
		$.ig.GeometryData.prototype.init.call(this);
	},
	type: function () {
		return "Line";
	}
	,
	_x1: 0,
	x1: function (value) {
		if (arguments.length === 1) {
			this._x1 = value;
			return value;
		} else {
			return this._x1;
		}
	}
	,
	_y1: 0,
	y1: function (value) {
		if (arguments.length === 1) {
			this._y1 = value;
			return value;
		} else {
			return this._y1;
		}
	}
	,
	_x2: 0,
	x2: function (value) {
		if (arguments.length === 1) {
			this._x2 = value;
			return value;
		} else {
			return this._x2;
		}
	}
	,
	_y2: 0,
	y2: function (value) {
		if (arguments.length === 1) {
			this._y2 = value;
			return value;
		} else {
			return this._y2;
		}
	}
	,
	serializeOverride: function () {
		return "x1: " + this.x1() + ", y1: " + this.y1() + ", x2: " + this.x2() + ", y2:" + this.y2();
	}
	,
	scaleByViewport: function (viewport) {
		this.x1((this.x1() - viewport.left()) / viewport.width());
		this.y1((this.y1() - viewport.top()) / viewport.height());
		this.x2((this.x2() - viewport.left()) / viewport.width());
		this.y2((this.y2() - viewport.top()) / viewport.height());
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		current.add({ __x: this.x1(), __y: this.y1(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.x2(), __y: this.y2(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('LineGeometryData', $.ig.GeometryData.prototype.$type)
}, true);

$.ig.util.defType('RectangleGeometryData', 'GeometryData', {
	init: function () {
		$.ig.GeometryData.prototype.init.call(this);
	},
	type: function () {
		return "Rectangle";
	}
	,
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	serializeOverride: function () {
		return "x: " + this.x() + ", y: " + this.y() + ", width: " + this.width() + ", height: " + this.height();
	}
	,
	scaleByViewport: function (viewport) {
		this.x((this.x() - viewport.left()) / viewport.width());
		this.y((this.y() - viewport.top()) / viewport.height());
		this.width(this.width() / viewport.width());
		this.height(this.height() / viewport.height());
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		current.add({ __x: this.x(), __y: this.y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.x() + this.width(), __y: this.y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.x() + this.width(), __y: this.y() + this.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		current.add({ __x: this.x(), __y: this.y() + this.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('RectangleGeometryData', $.ig.GeometryData.prototype.$type)
}, true);

$.ig.util.defType('EllipseGeometryData', 'GeometryData', {
	init: function () {
		$.ig.GeometryData.prototype.init.call(this);
	},
	type: function () {
		return "Ellipse";
	}
	,
	_centerX: 0,
	centerX: function (value) {
		if (arguments.length === 1) {
			this._centerX = value;
			return value;
		} else {
			return this._centerX;
		}
	}
	,
	_centerY: 0,
	centerY: function (value) {
		if (arguments.length === 1) {
			this._centerY = value;
			return value;
		} else {
			return this._centerY;
		}
	}
	,
	_radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this._radiusX = value;
			return value;
		} else {
			return this._radiusX;
		}
	}
	,
	_radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this._radiusY = value;
			return value;
		} else {
			return this._radiusY;
		}
	}
	,
	serializeOverride: function () {
		return "centerX: " + this.centerX() + ", centerY: " + this.centerY() + ", radiusX: " + this.radiusX() + ", radiusY: " + this.radiusY();
	}
	,
	scaleByViewport: function (viewport) {
		this.centerX((this.centerX() - viewport.left()) / viewport.width());
		this.centerX((this.centerY() - viewport.top()) / viewport.height());
		this.radiusX(this.radiusX() / viewport.width());
		this.radiusY(this.radiusY() / viewport.height());
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		current.add({ __x: this.centerX(), __y: this.centerY(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('EllipseGeometryData', $.ig.GeometryData.prototype.$type)
}, true);

$.ig.util.defType('PathFigureData', 'Object', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this.segments(new $.ig.List$1($.ig.SegmentData.prototype.$type, 0));
		this.startPoint(new $.ig.Point(0));
	},
	init1: function (initNumber, fig) {
		$.ig.Object.prototype.init.call(this);
		this.segments(new $.ig.List$1($.ig.SegmentData.prototype.$type, 0));
		this.startPoint(fig.__startPoint);
		for (var i = 0; i < fig.__segments.count(); i++) {
			var seg = fig.__segments.__inner[i];
			var newData = null;
			switch (seg.type()) {
				case $.ig.PathSegmentType.prototype.line:
					newData = new $.ig.LineSegmentData(1, seg);
					break;
				case $.ig.PathSegmentType.prototype.polyLine:
					newData = new $.ig.PolylineSegmentData(1, seg);
					break;
				case $.ig.PathSegmentType.prototype.arc:
					newData = new $.ig.ArcSegmentData(1, seg);
					break;
				case $.ig.PathSegmentType.prototype.polyBezier:
					newData = new $.ig.PolyBezierSegmentData(1, seg);
					break;
				case $.ig.PathSegmentType.prototype.bezier:
					newData = new $.ig.BezierSegmentData(1, seg);
					break;
			}
			this.segments().add(newData);
		}
	},
	_startPoint: null,
	startPoint: function (value) {
		if (arguments.length === 1) {
			this._startPoint = value;
			return value;
		} else {
			return this._startPoint;
		}
	}
	,
	_segments: null,
	segments: function (value) {
		if (arguments.length === 1) {
			this._segments = value;
			return value;
		} else {
			return this._segments;
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		if ($.ig.Point.prototype.l_op_Inequality(this.startPoint(), null)) {
			sb.appendLine1("startPoint: { x: " + this.startPoint().__x + ", y: " + this.startPoint().__y + "}, ");
		}
		sb.appendLine1("segments: [");
		for (var i = 0; i < this.segments().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.segments().__inner[i].serialize());
		}
		sb.appendLine1("]");
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		if ($.ig.Point.prototype.l_op_Inequality(this.startPoint(), null)) {
			this.startPoint({ __x: (this.startPoint().__x - viewport.left()) / viewport.width(), __y: (this.startPoint().__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
		for (var i = 0; i < this.segments().count(); i++) {
			this.segments().__inner[i].scaleByViewport(viewport);
		}
	}
	,
	getPointsOverride: function (points, settings) {
		var current = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(current);
		if (!settings.ignoreFigureStartPoint()) {
			current.add({ __x: this.startPoint().__x, __y: this.startPoint().__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
		for (var i = 0; i < this.segments().count(); i++) {
			this.segments().__inner[i].getPointsOverride(current, settings);
		}
	}
	,
	$type: new $.ig.Type('PathFigureData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('SegmentData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	type: function () {
	}
	,
	scaleByViewport: function (viewport) {
	}
	,
	getPointsOverride: function (current, settings) {
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("type: \"" + this.type() + "\", ");
		sb.appendLine1(this.serializeOverride());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	serializeOverride: function () {
		return "";
	}
	,
	$type: new $.ig.Type('SegmentData', $.ig.Object.prototype.$type, [$.ig.IVisualData.prototype.$type])
}, true);

$.ig.util.defType('LineSegmentData', 'SegmentData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SegmentData.prototype.init.call(this);
		this.point(new $.ig.Point(0));
	},
	init1: function (initNumber, seg) {
		$.ig.SegmentData.prototype.init.call(this);
		this.point(seg.point());
	},
	type: function () {
		return "Line";
	}
	,
	_point: null,
	point: function (value) {
		if (arguments.length === 1) {
			this._point = value;
			return value;
		} else {
			return this._point;
		}
	}
	,
	serializeOverride: function () {
		return "point: { x: " + this.point().__x + ", y: " + this.point().__y + "}";
	}
	,
	scaleByViewport: function (viewport) {
		this.point({ __x: (this.point().__x - viewport.left()) / viewport.width(), __y: (this.point().__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	getPointsOverride: function (current, settings) {
		current.add({ __x: this.point().__x, __y: this.point().__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('LineSegmentData', $.ig.SegmentData.prototype.$type)
}, true);

$.ig.util.defType('PolylineSegmentData', 'SegmentData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
	},
	init1: function (initNumber, poly) {
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
		for (var i = 0; i < poly.__points.count(); i++) {
			this.points().add(poly.__points.__inner[i]);
		}
	},
	type: function () {
		return "Polyline";
	}
	,
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("points: [");
		for (var i = 0; i < this.points().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("{ x: " + this.points().__inner[i].__x + ", y: " + this.points().__inner[i].__y + "}");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		for (var i = 0; i < this.points().count(); i++) {
			this.points().__inner[i] = { __x: (this.points().__inner[i].__x - viewport.left()) / viewport.width(), __y: (this.points().__inner[i].__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getPointsOverride: function (current, settings) {
		for (var i = 0; i < this.points().count(); i++) {
			current.add({ __x: this.points().__inner[i].__x, __y: this.points().__inner[i].__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	$type: new $.ig.Type('PolylineSegmentData', $.ig.SegmentData.prototype.$type)
}, true);

$.ig.util.defType('BezierSegmentData', 'SegmentData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
	},
	init1: function (initNumber, segment) {
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
		this.points().add(segment.point1());
		this.points().add(segment.point2());
		this.points().add(segment.point3());
	},
	type: function () {
		return "Bezier";
	}
	,
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("points: [");
		for (var i = 0; i < this.points().count(); i++) {
			if ($.ig.Point.prototype.l_op_Equality(this.points().__inner[i], null)) {
				break;
			}
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("{ x: " + this.points().__inner[i].__x + ", y: " + this.points().__inner[i].__y + "}");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		for (var i = 0; i < this.points().count(); i++) {
			if ($.ig.Point.prototype.l_op_Equality(this.points().__inner[i], null)) {
				break;
			}
			this.points().__inner[i] = { __x: (this.points().__inner[i].__x - viewport.left()) / viewport.width(), __y: (this.points().__inner[i].__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getPointsOverride: function (current, settings) {
		for (var i = 0; i < this.points().count(); i++) {
			current.add({ __x: this.points().__inner[i].__x, __y: this.points().__inner[i].__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	$type: new $.ig.Type('BezierSegmentData', $.ig.SegmentData.prototype.$type)
}, true);

$.ig.util.defType('PolyBezierSegmentData', 'SegmentData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
	},
	init1: function (initNumber, poly) {
		$.ig.SegmentData.prototype.init.call(this);
		this.points(new $.ig.List$1($.ig.Point.prototype.$type, 0));
		for (var i = 0; i < poly.points().count(); i++) {
			this.points().add(poly.points().__inner[i]);
		}
	},
	type: function () {
		return "PolyBezierSpline";
	}
	,
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	serializeOverride: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("points: [");
		for (var i = 0; i < this.points().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5("{ x: " + this.points().__inner[i].__x + ", y: " + this.points().__inner[i].__y + "}");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		for (var i = 0; i < this.points().count(); i++) {
			this.points().__inner[i] = { __x: (this.points().__inner[i].__x - viewport.left()) / viewport.width(), __y: (this.points().__inner[i].__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getPointsOverride: function (current, settings) {
		for (var i = 0; i < this.points().count(); i++) {
			current.add({ __x: this.points().__inner[i].__x, __y: this.points().__inner[i].__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	$type: new $.ig.Type('PolyBezierSegmentData', $.ig.SegmentData.prototype.$type)
}, true);

$.ig.util.defType('ArcSegmentData', 'SegmentData', {
	init: function (initNumber) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.SegmentData.prototype.init.call(this);
		this.point(new $.ig.Point(0));
		this.isLargeArc(false);
		this.isCounterClockwise(true);
		this.rotationAngle(0);
	},
	init1: function (initNumber, arc) {
		$.ig.SegmentData.prototype.init.call(this);
		this.point(arc.point());
		this.isLargeArc(arc.isLargeArc());
		this.isCounterClockwise(arc.sweepDirection() == $.ig.SweepDirection.prototype.counterclockwise);
		this.sizeX(arc.size().width());
		this.sizeY(arc.size().height());
		this.rotationAngle(arc.rotationAngle());
	},
	type: function () {
		return "Arc";
	}
	,
	_point: null,
	point: function (value) {
		if (arguments.length === 1) {
			this._point = value;
			return value;
		} else {
			return this._point;
		}
	}
	,
	_isLargeArc: false,
	isLargeArc: function (value) {
		if (arguments.length === 1) {
			this._isLargeArc = value;
			return value;
		} else {
			return this._isLargeArc;
		}
	}
	,
	_isCounterClockwise: false,
	isCounterClockwise: function (value) {
		if (arguments.length === 1) {
			this._isCounterClockwise = value;
			return value;
		} else {
			return this._isCounterClockwise;
		}
	}
	,
	_sizeX: 0,
	sizeX: function (value) {
		if (arguments.length === 1) {
			this._sizeX = value;
			return value;
		} else {
			return this._sizeX;
		}
	}
	,
	_sizeY: 0,
	sizeY: function (value) {
		if (arguments.length === 1) {
			this._sizeY = value;
			return value;
		} else {
			return this._sizeY;
		}
	}
	,
	_rotationAngle: 0,
	rotationAngle: function (value) {
		if (arguments.length === 1) {
			this._rotationAngle = value;
			return value;
		} else {
			return this._rotationAngle;
		}
	}
	,
	serializeOverride: function () {
		return "point: { x: " + this.point().__x + ", y: " + this.point().__y + " }, isLargeArc: " + (this.isLargeArc() ? "true" : "false") + ", isCounterClockwise: " + (this.isCounterClockwise() ? "true" : "false") + ", sizeX: " + this.sizeX() + ", sizeY: " + this.sizeY() + ", rotationAngle: " + this.rotationAngle();
	}
	,
	scaleByViewport: function (viewport) {
		this.point({ __x: (this.point().__x - viewport.left()) / viewport.width(), __y: (this.point().__y - viewport.top()) / viewport.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.sizeX(this.sizeX() / viewport.width());
		this.sizeY(this.sizeY() / viewport.height());
	}
	,
	getPointsOverride: function (current, settings) {
		current.add({ __x: this.point().__x, __y: this.point().__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	$type: new $.ig.Type('ArcSegmentData', $.ig.SegmentData.prototype.$type)
}, true);

$.ig.util.defType('AppearanceHelper', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	fromBrush: function (b) {
		if (b == null) {
			return $.ig.Color.prototype.fromArgb(0, 0, 0, 0);
		}
		if ($.ig.Color.prototype.l_op_Equality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, b.color()), $.ig.util.toNullable($.ig.Color.prototype.$type, null))) {
			return $.ig.Color.prototype.fromArgb(0, 0, 0, 0);
		}
		return b.color();
	}
	,
	fromBrushExtended: function (b) {
		if (b == null) {
			return null;
		}
		if (b._isGradient) {
			var linear = new $.ig.LinearGradientBrushAppearanceData();
			var inLinear = b;
			linear.startX(inLinear._startX);
			linear.startY(inLinear._startY);
			linear.endX(inLinear._endX);
			linear.endY(inLinear._endY);
			var $t = inLinear._gradientStops;
			for (var i = 0; i < $t.length; i++) {
				var stop = $t[i];
				var newStop = new $.ig.GradientStopAppearanceData();
				newStop.colorValue(stop.color());
				newStop.offset(stop._offset);
				linear.stops().add(newStop);
			}
			return linear;
		} else if (b._isRadialGradient) {
			return null;
		} else {
			var solid = new $.ig.SolidBrushAppearanceData();
			solid.colorValue(b.color());
			return solid;
		}
		return null;
	}
	,
	getCanvasLeft: function (visual) {
		return visual.canvasLeft();
	}
	,
	getCanvasTop: function (visual) {
		return visual.canvasTop();
	}
	,
	getCanvasZIndex: function (line) {
		return line.canvasZIndex();
	}
	,
	fromPathData: function (path) {
		return $.ig.AppearanceHelper.prototype.fromGeometry(path.data());
	}
	,
	fromLineData: function (line) {
		var lineGeometry = new $.ig.LineGeometry();
		lineGeometry.endPoint({ __x: line.x2(), __y: line.y2(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		lineGeometry.startPoint({ __x: line.x1(), __y: line.y1(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		return $.ig.AppearanceHelper.prototype.fromGeometry(lineGeometry);
	}
	,
	fromGeometry: function (data) {
		if (data == null) {
			return new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
		}
		if ($.ig.util.cast($.ig.GeometryGroup.prototype.$type, data) !== null) {
			var ret = new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
			var group = data;
			for (var i = 0; i < group.children().count(); i++) {
				var items = $.ig.AppearanceHelper.prototype.fromGeometry(group.children().__inner[i]);
				for (var j = 0; j < items.count(); j++) {
					ret.add(items.__inner[j]);
				}
			}
			return ret;
		} else if ($.ig.util.cast($.ig.PathGeometry.prototype.$type, data) !== null) {
			return $.ig.AppearanceHelper.prototype.fromPathGeometry(data);
		} else if ($.ig.util.cast($.ig.LineGeometry.prototype.$type, data) !== null) {
			return $.ig.AppearanceHelper.prototype.fromLineGeometry(data);
		} else if ($.ig.util.cast($.ig.RectangleGeometry.prototype.$type, data) !== null) {
			return $.ig.AppearanceHelper.prototype.fromRectangleGeometry(data);
		} else if ($.ig.util.cast($.ig.EllipseGeometry.prototype.$type, data) !== null) {
			return $.ig.AppearanceHelper.prototype.fromEllipseGeometry(data);
		} else {
			throw new $.ig.Error(1, "not supported");
		}
	}
	,
	fromEllipseGeometry: function (ellipseGeometry) {
		var ret = new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
		var newData = new $.ig.EllipseGeometryData();
		ret.add(newData);
		newData.centerX(ellipseGeometry.center().__x);
		newData.centerY(ellipseGeometry.center().__y);
		newData.radiusX(ellipseGeometry.radiusX());
		newData.radiusY(ellipseGeometry.radiusY());
		return ret;
	}
	,
	fromRectangleGeometry: function (rectangleGeometry) {
		var ret = new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
		var newData = new $.ig.RectangleGeometryData();
		ret.add(newData);
		newData.x(rectangleGeometry.rect().x());
		newData.y(rectangleGeometry.rect().y());
		newData.width(rectangleGeometry.rect().width());
		newData.height(rectangleGeometry.rect().height());
		return ret;
	}
	,
	fromLineGeometry: function (lineGeometry) {
		var ret = new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
		var newData = new $.ig.LineGeometryData();
		ret.add(newData);
		newData.x1(lineGeometry.startPoint().__x);
		newData.y1(lineGeometry.startPoint().__y);
		newData.x2(lineGeometry.endPoint().__x);
		newData.y2(lineGeometry.endPoint().__y);
		return ret;
	}
	,
	fromPathGeometry: function (pathGeometry) {
		var ret = new $.ig.List$1($.ig.GeometryData.prototype.$type, 0);
		var newData = new $.ig.PathGeometryData();
		ret.add(newData);
		for (var i = 0; i < pathGeometry.figures().count(); i++) {
			var figure = pathGeometry.figures().__inner[i];
			var f = new $.ig.PathFigureData(1, figure);
			newData.figures().add(f);
		}
		return ret;
	}
	,
	getShapeAppearance: function (appearance, path) {
		appearance.stroke($.ig.AppearanceHelper.prototype.fromBrush(path.__stroke));
		appearance.fill($.ig.AppearanceHelper.prototype.fromBrush(path.__fill));
		appearance.strokeExtended($.ig.AppearanceHelper.prototype.fromBrushExtended(path.__stroke));
		appearance.fillExtended($.ig.AppearanceHelper.prototype.fromBrushExtended(path.__fill));
		appearance.strokeThickness(path.strokeThickness());
		appearance.dashArray(null);
		if (path.strokeDashArray() != null) {
			appearance.dashArray(path.strokeDashArray().asArray());
		}
		appearance.dashCap(path.strokeDashCap());
		appearance.visibility(path.__visibility);
		appearance.opacity(path.__opacity);
		appearance.canvasLeft($.ig.AppearanceHelper.prototype.getCanvasLeft(path));
		appearance.canvasTop($.ig.AppearanceHelper.prototype.getCanvasTop(path));
		appearance.canvaZIndex($.ig.AppearanceHelper.prototype.getCanvasZIndex(path));
	}
	,
	fromTextElement: function (frameworkElement, fontInfo) {
		var lad = new $.ig.LabelAppearanceData();
		var tb = frameworkElement;
		lad.text(tb.text());
		lad.labelBrush($.ig.AppearanceHelper.prototype.fromBrush(tb.fill()));
		lad.labelBrushExtended($.ig.AppearanceHelper.prototype.fromBrushExtended(tb.fill()));
		lad.visibility((tb.__visibility == $.ig.Visibility.prototype.visible) ? true : false);
		lad.opacity(tb.__opacity);
		if (fontInfo != null) {
			if (fontInfo.fontFamily() != null) {
				lad.fontFamily(fontInfo.fontFamily());
			}
			if (!$.ig.util.isNaN(fontInfo.fontSize())) {
				lad.fontSize(fontInfo.fontSize());
			}
			if (fontInfo.fontWeight() != null) {
				lad.fontWeight(fontInfo.fontWeight());
			}
			if (fontInfo.fontStyle() != null) {
				lad.fontStyle(fontInfo.fontStyle());
			}
			if (fontInfo.fontStretch() != null) {
				lad.fontStretch(fontInfo.fontStyle());
			}
		}
		var angle = 0;
		var xForm = tb.renderTransform();
		if ($.ig.util.cast($.ig.RotateTransform.prototype.$type, xForm) !== null) {
			var rt = $.ig.util.cast($.ig.RotateTransform.prototype.$type, xForm);
			angle = rt.angle();
		} else if ($.ig.util.cast($.ig.TransformGroup.prototype.$type, xForm) !== null) {
			var tg = $.ig.util.cast($.ig.TransformGroup.prototype.$type, xForm);
			var en = tg.children().getEnumerator();
			while (en.moveNext()) {
				var child = en.current();
				if ($.ig.util.cast($.ig.RotateTransform.prototype.$type, child) !== null) {
					var rt1 = $.ig.util.cast($.ig.RotateTransform.prototype.$type, child);
					angle = rt1.angle();
					break;
				}
			}
		}
		lad.angle(angle);
		return lad;
	}
	,
	serializeColor: function (color) {
		return "{ r: " + color.r() + ", g: " + color.g() + ", b: " + color.b() + ", a: " + color.a() + "}";
	}
	,
	serializeItems: function (sb, name, items, isFirst) {
		if (items != null) {
			if (!isFirst) {
				sb.append5(", ");
			}
			sb.append5(name);
			sb.append5(": [");
			var addedFirst = false;
			var en = items.getEnumerator();
			while (en.moveNext()) {
				var item = en.current();
				if (addedFirst) {
					sb.appendLine1(", ");
				} else {
					addedFirst = true;
				}
				sb.append5(item.serialize());
			}
			sb.appendLine1("]");
			return true;
		}
		return false;
	}
	,
	serializeItem: function (sb, name, item, isFirst) {
		if (item != null) {
			if (!isFirst) {
				sb.append5(", ");
			}
			sb.append5(name);
			sb.append5(": ");
			sb.appendLine1(item.serialize());
			return true;
		}
		return false;
	}
	,
	$type: new $.ig.Type('AppearanceHelper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TrendCalculators___STDEV__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__sma_5_0: null,
	__price_5_1: null,
	__buffer_5_2: null,
	__i_5_3: 0,
	__s_5_4: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__sma_5_0 = $.ig.TrendCalculators.prototype.sMA(this._sequence, this._period).getEnumerator();
					this.__price_5_1 = this._sequence.getEnumerator();
					this.__buffer_5_2 = new Array(this._period);
					this.__i_5_3 = 0;
					for (this.__i_5_3 = 0; this.__i_5_3 < this._period; this.__i_5_3++) {
						this.__buffer_5_2[this.__i_5_3] = 0;
					}
					this.__i_5_3 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__price_5_1.moveNext() && this.__sma_5_0.moveNext()) {
						this.__buffer_5_2[(this.__i_5_3++) % this._period] = this.__price_5_1.current();
						this.__s_5_4 = 0;
						if (this.__i_5_3 < this._period) {
							var effectivePeriod = 0;
							for (var j = 0; j < this.__i_5_3; j++) {
								var t = (this.__sma_5_0.current() - this.__buffer_5_2[j]);
								this.__s_5_4 += t * t;
								effectivePeriod++;
							}
							this.__2__current = Math.sqrt(this.__s_5_4 / effectivePeriod);
							this.__1__state = 1;
							return true;
						}
						for (var j1 = 0; j1 < this._period; ++j1) {
							var t1 = (this.__sma_5_0.current() - this.__buffer_5_2[j1]);
							this.__s_5_4 += t1 * t1;
						}
						this.__2__current = Math.sqrt(this.__s_5_4 / this._period);
						this.__1__state = 1;
						return true;
					}
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___STDEV__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___STDEV__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___MovingSum__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__buffer_5_0: null,
	__i_5_1: 0,
	__ms_5_2: 0,
	_valueEnumerator: null,
	__value_5_3: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__buffer_5_0 = new Array(this._period);
						this.__i_5_1 = 0;
						for (this.__i_5_1 = 0; this.__i_5_1 < this._period; this.__i_5_1++) {
							this.__buffer_5_0[this.__i_5_1] = 0;
						}
						this.__i_5_1 = 0;
						this.__ms_5_2 = NaN;
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_3 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_3)) {
								var next = this.__value_5_3;
								var cursor = this.__i_5_1 % this._period;
								if (this.__i_5_1 < this._period) {
									this.__ms_5_2 = $.ig.util.isNaN(this.__ms_5_2) ? next : this.__ms_5_2 + next;
								} else {
									this.__ms_5_2 = this.__ms_5_2 + next - this.__buffer_5_0[cursor];
								}
								this.__buffer_5_0[cursor] = next;
								++this.__i_5_1;
							}
							this.__2__current = this.__ms_5_2;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___MovingSum__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___MovingSum__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___SMA__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__buffer_5_0: null,
	__i_5_1: 0,
	__sma_5_2: 0,
	_valueEnumerator: null,
	__value_5_3: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__buffer_5_0 = new Array(this._period);
						this.__i_5_1 = 0;
						for (this.__i_5_1 = 0; this.__i_5_1 < this._period; this.__i_5_1++) {
							this.__buffer_5_0[this.__i_5_1] = 0;
						}
						this.__i_5_1 = 0;
						this.__sma_5_2 = NaN;
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_3 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_3)) {
								var next = this.__value_5_3 / this._period;
								var cursor = this.__i_5_1 % this._period;
								if (this.__i_5_1 < this._period) {
									this.__sma_5_2 = $.ig.util.isNaN(this.__sma_5_2) ? this.__value_5_3 : (this.__sma_5_2 * this.__i_5_1 + this.__value_5_3) / (this.__i_5_1 + 1);
								} else {
									this.__sma_5_2 = this.__sma_5_2 + next - this.__buffer_5_0[cursor];
								}
								this.__buffer_5_0[cursor] = next;
								++this.__i_5_1;
							}
							this.__2__current = this.__sma_5_2;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___SMA__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___SMA__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___CMA__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__cma_5_0: 0,
	__i_5_1: 0,
	_valueEnumerator: null,
	__value_5_2: 0,
	_sequence: null,
	__3__sequence: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__cma_5_0 = NaN;
						this.__i_5_1 = 0;
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_2 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_2)) {
								this.__cma_5_0 = $.ig.util.isNaN(this.__cma_5_0) ? this.__value_5_2 : (this.__cma_5_0 * this.__i_5_1 + this.__value_5_2) / (this.__i_5_1 + 1);
								++this.__i_5_1;
							}
							this.__2__current = this.__cma_5_0;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___CMA__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___CMA__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___MMA__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__i_5_0: 0,
	__mma_5_1: 0,
	__alpha_5_2: 0,
	_valueEnumerator: null,
	__value_5_3: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__i_5_0 = 0;
						this.__mma_5_1 = NaN;
						this.__alpha_5_2 = 1 / this._period;
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_3 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_3)) {
								if (this.__i_5_0 < this._period) {
									this.__mma_5_1 = $.ig.util.isNaN(this.__mma_5_1) ? this.__value_5_3 : (this.__mma_5_1 * this.__i_5_0 + this.__value_5_3) / (this.__i_5_0 + 1);
								} else {
									this.__mma_5_1 = (this.__value_5_3 - this.__mma_5_1) * this.__alpha_5_2 + this.__mma_5_1;
								}
								++this.__i_5_0;
							}
							this.__2__current = this.__mma_5_1;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___MMA__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___MMA__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___EMA__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__i_5_0: 0,
	__ema_5_1: 0,
	__alpha_5_2: 0,
	_valueEnumerator: null,
	__value_5_3: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__i_5_0 = 0;
						this.__ema_5_1 = NaN;
						this.__alpha_5_2 = 2 / (1 + this._period);
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_3 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_3)) {
								if (this.__i_5_0 < this._period) {
									this.__ema_5_1 = $.ig.util.isNaN(this.__ema_5_1) ? this.__value_5_3 : (this.__ema_5_1 * this.__i_5_0 + this.__value_5_3) / (this.__i_5_0 + 1);
								} else {
									this.__ema_5_1 = (this.__value_5_3 - this.__ema_5_1) * this.__alpha_5_2 + this.__ema_5_1;
								}
								++this.__i_5_0;
							}
							this.__2__current = this.__ema_5_1;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___EMA__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___EMA__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('TrendCalculators___WMA__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__buffer_5_0: null,
	__i_5_1: 0,
	__total_5_2: 0,
	__numerator_5_3: 0,
	__weightsum_5_4: 0,
	__wma_5_5: 0,
	_valueEnumerator: null,
	__value_5_6: 0,
	_sequence: null,
	__3__sequence: null,
	_period: 0,
	__3__period: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__buffer_5_0 = new Array(this._period);
						this.__i_5_1 = 0;
						for (this.__i_5_1 = 0; this.__i_5_1 < this._period; this.__i_5_1++) {
							this.__buffer_5_0[this.__i_5_1] = 0;
						}
						this.__total_5_2 = NaN;
						this.__numerator_5_3 = NaN;
						this.__weightsum_5_4 = NaN;
						this.__wma_5_5 = NaN;
						this.__i_5_1 = 0;
						this.__1__state = 1;
						this._valueEnumerator = this._sequence.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_6 = this._valueEnumerator.current();
							if (!$.ig.util.isNaN(this.__value_5_6)) {
								var cursor = this.__i_5_1 % this._period;
								if (this.__i_5_1 == 0) {
									this.__weightsum_5_4 = 1;
									this.__wma_5_5 = this.__numerator_5_3 = this.__total_5_2 = this.__value_5_6;
								} else if (this.__i_5_1 < this._period) {
									this.__weightsum_5_4 += (this.__i_5_1 + 1);
									this.__total_5_2 += this.__value_5_6;
									this.__numerator_5_3 += (this.__i_5_1 + 1) * this.__value_5_6;
									this.__wma_5_5 = this.__numerator_5_3 / this.__weightsum_5_4;
								} else {
									this.__numerator_5_3 = this.__numerator_5_3 + (this._period * this.__value_5_6) - this.__total_5_2;
									this.__wma_5_5 = this.__numerator_5_3 / this.__weightsum_5_4;
									this.__total_5_2 = this.__total_5_2 + this.__value_5_6 - this.__buffer_5_0[cursor];
								}
								this.__buffer_5_0[cursor] = this.__value_5_6;
								++this.__i_5_1;
							}
							this.__2__current = this.__wma_5_5;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.TrendCalculators___WMA__IteratorClass(0);
		}
		d__._sequence = this.__3__sequence;
		d__._period = this.__3__period;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('TrendCalculators___WMA__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.TouchGestureState.prototype.none = 0;
$.ig.TouchGestureState.prototype.pan = 1;
$.ig.TouchGestureState.prototype.zoom = 2;
$.ig.TouchGestureState.prototype.hold = 3;
$.ig.TouchGestureState.prototype.pendingPan = 4;
$.ig.TouchGestureState.prototype.flinging = 5;

$.ig.InteractionState.prototype.none = 0;
$.ig.InteractionState.prototype.dragZoom = 1;
$.ig.InteractionState.prototype.dragPan = 2;
$.ig.InteractionState.prototype.auto = 3;

$.ig.FastItemsSourceEventAction.prototype.remove = 0;
$.ig.FastItemsSourceEventAction.prototype.insert = 1;
$.ig.FastItemsSourceEventAction.prototype.replace = 2;
$.ig.FastItemsSourceEventAction.prototype.change = 3;
$.ig.FastItemsSourceEventAction.prototype.reset = 4;

$.ig.UnknownValuePlotting.prototype.linearInterpolate = 0;
$.ig.UnknownValuePlotting.prototype.dontPlot = 1;

$.ig.TrendLineType.prototype.none = 0;
$.ig.TrendLineType.prototype.linearFit = 1;
$.ig.TrendLineType.prototype.quadraticFit = 2;
$.ig.TrendLineType.prototype.cubicFit = 3;
$.ig.TrendLineType.prototype.quarticFit = 4;
$.ig.TrendLineType.prototype.quinticFit = 5;
$.ig.TrendLineType.prototype.logarithmicFit = 6;
$.ig.TrendLineType.prototype.exponentialFit = 7;
$.ig.TrendLineType.prototype.powerLawFit = 8;
$.ig.TrendLineType.prototype.simpleAverage = 9;
$.ig.TrendLineType.prototype.exponentialAverage = 10;
$.ig.TrendLineType.prototype.modifiedAverage = 11;
$.ig.TrendLineType.prototype.cumulativeAverage = 12;
$.ig.TrendLineType.prototype.weightedAverage = 13;

$.ig.InterpolationMode.prototype.rGB = 0;
$.ig.InterpolationMode.prototype.hSV = 1;

$.ig.OverviewPlusDetailPaneMode.prototype.minimal = 0;
$.ig.OverviewPlusDetailPaneMode.prototype.full = 1;
$.ig.OverviewPlusDetailPaneMode.prototype.compact = 2;

$.ig.BaseDOMEventProxy.prototype.nullTimer = -1;
$.ig.BaseDOMEventProxy.prototype.mSPointerEnabled = false;
$.ig.BaseDOMEventProxy.prototype.pointerEnabled = false;
$.ig.BaseDOMEventProxy.prototype.tridentVersion = 0;
$.ig.BaseDOMEventProxy.prototype.edgeVersion = 0;

$.ig.CanvasGestureDOMEventProxy.prototype.__proxyCount = 0;

$.ig.DOMEventProxy.prototype.__proxyCount = 0;

$.ig.XamOverviewPlusDetailPane.prototype._maxZoom = 2;
$.ig.XamOverviewPlusDetailPane.prototype.sizeStates = "SizeStates";
$.ig.XamOverviewPlusDetailPane.prototype.stateFull = "Full";
$.ig.XamOverviewPlusDetailPane.prototype.stateMinimal = "Minimal";
$.ig.XamOverviewPlusDetailPane.prototype.zoomableStates = "ZoomableStates";
$.ig.XamOverviewPlusDetailPane.prototype.stateZoomEnabled = "ZoomEnabled";
$.ig.XamOverviewPlusDetailPane.prototype.stateZoomDisabled = "ZoomDisabled";
$.ig.XamOverviewPlusDetailPane.prototype.rootElementName = "Root";
$.ig.XamOverviewPlusDetailPane.prototype.contentPresenterElementName = "ContentPresenter";
$.ig.XamOverviewPlusDetailPane.prototype.zoomOutName = "ZoomOut";
$.ig.XamOverviewPlusDetailPane.prototype.zoomLevelName = "ZoomLevel";
$.ig.XamOverviewPlusDetailPane.prototype.zoomInName = "ZoomIn";
$.ig.XamOverviewPlusDetailPane.prototype.zoomTo100Name = "ZoomTo100";
$.ig.XamOverviewPlusDetailPane.prototype.scaleToFitName = "ScaleToFit";
$.ig.XamOverviewPlusDetailPane.prototype.buttonCursorName = "ButtonCursor";
$.ig.XamOverviewPlusDetailPane.prototype.dragPanName = "DragPan";
$.ig.XamOverviewPlusDetailPane.prototype.dragZoomName = "DragZoom";
$.ig.XamOverviewPlusDetailPane.prototype.buttonsGridName = "ButtonsGrid";
$.ig.XamOverviewPlusDetailPane.prototype._immediatePropertyName = "Immediate";
$.ig.XamOverviewPlusDetailPane.prototype._worldPropertyName = "World";
$.ig.XamOverviewPlusDetailPane.prototype.worldStylePropertyName = "WorldStyle";
$.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName = "Window";
$.ig.XamOverviewPlusDetailPane.prototype.windowStylePropertyName = "WindowStyle";
$.ig.XamOverviewPlusDetailPane.prototype._previewPropertyName = "Preview";
$.ig.XamOverviewPlusDetailPane.prototype.previewStylePropertyName = "PreviewStyle";
$.ig.XamOverviewPlusDetailPane.prototype._zoomLevelLargeChangePropertyName = "ZoomLevelLargeChange";
$.ig.XamOverviewPlusDetailPane.prototype._dRAG_DISTANCE = 10;
$.ig.XamOverviewPlusDetailPane.prototype._dRAG_DISTANCE_NEAR = 2;
$.ig.XamOverviewPlusDetailPane.prototype.immediateProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype._immediatePropertyName, $.ig.Boolean.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Boolean.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._immediatePropertyName, e.oldValue(), e.newValue()));
}));
$.ig.XamOverviewPlusDetailPane.prototype.worldProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype._worldPropertyName, $.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Rect.prototype.empty(), function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._worldPropertyName, e.oldValue(), e.newValue()));
}));
$.ig.XamOverviewPlusDetailPane.prototype.worldStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype.worldStylePropertyName, $.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.worldStylePropertyName, $.ig.util.cast($.ig.Style.prototype.$type, e.oldValue()), $.ig.util.cast($.ig.Style.prototype.$type, e.newValue())));
}));
$.ig.XamOverviewPlusDetailPane.prototype.windowProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, $.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Rect.prototype.empty(), function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._windowPropertyName, e.oldValue(), e.newValue()));
}));
$.ig.XamOverviewPlusDetailPane.prototype.windowStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype.windowStylePropertyName, $.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.windowStylePropertyName, $.ig.util.cast($.ig.Style.prototype.$type, e.oldValue()), $.ig.util.cast($.ig.Style.prototype.$type, e.newValue())));
}));
$.ig.XamOverviewPlusDetailPane.prototype.previewProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype._previewPropertyName, $.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Rect.prototype.empty(), function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Rect.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype._previewPropertyName, e.oldValue(), e.newValue()));
}));
$.ig.XamOverviewPlusDetailPane.prototype.previewStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype.previewStylePropertyName, $.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	($.ig.util.cast($.ig.XamOverviewPlusDetailPane.prototype.$type, sender)).onPropertyChanged(new $.ig.PropertyChangedEventArgs$1($.ig.Style.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.previewStylePropertyName, $.ig.util.cast($.ig.Style.prototype.$type, e.oldValue()), $.ig.util.cast($.ig.Style.prototype.$type, e.newValue())));
}));
$.ig.XamOverviewPlusDetailPane.prototype.shrinkToThumbnailProperty = $.ig.DependencyProperty.prototype.register("ShrinkToThumbnail", $.ig.Boolean.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, true, $.ig.XamOverviewPlusDetailPane.prototype.onShrinkToThumbnailChanged1));
$.ig.XamOverviewPlusDetailPane.prototype.modeProperty = $.ig.DependencyProperty.prototype.register("Mode", $.ig.OverviewPlusDetailPaneMode.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.OverviewPlusDetailPaneMode.prototype.getBox($.ig.OverviewPlusDetailPaneMode.prototype.minimal), $.ig.XamOverviewPlusDetailPane.prototype.onModeChanged1));
$.ig.XamOverviewPlusDetailPane.prototype.zoomTo100ButtonVisibilityProperty = $.ig.DependencyProperty.prototype.register("ZoomTo100ButtonVisibility", $.ig.Visibility.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) { (o).onPropertyUpdated("ZoomTo100ButtonVisibility", e.oldValue(), e.newValue()); }));
$.ig.XamOverviewPlusDetailPane.prototype.scaleToFitButtonVisibilityProperty = $.ig.DependencyProperty.prototype.register("ScaleToFitButtonVisibility", $.ig.Visibility.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) { (o).onPropertyUpdated("ScaleToFitButtonVisibility", e.oldValue(), e.newValue()); }));
$.ig.XamOverviewPlusDetailPane.prototype.interactionStatesToolVisibilityProperty = $.ig.DependencyProperty.prototype.register("InteractionStatesToolVisibility", $.ig.Visibility.prototype.$type, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) { (o).onPropertyUpdated("InteractionStatesToolVisibility", e.oldValue(), e.newValue()); }));
$.ig.XamOverviewPlusDetailPane.prototype.zoomLevelLargeChangeProperty = $.ig.DependencyProperty.prototype.register($.ig.XamOverviewPlusDetailPane.prototype._zoomLevelLargeChangePropertyName, Number, $.ig.XamOverviewPlusDetailPane.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) { (o).onPropertyUpdated($.ig.XamOverviewPlusDetailPane.prototype._zoomLevelLargeChangePropertyName, e.oldValue(), e.newValue()); }));

$.ig.ColorUtil.prototype._r = new $.ig.Random(0);
$.ig.ColorUtil.prototype.__randomColors = null;

$.ig.CssHelper.prototype.defaultMarginValue = "-4321px";
$.ig.CssHelper.prototype.defaultColorValue = "rgb(3, 2, 1)";
$.ig.CssHelper.prototype.defaultBackgroundImageValue = "none";
$.ig.CssHelper.prototype.defaultTextAlignValue = "justify";
$.ig.CssHelper.prototype.defaultVerticalAlignValue = "baseline";
$.ig.CssHelper.prototype.defaultOpacityValue = "0.888";
$.ig.CssHelper.prototype.defaultVisibilityValue = "hidden";
$.ig.CssHelper.prototype.defaultWidthHeightValue = "4321px";
$.ig.CssHelper.prototype.maxClasses = 500;

$.ig.BrushCollection.prototype._random = new $.ig.Random(0);

$.ig.TouchGestureRecognizer.prototype._checkHoldTime = 1000;

$.ig.TouchVelocityTracker.prototype._touchHistoryLength = 5;

$.ig.FlattenerSettings.prototype.__instance = null;

$.ig.MathUtil.prototype.degreeAsRadian = Math.PI / 180;
$.ig.MathUtil.prototype.pHI = (1 + Math.sqrt(5)) / 2;
$.ig.MathUtil.prototype.sQRT2 = Math.sqrt(2);
$.ig.MathUtil.prototype._basis = [ 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180, 151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180 ];

} (jQuery));



(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine(["IProvidesViewport:a", 
"Void:b", 
"ValueType:c", 
"Object:d", 
"Type:e", 
"Boolean:f", 
"IConvertible:g", 
"IFormatProvider:h", 
"Number:i", 
"String:j", 
"IComparable:k", 
"Number:l", 
"IComparable$1:m", 
"IEquatable$1:n", 
"Number:o", 
"Number:p", 
"Number:q", 
"NumberStyles:r", 
"Enum:s", 
"Array:t", 
"IList:u", 
"ICollection:v", 
"IEnumerable:w", 
"IEnumerator:x", 
"NotSupportedException:y", 
"Error:z", 
"Number:aa", 
"String:ab", 
"StringComparison:ac", 
"RegExp:ad", 
"CultureInfo:ae", 
"DateTimeFormatInfo:af", 
"Calendar:ag", 
"Date:ah", 
"Number:ai", 
"DayOfWeek:aj", 
"DateTimeKind:ak", 
"CalendarWeekRule:al", 
"NumberFormatInfo:am", 
"CompareInfo:an", 
"CompareOptions:ao", 
"IEnumerable$1:ap", 
"IEnumerator$1:aq", 
"IDisposable:ar", 
"StringSplitOptions:as", 
"Number:at", 
"Number:au", 
"Number:av", 
"Number:aw", 
"Number:ax", 
"Number:ay", 
"Assembly:az", 
"Stream:a0", 
"SeekOrigin:a1", 
"RuntimeTypeHandle:a2", 
"MethodInfo:a3", 
"MethodBase:a4", 
"MemberInfo:a5", 
"ParameterInfo:a6", 
"TypeCode:a7", 
"ConstructorInfo:a8", 
"PropertyInfo:a9", 
"Rect:ba", 
"Size:bb", 
"Point:bc", 
"Math:bd", 
"Series:be", 
"Control:bf", 
"FrameworkElement:bg", 
"UIElement:bh", 
"DependencyObject:bi", 
"Dictionary:bj", 
"DependencyProperty:bk", 
"PropertyMetadata:bl", 
"PropertyChangedCallback:bm", 
"MulticastDelegate:bn", 
"IntPtr:bo", 
"DependencyPropertyChangedEventArgs:bp", 
"DependencyPropertiesCollection:bq", 
"UnsetValue:br", 
"Script:bs", 
"Binding:bt", 
"PropertyPath:bu", 
"Transform:bv", 
"Visibility:bw", 
"Style:bx", 
"Thickness:by", 
"HorizontalAlignment:bz", 
"VerticalAlignment:b0", 
"INotifyPropertyChanged:b1", 
"PropertyChangedEventHandler:b2", 
"PropertyChangedEventArgs:b3", 
"SeriesView:b4", 
"ISchedulableRender:b5", 
"SeriesViewer:b6", 
"SeriesViewerView:b7", 
"CanvasRenderScheduler:b8", 
"List$1:b9", 
"IList$1:ca", 
"ICollection$1:cb", 
"IArray:cc", 
"IArrayList:cd", 
"Array:ce", 
"CompareCallback:cf", 
"Func$3:cg", 
"Action$1:ch", 
"Comparer$1:ci", 
"IComparer:cj", 
"IComparer$1:ck", 
"DefaultComparer$1:cl", 
"Comparison$1:cm", 
"ReadOnlyCollection$1:cn", 
"Predicate$1:co", 
"NotImplementedException:cp", 
"Callback:cq", 
"window:cr", 
"RenderingContext:cs", 
"IRenderer:ct", 
"Rectangle:cu", 
"Shape:cv", 
"Brush:cw", 
"Color:cx", 
"ArgumentException:cy", 
"DoubleCollection:cz", 
"Path:c0", 
"Geometry:c1", 
"GeometryType:c2", 
"TextBlock:c3", 
"Polygon:c4", 
"PointCollection:c5", 
"Polyline:c6", 
"DataTemplateRenderInfo:c7", 
"DataTemplatePassInfo:c8", 
"ContentControl:c9", 
"DataTemplate:da", 
"DataTemplateRenderHandler:db", 
"DataTemplateMeasureHandler:dc", 
"DataTemplateMeasureInfo:dd", 
"DataTemplatePassHandler:de", 
"Line:df", 
"FontInfo:dg", 
"XamOverviewPlusDetailPane:dh", 
"XamOverviewPlusDetailPaneView:di", 
"XamOverviewPlusDetailPaneViewManager:dj", 
"JQueryObject:dk", 
"Element:dl", 
"ElementAttributeCollection:dm", 
"ElementCollection:dn", 
"WebStyle:dp", 
"ElementNodeType:dq", 
"Document:dr", 
"EventListener:ds", 
"IElementEventHandler:dt", 
"ElementEventHandler:du", 
"ElementAttribute:dv", 
"JQueryPosition:dw", 
"JQueryCallback:dx", 
"JQueryEvent:dy", 
"JQueryUICallback:dz", 
"EventProxy:d0", 
"ModifierKeys:d1", 
"Func$2:d2", 
"MouseWheelHandler:d3", 
"Delegate:d4", 
"Interlocked:d5", 
"GestureHandler:d6", 
"ZoomGestureHandler:d7", 
"FlingGestureHandler:d8", 
"ContactHandler:d9", 
"TouchHandler:ea", 
"MouseOverHandler:eb", 
"MouseHandler:ec", 
"KeyHandler:ed", 
"Key:ee", 
"JQuery:ef", 
"JQueryDeferred:eg", 
"JQueryPromise:eh", 
"Action:ei", 
"CanvasViewRenderer:ej", 
"CanvasContext2D:ek", 
"CanvasContext:el", 
"TextMetrics:em", 
"ImageData:en", 
"CanvasElement:eo", 
"Gradient:ep", 
"LinearGradientBrush:eq", 
"GradientStop:er", 
"GeometryGroup:es", 
"GeometryCollection:et", 
"FillRule:eu", 
"PathGeometry:ev", 
"PathFigureCollection:ew", 
"LineGeometry:ex", 
"RectangleGeometry:ey", 
"EllipseGeometry:ez", 
"ArcSegment:e0", 
"PathSegment:e1", 
"PathSegmentType:e2", 
"SweepDirection:e3", 
"PathFigure:e4", 
"PathSegmentCollection:e5", 
"LineSegment:e6", 
"PolyLineSegment:e7", 
"BezierSegment:e8", 
"PolyBezierSegment:e9", 
"GeometryUtil:fa", 
"Tuple$2:fb", 
"TransformGroup:fc", 
"TransformCollection:fd", 
"TranslateTransform:fe", 
"RotateTransform:ff", 
"ScaleTransform:fg", 
"DivElement:fh", 
"BaseDOMEventProxy:fi", 
"DOMEventProxy:fj", 
"MSGesture:fk", 
"MouseEventArgs:fl", 
"EventArgs:fm", 
"DoubleAnimator:fn", 
"EasingFunctionHandler:fo", 
"ImageElement:fp", 
"RectUtil:fq", 
"MathUtil:fr", 
"RuntimeHelpers:fs", 
"RuntimeFieldHandle:ft", 
"PropertyChangedEventArgs$1:fu", 
"InteractionState:fv", 
"OverviewPlusDetailPaneMode:fw", 
"IOverviewPlusDetailControl:fx", 
"EventHandler$1:fy", 
"ArgumentNullException:fz", 
"OverviewPlusDetailViewportHost:f0", 
"XamDataChart:f1", 
"GridMode:f2", 
"BrushCollection:f3", 
"ObservableCollection$1:f4", 
"INotifyCollectionChanged:f5", 
"NotifyCollectionChangedEventHandler:f6", 
"NotifyCollectionChangedEventArgs:f7", 
"NotifyCollectionChangedAction:f8", 
"InterpolationMode:f9", 
"Random:ga", 
"ColorUtil:gb", 
"AxisCollection:gc", 
"XamDataChartView:gd", 
"SeriesViewerViewManager:ge", 
"AxisTitlePosition:gf", 
"PointerTooltipStyle:gg", 
"Dictionary$2:gh", 
"IDictionary$2:gi", 
"IDictionary:gj", 
"KeyValuePair$2:gk", 
"Enumerable:gl", 
"Thread:gm", 
"ThreadStart:gn", 
"IOrderedEnumerable$1:go", 
"SortedList$1:gp", 
"IEqualityComparer$1:gq", 
"EqualityComparer$1:gr", 
"IEqualityComparer:gs", 
"DefaultEqualityComparer$1:gt", 
"InvalidOperationException:gu", 
"CanvasGestureDOMEventProxy:gv", 
"TouchPointInfo:gw", 
"DOMExecutionContext:gx", 
"IExecutionContext:gy", 
"ExecutionContextExecuteCallback:gz", 
"TouchGestureRecognizer:g0", 
"TouchGestureState:g1", 
"TouchVelocityTracker:g2", 
"TouchHistoryItem:g3", 
"TouchVelocityReading:g4", 
"TouchGestureEventHandler:g5", 
"TouchGestureEventArgs:g6", 
"CancelableTouchGestureEventHandler:g7", 
"CssHelper:g8", 
"CssGradientUtil:g9", 
"FontUtil:ha", 
"TileZoomTile:hb", 
"TileZoomTileInfo:hc", 
"TileZoomTileCache:hd", 
"TileZoomManager:he", 
"RectChangedEventHandler:hf", 
"RectChangedEventArgs:hg", 
"Debug:hh", 
"TileZoomInfo:hi", 
"LinkedList$1:hj", 
"LinkedListNode$1:hk", 
"RenderSurface:hl", 
"FragmentBase:hm", 
"HorizontalAnchoredCategorySeries:hn", 
"AnchoredCategorySeries:ho", 
"CategorySeries:hp", 
"MarkerSeries:hq", 
"MarkerSeriesView:hr", 
"Marker:hs", 
"DataContext:ht", 
"MarkerTemplates:hu", 
"HashPool$2:hv", 
"IHashPool$2:hw", 
"IPool$1:hx", 
"Func$1:hy", 
"Pool$1:hz", 
"IIndexedPool$1:h0", 
"MarkerType:h1", 
"SeriesVisualData:h2", 
"PrimitiveVisualDataList:h3", 
"IVisualData:h4", 
"PrimitiveVisualData:h5", 
"PrimitiveAppearanceData:h6", 
"BrushAppearanceData:h7", 
"StringBuilder:h8", 
"Environment:h9", 
"AppearanceHelper:ia", 
"LinearGradientBrushAppearanceData:ib", 
"GradientStopAppearanceData:ic", 
"SolidBrushAppearanceData:id", 
"GeometryData:ie", 
"GetPointsSettings:ig", 
"EllipseGeometryData:ih", 
"RectangleGeometryData:ii", 
"LineGeometryData:ij", 
"PathGeometryData:ik", 
"PathFigureData:il", 
"SegmentData:im", 
"LineSegmentData:io", 
"PolylineSegmentData:ip", 
"ArcSegmentData:iq", 
"PolyBezierSegmentData:ir", 
"BezierSegmentData:is", 
"LabelAppearanceData:it", 
"ShapeTags:iu", 
"PointerTooltipVisualDataList:iv", 
"MarkerVisualDataList:iw", 
"MarkerVisualData:ix", 
"PointerTooltipVisualData:iy", 
"RectangleVisualData:iz", 
"PolygonVisualData:i0", 
"PolyLineVisualData:i1", 
"IFastItemsSource:i2", 
"IFastItemColumn$1:i3", 
"IFastItemColumnPropertyName:i4", 
"FastItemsSourceEventArgs:i5", 
"FastItemsSourceEventAction:i6", 
"IHasCategoryModePreference:i7", 
"IHasCategoryAxis:i8", 
"CategoryAxisBase:i9", 
"Axis:ja", 
"AxisView:jb", 
"StackedSeriesBase:jc", 
"IIsCategoryBased:jd", 
"CategoryMode:je", 
"ICategoryScaler:jf", 
"IScaler:jg", 
"ScalerParams:jh", 
"IBucketizer:ji", 
"IDetectsCollisions:jj", 
"StackedSeriesView:jk", 
"CategorySeriesView:jl", 
"ISupportsMarkers:jm", 
"CategoryBucketCalculator:jn", 
"ISortingAxis:jo", 
"CategoryFrame:jp", 
"Frame:jq", 
"BrushUtil:jr", 
"Canvas:js", 
"Panel:jt", 
"UIElementCollection:ju", 
"StackedBucketCalculator:jv", 
"StackedSeriesManager:jw", 
"StackedSeriesCollection:jx", 
"StackedFragmentSeries:jy", 
"PenLineCap:jz", 
"PropertyUpdatedEventHandler:j0", 
"PropertyUpdatedEventArgs:j1", 
"StackedAreaSeries:j2", 
"HorizontalStackedSeriesBase:j3", 
"NumericYAxis:j4", 
"StraightNumericAxisBase:j5", 
"NumericAxisBase:j6", 
"NumericAxisBaseView:j7", 
"NumericAxisRenderer:j8", 
"AxisRendererBase:j9", 
"ShouldRenderHandler:ka", 
"ScaleValueHandler:kb", 
"AxisRenderingParametersBase:kc", 
"RangeInfo:kd", 
"TickmarkValues:ke", 
"TickmarkValuesInitializationParameters:kf", 
"Func$4:kg", 
"GetGroupCenterHandler:kh", 
"GetUnscaledGroupCenterHandler:ki", 
"PathRenderingInfo:kj", 
"RenderStripHandler:kk", 
"RenderLineHandler:kl", 
"ShouldRenderLinesHandler:km", 
"ShouldRenderContentHandler:kn", 
"RenderAxisLineHandler:ko", 
"DetermineCrossingValueHandler:kp", 
"ShouldRenderLabelHandler:kq", 
"GetLabelLocationHandler:kr", 
"LabelPosition:ks", 
"TransformToLabelValueHandler:kt", 
"AxisLabelManager:ku", 
"AxisLabelPanelBase:kv", 
"AxisLabelPanelBaseView:kw", 
"AxisLabelSettings:kx", 
"AxisLabelsLocation:ky", 
"TitleSettings:kz", 
"GetLabelForItemHandler:k0", 
"CreateRenderingParamsHandler:k1", 
"SnapMajorValueHandler:k2", 
"AdjustMajorValueHandler:k3", 
"CategoryAxisRenderingParameters:k4", 
"LogarithmicTickmarkValues:k5", 
"LogarithmicNumericSnapper:k6", 
"Snapper:k7", 
"LinearTickmarkValues:k8", 
"LinearNumericSnapper:k9", 
"AxisRangeChangedEventArgs:la", 
"AxisRange:lb", 
"AutoRangeCalculator:lc", 
"NumericRadiusAxis:ld", 
"NumericRadiusAxisView:le", 
"NumericAngleAxis:lf", 
"IAngleScaler:lg", 
"NumericAngleAxisView:lh", 
"PolarAxisRenderingManager:li", 
"ViewportUtils:lj", 
"PolarAxisRenderingParameters:lk", 
"NumericAxisRenderingParameters:ll", 
"IPolarRadialRenderingParameters:lm", 
"RadialAxisRenderingParameters:ln", 
"AxisOrientation:lo", 
"AngleAxisLabelPanel:lp", 
"AngleAxisLabelPanelView:lq", 
"Extensions:lr", 
"CategoryAngleAxis:ls", 
"CategoryAngleAxisView:lt", 
"CategoryAxisBaseView:lu", 
"CategoryAxisRenderer:lv", 
"LinearCategorySnapper:lw", 
"CategoryTickmarkValues:lx", 
"RadialAxisLabelPanel:ly", 
"HorizontalAxisLabelPanelBase:lz", 
"HorizontalAxisLabelPanelBaseView:l0", 
"RadialAxisLabelPanelView:l1", 
"NumericScaler:l2", 
"StraightNumericAxisBaseView:l3", 
"NumericScaleMode:l4", 
"LogarithmicScaler:l5", 
"NumericXAxis:l6", 
"NumericXAxisView:l7", 
"HorizontalSmartAxisLabelPanel:l8", 
"AxisExtentType:l9", 
"SmartAxisLabelDisplayType:ma", 
"HorizontalSmartAxisLabelPanelView:mb", 
"FontMappingInfo:mc", 
"CategoryDateTimeXAxis:md", 
"CategoryDateTimeXAxisView:me", 
"TimeAxisDisplayType:mf", 
"FastItemDateTimeColumn:mg", 
"IFastItemColumnInternal:mh", 
"FastItemColumn:mi", 
"FastReflectionHelper:mj", 
"HorizontalAxisLabelPanel:mk", 
"CoercionInfo:ml", 
"SortedListView$1:mm", 
"ArrayUtil:mn", 
"HorizontalLogarithmicScaler:mo", 
"HorizontalLinearScaler:mp", 
"LinearScaler:mq", 
"NumericYAxisView:mr", 
"VerticalAxisLabelPanel:ms", 
"VerticalAxisLabelPanelView:mt", 
"VerticalLogarithmicScaler:mu", 
"VerticalLinearScaler:mv", 
"CategoryFramePreparerBase:mw", 
"FramePreparer:mx", 
"ISupportsErrorBars:my", 
"DefaultSupportsMarkers:mz", 
"DefaultProvidesViewport:m0", 
"DefaultSupportsErrorBars:m1", 
"PreparationParams:m2", 
"CategoryYAxis:m3", 
"CategoryYAxisView:m4", 
"SyncSettings:m5", 
"ValuesHolder:m6", 
"LineSeries:m7", 
"LineSeriesView:m8", 
"AnchoredCategorySeriesView:m9", 
"CategoryTrendLineManagerBase:na", 
"TrendLineManagerBase$1:nb", 
"TrendLineType:nc", 
"Clipper:nd", 
"EdgeClipper:ne", 
"LeftClipper:nf", 
"BottomClipper:ng", 
"RightClipper:nh", 
"TopClipper:ni", 
"TrendResolutionParams:nj", 
"Flattener:nk", 
"Stack$1:nl", 
"ReverseArrayEnumerator$1:nm", 
"SpiralTodo:nn", 
"FlattenerSettings:no", 
"IPreparesCategoryTrendline:np", 
"SortingTrendLineManager:nq", 
"TrendFitCalculator:nr", 
"LeastSquaresFit:ns", 
"Numeric:nt", 
"TrendAverageCalculator:nu", 
"CategoryTrendLineManager:nv", 
"AnchoredCategoryBucketCalculator:nw", 
"UnknownValuePlotting:nx", 
"CategoryLineRasterizer:ny", 
"Action$5:nz", 
"PathVisualData:n0", 
"CategorySeriesRenderManager:n1", 
"AssigningCategoryStyleEventArgs:n2", 
"AssigningCategoryStyleEventArgsBase:n3", 
"GetCategoryItemsHandler:n4", 
"HighlightingInfo:n5", 
"HighlightingState:n6", 
"AssigningCategoryMarkerStyleEventArgs:n7", 
"HighlightingManager:n8", 
"SplineSeriesBase:n9", 
"SplineSeriesBaseView:oa", 
"SplineType:ob", 
"CollisionAvoider:oc", 
"SafeSortedReadOnlyDoubleCollection:od", 
"SafeReadOnlyDoubleCollection:oe", 
"SafeEnumerable:of", 
"AreaSeries:og", 
"AreaSeriesView:oh", 
"LegendTemplates:oi", 
"PieChartBase:oj", 
"PieChartBaseView:ok", 
"PieChartViewManager:ol", 
"PieChartVisualData:om", 
"PieSliceVisualDataList:on", 
"PieSliceVisualData:oo", 
"PieSliceDataContext:op", 
"Slice:oq", 
"SliceView:or", 
"PieLabel:os", 
"LabelsPosition:ot", 
"MouseButtonEventArgs:ou", 
"FastItemsSource:ov", 
"ColumnReference:ow", 
"FastItemObjectColumn:ox", 
"FastItemIntColumn:oy", 
"LeaderLineType:oz", 
"OthersCategoryType:o0", 
"IndexCollection:o1", 
"LegendBase:o2", 
"LegendBaseView:o3", 
"LegendBaseViewManager:o4", 
"GradientData:o5", 
"GradientStopData:o6", 
"DataChartLegendMouseButtonEventArgs:o7", 
"DataChartMouseButtonEventArgs:o8", 
"ChartLegendMouseEventArgs:o9", 
"ChartMouseEventArgs:pa", 
"DataChartLegendMouseButtonEventHandler:pb", 
"DataChartLegendMouseEventHandler:pc", 
"LegendVisualData:pd", 
"LegendVisualDataList:pe", 
"LegendItemVisualData:pf", 
"FunnelSliceDataContext:pg", 
"PieChartFormatLabelHandler:ph", 
"LabelClickEventHandler:pi", 
"LabelClickEventArgs:pj", 
"SliceClickEventHandler:pk", 
"SliceClickEventArgs:pl", 
"ItemLegend:pm", 
"ItemLegendView:pn", 
"LegendItemInfo:po", 
"BubbleSeries:pp", 
"ScatterBase:pq", 
"ScatterBaseView:pr", 
"MarkerManagerBase:ps", 
"OwnedPoint:pt", 
"MarkerManagerBucket:pu", 
"ScatterTrendLineManager:pv", 
"NumericMarkerManager:pw", 
"CollisionAvoidanceType:px", 
"SmartPlacer:py", 
"ISmartPlaceable:pz", 
"SmartPosition:p0", 
"SmartPlaceableWrapper$1:p1", 
"ScatterAxisInfoCache:p2", 
"ScatterErrorBarSettings:p3", 
"ErrorBarSettingsBase:p4", 
"EnableErrorBars:p5", 
"ErrorBarCalculatorReference:p6", 
"IErrorBarCalculator:p7", 
"ErrorBarCalculatorType:p8", 
"ScatterFrame:p9", 
"ScatterFrameBase$1:qa", 
"DictInterpolator$3:qb", 
"Action$6:qc", 
"SeriesHitTestMode:qd", 
"SyncLink:qe", 
"IFastItemsSourceProvider:qf", 
"ChartCollection:qg", 
"FastItemsSourceReference:qh", 
"SyncManager:qi", 
"SyncLinkManager:qj", 
"ErrorBarsHelper:qk", 
"BubbleSeriesView:ql", 
"BubbleMarkerManager:qm", 
"SizeScale:qn", 
"BrushScale:qo", 
"ScaleLegend:qp", 
"ScaleLegendView:qq", 
"CustomPaletteBrushScale:qr", 
"BrushSelectionMode:qs", 
"ValueBrushScale:qt", 
"RingSeriesBase:qu", 
"XamDoughnutChart:qv", 
"RingCollection:qw", 
"Ring:qx", 
"RingControl:qy", 
"RingControlView:qz", 
"Arc:q0", 
"ArcView:q1", 
"ArcItem:q2", 
"SliceItem:q3", 
"RingSeriesBaseView:q4", 
"Nullable$1:q5", 
"RingSeriesCollection:q6", 
"SliceCollection:q7", 
"XamDoughnutChartView:q8", 
"Action$2:q9", 
"DoughnutChartVisualData:ra", 
"RingSeriesVisualDataList:rb", 
"RingSeriesVisualData:rc", 
"RingVisualDataList:rd", 
"RingVisualData:re", 
"ArcVisualDataList:rf", 
"ArcVisualData:rg", 
"SliceVisualDataList:rh", 
"SliceVisualData:ri", 
"DoughnutChartLabelVisualData:rj", 
"HoleDimensionsChangedEventHandler:rk", 
"HoleDimensionsChangedEventArgs:rl", 
"XamFunnelChart:rm", 
"IItemProvider:rn", 
"MessageHandler:ro", 
"MessageHandlerEventHandler:rp", 
"Message:rq", 
"ServiceProvider:rr", 
"MessageChannel:rs", 
"MessageEventHandler:rt", 
"Queue$1:ru", 
"XamFunnelConnector:rv", 
"XamFunnelController:rw", 
"SliceInfoList:rx", 
"SliceInfo:ry", 
"SliceAppearance:rz", 
"PointList:r0", 
"FunnelSliceVisualData:r1", 
"PointData:r2", 
"SliceInfoUnaryComparison:r3", 
"Bezier:r4", 
"BezierPoint:r5", 
"BezierOp:r6", 
"BezierPointComparison:r7", 
"DoubleColumn:r8", 
"ObjectColumn:r9", 
"XamFunnelView:sa", 
"IOuterLabelWidthDecider:sb", 
"IFunnelLabelSizeDecider:sc", 
"MouseLeaveMessage:sd", 
"InteractionMessage:se", 
"MouseMoveMessage:sf", 
"MouseButtonMessage:sg", 
"MouseButtonAction:sh", 
"MouseButtonType:si", 
"SetAreaSizeMessage:sj", 
"RenderingMessage:sk", 
"RenderSliceMessage:sl", 
"RenderOuterLabelMessage:sm", 
"TooltipValueChangedMessage:sn", 
"TooltipUpdateMessage:so", 
"FunnelDataContext:sp", 
"PropertyChangedMessage:sq", 
"ConfigurationMessage:sr", 
"ClearMessage:ss", 
"ClearTooltipMessage:st", 
"ContainerSizeChangedMessage:su", 
"ViewportChangedMessage:sv", 
"ViewPropertyChangedMessage:sw", 
"OuterLabelAlignment:sx", 
"FunnelSliceDisplay:sy", 
"SliceSelectionManager:sz", 
"DataUpdatedMessage:s0", 
"ItemsSourceAction:s1", 
"FunnelFrame:s2", 
"UserSelectedItemsChangedMessage:s3", 
"LabelSizeChangedMessage:s4", 
"FrameRenderCompleteMessage:s5", 
"IntColumn:s6", 
"IntColumnComparison:s7", 
"Convert:s8", 
"SelectedItemsChangedMessage:s9", 
"ModelUpdateMessage:ta", 
"SliceClickedMessage:tb", 
"FunnelSliceClickedEventHandler:tc", 
"FunnelSliceClickedEventArgs:td", 
"FunnelChartVisualData:te", 
"FunnelSliceVisualDataList:tf", 
"RingSeries:tg", 
"WaterfallSeries:th", 
"WaterfallSeriesView:ti", 
"CategoryTransitionInMode:tj", 
"FinancialSeries:tk", 
"FinancialSeriesView:tl", 
"FinancialBucketCalculator:tm", 
"CategoryTransitionSourceFramePreparer:tn", 
"TransitionInSpeedType:to", 
"FinancialCalculationDataSource:tp", 
"CalculatedColumn:tq", 
"FinancialEventArgs:tr", 
"FinancialCalculationSupportingCalculations:ts", 
"ColumnSupportingCalculation:tt", 
"SupportingCalculation$1:tu", 
"SupportingCalculationStrategy:tv", 
"DataSourceSupportingCalculation:tw", 
"ProvideColumnValuesStrategy:tx", 
"AssigningCategoryStyleEventHandler:ty", 
"FinancialValueList:tz", 
"CategoryXAxis:t0", 
"CategoryXAxisView:t1", 
"FinancialEventHandler:t2", 
"StepLineSeries:t3", 
"StepLineSeriesView:t4", 
"StepAreaSeries:t5", 
"StepAreaSeriesView:t6", 
"RangeAreaSeries:t7", 
"HorizontalRangeCategorySeries:t8", 
"RangeCategorySeries:t9", 
"IHasHighLowValueCategory:ua", 
"RangeCategorySeriesView:ub", 
"RangeCategoryBucketCalculator:uc", 
"RangeCategoryFramePreparer:ud", 
"IHasCategoryTrendline:ue", 
"IHasTrendline:uf", 
"DefaultCategoryTrendlineHost:ug", 
"DefaultCategoryTrendlinePreparer:uh", 
"DefaultHighLowValueProvider:ui", 
"HighLowValuesHolder:uj", 
"CategoryMarkerManager:uk", 
"RangeValueList:ul", 
"RangeAreaSeriesView:um", 
"LineFragment:un", 
"LineFragmentView:uo", 
"LineFragmentBucketCalculator:up", 
"IStacked100Series:uq", 
"AreaFragment:ur", 
"AreaFragmentView:us", 
"AreaFragmentBucketCalculator:ut", 
"StackedSplineAreaSeries:uu", 
"SplineAreaFragment:uv", 
"SplineFragmentBase:uw", 
"SplineAreaFragmentView:ux", 
"StackedColumnSeries:uy", 
"StackedColumnSeriesView:uz", 
"StackedColumnBucketCalculator:u0", 
"ColumnFragment:u1", 
"ColumnFragmentView:u2", 
"StackedBarSeries:u3", 
"VerticalStackedSeriesBase:u4", 
"IBarSeries:u5", 
"StackedBarSeriesView:u6", 
"StackedBarBucketCalculator:u7", 
"BarFragment:u8", 
"StackedLineSeries:u9", 
"StackedSplineSeries:va", 
"SplineFragment:vb", 
"SplineFragmentView:vc", 
"SplineFragmentBucketCalculator:vd", 
"StackedSeriesFramePreparer:ve", 
"CategoryFramePreparer:vf", 
"IHasSingleValueCategory:vg", 
"DefaultSingleValueProvider:vh", 
"SingleValuesHolder:vi", 
"StackedSeriesCreatedEventHandler:vj", 
"StackedSeriesCreatedEventArgs:vk", 
"StackedSeriesVisualData:vl", 
"SeriesVisualDataList:vm", 
"AxisComponentsForView:vn", 
"AxisComponentsFromView:vo", 
"AxisFormatLabelHandler:vp", 
"VisualExportHelper:vq", 
"ContentInfo:vr", 
"LabelFontHeuristics:vs", 
"AxisRangeChangedEventHandler:vt", 
"ChartContentManager:vu", 
"ChartContentType:vv", 
"RenderRequestedEventArgs:vw", 
"ChartTitleVisualData:vx", 
"VisualDataSerializer:vy", 
"AxisVisualData:vz", 
"AxisLabelVisualDataList:v0", 
"AxisLabelVisualData:v1", 
"AssigningCategoryMarkerStyleEventHandler:v2", 
"SeriesComponentsForView:v3", 
"CategorySeriesMarkerCollisionAvoidance:v4", 
"NonCollisionAvoider:v5", 
"DataChartAxisRangeChangedEventHandler:v6", 
"ChartAxisRangeChangedEventArgs:v7", 
"ChartVisualData:v8", 
"AxisVisualDataList:v9", 
"RadialBase:wa", 
"RadialBaseView:wb", 
"RadialBucketCalculator:wc", 
"SeriesRenderer$2:wd", 
"SeriesRenderingArguments:we", 
"RadialFrame:wf", 
"RadialAxes:wg", 
"PolarBase:wh", 
"PolarBaseView:wi", 
"PolarTrendLineManager:wj", 
"PolarLinePlanner:wk", 
"AngleRadiusPair:wl", 
"PolarAxisInfoCache:wm", 
"PolarFrame:wn", 
"PolarAxes:wo", 
"SeriesCollection:wp", 
"SeriesViewerComponentsFromView:wq", 
"SeriesViewerSurfaceViewer:wr", 
"LabelPanelArranger:ws", 
"LabelPanelsArrangeState:wt", 
"ChartHitTestMode:wu", 
"WindowResponse:wv", 
"ViewerSurfaceUsage:ww", 
"SeriesViewerComponentsForView:wx", 
"DataChartCursorEventHandler:wy", 
"ChartCursorEventArgs:wz", 
"DataChartMouseButtonEventHandler:w0", 
"DataChartMouseEventHandler:w1", 
"AnnotationLayer:w2", 
"AnnotationLayerView:w3", 
"RefreshCompletedEventHandler:w4", 
"SeriesComponentsFromView:w5", 
"EasingFunctions:w6", 
"PolygonUtil:w7", 
"TrendCalculators:w8", 
"AbstractEnumerable:adb", 
"AbstractEnumerator:adc", 
"GenericEnumerable$1:add", 
"GenericEnumerator$1:ade"]);


$.ig.util.defType('TransitionInSpeedType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "Normal";
			case 2: return "ValueScaled";
			case 3: return "IndexScaled";
			case 4: return "Random";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TransitionInSpeedType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('HighlightingState', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Out";
			case 1: return "In";
			case 2: return "Static";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('HighlightingState', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('SeriesHitTestMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "Computational";
			case 2: return "ColorEncoded";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('SeriesHitTestMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('ChartHitTestMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "Computational";
			case 2: return "ColorEncoded";
			case 3: return "Mixed";
			case 4: return "MixedFavoringComputational";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ChartHitTestMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('MarkerType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Unset";
			case 1: return "None";
			case 2: return "Automatic";
			case 3: return "Circle";
			case 4: return "Triangle";
			case 5: return "Pyramid";
			case 6: return "Square";
			case 7: return "Diamond";
			case 8: return "Pentagon";
			case 9: return "Hexagon";
			case 10: return "Tetragram";
			case 11: return "Pentagram";
			case 12: return "Hexagram";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('MarkerType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('CategoryTransitionInMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "FromZero";
			case 2: return "SweepFromLeft";
			case 3: return "SweepFromRight";
			case 4: return "SweepFromTop";
			case 5: return "SweepFromBottom";
			case 6: return "SweepFromCenter";
			case 7: return "AccordionFromLeft";
			case 8: return "AccordionFromRight";
			case 9: return "AccordionFromTop";
			case 10: return "AccordionFromBottom";
			case 11: return "Expand";
			case 12: return "SweepFromCategoryAxisMinimum";
			case 13: return "SweepFromCategoryAxisMaximum";
			case 14: return "SweepFromValueAxisMinimum";
			case 15: return "SweepFromValueAxisMaximum";
			case 16: return "AccordionFromCategoryAxisMinimum";
			case 17: return "AccordionFromCategoryAxisMaximum";
			case 18: return "AccordionFromValueAxisMinimum";
			case 19: return "AccordionFromValueAxisMaximum";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CategoryTransitionInMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('WindowResponse', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Deferred";
			case 1: return "Immediate";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('WindowResponse', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('TimeAxisDisplayType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Continuous";
			case 1: return "Discrete";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('TimeAxisDisplayType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('SplineType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Natural";
			case 1: return "Clamped";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('SplineType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('OthersCategoryType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Number";
			case 1: return "Percent";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('OthersCategoryType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('LabelsPosition', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Center";
			case 2: return "InsideEnd";
			case 3: return "OutsideEnd";
			case 4: return "BestFit";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('LabelsPosition', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('ViewerSurfaceUsage', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Normal";
			case 1: return "Minimal";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ViewerSurfaceUsage', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('GridMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "BeforeSeries";
			case 2: return "BehindSeries";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('GridMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('AxisOrientation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Horizontal";
			case 1: return "Vertical";
			case 2: return "Angular";
			case 3: return "Radial";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AxisOrientation', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('CategoryMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Mode0";
			case 1: return "Mode1";
			case 2: return "Mode2";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CategoryMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('AxisLabelsLocation', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "OutsideTop";
			case 1: return "OutsideBottom";
			case 2: return "OutsideLeft";
			case 3: return "OutsideRight";
			case 4: return "InsideTop";
			case 5: return "InsideBottom";
			case 6: return "InsideLeft";
			case 7: return "InsideRight";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AxisLabelsLocation', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('ChartContentType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Series";
			case 1: return "Axis";
			case 2: return "Background";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('ChartContentType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('LeaderLineType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Straight";
			case 1: return "Arc";
			case 2: return "Spline";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('LeaderLineType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('AxisTitlePosition', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Auto";
			case 1: return "Left";
			case 2: return "Right";
			case 3: return "Top";
			case 4: return "Bottom";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AxisTitlePosition', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('CategorySeriesMarkerCollisionAvoidance', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "None";
			case 1: return "Omit";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('CategorySeriesMarkerCollisionAvoidance', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('NumericScaleMode', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Linear";
			case 1: return "Logarithmic";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('NumericScaleMode', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('SmartAxisLabelDisplayType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Wrap";
			case 1: return "Stagger";
			case 2: return "Rotate";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('SmartAxisLabelDisplayType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('AxisExtentType', 'Enum', {
	init: function (v) {
		this._v = v;
	},
	$getName: function (v) {
		switch (v) {
			case 0: return "Pixel";
			case 1: return "Percent";
			default: return v.toString();
		}
	},
	$value: function () {
		return this._v;
	},
	$type: new $.ig.Type('AxisExtentType', $.ig.Enum.prototype.$type)
}, true);

$.ig.util.defType('IProvidesViewport', 'Object', {
	$type: new $.ig.Type('IProvidesViewport', null)
}, true);

$.ig.util.defType('LegendBase', 'ContentControl', {
	createView: function () {
		return new $.ig.LegendBaseView(this);
	}
	,
	onViewCreated: function (view) {
		this.view(view);
	}
	,
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	init: function () {
		$.ig.ContentControl.prototype.init.call(this);
		var view = this.createView();
		this.onViewCreated(view);
		view.onInit();
		this.children(new $.ig.ObservableCollection$1($.ig.UIElement.prototype.$type, 0));
	},
	addChildInOrder: function (legendItem, series) {
	}
	,
	createLegendItems: function (legendItems, itemsHost) {
	}
	,
	_children: null,
	children: function (value) {
		if (arguments.length === 1) {
			this._children = value;
			return value;
		} else {
			return this._children;
		}
	}
	,
	_seriesOwner: null,
	seriesOwner: function (value) {
		if (arguments.length === 1) {
			this._seriesOwner = value;
			return value;
		} else {
			return this._seriesOwner;
		}
	}
	,
	_chartOwner: null,
	chartOwner: function (value) {
		if (arguments.length === 1) {
			this._chartOwner = value;
			return value;
		} else {
			return this._chartOwner;
		}
	}
	,
	owner: function () {
		if (this.seriesOwner() != null) {
			return this.seriesOwner();
		} else {
			return this.chartOwner();
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	legendItemMouseLeftButtonDown: null,
	onLegendItemMouseLeftButtonDown: function (args) {
		if (this.legendItemMouseLeftButtonDown != null) {
			this.legendItemMouseLeftButtonDown(this, args);
		}
	}
	,
	legendItemMouseLeftButtonUp: null,
	onLegendItemMouseLeftButtonUp: function (args) {
		if (this.legendItemMouseLeftButtonUp != null) {
			this.legendItemMouseLeftButtonUp(this, args);
		}
	}
	,
	legendItemMouseEnter: null,
	onLegendItemMouseEnter: function (args) {
		if (this.legendItemMouseEnter != null) {
			this.legendItemMouseEnter(this, args);
		}
	}
	,
	legendItemMouseLeave: null,
	onLegendItemMouseLeave: function (args) {
		if (this.legendItemMouseLeave != null) {
			this.legendItemMouseLeave(this, args);
		}
	}
	,
	legendItemMouseMove: null,
	onLegendItemMouseMove: function (args) {
		if (this.legendItemMouseMove != null) {
			this.legendItemMouseMove(this, args);
		}
	}
	,
	provideContainer: function (container) {
		this.view().onContainerProvided(container);
	}
	,
	legendItemsListStyle: function (value) {
		if (arguments.length === 1) {
			this.view().legendItemsListStyle(value);
			return value;
		} else {
			return this.view().legendItemsListStyle();
		}
	}
	,
	legendItemStyle: function (value) {
		if (arguments.length === 1) {
			this.view().legendItemStyle(value);
			return value;
		} else {
			return this.view().legendItemStyle();
		}
	}
	,
	legendItemBadgeStyle: function (value) {
		if (arguments.length === 1) {
			this.view().legendItemBadgeStyle(value);
			return value;
		} else {
			return this.view().legendItemBadgeStyle();
		}
	}
	,
	legendItemTextStyle: function (value) {
		if (arguments.length === 1) {
			this.view().legendItemTextStyle(value);
			return value;
		} else {
			return this.view().legendItemTextStyle();
		}
	}
	,
	exportVisualData: function () {
		var legend = new $.ig.LegendVisualData();
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var child = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, child);
			var item = new $.ig.LegendItemVisualData();
			if (contentControl.content().getType() == $.ig.PieSliceDataContext.prototype.$type) {
				var context = ($.ig.util.cast($.ig.PieSliceDataContext.prototype.$type, contentControl.content()));
				item.label(context.legendLabel());
				item.appearance(new $.ig.PrimitiveAppearanceData());
				if (context.actualItemBrush() != null) {
					item.appearance().fill($.ig.AppearanceHelper.prototype.fromBrush(context.actualItemBrush()));
				} else {
					item.appearance().fill($.ig.AppearanceHelper.prototype.fromBrush(context.itemBrush()));
				}
			} else if (contentControl.content().getType() == $.ig.FunnelSliceDataContext.prototype.$type) {
				var context1 = ($.ig.util.cast($.ig.FunnelSliceDataContext.prototype.$type, contentControl.content()));
				item.label(context1.itemLabel());
				item.appearance(new $.ig.PrimitiveAppearanceData());
				item.appearance().fill($.ig.AppearanceHelper.prototype.fromBrush(context1.actualItemBrush()));
			} else if (contentControl.content().getType() == $.ig.DataContext.prototype.$type) {
				var context2 = ($.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content()));
				item.label(context2.itemLabel());
				item.appearance(new $.ig.PrimitiveAppearanceData());
				item.appearance().fill($.ig.AppearanceHelper.prototype.fromBrush(context2.actualItemBrush()));
			}
			legend.items().add(item);
		}
		return legend;
	}
	,
	$type: new $.ig.Type('LegendBase', $.ig.ContentControl.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('Series', 'Control', {
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	_uniqueIndex: 0,
	_customClipRect: null,
	customClipRect: function (value) {
		if (arguments.length === 1) {
			this._customClipRect = value;
			return value;
		} else {
			return this._customClipRect;
		}
	}
	,
	init: function () {
		var $self = this;
		this.__alternateViews = new $.ig.Dictionary$2(String, $.ig.SeriesView.prototype.$type, 0);
		this.__thumbnailDirty = true;
		this.__transitionInViable = false;
		this.__isDefaultToolTipSelected = false;
		this.__seriesComponentsForView = new $.ig.SeriesComponentsForView();
		this.__useDeferredMouseEnterAndLeave = false;
		this.__expectFunctions = false;
		this.__hitTestMode = $.ig.SeriesHitTestMode.prototype.auto;
		$.ig.Control.prototype.init.call(this);
		this._uniqueIndex = $.ig.Series.prototype.__currentUniqueIndex++;
		this.thumbnailDirty(true);
		this.customClipRect($.ig.Rect.prototype.empty());
		this.view(this.createView());
		this.view().viewport($.ig.Rect.prototype.empty());
		this.onViewCreated(this.view());
		this.view().duringInit(true);
		this.view().onInit();
		this.view().duringInit(false);
		this.defaultStyleKey($.ig.Series.prototype.$type);
		this._seriesViewer_WindowRectChanged = function (o, e) {
			if ($self.seriesViewer() == null || !$self.seriesViewer().ignoreWindowChanges()) {
				$self.windowRectChangedOverride(e.oldRect(), e.newRect());
			}
		};
		this._seriesViewer_PropertyUpdated = function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		};
		this._fastItemsSource_Event = function (o, e) {
			if ($self.seriesViewer() != null) {
				$self.thumbnailDirty(true);
				$self.seriesViewer().notifyThumbnailDataChanged();
			}
			$self.dataUpdatedOverride(e.action(), e.position(), e.count(), e.propertyName());
		};
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		});
		this.rootCanvas(new $.ig.Canvas());
		this.animator(new $.ig.DoubleAnimator(0, 1, this.transitionDuration()));
		var $t = this.animator();
		$t.propertyChanged = $.ig.Delegate.prototype.combine($t.propertyChanged, this.animator_PropertyChanged.runOn(this));
		this.setBinding($.ig.Series.prototype._visibilityProxyProperty, (function () {
			var $ret = new $.ig.Binding(1, "Visibility");
			$ret.source($self);
			return $ret;
		}()));
		this.actualHitTestMode(this.getResolvedHitTestMode());
	},
	animator_PropertyChanged: function (sender, e) {
		this.transitionProgress(this.animator().transitionProgress());
	}
	,
	_animator: null,
	animator: function (value) {
		if (arguments.length === 1) {
			this._animator = value;
			return value;
		} else {
			return this._animator;
		}
	}
	,
	onViewCreated: function (view) {
	}
	,
	onSeriesAttached: function () {
		this.assertLegendItems(this.actualLegend(), this.actualLegend());
		if (this.fastItemsSource() == null && this.syncLink() != null && this.itemsSource() != null) {
			this.fastItemsSource((this.syncLink()).getFastItemsSource(this.itemsSource()));
		}
		this.view().onSeriesAttached();
	}
	,
	onSeriesDetached: function () {
		this.clearLegendItems();
		if (this.fastItemsSource() != null && this.syncLink() != null && this.itemsSource() != null) {
			this.fastItemsSource((this.syncLink()).releaseFastItemsSource(this.itemsSource()));
		}
		this.view().onSeriesDetached();
	}
	,
	createView: function () {
		return new $.ig.SeriesView(this);
	}
	,
	_rootCanvas: null,
	rootCanvas: function (value) {
		if (arguments.length === 1) {
			this._rootCanvas = value;
			return value;
		} else {
			return this._rootCanvas;
		}
	}
	,
	useParentMarkerCanvas: function () {
		return false;
	}
	,
	getExactItemIndex: function (world) {
		return this.getItemIndex(world);
	}
	,
	getItemIndex: function (world) {
		return -1;
	}
	,
	getItem: function (world) {
		return null;
	}
	,
	getSeriesItem: function (series, world) {
		return series.getItem(world);
	}
	,
	isAnnotationLayer: function () {
		return false;
	}
	,
	isVertical: function () {
		return false;
	}
	,
	isPolar: function () {
		return false;
	}
	,
	isScatter: function () {
		return false;
	}
	,
	isRadial: function () {
		return false;
	}
	,
	isStacked: function () {
		return false;
	}
	,
	isFinancial: function () {
		return false;
	}
	,
	isRange: function () {
		return false;
	}
	,
	isCategory: function () {
		return false;
	}
	,
	isGeographic: function () {
		return false;
	}
	,
	resolveHostedSeries: function () {
		return null;
	}
	,
	isDefaultCrosshairBehaviorDisabled: function () {
		return false;
	}
	,
	isDefaultTooltipBehaviorDisabled: function () {
		return false;
	}
	,
	getDistanceToIndex: function (world, index, axis, p, offset) {
		return Number.POSITIVE_INFINITY;
	}
	,
	getDistanceToIndexHelper: function (world, index, axis, scalerParams, offset, count, getExactUnsortedIndex) {
		if (axis == null) {
			return Number.POSITIVE_INFINITY;
		}
		if (index < 0 || index > count - 1) {
			return Number.POSITIVE_INFINITY;
		}
		var indexPos = 0;
		var exactItemIndex;
		var prevVal = NaN;
		var nextVal = NaN;
		var indVal = NaN;
		var inter = NaN;
		if (axis.isSorting()) {
			var sorting = axis;
			exactItemIndex = getExactUnsortedIndex(world);
			var prevItem = $.ig.truncate(Math.floor(exactItemIndex));
			var nextItem = $.ig.truncate(Math.ceil(exactItemIndex));
			inter = exactItemIndex - prevItem;
			if (prevItem >= 0 && prevItem < count) {
				var unscaled = sorting.getUnscaledValueAt(sorting.sortedIndices().__inner[prevItem]);
				prevVal = axis.getScaledValue(unscaled, scalerParams) + offset;
			} else {
				prevVal = NaN;
			}
			if (nextItem >= 0 && nextItem < count) {
				var unscaled1 = sorting.getUnscaledValueAt(sorting.sortedIndices().__inner[nextItem]);
				nextVal = axis.getScaledValue(unscaled1, scalerParams) + offset;
			} else {
				nextVal = NaN;
			}
			if ($.ig.util.isNaN(prevVal) && !$.ig.util.isNaN(nextVal)) {
				prevVal = nextVal;
			}
			if ($.ig.util.isNaN(nextVal) && !$.ig.util.isNaN(prevVal)) {
				nextVal = prevVal;
			}
			if (index >= 0 && index < count) {
				var unscaled2 = sorting.getUnscaledValueAt(sorting.sortedIndices().__inner[index]);
				indVal = axis.getScaledValue(unscaled2, scalerParams) + offset;
			}
		} else {
			exactItemIndex = this.getExactItemIndex(world);
			var prevItem1 = $.ig.truncate(Math.floor(exactItemIndex));
			var nextItem1 = $.ig.truncate(Math.ceil(exactItemIndex));
			inter = exactItemIndex - prevItem1;
			if (prevItem1 >= 0 && prevItem1 < count) {
				prevVal = axis.getScaledValue(prevItem1, scalerParams) + offset;
			} else {
				prevVal = NaN;
			}
			if (nextItem1 >= 0 && nextItem1 < count) {
				nextVal = axis.getScaledValue(nextItem1, scalerParams) + offset;
			} else {
				nextVal = NaN;
			}
			if ($.ig.util.isNaN(prevVal) && !$.ig.util.isNaN(nextVal)) {
				prevVal = nextVal;
			}
			if ($.ig.util.isNaN(nextVal) && !$.ig.util.isNaN(prevVal)) {
				nextVal = prevVal;
			}
			if (index >= 0 && index < count) {
				indVal = axis.getScaledValue(index, scalerParams) + offset;
			}
		}
		var worldVal = prevVal + inter * (nextVal - prevVal);
		return Math.abs(indVal - worldVal);
	}
	,
	usesPresortedValueColumn: function () {
		return false;
	}
	,
	getSeriesValueHelper: function (column, world, axis, pars, offset, getExactUnsortedIndex, useInterpolation, skipUnknowns) {
		if (column == null) {
			return NaN;
		}
		var presorted = this.usesPresortedValueColumn();
		var prevItem = this.getPreviousOrExactIndexHelper(world, skipUnknowns, axis, getExactUnsortedIndex, column);
		var nextItem = this.getNextOrExactIndexHelper(world, skipUnknowns, axis, getExactUnsortedIndex, column);
		var distToPrev = this.getDistanceToIndex(world, prevItem, axis, pars, offset);
		var distToNext = this.getDistanceToIndex(world, nextItem, axis, pars, offset);
		var unsortedPrevItem = prevItem;
		var unsortedNextItem = nextItem;
		var isSorting = axis.isSorting();
		if (isSorting && !presorted) {
			var sorting = axis;
			if (prevItem >= 0 && prevItem < sorting.sortedIndices().count()) {
				prevItem = sorting.sortedIndices().__inner[prevItem];
			}
			if (nextItem >= 0 && prevItem < sorting.sortedIndices().count()) {
				nextItem = sorting.sortedIndices().__inner[nextItem];
			}
		}
		var p = distToPrev / (distToNext + distToPrev);
		if (distToPrev == 0) {
			p = 0;
		}
		if (distToNext == 0) {
			p = 1;
		}
		if (!useInterpolation) {
			if (distToNext <= distToPrev) {
				if (nextItem >= 0 && nextItem < column.count()) {
					return column.item(nextItem);
				}
			} else {
				if (prevItem >= 0 && prevItem < column.count()) {
					return column.item(prevItem);
				}
			}
			return NaN;
		}
		return this.getInterpolatedSeriesValue(p, column, prevItem, nextItem, unsortedPrevItem, unsortedNextItem, offset, isSorting);
	}
	,
	getInterpolatedSeriesValue: function (p, column, prevItem, nextItem, unsortedPrevItem, unsortedNextItem, offset, isSorting) {
		var prevValue = NaN;
		if (prevItem >= 0 && prevItem < column.count()) {
			prevValue = column.item(prevItem);
		}
		var nextValue = NaN;
		if (nextItem >= 0 && nextItem < column.count()) {
			nextValue = column.item(nextItem);
		}
		if (unsortedNextItem == 0) {
			return nextValue;
		}
		if (unsortedPrevItem == column.count() - 1) {
			return prevValue;
		}
		if ($.ig.util.isNaN(nextValue) && offset != 0 && p <= 0.5 && !isSorting) {
			return prevValue;
		}
		if ($.ig.util.isNaN(prevValue) && offset != 0 && p >= 0.5 && !isSorting) {
			return nextValue;
		}
		return prevValue * (1 - p) + nextValue * p;
	}
	,
	getPreviousOrExactIndexHelper: function (world, skipUnknowns, indexAxis, getExactUnsortedIndex, valueColumn) {
		if (indexAxis == null) {
			return -1;
		}
		var isSorting = indexAxis.isSorting();
		var preSorted = this.usesPresortedValueColumn();
		var sorting = null;
		if (isSorting) {
			sorting = indexAxis;
		}
		var itemIndex = -1;
		var prevItem = -1;
		var nextItem = -1;
		if (isSorting) {
			itemIndex = getExactUnsortedIndex(world);
			if ($.ig.util.isNaN(itemIndex)) {
				return -1;
			}
			prevItem = $.ig.truncate(Math.floor(itemIndex));
			nextItem = $.ig.truncate(Math.ceil(itemIndex));
		} else {
			itemIndex = this.getExactItemIndex(world);
			if ($.ig.util.isNaN(itemIndex)) {
				return -1;
			}
			prevItem = $.ig.truncate(Math.floor(itemIndex));
			nextItem = $.ig.truncate(Math.ceil(itemIndex));
		}
		if (valueColumn == null) {
			return -1;
		}
		if (prevItem < 0 || prevItem > valueColumn.count() - 1) {
			return -1;
		}
		if (!skipUnknowns) {
			return prevItem;
		}
		var currVal = NaN;
		if (isSorting && !preSorted) {
			if (prevItem < sorting.sortedIndices().count() && sorting.sortedIndices().__inner[prevItem] < valueColumn.count()) {
				currVal = valueColumn.item(sorting.sortedIndices().__inner[prevItem]);
			}
		} else {
			currVal = valueColumn.item(prevItem);
		}
		while ($.ig.util.isNaN(currVal)) {
			prevItem--;
			if (prevItem < 0 || prevItem > valueColumn.count() - 1) {
				return -1;
			}
			if (isSorting && !preSorted) {
				currVal = valueColumn.item(sorting.sortedIndices().__inner[prevItem]);
			} else {
				currVal = valueColumn.item(prevItem);
			}
		}
		return prevItem;
	}
	,
	getHitTestAllowance: function (isFinger) {
		return (isFinger ? $.ig.SeriesView.prototype.tOUCH_HIT_THICKNESS_AUGMENT : $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
	}
	,
	getHighStrokeSegments: function (position) {
		return null;
	}
	,
	getLowStrokeSegments: function (position) {
		return null;
	}
	,
	testHighLowStrokeOver: function (position, isFinger) {
		var segs = this.getLowStrokeSegments(position);
		var highSegs = this.getHighStrokeSegments(position);
		if (segs == null) {
			return false;
		}
		for (var i = 0; i < segs.length; i++) {
			var seg = segs[i];
			if (seg == null || seg.length != 2) {
				continue;
			}
			if ($.ig.GeometryUtil.prototype.isPointNearLineSegment(position, seg[0], seg[1], this.thickness() / 2 + this.getHitTestAllowance(isFinger))) {
				return true;
			}
			if (highSegs != null && i < highSegs.length) {
				var highSeg = highSegs[i];
				if (highSeg == null || highSeg.length != 2) {
					continue;
				}
				if ($.ig.GeometryUtil.prototype.isPointNearLineSegment(position, highSeg[0], highSeg[1], this.thickness() / 2 + this.getHitTestAllowance(isFinger))) {
					return true;
				}
				if ($.ig.GeometryUtil.prototype.isPointNearLineSegment(position, seg[0], highSeg[0], this.thickness() / 2 + this.getHitTestAllowance(isFinger))) {
					return true;
				}
				if ($.ig.GeometryUtil.prototype.isPointNearLineSegment(position, seg[1], highSeg[1], this.thickness() / 2 + this.getHitTestAllowance(isFinger))) {
					return true;
				}
				var points = new Array(5);
				points[0] = highSeg[0];
				points[1] = highSeg[1];
				points[2] = seg[1];
				points[3] = seg[0];
				points[4] = highSeg[0];
				if ($.ig.PolygonUtil.prototype.polygonContainsPoint(points, position)) {
					return true;
				}
			}
		}
		return false;
	}
	,
	bucketBinarySearch: function (list, pos, isInverted, maxPosition) {
		var currMin = 0;
		var currMax = list.count() - 1;
		while (currMin <= currMax) {
			var currMid = (currMin + ((currMax - currMin) >> 1));
			var compResult;
			var item = list.item(currMid);
			if (isInverted) {
				compResult = (maxPosition - pos.__x) < (maxPosition - item[0]) ? -1 : ((maxPosition - pos.__x) > (maxPosition - item[0]) ? 1 : 0);
			} else {
				compResult = pos.__x < (item[0]) ? -1 : (pos.__x > (item[0]) ? 1 : 0);
			}
			if (compResult < 0) {
				currMax = currMid - 1;
			} else if (compResult > 0) {
				currMin = currMid + 1;
			} else {
				return currMid;
			}
		}
		return ~currMin;
	}
	,
	getMatchingBuckets: function (categoryAxis, buckets, bucketSize, firstBucket, world, skipUnknowns) {
		if (categoryAxis == null) {
			return null;
		}
		var prevBucketIndex = -1;
		var nextBucketIndex = -1;
		if (categoryAxis.isSorting()) {
			var pos = this.fromWorldPosition(world);
			var index = -1;
			var isInverted = categoryAxis.isInverted();
			var maxPosition = this.viewport().right() * 2;
			index = $.ig.Series.prototype.bucketBinarySearch(buckets, pos, isInverted, maxPosition);
			if (index < 0) {
				index = ~index;
				index--;
			}
			if (index < 0) {
				index = 0;
			}
			if (index > buckets.count() - 1) {
				index = buckets.count() - 1;
			}
			var prevIndex = index;
			var nextIndex = index + 1;
			if (nextIndex > buckets.count() - 1) {
				nextIndex = buckets.count() - 1;
			}
			prevBucketIndex = prevIndex;
			nextBucketIndex = nextIndex;
		} else {
			var previousIndex = this.getPreviousOrExactIndex(world, skipUnknowns);
			var nextIndex1 = this.getNextOrExactIndex(world, skipUnknowns);
			var prevBucket = $.ig.truncate(Math.floor(previousIndex / bucketSize));
			var nextBucket = $.ig.truncate(Math.floor(nextIndex1 / bucketSize));
			prevBucketIndex = prevBucket - firstBucket;
			nextBucketIndex = nextBucket - firstBucket;
			if (nextBucketIndex == prevBucketIndex) {
				nextBucketIndex++;
			}
		}
		if (prevBucketIndex < 0) {
			prevBucketIndex = 0;
		}
		if (prevBucketIndex > buckets.count() - 1) {
			prevBucketIndex = buckets.count() - 1;
		}
		if (nextBucketIndex < 0) {
			nextBucketIndex = 0;
		}
		if (nextBucketIndex > buckets.count() - 1) {
			nextBucketIndex = buckets.count() - 1;
		}
		if (prevBucketIndex < 0 || nextBucketIndex < 0) {
			return null;
		}
		var prevBucketValue = buckets.__inner[prevBucketIndex];
		var nextBucketValue = buckets.__inner[nextBucketIndex];
		var ret = new Array(2);
		ret[0] = prevBucketValue;
		ret[1] = nextBucketValue;
		return ret;
	}
	,
	testNearStroke: function (position, isFinger, pathData1) {
		for (var i = 0; i < pathData1.figures().count(); i++) {
			var figure = pathData1.figures().__inner[i];
			for (var j = 0; j < figure.__segments.count(); j++) {
				var segment = figure.__segments.__inner[j];
				if ($.ig.GeometryUtil.prototype.isPointNearPolyline(position, figure.__startPoint, segment.__points, this.getHitTestAllowance(isFinger))) {
					return true;
				}
			}
		}
		return false;
	}
	,
	testOverPoly: function (position, pathData1) {
		if (pathData1.figures().count() > 0) {
			var pathFigure = pathData1.figures().__inner[0];
			if (pathFigure.__segments.count() > 0) {
				var segment = pathFigure.__segments.__inner[0];
				if ($.ig.PolygonUtil.prototype.polygonContainsPoint(segment.__points, position)) {
					return true;
				}
			}
		}
		return false;
	}
	,
	getNextOrExactIndexHelper: function (world, skipUnknowns, indexAxis, getExactUnsortedIndex, valueColumn) {
		var preSorted = this.usesPresortedValueColumn();
		var isSorting = indexAxis.isSorting();
		var sorting = null;
		if (isSorting) {
			sorting = indexAxis;
		}
		var itemIndex = -1;
		var prevItem = -1;
		var nextItem = -1;
		if (isSorting) {
			itemIndex = getExactUnsortedIndex(world);
			if ($.ig.util.isNaN(itemIndex)) {
				return -1;
			}
			prevItem = $.ig.truncate(Math.floor(itemIndex));
			nextItem = $.ig.truncate(Math.ceil(itemIndex));
		} else {
			itemIndex = this.getExactItemIndex(world);
			if ($.ig.util.isNaN(itemIndex)) {
				return -1;
			}
			prevItem = $.ig.truncate(Math.floor(itemIndex));
			nextItem = $.ig.truncate(Math.ceil(itemIndex));
		}
		if (valueColumn == null) {
			return -1;
		}
		if (nextItem < 0 || nextItem > valueColumn.count() - 1) {
			return -1;
		}
		if (!skipUnknowns) {
			return nextItem;
		}
		var currVal = NaN;
		if (isSorting && !preSorted) {
			if (nextItem < sorting.sortedIndices().count() && sorting.sortedIndices().__inner[nextItem] < valueColumn.count()) {
				currVal = valueColumn.item(sorting.sortedIndices().__inner[nextItem]);
			}
		} else {
			currVal = valueColumn.item(nextItem);
		}
		while ($.ig.util.isNaN(currVal)) {
			nextItem++;
			if (nextItem < 0 || nextItem > valueColumn.count() - 1) {
				return -1;
			}
			if (isSorting && !preSorted) {
				currVal = valueColumn.item(sorting.sortedIndices().__inner[nextItem]);
			} else {
				currVal = valueColumn.item(nextItem);
			}
		}
		return nextItem;
	}
	,
	getExactUnsortedItemIndexHelper: function (world, axis) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		if (windowRect.isEmpty() || viewportRect.isEmpty() || axis == null) {
			return -1;
		}
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var sorting = null;
		if (axis.isSorting()) {
			sorting = axis;
		}
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, axis.isInverted(), effectiveViewportRect);
		if (this.seriesViewer() == null) {
			return -1;
		}
		p._effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var contentViewport = this.getContentViewport(this.view());
		var axisValue = 0;
		if (axis.isVertical()) {
			var top = axis.getUnscaledValue(contentViewport.top(), p);
			var bottom = axis.getUnscaledValue(contentViewport.bottom(), p);
			var windowY = (world.__y - windowRect.top()) / windowRect.height();
			axisValue = top + ((bottom - top) * windowY);
		} else {
			var left = axis.getUnscaledValue(contentViewport.left(), p);
			var right = axis.getUnscaledValue(contentViewport.right(), p);
			var windowX = (world.__x - windowRect.left()) / windowRect.width();
			axisValue = left + ((right - left) * windowX);
		}
		if (axis.isDateTime()) {
		}
		var exactItemIndex = sorting.getExactUnsortedIndexClosestToUnscaledValue(axisValue);
		return exactItemIndex;
	}
	,
	getPreviousOrExactIndex: function (world, skipUnknowns) {
		return -1;
	}
	,
	getNextOrExactIndex: function (world, skipUnknowns) {
		return -1;
	}
	,
	getSeriesValue: function (world, useInterpolation, skipUnknowns) {
		return NaN;
	}
	,
	getSeriesValuePosition: function (world, useInterpolation, skipUnknowns) {
		return { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getSeriesValueBoundingBox: function (world) {
		return $.ig.Rect.prototype.empty();
	}
	,
	getSeriesValueFineGrainedBoundingBoxes: function (world) {
		var box = this.getSeriesValueBoundingBox(world);
		if (!box.isEmpty()) {
			var ret = new Array(1);
			ret[0] = box;
			return ret;
		}
		return null;
	}
	,
	getSeriesValueBoundingBoxFromSeriesPixel: function (pixelPosition) {
		return this.getSeriesValueBoundingBox(this.toWorldPosition(pixelPosition));
	}
	,
	getSeriesValueFineGrainedBoundingBoxesFromSeriesPixel: function (pixelPosition) {
		return this.getSeriesValueFineGrainedBoundingBoxes(this.toWorldPosition(pixelPosition));
	}
	,
	getSeriesValueMarkerBoundingBox: function (world) {
		return $.ig.Rect.prototype.empty();
	}
	,
	getSeriesValueMarkerBoundingBoxFromSeriesPixel: function (pixelPosition) {
		return this.getSeriesValueMarkerBoundingBox(this.toWorldPosition(pixelPosition));
	}
	,
	testShapesOver: function (position, isFinger) {
		var box = this.getSeriesValueBoundingBoxFromSeriesPixel(position);
		if (box.isEmpty()) {
			return false;
		}
		var inflated = $.ig.RectUtil.prototype.inflate(box, this.getHitTestAllowance(isFinger));
		return inflated.containsPoint(position);
	}
	,
	getSeriesValuePositionHelper: function (world, useInterpolation, skipUnknowns, offset, valueAxis, indexAxis, getSeriesValue, getPrevious, getNext) {
		if (valueAxis == null || indexAxis == null || this.view() == null || this.view().windowRect().isEmpty() || this.view().viewport().isEmpty()) {
			return { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var valueParams = new $.ig.ScalerParams(0, this.view().windowRect(), this.view().viewport(), valueAxis.isInverted(), effectiveViewportRect);
		valueParams._effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var indexPos;
		if (indexAxis.isVertical()) {
			indexPos = world.__y;
			indexPos = this.view().viewport().top() + this.view().viewport().height() * (indexPos - this.view().windowRect().top()) / this.view().windowRect().height();
		} else {
			indexPos = world.__x;
			indexPos = this.view().viewport().left() + this.view().viewport().width() * (indexPos - this.view().windowRect().left()) / this.view().windowRect().width();
		}
		if (!useInterpolation && indexAxis != null) {
			var prevItem;
			var nextItem;
			if (getPrevious != null) {
				prevItem = getPrevious(world, skipUnknowns);
			} else {
				prevItem = this.getPreviousOrExactIndex(world, skipUnknowns);
			}
			if (getNext != null) {
				nextItem = getNext(world, skipUnknowns);
			} else {
				nextItem = this.getNextOrExactIndex(world, skipUnknowns);
			}
			var indexParams = new $.ig.ScalerParams(0, this.view().windowRect(), this.view().viewport(), indexAxis.isInverted(), effectiveViewportRect);
			indexParams._effectiveViewportRect = this.seriesViewer().viewportRect();
			var distToPrev = this.getDistanceToIndex(world, prevItem, indexAxis, indexParams, offset);
			var distToNext = this.getDistanceToIndex(world, nextItem, indexAxis, indexParams, offset);
			var nextVal = nextItem;
			var prevVal = prevItem;
			if (indexAxis.isSorting()) {
				var sorting = indexAxis;
				if (nextVal >= 0 && nextVal < sorting.sortedIndices().count()) {
					nextVal = sorting.getUnscaledValueAt(sorting.sortedIndices().__inner[$.ig.truncate(nextVal)]);
				}
				if (prevVal >= 0 && prevVal < sorting.sortedIndices().count()) {
					prevVal = sorting.getUnscaledValueAt(sorting.sortedIndices().__inner[$.ig.truncate(prevVal)]);
				}
			}
			if ((distToNext + distToPrev) != 0) {
				var rat = distToNext / (distToPrev + distToNext);
				if (Math.abs(rat - 0.5) < $.ig.Series.prototype._cLOSENESS_FACTOR) {
					distToNext = distToPrev;
				}
			}
			if (distToNext <= distToPrev) {
				indexPos = indexAxis.getScaledValue(nextVal, indexParams) + offset;
			} else {
				indexPos = indexAxis.getScaledValue(prevVal, indexParams) + offset;
			}
		} else {
			if (indexAxis.isCategory() && !indexAxis.isDateTime() && (indexAxis).categoryMode() != $.ig.CategoryMode.prototype.mode0) {
				var groupWidth = 0.5 * (indexAxis).getCategorySize(this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
				if (this.isVertical()) {
					groupWidth = groupWidth * -1;
				}
				if (indexAxis.isInverted()) {
					groupWidth = groupWidth * -1;
				}
				indexPos -= groupWidth;
				indexPos += offset;
			}
		}
		var val;
		if (getSeriesValue != null) {
			val = getSeriesValue(world, useInterpolation, skipUnknowns);
		} else {
			val = this.getSeriesValue(world, useInterpolation, skipUnknowns);
		}
		var valuePos = valueAxis.getScaledValue(val, valueParams);
		if (indexAxis.isVertical()) {
			return { __x: valuePos, __y: indexPos, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else {
			return { __x: indexPos, __y: valuePos, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
	}
	,
	getSeriesHighValue: function (world, useInterpolation, skipUnknowns) {
		return this.getSeriesValue(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesHighValuePosition: function (world, useInterpolation, skipUnknowns) {
		return this.getSeriesValuePosition(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesLowValue: function (world, useInterpolation, skipUnknowns) {
		return this.getSeriesValue(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesLowValuePosition: function (world, useInterpolation, skipUnknowns) {
		return this.getSeriesValuePosition(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesValuePositionFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesValuePosition(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesValueFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesValue(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesHighValuePositionFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesHighValuePosition(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesHighValueFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesHighValue(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesLowValuePositionFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesLowValuePosition(world, useInterpolation, skipUnknowns);
	}
	,
	getSeriesLowValueFromSeriesPixel: function (mouse, useInterpolation, skipUnknowns) {
		var world = this.toWorldPosition(mouse);
		return this.getSeriesLowValue(world, useInterpolation, skipUnknowns);
	}
	,
	getItemIndexFromSeriesPixel: function (mouse) {
		var world = this.toWorldPosition(mouse);
		return this.getItemIndex(world);
	}
	,
	getItemSpan: function () {
		return 0;
	}
	,
	getExactItemIndexFromSeriesPixel: function (mouse) {
		var world = this.toWorldPosition(mouse);
		return this.getExactItemIndex(world);
	}
	,
	getItemFromSeriesPixel: function (mouse) {
		var world = this.toWorldPosition(mouse);
		return this.getItem(world);
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (propertyName, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(propertyName, oldValue, newValue));
		}
	}
	,
	hasMarkers: function () {
		return false;
	}
	,
	getActualMarkerBrush: function () {
		return null;
	}
	,
	getActualMarkerOutlineBrush: function () {
		return null;
	}
	,
	getActualMarkerTemplate: function () {
		return null;
	}
	,
	toWorldPosition: function (seriesPoint) {
		var viewportRect = this.seriesViewer() != null ? this.seriesViewer().contentViewport() : this.view().viewport();
		var windowRect = this.view().windowRect();
		var world = { __x: windowRect.left() + windowRect.width() * (seriesPoint.__x - viewportRect.left()) / viewportRect.width(), __y: windowRect.top() + windowRect.height() * (seriesPoint.__y - viewportRect.top()) / viewportRect.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		return world;
	}
	,
	fromWorldPosition: function (world) {
		var viewportRect = this.seriesViewer() != null ? this.seriesViewer().contentViewport() : this.view().viewport();
		var windowRect = this.view().windowRect();
		var seriesX = viewportRect.left() + (world.__x - windowRect.left()) / windowRect.width() * viewportRect.width();
		var seriesY = viewportRect.top() + (world.__y - windowRect.top()) / windowRect.height() * viewportRect.height();
		return { __x: seriesX, __y: seriesY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	item: function (sender, point) {
		var dataContext = this.view().getDataContextFromSender(sender);
		var item = dataContext != null ? dataContext.item() : null;
		if (item == null) {
			var world = this.toWorldPosition(point);
			item = this.getItem(world);
		}
		return item;
	}
	,
	scrollIntoView: function (item) {
		return false;
	}
	,
	getRange: function (axis) {
		return new $.ig.AxisRange(NaN, NaN);
	}
	,
	renderSeries: function (animate) {
		this.skipPrepare(false);
		if (this.seriesViewer() != null) {
			this.seriesViewer().chartContentManager().refresh($.ig.ChartContentType.prototype.series, this, this.contentInfo(), animate);
			if (this.renderRequested != null) {
				var args = new $.ig.RenderRequestedEventArgs();
				args.animate(animate);
				this.renderRequested(this, args);
				animate = args.animate();
			}
		}
	}
	,
	renderRequested: null,
	doRenderSeries: function (animate) {
		this.renderSeriesOverride(animate);
		this.skipPrepare(false);
	}
	,
	renderSeriesOverride: function (animate) {
		if (this.transitionInViable() && !this.shouldTransitionIn()) {
			this.transitionInViable(false);
		}
	}
	,
	_transitionInIsInProgress: false,
	transitionInIsInProgress: function (value) {
		if (arguments.length === 1) {
			this._transitionInIsInProgress = value;
			return value;
		} else {
			return this._transitionInIsInProgress;
		}
	}
	,
	checkTransitionInterrupted: function () {
		if (this.transitionInIsInProgress() && !this.transitionInViable()) {
			this.animator().intervalMilliseconds($.ig.truncate(Math.max(this.getTotalMilliseconds(), this.getTotalTransitionInMilliseconds())));
			this.clearSpeedModifiers();
		}
	}
	,
	clearSpeedModifiers: function () {
	}
	,
	_thumbnailView: null,
	thumbnailView: function (value) {
		if (arguments.length === 1) {
			this._thumbnailView = value;
			return value;
		} else {
			return this._thumbnailView;
		}
	}
	,
	renderThumbnail: function (viewportRect, surface) {
		if (this.thumbnailView() == null) {
			this.thumbnailView(this.createView());
			this.thumbnailView().isThumbnailView(true);
			if (this.seriesViewer() != null) {
				this.seriesViewer().thumbnailCanvasRenderScheduler().register(this.thumbnailView());
				this.thumbnailView().currentScheduler(this.seriesViewer().thumbnailCanvasRenderScheduler());
			}
			this.thumbnailView().onInit();
		}
		this.thumbnailView().viewport(viewportRect);
	}
	,
	__alternateViews: null,
	alternateViews: function () {
		return this.__alternateViews;
	}
	,
	renderAlternateView: function (viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio) {
		this.ensureAlternateView(viewportRect, windowRect, viewIdentifier, effectiveScalingRatio);
	}
	,
	ensureAlternateView: function (viewportRect, windowRect, viewIdentifier, effectiveScalingRatio) {
		var $self = this;
		var view;
		if (!(function () { var $ret = $self.__alternateViews.tryGetValue(viewIdentifier, view); view = $ret.p1; return $ret.ret; }())) {
			view = this.createView();
			view.isThumbnailView(true);
			view.isAlternateView(true);
			if (this.seriesViewer() != null) {
				view.currentScheduler(this.seriesViewer().alternateViewRenderScheduler());
				this.seriesViewer().alternateViewRenderScheduler().register(view);
			}
			view.onInit();
			view.alternateViewIdentifier(viewIdentifier);
			this.__alternateViews.item(viewIdentifier, view);
		}
		view.scalingRatioOverride(effectiveScalingRatio);
		view.viewport(viewportRect);
		view.alternateWindow(windowRect);
	}
	,
	getEffectiveViewport1: function (view) {
		if (this.seriesViewer() == null) {
			return $.ig.Rect.prototype.empty();
		}
		if (view.isAlternateView()) {
			return this.seriesViewer().effectiveViewport();
		}
		if (view.isThumbnailView()) {
			if (this.seriesViewer().effectiveViewport().isEmpty()) {
				return this.seriesViewer().effectiveViewport();
			}
			var scaled = this.seriesViewer().getScaledEffectiveViewport(view.viewport(), this.seriesViewer().viewportRect(), this.seriesViewer().effectiveViewport());
			return scaled;
		}
		return this.seriesViewer().effectiveViewport();
	}
	,
	getContentViewport: function (view) {
		if (this.seriesViewer() == null || this.seriesViewer().contentViewport().isEmpty()) {
			return view.viewport();
		}
		if (view.isAlternateView()) {
			return view.viewport();
		}
		if (view.isThumbnailView()) {
			if (this.seriesViewer().effectiveViewport().isEmpty()) {
				return view.viewport();
			}
			if (this.seriesViewer().contentViewport().equals1(this.seriesViewer().viewportRect())) {
				return view.viewport();
			}
			var scaled = this.seriesViewer().getScaledEffectiveViewport(view.viewport(), this.seriesViewer().viewportRect(), this.seriesViewer().effectiveViewport());
			var contentViewport = this.seriesViewer().getCurrentContentViewport(view.viewport(), scaled, this.seriesViewer().actualWindowRect());
			return contentViewport;
		}
		return this.seriesViewer().contentViewport();
	}
	,
	getEffectiveViewportForViewport: function (viewport) {
		if (!this.viewport().equals1(viewport)) {
			return $.ig.Rect.prototype.empty();
		}
		return this.getEffectiveViewport();
	}
	,
	getEffectiveViewportForUnitViewport: function (view) {
		if (this.seriesViewer() == null || this.seriesViewer().effectiveViewport().isEmpty()) {
			return $.ig.Rect.prototype.empty();
		}
		var effective = this.seriesViewer().effectiveViewport();
		var viewport = view.viewport();
		var left = (effective.left() - viewport.left()) / viewport.width();
		var top = (effective.top() - viewport.top()) / viewport.height();
		var right = (effective.right() - viewport.left()) / viewport.width();
		var bottom = (effective.bottom() - viewport.top()) / viewport.height();
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	getEffectiveViewport: function () {
		return this.getEffectiveViewport1(this.view());
	}
	,
	removeAllAlternateViews: function () {
		this.removeAllAlternateViews1(null);
	}
	,
	removeAllAlternateViews1: function (oldViewer) {
		var toRemove = new $.ig.List$1(String, 0);
		var en = this.__alternateViews.keys().getEnumerator();
		while (en.moveNext()) {
			var key = en.current();
			toRemove.add(key);
		}
		for (var i = 0; i < toRemove.count(); i++) {
			this.removeAlternateView1(toRemove.__inner[i], oldViewer);
		}
	}
	,
	removeAlternateView: function (viewIdentifier) {
		this.removeAlternateView1(viewIdentifier, this.seriesViewer());
	}
	,
	removeAlternateView1: function (viewIdentifier, oldViewer) {
		var $self = this;
		var view;
		var viewer = oldViewer;
		if (viewer == null) {
			viewer = this.seriesViewer();
		}
		if ((function () { var $ret = $self.__alternateViews.tryGetValue(viewIdentifier, view); view = $ret.p1; return $ret.ret; }())) {
			if (viewer != null) {
				view.currentScheduler(null);
				viewer.alternateViewRenderScheduler().unRegister(view);
			}
			this.__alternateViews.remove(viewIdentifier);
		}
	}
	,
	getViewInfo: function (viewportRect, windowRect) {
		viewportRect = this.view().viewport();
		windowRect = this.view().windowRect();
		return {
			p0: viewportRect,
			p1: windowRect
		};
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		if (viewportRect.width() == 0 || viewportRect.height() == 0) {
			return false;
		}
		if ($.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, this) !== null || $.ig.util.cast($.ig.FragmentBase.prototype.$type, this) !== null) {
			return true;
		}
		return this.__visibility == $.ig.Visibility.prototype.visible;
	}
	,
	clearRendering: function (wipeClean, view) {
		if (wipeClean) {
			this.thumbnailDirty(true);
		}
	}
	,
	clearAndAbortIfInvalid: function () {
		return this.clearAndAbortIfInvalid1(this.view());
	}
	,
	clearAndAbortIfInvalid1: function (view) {
		var viewportRect = view.viewport();
		var windowRect = view.windowRect();
		if (!this.validateSeries(viewportRect, windowRect, view)) {
			this.clearRendering(true, view);
			return true;
		}
		return false;
	}
	,
	onViewportChanged: function (oldViewportRect, newViewportRect) {
		this.view().viewport(newViewportRect);
		this.viewportRectChangedOverride(oldViewportRect, newViewportRect);
		if (this.seriesViewer() != null) {
			this.seriesViewer().chartContentManager().viewportChanged($.ig.ChartContentType.prototype.series, this, this.contentInfo(), newViewportRect);
		}
	}
	,
	windowRectChangedOverride: function (oldWindowRect, newWindowRect) {
	}
	,
	viewportRectChangedOverride: function (oldViewportRect, newViewportRect) {
	}
	,
	_contentInfo: null,
	contentInfo: function (value) {
		if (arguments.length === 1) {
			this._contentInfo = value;
			return value;
		} else {
			return this._contentInfo;
		}
	}
	,
	__thumbnailDirty: false,
	thumbnailDirty: function (value) {
		if (arguments.length === 1) {
			this.__thumbnailDirty = value;
			return value;
		} else {
			return this.__thumbnailDirty;
		}
	}
	,
	forceIndexUpdate: function (other) {
		other.doUpdateIndexedProperties();
	}
	,
	notifyThumbnailDataChanged: function () {
		this.skipThumbnailPrepare(false);
		this.thumbnailDirty(true);
		if (this.seriesViewer() != null) {
			this.seriesViewer().notifyThumbnailDataChanged();
		}
	}
	,
	notifyThumbnailAppearanceChanged: function () {
		this.skipThumbnailPrepare(false);
		this.thumbnailDirty(true);
		if (this.seriesViewer() != null) {
			this.seriesViewer().notifyThumbnailAppearanceChanged();
		}
	}
	,
	isIndexed: function () {
		return true;
	}
	,
	isUsableInLegend: function () {
		return true;
	}
	,
	onIsDropShadowEnabledChanged: function () {
		this.view().handleIsDropShadowEnabledChanged();
	}
	,
	notifyVisualPropertiesChanged: function () {
		this.onVisualPropertiesChanged();
	}
	,
	onVisualPropertiesChanged: function () {
		this.view().onVisualPropertiesChanged();
		this.onVisualPropertiesChangedOverride(false);
	}
	,
	onVisualPropertiesChangedImmediate: function () {
		this.view().onVisualPropertiesChanged();
		this.onVisualPropertiesChangedOverride(true);
	}
	,
	_skipPrepare: false,
	skipPrepare: function (value) {
		if (arguments.length === 1) {
			this._skipPrepare = value;
			return value;
		} else {
			return this._skipPrepare;
		}
	}
	,
	_skipThumbnailPrepare: false,
	skipThumbnailPrepare: function (value) {
		if (arguments.length === 1) {
			this._skipThumbnailPrepare = value;
			return value;
		} else {
			return this._skipThumbnailPrepare;
		}
	}
	,
	onVisualPropertiesChangedOverride: function (immediate) {
		if (this.contentInfo() == null || this.contentInfo().isDirty()) {
			return;
		}
		var viewport = this.view().viewport();
		var window = this.view().windowRect();
		var mainViewValid = this.validateSeries(viewport, window, this.view());
		var thumbnailValid = this.seriesViewer() != null && this.seriesViewer().isThumbnailRequired() && this.thumbnailView() != null && this.validateSeries(this.thumbnailView().viewport(), this.thumbnailView().windowRect(), this.thumbnailView());
		if (mainViewValid) {
			if (immediate) {
				this.skipPrepare(true);
				this.doRenderSeries(false);
			} else {
				this.renderSeries(false);
				this.skipPrepare(true);
			}
		}
		if (thumbnailValid) {
			if (!this.thumbnailDirty()) {
				this.notifyThumbnailAppearanceChanged();
				this.skipThumbnailPrepare(true);
			}
		}
	}
	,
	__transitionInViable: false,
	transitionInViable: function (value) {
		if (arguments.length === 1) {
			this.__transitionInViable = value;
			return value;
		} else {
			return this.__transitionInViable;
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.Series.prototype.syncLinkPropertyName:
				if ($.ig.util.cast($.ig.SyncLink.prototype.$type, oldValue) !== null) {
					var $t = (oldValue);
					$t.propertyUpdated = $.ig.Delegate.prototype.remove($t.propertyUpdated, this._seriesViewer_PropertyUpdated);
					this.releaseItemsSource($.ig.util.cast($.ig.IFastItemsSourceProvider.prototype.$type, oldValue));
				}
				if ($.ig.util.cast($.ig.SyncLink.prototype.$type, newValue) !== null) {
					var $t1 = (newValue);
					$t1.propertyUpdated = $.ig.Delegate.prototype.combine($t1.propertyUpdated, this._seriesViewer_PropertyUpdated);
					this.registerItemsSource($.ig.util.cast($.ig.IFastItemsSourceProvider.prototype.$type, newValue));
				}
				if (this.index() == -1) {
					this.index($.ig.XamDataChart.prototype.findSeriesIndex(this));
				}
				break;
			case $.ig.XamDataChart.prototype.brushesPropertyName:
			case $.ig.XamDataChart.prototype.markerOutlinesPropertyName:
			case $.ig.XamDataChart.prototype.markerBrushesPropertyName:
			case $.ig.XamDataChart.prototype.outlinesPropertyName:
				this.doUpdateIndexedProperties();
				break;
			case $.ig.Series.prototype.seriesViewerPropertyName:
				if ($.ig.util.cast($.ig.SeriesViewer.prototype.$type, oldValue) !== null) {
					var $t2 = (oldValue);
					$t2.windowRectChanged = $.ig.Delegate.prototype.remove($t2.windowRectChanged, this._seriesViewer_WindowRectChanged);
					var $t3 = (oldValue).series();
					$t3.collectionChanged = $.ig.Delegate.prototype.remove($t3.collectionChanged, this._seriesViewer_SeriesCollectionChanged);
					var $t4 = (oldValue);
					$t4.propertyUpdated = $.ig.Delegate.prototype.remove($t4.propertyUpdated, this._seriesViewer_PropertyUpdated);
					(oldValue).chartContentManager().unsubscribe($.ig.ChartContentType.prototype.series, this);
					this.removeAllAlternateViews1(oldValue);
					this.view().detachFromChart(oldValue);
				}
				if ($.ig.util.cast($.ig.SeriesViewer.prototype.$type, newValue) !== null) {
					var $t5 = (newValue);
					$t5.windowRectChanged = $.ig.Delegate.prototype.combine($t5.windowRectChanged, this._seriesViewer_WindowRectChanged);
					var $t6 = (newValue).series();
					$t6.collectionChanged = $.ig.Delegate.prototype.combine($t6.collectionChanged, this._seriesViewer_SeriesCollectionChanged);
					var $t7 = (newValue);
					$t7.propertyUpdated = $.ig.Delegate.prototype.combine($t7.propertyUpdated, this._seriesViewer_PropertyUpdated);
					this.contentInfo((newValue).chartContentManager().subscribe($.ig.ChartContentType.prototype.series, this, this.doRenderSeries.runOn(this)));
					this.view().attachToChart(newValue);
					this.updateActualAreaFillOpacity();
					this._uniqueIndex = this.seriesViewer().getNextUniqueIndex();
				}
				if (this.index() == -1 || newValue == null) {
					this.index($.ig.XamDataChart.prototype.findSeriesIndex(this));
				}
				this.actualLegend(this.findActualLegend());
				this.assertLegendItems1($.ig.util.cast($.ig.XamDataChart.prototype.$type, oldValue), $.ig.util.cast($.ig.XamDataChart.prototype.$type, newValue));
				break;
			case $.ig.Series.prototype.titlePropertyName:
				if (this.view() != null) {
					this.view().onTitlePropertyChanged();
				}
				break;
			case $.ig.Series.prototype.hitTestModePropertyName:
				this.actualHitTestMode(this.getResolvedHitTestMode());
				break;
			case $.ig.Series.prototype.actualHitTestModePropertyName:
				if (this.seriesViewer() != null) {
					this.seriesViewer().recalculateResolvedHitTestMode();
				}
				break;
			case $.ig.Series.prototype.legendItemBadgeTemplatePropertyName:
			case $.ig.Series.prototype.legendItemTemplatePropertyName:
				this.view().updateLegendItemVisual();
				break;
			case $.ig.Series.prototype.brushPropertyName:
			case $.ig.Series.prototype.outlinePropertyName:
			case $.ig.Series.prototype.dashArrayPropertyName:
			case $.ig.Series.prototype.dashCapPropertyName:
				this.doUpdateIndexedProperties();
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype.indexPropertyName:
				if ($.ig.util.getValue(oldValue) != $.ig.util.getValue(newValue)) {
					this.doUpdateIndexedProperties();
					this.onVisualPropertiesChanged();
				}
				break;
			case "RadiusX":
			case "RadiusY":
			case "RoundedCornersLocation":
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype._areaFillOpacityPropertyName:
				this.updateActualAreaFillOpacity();
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype.startCapPropertyName:
			case $.ig.Series.prototype.endCapPropertyName:
			case $.ig.Series.prototype.miterLimitPropertyName:
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype.isDropShadowEnabledPropertyName:
				this.onIsDropShadowEnabledChanged();
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype.useSingleShadowPropertyName:
			case $.ig.Series.prototype.shadowColorPropertyName:
			case $.ig.Series.prototype.shadowBlurPropertyName:
			case $.ig.Series.prototype.shadowOffsetXPropertyName:
			case $.ig.Series.prototype.shadowOffsetYPropertyName:
				this.onVisualPropertiesChanged();
				break;
			case $.ig.Series.prototype.actualBrushPropertyName:
			case $.ig.Series.prototype.actualOutlinePropertyName:
			case $.ig.Series.prototype.thicknessPropertyName:
				this.onVisualPropertiesChanged();
				this.view().updateLegendItemVisual();
				if (this.toolTip() != null) {
					this.view().updateToolTipValue(this.toolTip());
				}
				break;
			case "Visibility":
				this.view().visibilityChanged();
				break;
			case $.ig.Series.prototype.itemsSourcePropertyName:
				if (this.syncLink() != null) {
					this.registerItemsSource(this.syncLink());
				}
				break;
			case $.ig.Series.prototype.fastItemsSourcePropertyName:
				if (oldValue != newValue && newValue != null) {
					this.transitionInViable(true);
				}
				this.notifyThumbnailDataChanged();
				if ($.ig.util.cast($.ig.IFastItemsSource.prototype.$type, oldValue) != null) {
					var $t8 = (oldValue);
					$t8.event = $.ig.Delegate.prototype.remove($t8.event, this._fastItemsSource_Event);
				}
				if ($.ig.util.cast($.ig.IFastItemsSource.prototype.$type, newValue) != null) {
					var $t9 = (newValue);
					$t9.event = $.ig.Delegate.prototype.combine($t9.event, this._fastItemsSource_Event);
				}
				break;
			case $.ig.XamDataChart.prototype.legendPropertyName:
				if (newValue != null) {
					if (sender == this) {
						(newValue).seriesOwner(this);
					} else if ($.ig.util.cast($.ig.XamDataChart.prototype.$type, sender) !== null) {
						(newValue).chartOwner(sender);
					}
				}
				this.actualLegend(this.findActualLegend());
				break;
			case $.ig.Series.prototype.actualLegendPropertyName:
				this.assertLegendItems($.ig.util.cast($.ig.LegendBase.prototype.$type, oldValue), $.ig.util.cast($.ig.LegendBase.prototype.$type, newValue));
				break;
			case $.ig.Series.prototype.legendItemPropertyName:
				this.assertLegendItems2($.ig.util.cast($.ig.Control.prototype.$type, oldValue), $.ig.util.cast($.ig.Control.prototype.$type, newValue));
				break;
			case $.ig.Series.prototype.legendItemVisibilityPropertyName:
				this.view().onLegendItemVisibilityChanged();
				break;
			case $.ig.Series.prototype.toolTipPropertyName:
				this.view().updateToolTipValue(this.toolTip());
				break;
			case $.ig.XamDataChart.prototype.crosshairPointPropertyName:
				if (this.seriesViewer() != null) {
					if (!this.disableCursorEvents()) {
						this.seriesViewer().raiseSeriesCursorMouseMove(this, this.getItem(this.seriesViewer().crosshairPoint()));
					}
				}
				break;
			case $.ig.Series.prototype.resolutionPropertyName:
				this.renderSeries(false);
				this.notifyThumbnailAppearanceChanged();
				break;
			case $.ig.Series.prototype.transitionDurationPropertyName:
			case $.ig.Series.prototype.transitionEasingFunctionPropertyName:
				this.animator().stop();
				this.animator().intervalMilliseconds(this.transitionDuration());
				this.animator().easingFunction(this.transitionEasingFunction());
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.discreteLegendItemTemplatePropertyName:
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.visibilityProxyPropertyName:
				if (oldValue != newValue) {
					this.renderSeries(false);
				}
				this.notifyThumbnailAppearanceChanged();
				this.view().visibilityChanged();
				break;
			case $.ig.Series.prototype.isHighlightingEnabledPropertyName:
				this.actualIsHighlightingEnabled(this.getIsHighlightingEnabled());
				this.renderSeries(false);
				break;
		}
	}
	,
	getIsHighlightingEnabled: function () {
		return this.isHighlightingEnabled() && this.isHighlightingSupported();
	}
	,
	isHighlightingSupported: function () {
		return false;
	}
	,
	_disableCursorEvents: false,
	disableCursorEvents: function (value) {
		if (arguments.length === 1) {
			this._disableCursorEvents = value;
			return value;
		} else {
			return this._disableCursorEvents;
		}
	}
	,
	disableCursorEventsForSeries: function (series) {
		series.disableCursorEvents(true);
	}
	,
	syncLink: function (value) {
		if (arguments.length === 1) {
			if (this.syncLink() != value) {
				var oldDataChart = this.syncLink();
				this._syncLink = value;
				this.raisePropertyChanged($.ig.Series.prototype.syncLinkPropertyName, oldDataChart, this.syncLink());
			}
			return value;
		} else {
			return this._syncLink;
		}
	}
	,
	_syncLink: null,
	seriesViewer: function (value) {
		if (arguments.length === 1) {
			if (this.seriesViewer() != value) {
				var oldChart = this.seriesViewer();
				this.__seriesViewer = value;
				this.raisePropertyChanged($.ig.Series.prototype.seriesViewerPropertyName, oldChart, this.__seriesViewer);
			}
			return value;
		} else {
			return this.__seriesViewer;
		}
	}
	,
	__seriesViewer: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this.seriesViewer(value);
			return value;
		} else {
			return $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		}
	}
	,
	_seriesViewer_SeriesCollectionChanged: null,
	_seriesViewer_PropertyUpdated: null,
	_seriesViewer_WindowRectChanged: null,
	itemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.itemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.itemsSourceProperty);
		}
	}
	,
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.fastItemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.fastItemsSourceProperty);
		}
	}
	,
	_fastItemsSource_Event: null,
	dataUpdatedOverride: function (action, position, count, propertyName) {
	}
	,
	legend: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.legendProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.legendProperty);
		}
	}
	,
	legendItem: function (value) {
		if (arguments.length === 1) {
			if (this.legendItem() != value) {
				var oldLegendItem = this.legendItem();
				this._legendItem = value;
				this.raisePropertyChanged($.ig.Series.prototype.legendItemPropertyName, oldLegendItem, this._legendItem);
			}
			return value;
		} else {
			return this._legendItem;
		}
	}
	,
	_legendItem: null,
	provideLegendItem: function () {
		return this.getLegendItem();
	}
	,
	getLegendItem: function () {
		var $self = this;
		var legendItem = $.ig.util.cast($.ig.ContentControl.prototype.$type, this.legendItem());
		var dataTemplate = this.legendItemTemplate();
		if (dataTemplate != null) {
			if (legendItem == null) {
				legendItem = new $.ig.ContentControl();
			}
			legendItem.content((function () {
				var $ret = new $.ig.DataContext();
				$ret.series($self);
				$ret.item(null);
				return $ret;
			}()));
			legendItem.contentTemplate(dataTemplate);
		} else {
			legendItem = null;
		}
		return legendItem;
	}
	,
	actualLegend: function (value) {
		if (arguments.length === 1) {
			if (this.actualLegend() != value) {
				var oldActualLegend = this._actualLegend;
				this._actualLegend = value;
				this.raisePropertyChanged($.ig.Series.prototype.actualLegendPropertyName, oldActualLegend, this._actualLegend);
			}
			return value;
		} else {
			return this._actualLegend;
		}
	}
	,
	_actualLegend: null,
	legendItemVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.legendItemVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.Series.prototype.legendItemVisibilityProperty));
		}
	}
	,
	legendItemBadgeTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.legendItemBadgeTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.legendItemBadgeTemplateProperty);
		}
	}
	,
	legendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.legendItemTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.legendItemTemplateProperty);
		}
	}
	,
	discreteLegendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.discreteLegendItemTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.discreteLegendItemTemplateProperty);
		}
	}
	,
	index: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.indexProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.Series.prototype.indexProperty));
		}
	}
	,
	updateSeriesIndexedPropertiesInternal: function () {
		this.updateIndexedProperties();
	}
	,
	doUpdateIndexedProperties: function () {
		this.updateIndexedProperties();
	}
	,
	updateIndexedProperties: function () {
		this.notifyThumbnailAppearanceChanged();
		if (this.index() < 0) {
			return;
		}
		if (this.brush() != null) {
			this.view().resetActualBrush();
			this.view().bindActualToUserBrush();
		} else {
			this.actualBrush(this.seriesViewer() == null ? null : this.seriesViewer().getBrushByIndex(this.index()));
		}
		if (this.outline() != null) {
			this.view().resetActualOutlineBrush();
			this.view().bindActualToUserOutline();
		} else {
			this.actualOutline(this.seriesViewer() == null ? null : this.seriesViewer().getOutlineByIndex(this.index()));
		}
	}
	,
	transitionEasingFunction: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionEasingFunctionProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.transitionEasingFunctionProperty);
		}
	}
	,
	transitionInEasingFunction: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionInEasingFunctionProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.transitionInEasingFunctionProperty);
		}
	}
	,
	_functionOrDurationUpdated: false,
	functionOrDurationUpdated: function (value) {
		if (arguments.length === 1) {
			this._functionOrDurationUpdated = value;
			return value;
		} else {
			return this._functionOrDurationUpdated;
		}
	}
	,
	transitionDuration: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionDurationProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.Series.prototype.transitionDurationProperty));
		}
	}
	,
	transitionProgress: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionProgressProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.transitionProgressProperty);
		}
	}
	,
	animationActive: function () {
		return this.animator().animationActive();
	}
	,
	startAnimation: function () {
		this.animator().start();
	}
	,
	resolution: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.resolutionProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.resolutionProperty);
		}
	}
	,
	title: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.titleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.titleProperty);
		}
	}
	,
	brush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.brushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.brushProperty);
		}
	}
	,
	actualBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.actualBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.actualBrushProperty);
		}
	}
	,
	outline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.outlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.outlineProperty);
		}
	}
	,
	actualOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.actualOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.actualOutlineProperty);
		}
	}
	,
	miterLimit: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.miterLimitProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.miterLimitProperty);
		}
	}
	,
	thickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.thicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.thicknessProperty);
		}
	}
	,
	dashCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.dashCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.Series.prototype.dashCapProperty));
		}
	}
	,
	dashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.dashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.dashArrayProperty);
		}
	}
	,
	toolTip: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.toolTipProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.toolTipProperty);
		}
	}
	,
	isHighlightingEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.isHighlightingEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.isHighlightingEnabledProperty);
		}
	}
	,
	isDropShadowEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.isDropShadowEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.isDropShadowEnabledProperty);
		}
	}
	,
	isDropShadowSupported: function () {
		return true;
	}
	,
	shadowBlur: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.shadowBlurProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.shadowBlurProperty);
		}
	}
	,
	shadowColor: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.shadowColorProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.shadowColorProperty);
		}
	}
	,
	useSingleShadow: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.useSingleShadowProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.useSingleShadowProperty);
		}
	}
	,
	shadowOffsetX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.shadowOffsetXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.shadowOffsetXProperty);
		}
	}
	,
	shadowOffsetY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.shadowOffsetYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.shadowOffsetYProperty);
		}
	}
	,
	_actualIsHighlightingEnabled: false,
	actualIsHighlightingEnabled: function (value) {
		if (arguments.length === 1) {
			this._actualIsHighlightingEnabled = value;
			return value;
		} else {
			return this._actualIsHighlightingEnabled;
		}
	}
	,
	areaFillOpacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.areaFillOpacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.areaFillOpacityProperty);
		}
	}
	,
	actualAreaFillOpacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.actualAreaFillOpacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Series.prototype.actualAreaFillOpacityProperty);
		}
	}
	,
	updateActualAreaFillOpacity: function () {
		var chart = ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer()));
		if (chart != null) {
			this.actualAreaFillOpacity($.ig.util.isNaN(this.areaFillOpacity()) ? chart.chartView().defaultAreaFillOpacity() : this.areaFillOpacity());
		}
	}
	,
	__isDefaultToolTipSelected: false,
	isDefaultToolTipSelected: function (value) {
		if (arguments.length === 1) {
			this.__isDefaultToolTipSelected = value;
			return value;
		} else {
			return this.__isDefaultToolTipSelected;
		}
	}
	,
	getTooltipContext: function (item) {
		var $self = this;
		return (function () {
			var $ret = new $.ig.DataContext();
			$ret.series($self);
			$ret.item(item);
			return $ret;
		}());
	}
	,
	transitionInDuration: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionInDurationProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.Series.prototype.transitionInDurationProperty));
		}
	}
	,
	transitionInSpeedType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.transitionInSpeedTypeProperty, $.ig.TransitionInSpeedType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.Series.prototype.transitionInSpeedTypeProperty));
		}
	}
	,
	getDefaultTransitionInSpeedType: function () {
		return $.ig.TransitionInSpeedType.prototype.normal;
	}
	,
	_currentToolTipParent: null,
	currentToolTipParent: function (value) {
		if (arguments.length === 1) {
			this._currentToolTipParent = value;
			return value;
		} else {
			return this._currentToolTipParent;
		}
	}
	,
	removeToolTipFromCurrentParent: function () {
		this.view().removeToolTipFromCurrentParent();
	}
	,
	replayTransitionIn: function () {
		this.transitionInViable(true);
		this.renderSeries(true);
	}
	,
	invalidateAxes: function () {
	}
	,
	wMA: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.wMA(sequence, period);
	}
	,
	eMA: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.eMA(sequence, period);
	}
	,
	mMA: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.mMA(sequence, period);
	}
	,
	cMA: function (sequence) {
		return $.ig.TrendCalculators.prototype.cMA(sequence);
	}
	,
	sMA: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.sMA(sequence, period);
	}
	,
	movingSum: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.movingSum(sequence, period);
	}
	,
	sTDEV: function (sequence, period) {
		return $.ig.TrendCalculators.prototype.sTDEV(sequence, period);
	}
	,
	toEnumerableRange: function (expression, start, length) {
		var d__ = new $.ig.Series___ToEnumerableRange__IteratorClass(-2);
		d__.__3__expression = expression;
		d__.__3__start = start;
		d__.__3__length = length;
		return d__;
	}
	,
	toEnumerable: function (expression, length) {
		return $.ig.Series.prototype.toEnumerableRange(expression, 0, length);
	}
	,
	startCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.startCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.Series.prototype.startCapProperty));
		}
	}
	,
	endCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Series.prototype.endCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.Series.prototype.endCapProperty));
		}
	}
	,
	__seriesComponentsForView: null,
	getSeriesComponentsForView: function () {
		return this.__seriesComponentsForView;
	}
	,
	setMarkerCanvas: function (canvas) {
		this.updateMarkerCanvas(canvas);
	}
	,
	getTotalMilliseconds: function () {
		return this.transitionDuration();
	}
	,
	getTotalTransitionInMilliseconds: function () {
		return this.transitionInDuration();
	}
	,
	_lastHoverItem: null,
	lastHoverItem: function (value) {
		if (arguments.length === 1) {
			this._lastHoverItem = value;
			return value;
		} else {
			return this._lastHoverItem;
		}
	}
	,
	_mouseIsOver: false,
	mouseIsOver: function (value) {
		if (arguments.length === 1) {
			this._mouseIsOver = value;
			return value;
		} else {
			return this._mouseIsOver;
		}
	}
	,
	_pressed: false,
	pressed: function (value) {
		if (arguments.length === 1) {
			this._pressed = value;
			return value;
		} else {
			return this._pressed;
		}
	}
	,
	__useDeferredMouseEnterAndLeave: false,
	useDeferredMouseEnterAndLeave: function (value) {
		if (arguments.length === 1) {
			this.__useDeferredMouseEnterAndLeave = value;
			return value;
		} else {
			return this.__useDeferredMouseEnterAndLeave;
		}
	}
	,
	shouldDeferEnterAndLeave: function () {
		return this.useDeferredMouseEnterAndLeave();
	}
	,
	__isMouseEnterDeferred: false,
	isMouseEnterDeferred: function (value) {
		if (arguments.length === 1) {
			this.__isMouseEnterDeferred = value;
			return value;
		} else {
			return this.__isMouseEnterDeferred;
		}
	}
	,
	__isMouseLeaveDeferred: false,
	isMouseLeaveDeferred: function (value) {
		if (arguments.length === 1) {
			this.__isMouseLeaveDeferred = value;
			return value;
		} else {
			return this.__isMouseLeaveDeferred;
		}
	}
	,
	getHighlightingInfo: function (item, world) {
		return null;
	}
	,
	getMarkerHighlightingInfo: function (item, world) {
		return null;
	}
	,
	_lastHighlightingInfo: null,
	lastHighlightingInfo: function (value) {
		if (arguments.length === 1) {
			this._lastHighlightingInfo = value;
			return value;
		} else {
			return this._lastHighlightingInfo;
		}
	}
	,
	_lastMarkerHighlightingInfo: null,
	lastMarkerHighlightingInfo: function (value) {
		if (arguments.length === 1) {
			this._lastMarkerHighlightingInfo = value;
			return value;
		} else {
			return this._lastMarkerHighlightingInfo;
		}
	}
	,
	modifyHighlights: function (item, world, directlyOver, leaving) {
		if (this.seriesViewer().justZoomed() && !leaving) {
			return;
		}
		if (!this.actualIsHighlightingEnabled()) {
			return;
		}
		if (this.seriesViewer() == null) {
			return;
		}
		var info = null;
		var markerInfo = null;
		var highlightingManager = this.seriesViewer().highlightingManager();
		var highlightingAnimator = this.seriesViewer().highlightingAnimator();
		if (leaving && this.lastHighlightingInfo() != null) {
			info = this.lastHighlightingInfo();
		} else {
			info = this.getHighlightingInfo(item, world);
			if (this.lastHighlightingInfo() != null && this.lastHighlightingInfo() != info) {
				if (this.seriesViewer() != null) {
					highlightingManager.endHighlight(this.lastHighlightingInfo());
				}
			}
			this.lastHighlightingInfo(info);
		}
		if (this.hasMarkers()) {
			if (leaving && this.lastMarkerHighlightingInfo() != null) {
				markerInfo = this.lastMarkerHighlightingInfo();
			} else {
				markerInfo = this.getMarkerHighlightingInfo(item, world);
				if (this.lastMarkerHighlightingInfo() != null && this.lastMarkerHighlightingInfo() != markerInfo) {
					highlightingManager.endHighlight(this.lastMarkerHighlightingInfo());
				}
				this.lastMarkerHighlightingInfo(markerInfo);
			}
		}
		var onlyDirect = true;
		if (leaving) {
			highlightingManager.endHighlight(info);
			if (markerInfo != null) {
				highlightingManager.endHighlight(markerInfo);
			}
		} else {
			if (directlyOver || !onlyDirect) {
				highlightingManager.startHighlight(info);
				if (markerInfo != null) {
					highlightingManager.startHighlight(markerInfo);
				}
			}
		}
		if (!highlightingAnimator.animationActive() && highlightingAnimator.intervalMilliseconds() > 0) {
			highlightingAnimator.start();
		}
		if (highlightingAnimator.intervalMilliseconds() == 0) {
			this.seriesViewer().updateHighlights(1);
		}
	}
	,
	onMouseEnter: function (pt, source, data) {
		this.view().goToMouseOverState();
		this.mouseIsOver(true);
		var item = this.item(source, pt);
		this.lastHoverItem(item);
		if (this.seriesViewer() != null && !this.contentInfo().isDirty()) {
			this.view().updateToolTip(pt, item, data);
		}
		this.__isMouseEnterDeferred = false;
		if (this.shouldDeferEnterAndLeave() && item == null) {
			this.__isMouseEnterDeferred = true;
		}
		if (this.seriesViewer() != null && !this.__isMouseEnterDeferred) {
			if (this.shouldDeferEnterAndLeave()) {
				this.__isMouseLeaveDeferred = true;
			}
			this.modifyHighlights(item, this.toWorldPosition(pt), true, false);
			this.seriesViewer().onSeriesMouseEnter(this, item, data);
		}
	}
	,
	simulateHover: function (point) {
		var $self = this;
		var source = null;
		var data = null;
		var cont;
		var series = (function () { var $ret = $self.seriesViewer().view().getHitSeries(point, false, cont, false); cont = $ret.p2; return $ret.ret; }());
		if (series != this) {
			if (this.mouseIsOver()) {
				this.onMouseLeave(point, null, null);
			}
			return;
		}
		source = cont;
		if (!this.mouseIsOver()) {
			this.onMouseEnter(point, source, data);
		}
		this.onMouseMove(point, source, data);
	}
	,
	onMouseMove: function (point, source, data) {
		this.mouseIsOver(true);
		var item = this.item(source, point);
		this.view().updateToolTip(point, item, data);
		if (item != null) {
			this.lastHoverItem(item);
		}
		if (this.seriesViewer() != null && item != null && this.__isMouseEnterDeferred) {
			this.__isMouseEnterDeferred = false;
			this.__isMouseLeaveDeferred = true;
			this.modifyHighlights(item, this.toWorldPosition(point), true, false);
			this.seriesViewer().onSeriesMouseEnter(this, item, data);
		}
		if (this.seriesViewer() != null && (!this.shouldDeferEnterAndLeave() || item != null) && !this.__isMouseEnterDeferred) {
			this.modifyHighlights(item, this.toWorldPosition(point), true, false);
			this.seriesViewer().onSeriesMouseMove(this, item, data);
		}
		if (item == null && !this.__isMouseEnterDeferred && this.shouldDeferEnterAndLeave()) {
			this.modifyHighlights(item, this.toWorldPosition(point), false, true);
			this.seriesViewer().onSeriesMouseLeave(this, this.lastHoverItem(), data);
			this.__isMouseLeaveDeferred = false;
			this.__isMouseEnterDeferred = true;
		}
	}
	,
	onMouseLeave: function (pt, p, data) {
		this.view().goToNormalState();
		this.mouseIsOver(false);
		var item = this.lastHoverItem();
		this.view().hideTooltip();
		if (this.seriesViewer() != null && (this.__isMouseLeaveDeferred || !this.shouldDeferEnterAndLeave())) {
			this.__isMouseLeaveDeferred = false;
			this.__isMouseEnterDeferred = false;
			this.modifyHighlights(item, this.toWorldPosition(pt), false, true);
			this.seriesViewer().onSeriesMouseLeave(this, item, data);
		}
	}
	,
	onLeftButtonDown: function (pt, source, data) {
		this.pressed(true);
		if (this.seriesViewer() != null) {
			this.seriesViewer().onSeriesMouseLeftButtonDown(this, this.item(source, pt), data);
		}
	}
	,
	onMouseLeftButtonUp: function (pt, source, data) {
		this.pressed(false);
		if (this.seriesViewer() != null && this.mouseIsOver()) {
			this.seriesViewer().onSeriesMouseLeftButtonUp(this, this.item(source, pt), data);
		}
	}
	,
	onLostMouseCapture: function (pt, source, data) {
		if (this.view().mouseButtonUserReleased()) {
			return;
		}
		if (this.pressed()) {
			this.onMouseLeftButtonUp(pt, source, data);
		}
		if (this.mouseIsOver()) {
			this.onMouseLeave(pt, source, data);
		}
	}
	,
	onRightButtonDown: function (pt, source, data) {
		if (this.seriesViewer() != null) {
			this.seriesViewer().onSeriesMouseRightButtonDown(this, this.item(source, pt), data);
		}
	}
	,
	onRightButtonUp: function (pt, source, data) {
		if (this.seriesViewer() != null) {
			this.seriesViewer().onSeriesMouseRightButtonUp(this, this.item(source, pt), data);
		}
	}
	,
	assertLegendItems1: function (oldChart, newChart) {
		if (this.actualLegend() != null && this.legendItem() != null) {
			if (newChart == null && this.actualLegend().children().contains(this.legendItem())) {
				this.actualLegend().children().remove(this.legendItem());
			}
			if (newChart != null && !this.actualLegend().children().contains(this.legendItem()) && this.legendItemVisibility() != $.ig.Visibility.prototype.collapsed) {
				this.actualLegend().addChildInOrder(this.legendItem(), this);
			}
		}
	}
	,
	clearLegendItems: function () {
		if (this.actualLegend() == null || this.legendItem() == null) {
			return;
		}
		this.actualLegend().children().remove(this.legendItem());
	}
	,
	assertLegendItems: function (oldLegend, newLegend) {
		if (this.legendItem() != null) {
			if (oldLegend != null && oldLegend.children().contains(this.legendItem())) {
				oldLegend.children().remove(this.legendItem());
			}
			if (this.seriesViewer() != null && newLegend != null && !newLegend.children().contains(this.legendItem()) && this.legendItemVisibility() != $.ig.Visibility.prototype.collapsed) {
				newLegend.addChildInOrder(this.legendItem(), this);
			}
		}
	}
	,
	assertLegendItems2: function (oldItem, newItem) {
		if (this.actualLegend() != null && oldItem != null && this.actualLegend().children().contains(oldItem)) {
			this.actualLegend().children().remove(oldItem);
		}
		if (this.seriesViewer() != null && this.actualLegend() != null && newItem != null && this.legendItemVisibility() != $.ig.Visibility.prototype.collapsed) {
			this.actualLegend().addChildInOrder(newItem, this);
		}
	}
	,
	releaseItemsSource: function (provider) {
		this.fastItemsSource(provider.releaseFastItemsSource(this.itemsSource()));
	}
	,
	registerItemsSource: function (provider) {
		this.fastItemsSource(provider.getFastItemsSource(this.itemsSource()));
	}
	,
	findActualLegend: function () {
		if (this.legend() != null) {
			return this.legend();
		}
		if (this.seriesViewer() != null && this.seriesViewer().legend() != null) {
			return this.seriesViewer().legend();
		}
		return null;
	}
	,
	shouldTransitionIn: function () {
		return false;
	}
	,
	shouldAnimate: function (animate) {
		return (animate && this.getTotalMilliseconds() > 0) || this.animationActive() || (this.transitionInViable() && this.shouldTransitionIn() && this.getTotalTransitionInMilliseconds() > 0);
	}
	,
	deregisterForAxis: function (axis) {
		if (axis != null) {
			axis.deregisterSeries(this);
		}
	}
	,
	registerForAxis: function (axis) {
		if (axis != null) {
			axis.registerSeries(this);
		}
	}
	,
	getSeriesComponentsFromView: function () {
		return this.view().getSeriesComponentsFromView();
	}
	,
	updateMarkerCanvas: function (canvas) {
		this.view().setMarkerCanvas(canvas);
	}
	,
	showTooltip: function (pt, add) {
		this.view().showToolTip(pt, add);
	}
	,
	useOverlaySchdeduler: function () {
		return false;
	}
	,
	provideContext: function (context, hitContext) {
		this.view().onContextProvided(context, hitContext);
	}
	,
	provideViewport: function (newViewport) {
		this.onViewportChanged(this.viewport(), newViewport);
	}
	,
	handleCollectionChanged: function (e) {
		if (this.fastItemsSource() != null) {
			this.fastItemsSource().handleCollectionChanged(e);
		}
	}
	,
	notifySetItem: function (index, oldItem, newItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, newItem, oldItem, index));
	}
	,
	notifyClearItems: function () {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset));
	}
	,
	notifyInsertItem: function (index, newItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, newItem, index));
	}
	,
	notifyRemoveItem: function (index, oldItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.remove, oldItem, index));
	}
	,
	styleUpdated: function () {
		this.renderSeries(false);
	}
	,
	_tooltipTemplate: null,
	tooltipTemplate: function (value) {
		if (arguments.length === 1) {
			this._tooltipTemplate = value;
			return value;
		} else {
			return this._tooltipTemplate;
		}
	}
	,
	_flattenEventArgs: null,
	flattenEventArgs: function (value) {
		if (arguments.length === 1) {
			this._flattenEventArgs = value;
			return value;
		} else {
			return this._flattenEventArgs;
		}
	}
	,
	testHit: function (position, isFinger) {
		return false;
	}
	,
	__coercionMethods: null,
	coercionMethods: function (value) {
		if (arguments.length === 1) {
			this.__coercionMethods = value;
			return value;
		} else {
			return this.__coercionMethods;
		}
	}
	,
	__expectFunctions: false,
	expectFunctions: function (value) {
		if (arguments.length === 1) {
			this.__expectFunctions = value;
			return value;
		} else {
			return this.__expectFunctions;
		}
	}
	,
	getHitDataContext: function (position) {
		return null;
	}
	,
	__hitTestMode: 0,
	hitTestMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__hitTestMode;
			this.__hitTestMode = value;
			if (oldValue != this.__hitTestMode) {
				this.raisePropertyChanged($.ig.Series.prototype.hitTestModePropertyName, $.ig.SeriesHitTestMode.prototype.getBox(oldValue), $.ig.SeriesHitTestMode.prototype.getBox(this.__hitTestMode));
			}
			return value;
		} else {
			return this.__hitTestMode;
		}
	}
	,
	getResolvedHitTestMode: function () {
		return this.hitTestMode() == $.ig.SeriesHitTestMode.prototype.auto ? $.ig.SeriesHitTestMode.prototype.colorEncoded : this.hitTestMode();
	}
	,
	__actualHitTestMode: 0,
	actualHitTestMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualHitTestMode;
			this.__actualHitTestMode = value;
			if (oldValue != this.__actualHitTestMode) {
				this.raisePropertyChanged($.ig.Series.prototype.actualHitTestModePropertyName, $.ig.SeriesHitTestMode.prototype.getBox(oldValue), $.ig.SeriesHitTestMode.prototype.getBox(this.__actualHitTestMode));
			}
			return value;
		} else {
			return this.__actualHitTestMode;
		}
	}
	,
	registerDoubleColumn: function (memberPath) {
		if (memberPath == null) {
			return this.fastItemsSource().registerColumn(null, null, false);
		}
		var coercionMethod = null;
		var info = $.ig.SeriesViewer.prototype.getCoercionMethod(memberPath, this.coercionMethods());
		memberPath = info.memberPath();
		coercionMethod = info.coercionMethod();
		return this.fastItemsSource().registerColumn(memberPath, coercionMethod, this.expectFunctions());
	}
	,
	registerIntColumn: function (memberPath) {
		if (memberPath == null) {
			return this.fastItemsSource().registerColumnInt(null, null, false);
		}
		var coercionMethod = null;
		var info = $.ig.SeriesViewer.prototype.getCoercionMethod(memberPath, this.coercionMethods());
		memberPath = info.memberPath();
		coercionMethod = info.coercionMethod();
		return this.fastItemsSource().registerColumnInt(memberPath, coercionMethod, this.expectFunctions());
	}
	,
	registerObjectColumn: function (memberPath) {
		if (memberPath == null) {
			return this.fastItemsSource().registerColumnObject(null, null, false);
		}
		var coercionMethod = null;
		var info = $.ig.SeriesViewer.prototype.getCoercionMethod(memberPath, this.coercionMethods());
		memberPath = info.memberPath();
		coercionMethod = info.coercionMethod();
		return this.fastItemsSource().registerColumnObject(memberPath, coercionMethod, this.expectFunctions());
	}
	,
	viewport: function () {
		return this.view() != null ? this.view().viewport() : $.ig.Rect.prototype.empty();
	}
	,
	sanitizeTypeName: function (name) {
		return name;
	}
	,
	exportVisualData: function () {
		var svd = new $.ig.SeriesVisualData();
		svd.viewport(this.viewport());
		svd.type(this.sanitizeTypeName(this.getType().typeName()));
		svd.name(this.name());
		svd.opacity(this.__opacity);
		this.exportVisualDataOverride(svd);
		this.view().exportViewShapes(svd);
		return svd;
	}
	,
	exportVisualDataOverride: function (svd) {
	}
	,
	notifyBrushScalesDirty: function () {
	}
	,
	notifySizeScalesDirty: function () {
	}
	,
	getMatchingAxis: function (axis) {
		return null;
	}
	,
	$type: new $.ig.Type('Series', $.ig.Control.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type, $.ig.IProvidesViewport.prototype.$type])
}, true);

$.ig.util.defType('AxisLabelSettings', 'Object', {
	init: function () {
		var $self = this;
		this.__textColor = null;
		this.__location = $.ig.AxisLabelsLocation.prototype.outsideBottom;
		this.__visibility = $.ig.Visibility.prototype.visible;
		this.__showFirstLabel = true;
		this.__angle = 0;
		this.__extent = NaN;
		this.__leftMargin = 2;
		this.__rightMargin = 2;
		this.__topMargin = 2;
		this.__bottomMargin = 2;
		this.__horizontalAlignment = $.ig.HorizontalAlignment.prototype.left;
		this.__verticalAlignment = $.ig.VerticalAlignment.prototype.center;
		$.ig.Object.prototype.init.call(this);
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) { $self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue()); });
	},
	__textStyle: null,
	textStyle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__textStyle;
			this.__textStyle = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.textStylePropertyName, oldValue, value);
			return value;
		} else {
			return this.__textStyle;
		}
	}
	,
	__textColor: null,
	textColor: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__textColor;
			this.__textColor = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.textColorPropertyName, oldValue, value);
			return value;
		} else {
			return this.__textColor;
		}
	}
	,
	location: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__location;
			this.__location = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.locationPropertyName, $.ig.AxisLabelsLocation.prototype.getBox(oldValue), $.ig.AxisLabelsLocation.prototype.getBox(value));
			return value;
		} else {
			return this.__location;
		}
	}
	,
	__location: 0,
	visibility: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__visibility;
			this.__visibility = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.visibilityPropertyName, $.ig.Visibility.prototype.getBox(oldValue), $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return this.__visibility;
		}
	}
	,
	__visibility: 0,
	showFirstLabel: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__showFirstLabel;
			this.__showFirstLabel = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.showFirstLabelPropertyName, oldValue, value);
			return value;
		} else {
			return this.__showFirstLabel;
		}
	}
	,
	__showFirstLabel: false,
	_actualLocation: 0,
	actualLocation: function (value) {
		if (arguments.length === 1) {
			this._actualLocation = value;
			return value;
		} else {
			return this._actualLocation;
		}
	}
	,
	_axis: null,
	axis: function (value) {
		if (arguments.length === 1) {
			this._axis = value;
			return value;
		} else {
			return this._axis;
		}
	}
	,
	registerAxis: function (axis) {
		this.axis(axis);
	}
	,
	unregisterAxis: function (axis) {
		this.axis(null);
	}
	,
	angle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__angle;
			this.__angle = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.anglePropertyName, oldValue, value);
			return value;
		} else {
			return this.__angle;
		}
	}
	,
	__angle: 0,
	extent: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__extent;
			this.__extent = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.extentPropertyName, oldValue, value);
			return value;
		} else {
			return this.__extent;
		}
	}
	,
	__extent: 0,
	margin: function (value) {
		this.topMargin(this.rightMargin(this.bottomMargin(this.leftMargin(value))));
		return value;
	}
	,
	leftMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__leftMargin;
			this.__leftMargin = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.leftMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__leftMargin;
		}
	}
	,
	__leftMargin: 0,
	rightMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__rightMargin;
			this.__rightMargin = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.rightMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__rightMargin;
		}
	}
	,
	__rightMargin: 0,
	topMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__topMargin;
			this.__topMargin = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.topMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__topMargin;
		}
	}
	,
	__topMargin: 0,
	bottomMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__bottomMargin;
			this.__bottomMargin = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.bottomMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__bottomMargin;
		}
	}
	,
	__bottomMargin: 0,
	__horizontalAlignment: 0,
	horizontalAlignment: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__horizontalAlignment;
			this.__horizontalAlignment = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.horizontalAlignmentPropertyName, $.ig.HorizontalAlignment.prototype.getBox(oldValue), $.ig.HorizontalAlignment.prototype.getBox(value));
			return value;
		} else {
			return this.__horizontalAlignment;
		}
	}
	,
	__verticalAlignment: 0,
	verticalAlignment: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__verticalAlignment;
			this.__verticalAlignment = value;
			this.raisePropertyChanged($.ig.AxisLabelSettings.prototype.verticalAlignmentPropertyName, $.ig.VerticalAlignment.prototype.getBox(oldValue), $.ig.VerticalAlignment.prototype.getBox(value));
			return value;
		} else {
			return this.__verticalAlignment;
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.AxisLabelSettings.prototype.locationPropertyName:
				this.actualLocation(this.location());
				break;
		}
		if (this.axis() == null || this.axis().chart() == null) {
			return;
		}
		switch (propertyName) {
			case $.ig.AxisLabelSettings.prototype.anglePropertyName:
				this.axis().mustInvalidateLabels(true);
				this.axis().renderAxis();
				break;
			case $.ig.AxisLabelSettings.prototype.locationPropertyName:
			case $.ig.AxisLabelSettings.prototype.extentPropertyName:
			case $.ig.AxisLabelSettings.prototype.visibilityPropertyName:
			case $.ig.AxisLabelSettings.prototype.textStylePropertyName:
			case $.ig.AxisLabelSettings.prototype.horizontalAlignmentPropertyName:
			case $.ig.AxisLabelSettings.prototype.verticalAlignmentPropertyName:
			case $.ig.AxisLabelSettings.prototype.topMarginPropertyName:
			case $.ig.AxisLabelSettings.prototype.rightMarginPropertyName:
			case $.ig.AxisLabelSettings.prototype.bottomMarginPropertyName:
			case $.ig.AxisLabelSettings.prototype.leftMarginPropertyName:
			case $.ig.AxisLabelSettings.prototype.showFirstLabelPropertyName:
				this.axis().mustInvalidateLabels(true);
				if (this.axis().seriesViewer() != null) {
					this.axis().seriesViewer().invalidatePanels();
				}
				this.axis().renderAxis();
				break;
			case $.ig.AxisLabelSettings.prototype.textColorPropertyName:
				this.axis().renderAxis();
				break;
		}
	}
	,
	hasUserAngle: function () {
		return this.__angle != 0;
	}
	,
	hasUserExtent: function () {
		return !$.ig.util.isNaN(this.__extent);
	}
	,
	hasFontInfo: function () {
		return this.textStyle() != null;
	}
	,
	getFontInfo: function () {
		return $.ig.FontUtil.prototype.toFontInfo(this.textStyle());
	}
	,
	$type: new $.ig.Type('AxisLabelSettings', $.ig.Object.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('TitleSettings', 'AxisLabelSettings', {
	init: function () {
		this.__titlePosition = $.ig.AxisTitlePosition.prototype.auto;
		$.ig.AxisLabelSettings.prototype.init.call(this);
		this.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
		this.leftMargin(NaN);
		this.rightMargin(NaN);
		this.topMargin(NaN);
		this.bottomMargin(NaN);
	},
	__titlePosition: 0,
	position: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titlePosition;
			this.__titlePosition = value;
			this.raisePropertyChanged($.ig.TitleSettings.prototype.axisTitlePositionPropertyName, $.ig.AxisTitlePosition.prototype.getBox(oldValue), $.ig.AxisTitlePosition.prototype.getBox(value));
			return value;
		} else {
			return this.__titlePosition;
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.AxisLabelSettings.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		if (this.axis() == null || this.axis().seriesViewer() == null) {
			return;
		}
		switch (propertyName) {
			case $.ig.TitleSettings.prototype.axisTitlePositionPropertyName:
				this.axis().mustInvalidateLabels(true);
				this.axis().renderAxis();
				break;
		}
	}
	,
	$type: new $.ig.Type('TitleSettings', $.ig.AxisLabelSettings.prototype.$type)
}, true);

$.ig.util.defType('Axis', 'Control', {
	createView: function () {
		return new $.ig.AxisView(this);
	}
	,
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	onViewCreated: function (view) {
	}
	,
	isCategory: function () {
		return false;
	}
	,
	isNumeric: function () {
		return false;
	}
	,
	isAngular: function () {
		return false;
	}
	,
	isRadial: function () {
		return false;
	}
	,
	isVertical: function () {
		return false;
	}
	,
	isSorting: function () {
		return false;
	}
	,
	isDateTime: function () {
		return false;
	}
	,
	init: function () {
		var $self = this;
		this.__useSmartAxis = false;
		this.__smartAxisExtent = NaN;
		this.__actualSmartAxisExtent = 50;
		this.__smartAxisMinimumExtent = 0;
		this.__smartAxisMaximumExtent = 150;
		this.__smartAxisExtentType = $.ig.AxisExtentType.prototype.pixel;
		this.__smartAxisAngle = NaN;
		this.__smartAxisMinimumAngle = 0;
		this.__smartAxisMaximumAngle = 180;
		this.__smartAxisFont = null;
		this.__smartAxisDefaultFont = $.ig.FontUtil.prototype.getDefaultFont();
		this.__smartAxisFontName = "Verdana";
		this.__smartAxisFontSize = NaN;
		this.__smartAxisMinimumFontSize = 8;
		this.__smartAxisMaximumFontSize = 16;
		this.__smartAxisNumberOfStaggerLevels = -1;
		this.__smartAxisMinimumStaggerLevels = 1;
		this.__smartAxisMaximumStaggerLevels = 3;
		this.__smartAxisVerticalAlignment = $.ig.VerticalAlignment.prototype.top;
		this.__smartAxisTopMargin = 0;
		this.__smartAxisProximityMargin = 2;
		this.__viewport = $.ig.Rect.prototype.empty();
		this.__mustInvalidateLabels = false;
		this.__expectFunctions = false;
		this.__preciseWidthHeuristic = NaN;
		this.__priorHeuristicLength = -1;
		this._measuredSize = new $.ig.Size();
		this.__axisComponentsForView = new $.ig.AxisComponentsForView();
		this.__currentLabelSettings = new $.ig.AxisLabelSettings();
		$.ig.Control.prototype.init.call(this);
		this.extentOverride(NaN);
		this.view(this.createView());
		this.onViewCreated(this.view());
		this.view().onInit();
		this.textBlocks((function () {
			var $ret = new $.ig.Pool$1($.ig.TextBlock.prototype.$type);
			$ret.create($self.view().textBlockCreate.runOn($self.view()));
			$ret.activate($self.view().textBlockActivate.runOn($self.view()));
			$ret.disactivate($self.view().textBlockDisactivate.runOn($self.view()));
			$ret.destroy($self.view().textBlockDestroy.runOn($self.view()));
			return $ret;
		}()));
		this.viewportOverride($.ig.Rect.prototype.empty());
		this.labelDataContext(new $.ig.List$1($.ig.Object.prototype.$type, 0));
		this.labelPositions(new $.ig.List$1($.ig.LabelPosition.prototype.$type, 0));
		this.labelPanel(this.createLabelPanel());
		this.labelPanel().labelSettings(this.labelSettings());
		this.labelPanel().axis(this);
		this.series(new $.ig.List$1($.ig.Series.prototype.$type, 0));
		this.defaultStyleKey($.ig.Axis.prototype.$type);
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) { $self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue()); });
		this._seriesViewer_WindowRectChanged = function (o, e) {
			if ($self.seriesViewer() == null || !$self.seriesViewer().ignoreWindowChanges()) {
				$self.windowRectChangedOverride(e.oldRect(), e.newRect());
			}
		};
		this.view().bindLabelPanelStyle();
		this.applyDefaultSettings();
		this.labelPanel().labelSettings(this.labelSettings());
	},
	formatLabel: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.formatLabelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.formatLabelProperty);
		}
	}
	,
	handleRectChanged: function (oldRect, newRect) {
		if (!oldRect.equals1(newRect)) {
			this.viewportChangedOverride(oldRect, newRect);
		}
	}
	,
	createLabelPanel: function () {
	}
	,
	onApplyTemplate: function () {
		$.ig.Control.prototype.onApplyTemplate.call(this);
		this.view().onTemplateProvided();
	}
	,
	_rootCanvas: null,
	rootCanvas: function (value) {
		if (arguments.length === 1) {
			this._rootCanvas = value;
			return value;
		} else {
			return this._rootCanvas;
		}
	}
	,
	fastItemsSourceProvider: function (value) {
		if (arguments.length === 1) {
			if (this.fastItemsSourceProvider() != value) {
				var oldChart = this.fastItemsSourceProvider();
				this._fastItemsSourceProvider = value;
				this.raisePropertyChanged($.ig.Axis.prototype.fastItemsSourceProviderPropertyName, oldChart, this._fastItemsSourceProvider);
			}
			return value;
		} else {
			return this._fastItemsSourceProvider;
		}
	}
	,
	_fastItemsSourceProvider: null,
	seriesViewer: function (value) {
		if (arguments.length === 1) {
			if (this.seriesViewer() != value) {
				var oldChart = this.seriesViewer();
				this.__seriesViewer = value;
				this.raisePropertyChanged($.ig.Axis.prototype.seriesViewerPropertyName, oldChart, this.__seriesViewer);
			}
			return value;
		} else {
			return this.__seriesViewer;
		}
	}
	,
	__seriesViewer: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this.seriesViewer(value);
			return value;
		} else {
			return $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		}
	}
	,
	_seriesViewer_WindowRectChanged: null,
	__useSmartAxis: false,
	useSmartAxis: function (value) {
		if (arguments.length === 1) {
			if (this.__useSmartAxis == value) {
				return;
			}
			this.__useSmartAxis = value;
			var labelViewport = null;
			if (this.labelPanel() != null && $.ig.Rect.prototype.l_op_Inequality(this.labelPanel().labelViewport(), null)) {
				labelViewport = this.labelPanel().labelViewport();
			}
			this.labelPanel(this.createLabelPanel());
			this.labelPanel().axis(this);
			this.labelPanel().labelSettings(this.labelSettings());
			if ($.ig.Rect.prototype.l_op_Inequality(labelViewport, null)) {
				this.labelPanel().labelViewport(labelViewport);
			}
			if (this.seriesViewer() != null && this.seriesViewer().view() != null) {
				this.labelPanel().view().onContextProvided(this.seriesViewer().view().mainContext());
				this.refreshAxis1(true);
			}
			return value;
		} else {
			return this.__useSmartAxis;
		}
	}
	,
	__smartAxisExtent: 0,
	smartAxisExtent: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__smartAxisExtent;
			if (oldValue != value) {
				this.__smartAxisExtent = value;
				this.actualSmartAxisExtent(value);
				this.refreshAxis1(true);
			}
			return value;
		} else {
			return this.__smartAxisExtent;
		}
	}
	,
	__actualSmartAxisExtent: 0,
	actualSmartAxisExtent: function (value) {
		if (arguments.length === 1) {
			this.__actualSmartAxisExtent = value;
			return value;
		} else {
			return this.__actualSmartAxisExtent;
		}
	}
	,
	__smartAxisMinimumExtent: 0,
	smartAxisMinimumExtent: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMinimumExtent = value;
			this.refreshAxis1(true);
			return value;
		} else {
			return this.__smartAxisMinimumExtent;
		}
	}
	,
	__smartAxisMaximumExtent: 0,
	smartAxisMaximumExtent: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMaximumExtent = value;
			this.refreshAxis1(true);
			return value;
		} else {
			return this.__smartAxisMaximumExtent;
		}
	}
	,
	__smartAxisExtentType: 0,
	smartAxisExtentType: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__smartAxisExtentType;
			if (oldValue != value) {
				this.__smartAxisExtentType = value;
				this.refreshAxis1(true);
			}
			return value;
		} else {
			return this.__smartAxisExtentType;
		}
	}
	,
	__smartAxisAngle: 0,
	smartAxisAngle: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisAngle = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisAngle;
		}
	}
	,
	_actualSmartAxisAngle: 0,
	actualSmartAxisAngle: function (value) {
		if (arguments.length === 1) {
			this._actualSmartAxisAngle = value;
			return value;
		} else {
			return this._actualSmartAxisAngle;
		}
	}
	,
	__smartAxisMinimumAngle: 0,
	smartAxisMinimumAngle: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMinimumAngle = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMinimumAngle;
		}
	}
	,
	__smartAxisMaximumAngle: 0,
	smartAxisMaximumAngle: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMaximumAngle = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMaximumAngle;
		}
	}
	,
	__smartAxisFont: null,
	__smartAxisDefaultFont: null,
	smartAxisFont: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisFont = value;
			this.__smartAxisFontSize = $.ig.FontUtil.prototype.getFontSize(this.__smartAxisFont);
			this.refreshAxis();
			return value;
		} else {
			if (this.__smartAxisFont == null) {
				return this.__smartAxisDefaultFont;
			}
			return this.__smartAxisFont;
		}
	}
	,
	__smartAxisFontName: null,
	smartAxisFontName: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisFontName = value;
			var size = this.__smartAxisFontSize;
			if ($.ig.util.isNaN(size)) {
				size = 12;
			}
			this.smartAxisFont().fontFamily(value);
			this.smartAxisFont().fontSize(size);
			if ($.ig.util.cast($.ig.HorizontalSmartAxisLabelPanel.prototype.$type, this.labelPanel()) !== null) {
				(this.labelPanel()).createFontInfoMap();
			}
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisFontName;
		}
	}
	,
	__smartAxisFontSize: 0,
	smartAxisFontSize: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisFontSize = value;
			this.smartAxisFont($.ig.FontUtil.prototype.getFontWithNewFontSize(this.smartAxisFont(), this.__smartAxisFontSize));
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisFontSize;
		}
	}
	,
	_actualSmartAxisFontSize: 0,
	actualSmartAxisFontSize: function (value) {
		if (arguments.length === 1) {
			this._actualSmartAxisFontSize = value;
			return value;
		} else {
			return this._actualSmartAxisFontSize;
		}
	}
	,
	__smartAxisMinimumFontSize: 0,
	smartAxisMinimumFontSize: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMinimumFontSize = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMinimumFontSize;
		}
	}
	,
	__smartAxisMaximumFontSize: 0,
	smartAxisMaximumFontSize: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMaximumFontSize = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMaximumFontSize;
		}
	}
	,
	__smartAxisNumberOfStaggerLevels: 0,
	smartAxisNumberOfStaggerLevels: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisNumberOfStaggerLevels = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisNumberOfStaggerLevels;
		}
	}
	,
	__smartAxisMinimumStaggerLevels: 0,
	smartAxisMinimumStaggerLevels: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMinimumStaggerLevels = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMinimumStaggerLevels;
		}
	}
	,
	__smartAxisMaximumStaggerLevels: 0,
	smartAxisMaximumStaggerLevels: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisMaximumStaggerLevels = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisMaximumStaggerLevels;
		}
	}
	,
	_actualSmartAxisNumberOfStaggerLevels: 0,
	actualSmartAxisNumberOfStaggerLevels: function (value) {
		if (arguments.length === 1) {
			this._actualSmartAxisNumberOfStaggerLevels = value;
			return value;
		} else {
			return this._actualSmartAxisNumberOfStaggerLevels;
		}
	}
	,
	__smartAxisVerticalAlignment: 0,
	smartAxisVerticalAlignment: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisVerticalAlignment = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisVerticalAlignment;
		}
	}
	,
	__smartAxisTopMargin: 0,
	smartAxisTopMargin: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisTopMargin = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisTopMargin;
		}
	}
	,
	__smartAxisProximityMargin: 0,
	smartAxisProximityMargin: function (value) {
		if (arguments.length === 1) {
			this.__smartAxisProximityMargin = value;
			this.refreshAxis();
			return value;
		} else {
			return this.__smartAxisProximityMargin;
		}
	}
	,
	unlockSmartAxisLabelPanel: function () {
		var panel = $.ig.util.cast($.ig.HorizontalSmartAxisLabelPanel.prototype.$type, this.labelPanel());
		if (panel != null) {
			panel.unlock();
			panel.measure();
		}
	}
	,
	refreshAxis: function () {
		this.refreshAxis1(false);
	}
	,
	refreshAxis1: function (shouldResizeAxisPanel) {
		if (this.useSmartAxis() && $.ig.util.cast($.ig.HorizontalSmartAxisLabelPanel.prototype.$type, this.labelPanel()) !== null) {
			var hPanel = this.labelPanel();
			if (hPanel != null && shouldResizeAxisPanel) {
				hPanel.unlock();
			}
		}
		this.mustInvalidateLabels(true);
		this.refresh();
	}
	,
	_titleTextBlock: null,
	titleTextBlock: function (value) {
		if (arguments.length === 1) {
			this._titleTextBlock = value;
			return value;
		} else {
			return this._titleTextBlock;
		}
	}
	,
	title: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.titleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.titleProperty);
		}
	}
	,
	stroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.strokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.strokeProperty);
		}
	}
	,
	actualStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.actualStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.actualStrokeProperty);
		}
	}
	,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.strokeThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.strokeThicknessProperty);
		}
	}
	,
	strokeDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.strokeDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.strokeDashArrayProperty);
		}
	}
	,
	strip: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.stripProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.stripProperty);
		}
	}
	,
	majorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.majorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.majorStrokeProperty);
		}
	}
	,
	actualMajorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.actualMajorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.actualMajorStrokeProperty);
		}
	}
	,
	majorStrokeThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.majorStrokeThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.majorStrokeThicknessProperty);
		}
	}
	,
	majorStrokeDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.majorStrokeDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.majorStrokeDashArrayProperty);
		}
	}
	,
	minorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.minorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.minorStrokeProperty);
		}
	}
	,
	actualMinorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.actualMinorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.actualMinorStrokeProperty);
		}
	}
	,
	minorStrokeThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.minorStrokeThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.minorStrokeThicknessProperty);
		}
	}
	,
	minorStrokeDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.minorStrokeDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.minorStrokeDashArrayProperty);
		}
	}
	,
	tickStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.tickStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.tickStrokeProperty);
		}
	}
	,
	tickStrokeThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.tickStrokeThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.tickStrokeThicknessProperty);
		}
	}
	,
	tickStrokeDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.tickStrokeDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.tickStrokeDashArrayProperty);
		}
	}
	,
	tickLength: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.tickLengthProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.tickLengthProperty);
		}
	}
	,
	_actualTickLength: 0,
	actualTickLength: function (value) {
		if (arguments.length === 1) {
			this._actualTickLength = value;
			return value;
		} else {
			return this._actualTickLength;
		}
	}
	,
	updateActualTickLength: function () {
		if (this.tickLength() > 0) {
			this.actualTickLength(this.tickLength());
			return;
		}
		var chart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		if (chart != null && $.ig.util.isNaN(this.tickLength()) && this.isCategory() && (this.isVertical() || this.orientation() == $.ig.AxisOrientation.prototype.horizontal)) {
			this.actualTickLength(chart.chartView().defaultCategoryAxisTickLength());
			return;
		}
		this.actualTickLength(0);
	}
	,
	isDisabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.isDisabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.isDisabledProperty);
		}
	}
	,
	isInverted: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.isInvertedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.isInvertedProperty);
		}
	}
	,
	_isInvertedCached: false,
	isInvertedCached: function (value) {
		if (arguments.length === 1) {
			this._isInvertedCached = value;
			return value;
		} else {
			return this._isInvertedCached;
		}
	}
	,
	useEnhancedIntervalManagement: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.useEnhancedIntervalManagementProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.useEnhancedIntervalManagementProperty);
		}
	}
	,
	enhancedIntervalMinimumCharacters: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.enhancedIntervalMinimumCharactersProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.Axis.prototype.enhancedIntervalMinimumCharactersProperty));
		}
	}
	,
	labelSettings: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.labelSettingsProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.labelSettingsProperty);
		}
	}
	,
	labelPanelStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.labelPanelStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.labelPanelStyleProperty);
		}
	}
	,
	crossingAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.crossingAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.crossingAxisProperty);
		}
	}
	,
	crossingValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.crossingValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.crossingValueProperty);
		}
	}
	,
	rangeChanged: null,
	raiseRangeChanged: function (ea) {
		if (this.rangeChanged != null) {
			this.rangeChanged(this, ea);
		}
	}
	,
	titleSettings: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.titleSettingsProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.titleSettingsProperty);
		}
	}
	,
	getAxisInterval: function () {
		return NaN;
	}
	,
	__viewport: null,
	viewportRect: function (value) {
		if (arguments.length === 1) {
			this.__viewport = value;
			return value;
		} else {
			if (this.viewportOverride().isEmpty()) {
				return this.__viewport;
			}
			return this.viewportOverride();
		}
	}
	,
	_viewportOverride: null,
	viewportOverride: function (value) {
		if (arguments.length === 1) {
			this._viewportOverride = value;
			return value;
		} else {
			return this._viewportOverride;
		}
	}
	,
	updateLineVisibility: function () {
		var visible = $.ig.Visibility.prototype.visible;
		var dataChart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		if (dataChart != null && dataChart.gridMode() == $.ig.GridMode.prototype.none) {
			visible = $.ig.Visibility.prototype.collapsed;
		}
		this.view().updateLineVisibility(visible);
	}
	,
	validateAxis: function (viewportRect, windowRect, view) {
		return this.seriesViewer() != null;
	}
	,
	isValid: function () {
		var window = $.ig.Rect.prototype.empty();
		if (this.seriesViewer() != null) {
			window = this.seriesViewer().windowRect();
		}
		return this.validateAxis(this.viewportRect(), window, this.view());
	}
	,
	_labelDataContext: null,
	labelDataContext: function (value) {
		if (arguments.length === 1) {
			this._labelDataContext = value;
			return value;
		} else {
			return this._labelDataContext;
		}
	}
	,
	_labelPositions: null,
	labelPositions: function (value) {
		if (arguments.length === 1) {
			this._labelPositions = value;
			return value;
		} else {
			return this._labelPositions;
		}
	}
	,
	_labelPanel: null,
	labelPanel: function (value) {
		if (arguments.length === 1) {
			this._labelPanel = value;
			return value;
		} else {
			return this._labelPanel;
		}
	}
	,
	viewportChangedOverride: function (oldRect, newRect) {
		this.viewportRect(newRect);
		this.mustInvalidateLabels(true);
		this.updateRange();
		this.renderAxis1(false);
		if (this.seriesViewer() != null) {
			this.seriesViewer().chartContentManager().viewportChanged($.ig.ChartContentType.prototype.axis, this, this.contentInfo(), newRect);
		}
	}
	,
	__mustInvalidateLabels: false,
	mustInvalidateLabels: function (value) {
		if (arguments.length === 1) {
			this.__mustInvalidateLabels = value;
			return value;
		} else {
			return this.__mustInvalidateLabels;
		}
	}
	,
	getEffectiveViewportForUnitViewport: function () {
		if (this.seriesViewer() == null || this.seriesViewer().effectiveViewport().isEmpty()) {
			return $.ig.Rect.prototype.empty();
		}
		var effective = this.seriesViewer().effectiveViewport();
		var viewport = this.viewportRect();
		var left = (effective.left() - viewport.left()) / viewport.width();
		var top = (effective.top() - viewport.top()) / viewport.height();
		var right = (effective.right() - viewport.left()) / viewport.width();
		var bottom = (effective.bottom() - viewport.top()) / viewport.height();
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	windowRectChangedOverride: function (oldRect, newRect) {
		this.mustInvalidateLabels(true);
		this.renderAxis1(true);
	}
	,
	refresh: function () {
		this.renderAxis1(false);
	}
	,
	_contentInfo: null,
	contentInfo: function (value) {
		if (arguments.length === 1) {
			this._contentInfo = value;
			return value;
		} else {
			return this._contentInfo;
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.Axis.prototype.seriesViewerPropertyName:
				var oldSeriesViewer = $.ig.util.cast($.ig.SeriesViewer.prototype.$type, oldValue);
				if (oldSeriesViewer != null) {
					oldSeriesViewer.windowRectChanged = $.ig.Delegate.prototype.remove(oldSeriesViewer.windowRectChanged, this._seriesViewer_WindowRectChanged);
					oldSeriesViewer.chartContentManager().unsubscribe($.ig.ChartContentType.prototype.axis, this);
					this.view().detachFromChart(oldSeriesViewer);
				}
				var newSeriesViewer = $.ig.util.cast($.ig.SeriesViewer.prototype.$type, newValue);
				if (newSeriesViewer != null) {
					newSeriesViewer.windowRectChanged = $.ig.Delegate.prototype.combine(newSeriesViewer.windowRectChanged, this._seriesViewer_WindowRectChanged);
					this.contentInfo(newSeriesViewer.chartContentManager().subscribe($.ig.ChartContentType.prototype.axis, this, this.doRenderAxis.runOn(this)));
					this.view().attachToChart(newSeriesViewer);
					if (this.rangeDirty() && !this.contentInfo().rangeDirty()) {
						this.rangeDirty(false);
						this.updateRange();
					}
					this.updateActualBrushes();
					this.updateActualTickLength();
				}
				break;
			case $.ig.Axis.prototype.isDisabledPropertyName:
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.isInvertedPropertyName:
				this.isInvertedCached(this.isInverted());
				var rangeChangedEventArgs = new $.ig.AxisRangeChangedEventArgs(0, 0, 1, 1);
				this.doRaiseRangeChanged(rangeChangedEventArgs);
				var en = this.series().getEnumerator();
				while (en.moveNext()) {
					var series = en.current();
					series.invalidateAxes();
					if (series.seriesViewer() != null) {
						series.notifyThumbnailAppearanceChanged();
					}
				}
				break;
			case $.ig.Axis.prototype.labelPropertyName:
				if ($.ig.util.cast($.ig.DataTemplate.prototype.$type, newValue) !== null) {
					this.usingTemplate(true);
				} else {
					this.usingTemplate(false);
				}
				this.mustInvalidateLabels(true);
				this.resetLabelPanel();
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.majorStrokeThicknessPropertyName:
			case $.ig.Axis.prototype.minorStrokeThicknessPropertyName:
			case $.ig.Axis.prototype.strokeThicknessPropertyName:
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.labelPanelStylePropertyName:
				this.view().onLabelPanelStyleChanged(newValue);
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.labelSettingsPropertyName:
				var labelSettings = $.ig.util.cast($.ig.AxisLabelSettings.prototype.$type, newValue);
				if (labelSettings != null) {
					labelSettings.registerAxis(this);
					this.__currentLabelSettings = labelSettings;
				} else {
					this.__currentLabelSettings = new $.ig.AxisLabelSettings();
				}
				if (this.labelPanel() != null) {
					this.labelPanel().labelSettings(this.__currentLabelSettings);
				}
				if (this.view().ready()) {
					this.view().changeLabelSettings(this.__currentLabelSettings);
				}
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.titlePropertyName:
				this.view().onTitleChange();
				break;
			case $.ig.Axis.prototype.titleSettingsPropertyName:
				var titleSettings = $.ig.util.cast($.ig.TitleSettings.prototype.$type, newValue);
				if (titleSettings != null) {
					titleSettings.registerAxis(this);
				} else {
					titleSettings = new $.ig.TitleSettings();
				}
				if (this.titleTextBlock() != null) {
					this.titleTextBlock().dataContext(titleSettings);
				}
				this.view().onTitleChange();
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.tickLengthPropertyName:
				this.mustInvalidateLabels(true);
				this.updateActualTickLength();
				this.view().labelNeedRearrange();
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.enhancedIntervalMinimumCharactersPropertyName:
			case $.ig.Axis.prototype.useEnchancedIntervalManagementPropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.crossingAxisPropertyName:
				if (this.seriesViewer() != null) {
					this.seriesViewer().invalidatePanels();
				}
				break;
			case $.ig.Axis.prototype.minorStrokePropertyName:
				this.updateActualBrushes();
				if (newValue != null) {
					this.shouldRenderMinorLines(true);
					this.renderAxis1(false);
				} else {
					this.shouldRenderMinorLines(false);
				}
				break;
			case $.ig.Axis.prototype.crossingValuePropertyName:
				if (this.crossingAxis() != null) {
					this.crossingAxis().renderAxis();
				}
				break;
			case $.ig.Axis.prototype.strokePropertyName:
			case $.ig.Axis.prototype.majorStrokePropertyName:
				this.updateActualBrushes();
				this.renderAxis1(false);
				break;
			case $.ig.Axis.prototype.strokeDashArrayPropertyName:
			case $.ig.Axis.prototype.majorStrokeDashArrayPropertyName:
			case $.ig.Axis.prototype.minorStrokeDashArrayPropertyName:
			case $.ig.Axis.prototype.formatLabelPropertyName:
			case $.ig.Axis.prototype.tickStrokePropertyName:
			case $.ig.Axis.prototype.tickStrokeThicknessPropertyName:
			case $.ig.Axis.prototype.tickStrokeDashArrayPropertyName:
			case $.ig.Axis.prototype.actualStrokePropertyName:
			case $.ig.Axis.prototype.actualMajorStrokePropertyName:
			case $.ig.Axis.prototype.actualMinorStrokePropertyName:
			case $.ig.Axis.prototype.stripPropertyName:
				this.renderAxis1(false);
				break;
		}
	}
	,
	_coercionMethods: null,
	coercionMethods: function (value) {
		if (arguments.length === 1) {
			this._coercionMethods = value;
			return value;
		} else {
			return this._coercionMethods;
		}
	}
	,
	__expectFunctions: false,
	expectFunctions: function (value) {
		if (arguments.length === 1) {
			this.__expectFunctions = value;
			return value;
		} else {
			return this.__expectFunctions;
		}
	}
	,
	_shouldRenderMinorLines: false,
	shouldRenderMinorLines: function (value) {
		if (arguments.length === 1) {
			this._shouldRenderMinorLines = value;
			return value;
		} else {
			return this._shouldRenderMinorLines;
		}
	}
	,
	resetLabelPanel: function () {
		this.textBlocks().count(0);
		if (this.view().ready()) {
			this.view().resetLabelPanel();
		}
	}
	,
	_usingTemplate: false,
	usingTemplate: function (value) {
		if (arguments.length === 1) {
			this._usingTemplate = value;
			return value;
		} else {
			return this._usingTemplate;
		}
	}
	,
	horizontalStrip: function (geometry, y0, y1, viewportRect) {
		var ymin = Math.min(y0, y1);
		var ymax = Math.max(y0, y1);
		if (ymin < viewportRect.bottom() && ymax > viewportRect.top()) {
			var strip = new $.ig.RectangleGeometry();
			strip.rect(new $.ig.Rect(0, viewportRect.left(), ymin, viewportRect.width(), ymax - ymin));
			geometry.add(strip);
		}
	}
	,
	horizontalLine: function (geometry, y, viewportRect, renderingInfo, isAxisLine) {
		var inView = y <= viewportRect.bottom() && y >= viewportRect.top();
		if (!isAxisLine && inView) {
			inView = !this.isGridLineColliding(y, renderingInfo.strokeThickness(), viewportRect, false);
		}
		if (inView) {
			if (renderingInfo.alignToPixels()) {
				y = this.alignLineToPixels(y, viewportRect.top(), viewportRect.bottom(), renderingInfo);
			}
			var line = new $.ig.LineGeometry();
			line.startPoint({ __x: viewportRect.left(), __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			line.endPoint({ __x: viewportRect.right(), __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			geometry.add(line);
		}
	}
	,
	verticalStrip: function (geometry, x0, x1, viewportRect) {
		var xmin = Math.min(x0, x1);
		var xmax = Math.max(x0, x1);
		if (xmax > viewportRect.left() && xmin < viewportRect.right()) {
			var strip = new $.ig.RectangleGeometry();
			strip.rect(new $.ig.Rect(0, xmin, viewportRect.top(), xmax - xmin, viewportRect.height()));
			geometry.add(strip);
		}
	}
	,
	verticalLine: function (geometry, x, viewportRect, renderingInfo, isAxisLine) {
		var inView = x >= viewportRect.left() && x <= viewportRect.right();
		if (!inView) {
			var roundedX = $.ig.truncate(Math.round(x));
			var roundedLeft = $.ig.truncate(Math.round(viewportRect.left()));
			var roundedRight = $.ig.truncate(Math.round(viewportRect.right()));
			if (roundedX >= roundedLeft && roundedX <= roundedRight) {
				inView = true;
			}
		}
		if (!isAxisLine && inView) {
			inView = !this.isGridLineColliding(x, renderingInfo.strokeThickness(), viewportRect, true);
		}
		if (inView) {
			if (renderingInfo.alignToPixels()) {
				x = this.alignLineToPixels(x, viewportRect.left(), viewportRect.right(), renderingInfo);
			}
			var majorLine = new $.ig.LineGeometry();
			majorLine.startPoint({ __x: x, __y: viewportRect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			majorLine.endPoint({ __x: x, __y: viewportRect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			geometry.add(majorLine);
		}
	}
	,
	isGridLineColliding: function (position, lineThickness, viewport, isVertical) {
		var overlap = false;
		var dataChart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		if (dataChart != null && dataChart.shouldClipGridlines() && !viewport.isEmpty()) {
			var en = dataChart.axes().getEnumerator();
			while (en.moveNext()) {
				var axis = en.current();
				if (axis.__visibility == $.ig.Visibility.prototype.collapsed || axis.strokeThickness() < 1 || axis.stroke() == null || $.ig.BrushUtil.prototype.isFullyTransparent(axis.stroke())) {
					continue;
				}
				if (axis.crossingAxis() != null && axis.hasCrossingValue()) {
					var crossingValue = this.isVertical() ? viewport.left() : viewport.top();
					var relativeCrossingValue = 0;
					var $ret = axis.scaleCrossingValue(crossingValue, relativeCrossingValue, axis.seriesViewer().windowRect(), viewport, axis.getCurrentEffectiveViewport(), isVertical ? viewport.left() : viewport.top(), isVertical ? viewport.right() : viewport.bottom());
					crossingValue = $ret.p0;
					relativeCrossingValue = $ret.p1;
					var axisLineRect = $.ig.Rect.prototype.empty();
					var gridLineRect = $.ig.Rect.prototype.empty();
					if (isVertical && axis.isVertical()) {
						axisLineRect = new $.ig.Rect(0, crossingValue - (axis.strokeThickness() / 2), axis.viewportRect().top(), axis.strokeThickness(), axis.viewportRect().height());
						gridLineRect = new $.ig.Rect(0, position - (lineThickness / 2), viewport.top(), lineThickness, viewport.height());
					} else if (!isVertical && !axis.isVertical()) {
						axisLineRect = new $.ig.Rect(0, axis.viewportRect().left(), crossingValue - (axis.strokeThickness() / 2), axis.viewportRect().width(), axis.strokeThickness());
						gridLineRect = new $.ig.Rect(0, viewport.left(), position - (lineThickness / 2), viewport.width(), lineThickness);
					}
					if (axisLineRect.left() <= gridLineRect.right() && gridLineRect.left() <= axisLineRect.right() && axisLineRect.top() <= gridLineRect.bottom() && gridLineRect.top() <= axisLineRect.bottom()) {
						overlap = true;
						break;
					}
				} else {
					var axisLineRect1 = $.ig.Rect.prototype.empty();
					var gridLineRect1 = $.ig.Rect.prototype.empty();
					if (isVertical && axis.isVertical()) {
						axisLineRect1 = new $.ig.Rect(0, axis.viewportRect().left(), axis.viewportRect().top(), axis.strokeThickness(), axis.viewportRect().height());
						gridLineRect1 = new $.ig.Rect(0, position - (lineThickness / 2), viewport.top(), lineThickness, viewport.height());
					} else if (!isVertical && !axis.isVertical()) {
						axisLineRect1 = new $.ig.Rect(0, axis.viewportRect().left(), axis.viewportRect().bottom() - (axis.strokeThickness() / 2), axis.viewportRect().width(), axis.strokeThickness());
						gridLineRect1 = new $.ig.Rect(0, viewport.left(), position - (lineThickness / 2), viewport.width(), lineThickness);
					}
					if (axisLineRect1.left() <= gridLineRect1.right() && gridLineRect1.left() <= axisLineRect1.right() && axisLineRect1.top() <= gridLineRect1.bottom() && gridLineRect1.top() <= axisLineRect1.bottom()) {
						overlap = true;
						break;
					}
				}
			}
		}
		return overlap;
	}
	,
	scaleCrossingValue: function (crossingValue, relativeCrossingValue, window, viewport, effectiveViewport, constraintLeft, constraintRight) {
		var size = Math.abs(constraintLeft - constraintRight);
		crossingValue = this.crossingValue();
		crossingValue = this.crossingAxis().scaleValue(crossingValue);
		var categoryAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.crossingAxis());
		if (categoryAxis != null && categoryAxis.categoryMode() == $.ig.CategoryMode.prototype.mode2) {
			var offset = 0.5 * categoryAxis.getCategorySize(window, viewport, effectiveViewport);
			var isHorizontal = categoryAxis.orientation() == $.ig.AxisOrientation.prototype.horizontal;
			if (categoryAxis.isInverted() == isHorizontal) {
				offset = -offset;
			}
			crossingValue = crossingValue + offset;
		}
		relativeCrossingValue = crossingValue - constraintLeft;
		if (crossingValue < constraintLeft) {
			crossingValue = constraintLeft;
		} else if (crossingValue > constraintRight) {
			crossingValue = constraintRight;
		}
		if (relativeCrossingValue < 0) {
			relativeCrossingValue = 0;
		} else if (relativeCrossingValue > size) {
			relativeCrossingValue = size;
		}
		return {
			p0: crossingValue,
			p1: relativeCrossingValue
		};
	}
	,
	alignLineToPixels: function (value, min, max, renderingInfo) {
		var result = value;
		if (renderingInfo != null && renderingInfo.strokeThickness() > 0) {
			var remainder = renderingInfo.strokeThickness() % 2;
			if (remainder == 0 || remainder == 1) {
				var sign = 1;
				result = Math.floor(value);
				if (result + 0.5 < value) {
					sign = -1;
					result = Math.ceil(value);
				}
				if (remainder == 1) {
					result += 0.5 * sign;
				}
				if (result >= max) {
					result -= 1;
				} else if (result <= min) {
					result += 1;
				}
			}
		}
		return result;
	}
	,
	clearMarks: function (geometry) {
		this.view().clearMarks(geometry);
	}
	,
	clearAllMarks: function () {
		this.textBlocks().count(0);
		this.view().clearAllMarks();
		this.labelDataContext().clear();
		this.labelPositions().clear();
	}
	,
	renderAxis: function () {
		this.renderAxis1(false);
	}
	,
	renderAxis1: function (animate) {
		if (this.seriesViewer() != null) {
			this.seriesViewer().chartContentManager().refresh($.ig.ChartContentType.prototype.axis, this, this.contentInfo(), animate);
			if (this.renderRequested != null) {
				var args = new $.ig.RenderRequestedEventArgs();
				args.animate(animate);
				this.renderRequested(this, args);
				animate = args.animate();
			}
		}
	}
	,
	renderRequested: null,
	_labelFontHeuristics: null,
	labelFontHeuristics: function (value) {
		if (arguments.length === 1) {
			this._labelFontHeuristics = value;
			return value;
		} else {
			return this._labelFontHeuristics;
		}
	}
	,
	resolveHeuristicVerticalResolution: function () {
		if (this.labelFontHeuristics() == null) {
			return -1;
		}
		if ($.ig.util.isNaN(this.labelFontHeuristics().labelHeight())) {
			return -1;
		}
		if (this.labelSettings() != null && (this.labelSettings().angle() != 0)) {
			return -1;
		}
		return Math.max($.ig.Axis.prototype.minHeuristicResolution, this.labelFontHeuristics().labelHeight());
	}
	,
	resolveHeuristicHorizontalResolution: function () {
		if (this.labelFontHeuristics() == null) {
			return -1;
		}
		if ($.ig.util.isNaN(this.labelFontHeuristics().labelMinimumWidth()) && $.ig.util.isNaN(this.__preciseWidthHeuristic)) {
			return -1;
		}
		if (this.labelSettings() != null && (this.labelSettings().angle() != 0)) {
			return -1;
		}
		var value = this.labelFontHeuristics().labelMinimumWidth();
		if (!$.ig.util.isNaN(this.__preciseWidthHeuristic) && this.enhancedIntervalMinimumCharacters() == -1) {
			return this.__preciseWidthHeuristic;
		}
		return Math.max($.ig.Axis.prototype.minHeuristicResolution, this.labelFontHeuristics().labelMinimumWidth());
	}
	,
	resolveHeuristicResolution: function () {
		if (this.isVertical()) {
			return this.resolveHeuristicVerticalResolution();
		} else {
			return this.resolveHeuristicHorizontalResolution();
		}
	}
	,
	shouldUsePreciseWidthHeuristic: function () {
		return this.enhancedIntervalMinimumCharacters() == -1;
	}
	,
	doRenderAxis: function (animate) {
		if (this.view().isDisabled()) {
			return;
		}
		var lastPos = 0;
		var lastCount = 0;
		if (this.labelPositions() != null && this.labelPositions().count() > 0) {
			lastPos = $.ig.Enumerable.prototype.last$1($.ig.LabelPosition.prototype.$type, this.labelPositions()).value();
			lastCount = this.labelPositions().count();
		}
		if (this.mustInvalidateLabels() && this.useEnhancedIntervalManagement()) {
			this.labelFontHeuristics(this.gatherLabelFontHeuristics());
		}
		this.renderAxisOverride(animate);
		if (!this.isVertical() && this.mustInvalidateLabels() && this.useEnhancedIntervalManagement() && this.shouldUsePreciseWidthHeuristic()) {
			if (this.ensurePreciseWidthHeuristic()) {
				this.renderAxisOverride(animate);
			}
		}
		var currPos = 1;
		var currCount = 0;
		if (this.labelPositions() != null && this.labelPositions().count() > 0) {
			currPos = $.ig.Enumerable.prototype.last$1($.ig.LabelPosition.prototype.$type, this.labelPositions()).value();
			currCount = this.labelPositions().count();
		}
		if (this.useSmartAxis()) {
			this.mustInvalidateLabels(true);
		}
		var markedLabelsForRearrange = false;
		if (currPos != lastPos || currCount != lastCount || this.mustInvalidateLabels()) {
			this.mustInvalidateLabels(false);
			if (this.view().ready()) {
				this.view().labelNeedRearrange();
				markedLabelsForRearrange = true;
			}
		}
		this.view().ensureRender();
		if (!markedLabelsForRearrange) {
			this.ensureExtentUpdated();
		}
	}
	,
	__preciseWidthHeuristic: 0,
	ensurePreciseWidthHeuristic: function () {
		if (!$.ig.util.isNaN(this.__preciseWidthHeuristic)) {
			return false;
		}
		var fontInfo = this.getFontInfo();
		if (fontInfo == null) {
			return false;
		}
		var maxWidth = -1.7976931348623157E+308;
		for (var i = 0; i < this.labelDataContext().count(); i++) {
			var context = this.labelDataContext().__inner[i];
			if (typeof context === 'string') {
				var width = $.ig.FontUtil.prototype.measureStringWidth(context, fontInfo, this.view().context());
				maxWidth = Math.max(width, maxWidth);
			}
		}
		maxWidth += 5;
		if (this.labelSettings() != null) {
			maxWidth += this.labelSettings().leftMargin() + this.labelSettings().rightMargin();
		}
		this.__preciseWidthHeuristic = maxWidth;
		return true;
	}
	,
	resetCachedEnhancedInterval: function () {
		this.__preciseWidthHeuristic = NaN;
		this.renderAxis1(false);
	}
	,
	__priorHeuristicLength: 0,
	gatherLabelFontHeuristics: function () {
		var fontInfo = this.getFontInfo();
		if (fontInfo == null) {
			return null;
		}
		var wideChar = "W";
		var wideCharWidth = $.ig.FontUtil.prototype.measureStringWidth(wideChar, fontInfo, this.view().context());
		if (this.__priorHeuristicLength != wideCharWidth || this.labelFontHeuristics() == null) {
			this.__priorHeuristicLength = wideCharWidth;
			var mainHeight = $.ig.FontUtil.prototype.getCurrentFontHeight(fontInfo);
			if (this.labelFontHeuristics() == null) {
				this.labelFontHeuristics(new $.ig.LabelFontHeuristics());
			}
			this.labelFontHeuristics().labelHeight(mainHeight);
			this.labelFontHeuristics().labelMinimumDesiredCharacters(this.enhancedIntervalMinimumCharacters());
			this.labelFontHeuristics().labelWidestCharacterGuess(wideCharWidth);
			this.labelFontHeuristics().labelMinimumWidth(this.labelFontHeuristics().labelWidestCharacterGuess() * this.labelFontHeuristics().labelMinimumDesiredCharacters());
		}
		return this.labelFontHeuristics();
	}
	,
	getFontInfo: function () {
		var font = null;
		if (this.seriesViewer() != null) {
			font = this.seriesViewer().getFontInfo();
		}
		if (this.labelSettings() != null && this.labelSettings().hasFontInfo()) {
			font = this.labelSettings().getFontInfo();
		}
		return font;
	}
	,
	ensureExtentUpdated: function () {
		if (!this.view().ready()) {
			return;
		}
		if (!this.hasUserExtent()) {
			this.view().ensureAutoExtent();
		}
	}
	,
	_rangeDirty: false,
	rangeDirty: function (value) {
		if (arguments.length === 1) {
			this._rangeDirty = value;
			return value;
		} else {
			return this._rangeDirty;
		}
	}
	,
	updateRange: function () {
		return this.updateRange1(false);
	}
	,
	updateRange1: function (immediate) {
		if (immediate || this.seriesViewer() == null) {
			var ret = this.updateRangeOverride();
			if (ret) {
				this.mustInvalidateLabels(true);
			}
			this.rangeDirty(false);
			return ret;
		}
		if (!this.rangeDirty()) {
			this.rangeDirty(true);
			this.seriesViewer().chartContentManager().rangeDirty(this, this.contentInfo());
		}
		return false;
	}
	,
	updateRangeOverride: function () {
		return false;
	}
	,
	renderAxisOverride: function (animate) {
		if (this.titleTextBlock() != null) {
			if ((this.titleSettings() == null || this.titleSettings().visibility() == $.ig.Visibility.prototype.visible) && (this.labelSettings() == null || this.labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
				this.titleTextBlock().__visibility = $.ig.Visibility.prototype.visible;
			} else {
				this.titleTextBlock().__visibility = $.ig.Visibility.prototype.collapsed;
			}
		}
	}
	,
	updateActualBrushes: function () {
		var chart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
		if (chart == null) {
			return;
		}
		var stroke = null, majorStroke = null, minorStroke = null;
		if (this.isCategory() && !this.isAngular()) {
			stroke = chart.defaultAxisStroke();
			var en = this.series().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				if (series.isScatter() || series.isRadial() || series.isPolar() || series.isRadial()) {
					majorStroke = chart.defaultAxisMajorStroke();
					minorStroke = chart.defaultAxisMinorStroke();
					break;
				}
			}
		} else if (this.isNumeric() && !this.isAngular()) {
			majorStroke = chart.defaultAxisMajorStroke();
			minorStroke = chart.defaultAxisMinorStroke();
			stroke = this.crossingAxis() != null ? chart.defaultAxisStroke() : null;
			var en1 = this.series().getEnumerator();
			while (en1.moveNext()) {
				var series1 = en1.current();
				if (series1.isScatter() || series1.isRadial() || series1.isPolar() || series1.isRadial()) {
					stroke = chart.defaultAxisStroke();
					break;
				}
			}
		} else if (this.isAngular() || this.orientation() == $.ig.AxisOrientation.prototype.radial) {
			stroke = chart.defaultAxisStroke();
			majorStroke = chart.defaultAxisMajorStroke();
			minorStroke = chart.defaultAxisMinorStroke();
		}
		this.actualStroke(this.stroke() != null ? this.stroke() : stroke);
		this.actualMajorStroke(this.majorStroke() != null ? this.majorStroke() : majorStroke);
		this.actualMinorStroke(this.minorStroke() != null ? this.minorStroke() : minorStroke);
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	registerSeries: function (series) {
		var present = this.series().contains(series);
		if (!present) {
			this.series().add(series);
		}
		this.updateActualBrushes();
		return !present;
	}
	,
	deregisterSeries: function (series) {
		var present = this.series().contains(series);
		if (present) {
			this.series().remove(series);
		}
		this.updateActualBrushes();
		return present;
	}
	,
	label: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Axis.prototype.labelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Axis.prototype.labelProperty);
		}
	}
	,
	getLabel: function (dataItem) {
		return this.view().getLabelValue(dataItem);
	}
	,
	getScaledValue: function (unscaledValue, p) {
		return 0;
	}
	,
	getScaledValue1: function (unscaledValue, p, categoryMode) {
		return 0;
	}
	,
	getCurrentEffectiveViewportForViewport: function (forViewport) {
		if (this.seriesViewer() == null) {
			return $.ig.Rect.prototype.empty();
		}
		if (!forViewport.equals1(this.viewportRect())) {
			return $.ig.Rect.prototype.empty();
		}
		return this.seriesViewer().effectiveViewport();
	}
	,
	getCurrentEffectiveViewport: function () {
		if (this.seriesViewer() == null) {
			return $.ig.Rect.prototype.empty();
		}
		return this.seriesViewer().effectiveViewport();
	}
	,
	getContentViewport: function () {
		if (this.seriesViewer() == null || this.seriesViewer().contentViewport().isEmpty()) {
			return this.viewportRect();
		}
		return this.seriesViewer().contentViewport();
	}
	,
	getInitialSafeViewport: function (viewport, effectiveViewport) {
		if (effectiveViewport.isEmpty()) {
			return viewport;
		}
		return effectiveViewport;
	}
	,
	getScaledValue2: function (unscaledValue, windowRect, viewportRect) {
		var effectiveViewportRect = this.getCurrentEffectiveViewportForViewport(viewportRect);
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		return this.getScaledValue(unscaledValue, p);
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		return 0;
	}
	,
	getUnscaledValue1: function (scaledValue, p, categoryMode) {
		return 0;
	}
	,
	getUnscaledValue2: function (scaledValue, windowRect, viewportRect) {
		var effectiveViewportRect = this.getCurrentEffectiveViewportForViewport(viewportRect);
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		return this.getUnscaledValue(scaledValue, p);
	}
	,
	getUnscaledValueList: function (scaledValues, startIndex, count, p) {
	}
	,
	scaleValue: function (unscaledValue) {
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var p = new $.ig.ScalerParams(0, this.seriesViewer().windowRect(), this.viewportRect(), this.isInverted(), effectiveViewportRect);
		return this.getScaledValue(unscaledValue, p);
	}
	,
	orientation: function () {
	}
	,
	_measuredSize: null,
	measuredSize: function (value) {
		if (arguments.length === 1) {
			this._measuredSize = value;
			return value;
		} else {
			return this._measuredSize;
		}
	}
	,
	overrideViewport: function () {
		this.viewportOverride(new $.ig.Rect(0, 0, 0, this.measuredSize().width(), this.measuredSize().height()));
	}
	,
	__axisComponentsForView: null,
	getAxisComponentsForView: function () {
		this.__axisComponentsForView.labelPanel(this.labelPanel());
		return this.__axisComponentsForView;
	}
	,
	_extentOverride: 0,
	extentOverride: function (value) {
		if (arguments.length === 1) {
			this._extentOverride = value;
			return value;
		} else {
			return this._extentOverride;
		}
	}
	,
	hasUserExtent: function () {
		if (!$.ig.util.isNaN(this.extentOverride())) {
			return true;
		}
		if (this.labelSettings() == null) {
			return false;
		} else {
			return this.labelSettings().hasUserExtent();
		}
	}
	,
	getUserExtent: function () {
		if (!$.ig.util.isNaN(this.extentOverride())) {
			return this.extentOverride();
		}
		if (this.labelSettings() == null) {
			return 50;
		}
		return this.labelSettings().extent();
	}
	,
	applyDefaultSettings: function () {
		this.view().applyDefaultSettings();
	}
	,
	doRaiseRangeChanged: function (rangeChangedEventArgs) {
		this.raiseRangeChanged(rangeChangedEventArgs);
	}
	,
	_textBlocks: null,
	textBlocks: function (value) {
		if (arguments.length === 1) {
			this._textBlocks = value;
			return value;
		} else {
			return this._textBlocks;
		}
	}
	,
	axisLines: function () {
		return this.getAxisComponentsFromView().axisLines();
	}
	,
	majorLines: function () {
		return this.getAxisComponentsFromView().majorLines();
	}
	,
	strips: function () {
		return this.view().getAxisComponentsFromView().strips();
	}
	,
	minorLines: function () {
		return this.getAxisComponentsFromView().minorLines();
	}
	,
	getSyncSettings: function () {
		return $.ig.SyncManager.prototype.getSyncSettings(this.__seriesViewer);
	}
	,
	getAxisComponentsFromView: function () {
		return this.view().getAxisComponentsFromView();
	}
	,
	__currentLabelSettings: null,
	currentLabelSettings: function () {
		return this.__currentLabelSettings;
	}
	,
	provideContext: function (context, hitContext) {
		if (this.labelPanel() != null) {
			this.labelPanel().provideContext(context);
		}
		this.view().onContextProvided(context, hitContext);
	}
	,
	hasCrossingValue: function () {
		return this.crossingValue() != null;
	}
	,
	exportTitleVisualData: function (model, axisType, titlePresenter) {
		var titleData = new $.ig.ChartTitleVisualData();
		var titleParentViewport = this.view().exportLabelsPanelViewport();
		titleData.viewport(titleParentViewport);
		var textBounds = this.view().exportTitleBounds(titlePresenter);
		titleData.textPlotArea(textBounds);
		var isTitleParentVisible = titlePresenter.__visibility == $.ig.Visibility.prototype.visible && titlePresenter.parent() != null;
		var font = this.labelPanel().view().getAxisTitleFont();
		var margin = this.view().exportTitleMargin(titlePresenter);
		var fontInfo = $.ig.FontUtil.prototype.getFontInfo(titlePresenter, font);
		var titleAppearance = $.ig.AppearanceHelper.prototype.fromTextElement(titlePresenter, fontInfo);
		titleAppearance.marginLeft(margin.left());
		titleAppearance.marginRight(margin.right());
		titleAppearance.marginTop(margin.top());
		titleAppearance.marginBottom(margin.bottom());
		titleAppearance.fontStretch("Normal");
		titleAppearance.textWrapping("Wrap");
		titleAppearance.visibility(isTitleParentVisible);
		if (this.titleSettings() != null) {
			titleAppearance.horizontalAlignment($.ig.HorizontalAlignment.prototype.$getName(this.titleSettings().horizontalAlignment()));
			titleAppearance.verticalAlignment($.ig.VerticalAlignment.prototype.$getName(this.titleSettings().verticalAlignment()));
			titleAppearance.textPosition($.ig.AxisTitlePosition.prototype.$getName(this.titleSettings().position()));
		}
		titleData.appearance(titleAppearance);
		return titleData;
	}
	,
	sanitizeTypeName: function (name) {
		return name;
	}
	,
	exportVisualData: function () {
		var $self = this;
		var avd = new $.ig.AxisVisualData();
		avd.viewport(this.viewportRect());
		avd.labelsViewport(this.view().exportLabelsPanelViewport());
		avd.type(this.sanitizeTypeName(this.getType().typeName()));
		avd.name(this.name());
		avd.axisLine(new $.ig.PathVisualData(1, "axisLine", this.view().axisLines()));
		avd.tickMarks(new $.ig.PathVisualData(1, "tickMarks", this.labelPanel().view().ticks()));
		if (!this.labelPanel().children().contains(this.labelPanel().view().ticks())) {
			(avd.tickMarks()).data().clear();
		}
		avd.minorLines(new $.ig.PathVisualData(1, "minorLines", this.view().minorLines()));
		avd.majorLines(new $.ig.PathVisualData(1, "majorLines", this.view().majorLines()));
		avd.strips(new $.ig.PathVisualData(1, "strips", this.view().strips()));
		if (this.title() != null) {
			var titleData = this.exportTitleVisualData(this.seriesViewer(), avd.type(), this.titleTextBlock());
			avd.title(titleData);
		} else {
			avd.title(null);
		}
		var font = this.seriesViewer().getFontInfo();
		if (this.labelSettings() != null && this.labelSettings().textStyle() != null) {
			font = this.labelSettings().getFontInfo();
		}
		var currentDeltaX, currentDeltaY, prevDeltaX, prevDeltaY;
		var marks = (this.labelPanel().view().ticks().data()).children();
		for (var i = 1; i < marks.count(); i++) {
			var currentLine = (marks.__inner[i]);
			var previousLIne = (marks.__inner[i - 1]);
			currentDeltaX = currentLine.startPoint().__x - currentLine.endPoint().__x;
			currentDeltaY = currentLine.startPoint().__y - currentLine.endPoint().__y;
			prevDeltaX = previousLIne.startPoint().__x - previousLIne.endPoint().__x;
			prevDeltaY = previousLIne.startPoint().__y - previousLIne.endPoint().__y;
			if (1 == i) {
				avd.tickMarksLength(Math.sqrt(Math.pow(currentDeltaX, 2) + Math.pow(currentDeltaY, 2)));
			}
		}
		var labelPositions = this.labelPanel().labelPositions();
		var textBlocks = this.labelPanel().view().getLabels();
		for (var i1 = 0; i1 < labelPositions.count(); i1++) {
			var labelPosition = this.labelPanel().labelPositions().__inner[i1];
			var labelContext = this.labelPanel().labelDataContext().__inner[i1];
			var newLabelData = (function () {
				var $ret = new $.ig.AxisLabelVisualData();
				$ret.labelPosition(labelPosition.value());
				$ret.labelValue(labelContext);
				$ret.panelPosition($self.view().exportLabelsPanelPosition());
				return $ret;
			}());
			if (i1 < $.ig.Enumerable.prototype.count$1($.ig.Object.prototype.$type, textBlocks)) {
				var fontInfo = $.ig.FontUtil.prototype.getFontInfo($.ig.Enumerable.prototype.elementAt$1($.ig.Object.prototype.$type, textBlocks, i1), font);
				newLabelData.appearance($.ig.AppearanceHelper.prototype.fromTextElement($.ig.Enumerable.prototype.elementAt$1($.ig.Object.prototype.$type, textBlocks, i1), fontInfo));
				var activeTextBlock = this.textBlocks().active().__inner[i1];
				newLabelData.position(this.view().exportLabelPosition(activeTextBlock));
				newLabelData.size(new $.ig.Size(1, activeTextBlock.actualWidth(), activeTextBlock.actualHeight()));
			}
			avd.labels().add(newLabelData);
		}
		return avd;
	}
	,
	directSeries: function () {
		var d__ = new $.ig.Axis___DirectSeries__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	$type: new $.ig.Type('Axis', $.ig.Control.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('Frame', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	interpolate3: function (p, min, max) {
	}
	,
	interpolate: function (ret, p, min, max) {
		var minCount = min.count();
		var maxCount = max.count();
		var count = Math.max(minCount, maxCount);
		var q = 1 - p;
		if (ret.count() < count) {
			ret.insertRange(ret.count(), new Array(count - ret.count()));
		}
		if (ret.count() > count) {
			ret.removeRange(count, ret.count() - count);
		}
		for (var i = 0; i < Math.min(minCount, maxCount); ++i) {
			ret.__inner[i] = { __x: min.__inner[i].__x * q + max.__inner[i].__x * p, __y: min.__inner[i].__y * q + max.__inner[i].__y * p, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (minCount < maxCount) {
			var mn = minCount > 0 ? min.__inner[minCount - 1] : { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			for (var i1 = minCount; i1 < maxCount; ++i1) {
				ret.__inner[i1] = { __x: mn.__x * q + max.__inner[i1].__x * p, __y: mn.__y * q + max.__inner[i1].__y * p, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			}
		}
		if (minCount > maxCount) {
			var mx = maxCount > 0 ? max.__inner[maxCount - 1] : { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			for (var i2 = maxCount; i2 < minCount; ++i2) {
				ret.__inner[i2] = { __x: min.__inner[i2].__x * q + mx.__x * p, __y: min.__inner[i2].__y * q + mx.__y * p, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			}
		}
	}
	,
	interpolateWithSpeed: function (ret, p, min, max, speedModifiers) {
		var minCount = min.count();
		var maxCount = max.count();
		var count = Math.max(minCount, maxCount);
		var q = 1 - p;
		if (ret.count() < count) {
			ret.insertRange(ret.count(), new Array(count - ret.count()));
		}
		if (ret.count() > count) {
			ret.removeRange(count, ret.count() - count);
		}
		var speed;
		var speedq;
		for (var i = 0; i < Math.min(minCount, maxCount); ++i) {
			speed = p * speedModifiers.__inner[i];
			speed = speed > 1 ? 1 : speed;
			speedq = 1 - speed;
			ret.__inner[i] = { __x: min.__inner[i].__x * speedq + max.__inner[i].__x * speed, __y: min.__inner[i].__y * speedq + max.__inner[i].__y * speed, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (minCount < maxCount) {
			var mn = minCount > 0 ? min.__inner[minCount - 1] : { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			for (var i1 = minCount; i1 < maxCount; ++i1) {
				speed = p * speedModifiers.__inner[i1];
				speed = speed > 1 ? 1 : speed;
				speedq = 1 - speed;
				ret.__inner[i1] = { __x: mn.__x * speedq + max.__inner[i1].__x * speed, __y: mn.__y * speedq + max.__inner[i1].__y * speed, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			}
		}
		if (minCount > maxCount) {
			var mx = maxCount > 0 ? max.__inner[maxCount - 1] : { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			for (var i2 = maxCount; i2 < minCount; ++i2) {
				speed = p * speedModifiers.__inner[i2];
				speed = speed > 1 ? 1 : speed;
				speedq = 1 - speed;
				ret.__inner[i2] = { __x: min.__inner[i2].__x * speedq + mx.__x * speed, __y: min.__inner[i2].__y * speedq + mx.__y * speed, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			}
		}
	}
	,
	interpolate1: function (ret, p, min, max) {
		var minCount = min.count();
		var maxCount = max.count();
		var count = Math.max(minCount, maxCount);
		var q = 1 - p;
		if (ret.count() < count) {
			var newVals = new Array(count - ret.count());
			for (var i = 0; i < count - ret.count(); i++) {
				newVals[i] = 0;
			}
			ret.insertRange(ret.count(), newVals);
		}
		if (ret.count() > count) {
			ret.removeRange(count, ret.count() - count);
		}
		for (var i1 = 0; i1 < Math.min(minCount, maxCount); ++i1) {
			ret.__inner[i1] = min.__inner[i1] * q + max.__inner[i1] * p;
		}
		if (minCount < maxCount) {
			var mn = minCount > 0 ? min.__inner[minCount - 1] : 0;
			for (var i2 = minCount; i2 < maxCount; ++i2) {
				ret.__inner[i2] = mn * q + max.__inner[i2] * p;
			}
		}
		if (minCount > maxCount) {
			var mx = maxCount > 0 ? max.__inner[maxCount - 1] : 0;
			for (var i3 = maxCount; i3 < minCount; ++i3) {
				ret.__inner[i3] = min.__inner[i3] * q + mx * p;
			}
		}
	}
	,
	interpolateWithSpeed1: function (ret, p, min, max, speedModifiers) {
		var minCount = min.count();
		var maxCount = max.count();
		var count = Math.max(minCount, maxCount);
		var q = 1 - p;
		if (ret.count() < count) {
			var newVals = new Array(count - ret.count());
			for (var i = 0; i < count - ret.count(); i++) {
				newVals[i] = 0;
			}
			ret.insertRange(ret.count(), newVals);
		}
		if (ret.count() > count) {
			ret.removeRange(count, ret.count() - count);
		}
		var speed;
		var speedq;
		for (var i1 = 0; i1 < Math.min(minCount, maxCount); ++i1) {
			speed = p * speedModifiers.__inner[i1];
			speed = speed > 1 ? 1 : speed;
			speedq = 1 - speed;
			ret.__inner[i1] = min.__inner[i1] * speedq + max.__inner[i1] * speed;
		}
		if (minCount < maxCount) {
			var mn = minCount > 0 ? min.__inner[minCount - 1] : 0;
			for (var i2 = minCount; i2 < maxCount; ++i2) {
				speed = p * speedModifiers.__inner[i2];
				speed = speed > 1 ? 1 : speed;
				speedq = 1 - speed;
				ret.__inner[i2] = mn * speedq + max.__inner[i2] * speed;
			}
		}
		if (minCount > maxCount) {
			var mx = maxCount > 0 ? max.__inner[maxCount - 1] : 0;
			for (var i3 = maxCount; i3 < minCount; ++i3) {
				speed = p * speedModifiers.__inner[i3];
				speed = speed > 1 ? 1 : speed;
				speedq = 1 - speed;
				ret.__inner[i3] = min.__inner[i3] * speedq + mx * speed;
			}
		}
	}
	,
	interpolateBrushes: function (p, minBrush, maxBrush, InterpolationMode) {
		var b = $.ig.BrushUtil.prototype.getInterpolation(minBrush, p, maxBrush, InterpolationMode);
		return b;
	}
	,
	interpolate2: function (ret, p, min, max, interpolationMode) {
		var minCount = min.count();
		var maxCount = max.count();
		var count = Math.max(minCount, maxCount);
		var transparentBrush = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("transparent");
			return $ret;
		}());
		var q = 1 - p;
		if (ret.count() < count) {
			var newVals = new Array(count - ret.count());
			for (var i = 0; i < count - ret.count(); i++) {
				newVals[i] = new $.ig.Brush();
			}
			ret.insertRange(ret.count(), newVals);
		}
		if (ret.count() > count) {
			ret.removeRange(count, ret.count() - count);
		}
		for (var i1 = 0; i1 < Math.min(minCount, maxCount); ++i1) {
			ret.__inner[i1] = $.ig.Frame.prototype.interpolateBrushes(p, min.__inner[i1], max.__inner[i1], interpolationMode);
		}
		if (minCount < maxCount) {
			var mn = minCount > 0 ? min.__inner[minCount - 1] : transparentBrush;
			for (var i2 = minCount; i2 < maxCount; ++i2) {
				ret.__inner[i2] = $.ig.Frame.prototype.interpolateBrushes(p, mn, max.__inner[i2], interpolationMode);
			}
		}
		if (minCount > maxCount) {
			var mx = maxCount > 0 ? max.__inner[maxCount - 1] : transparentBrush;
			for (var i3 = maxCount; i3 < minCount; ++i3) {
				ret.__inner[i3] = $.ig.Frame.prototype.interpolateBrushes(p, min.__inner[i3], mx, interpolationMode);
			}
		}
	}
	,
	$type: new $.ig.Type('Frame', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesView', 'Object', {
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	_mouseButtonUserReleased: false,
	mouseButtonUserReleased: function (value) {
		if (arguments.length === 1) {
			this._mouseButtonUserReleased = value;
			return value;
		} else {
			return this._mouseButtonUserReleased;
		}
	}
	,
	init: function (model) {
		this.__renderedRect = $.ig.Rect.prototype.empty();
		this.__hitBrush = new $.ig.Brush();
		this.__toolTipObject = null;
		this.__toolTipString = null;
		this.__seriesComponentsFromView = new $.ig.SeriesComponentsFromView();
		this.__tooltipDisconnected = true;
		this.__tooltipInInfoBox = false;
		this.__isThumbnailView = false;
		$.ig.Object.prototype.init.call(this);
		this.scalingRatioOverride(NaN);
		this.isVisible(true);
		this.model(model);
		this.isThumbnailView(false);
		this.__backgroundRect = new $.ig.Rectangle();
		this.mouseButtonUserReleased(false);
	},
	onInit: function () {
		var $self = this;
		if (!this.isThumbnailView()) {
			this.model().legendItemTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($self.legendItem());
				$ret.measure($self.legendItemMeasure());
				return $ret;
			}()));
			this.model().legendItemBadgeTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($self.badgeTemplate());
				$ret.measure($self.badgeTemplateMeasure());
				return $ret;
			}()));
			this.model().discreteLegendItemTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($self.discreteLegendItem());
				$ret.measure($self.discreteLegendItemMeasure());
				return $ret;
			}()));
			this.toolTipContext(new $.ig.DataContext());
			this.toolTipContext().series(this.model());
			this.model().transitionInEasingFunction($.ig.EasingFunctions.prototype.cubicEase);
			this.applyDropShadowDefaultSettings();
		}
	}
	,
	getEffectiveViewport: function () {
		return this.model().getEffectiveViewport1(this);
	}
	,
	onVisualPropertiesChanged: function () {
		this.makeDirty();
	}
	,
	destroy: function () {
	}
	,
	discreteLegendItem: function () {
		return $.ig.LegendTemplates.prototype.defaultDiscreteLegendItemRender;
	}
	,
	discreteLegendItemMeasure: function () {
		return $.ig.LegendTemplates.prototype.defaultDiscreteLegendItemMeasure;
	}
	,
	legendItem: function () {
		return $.ig.LegendTemplates.prototype.defaultLegendItemRender;
	}
	,
	legendItemMeasure: function () {
		return $.ig.LegendTemplates.prototype.defaultLegendItemMeasure;
	}
	,
	badgeTemplate: function () {
		return $.ig.LegendTemplates.prototype.lineBadgeTemplate;
	}
	,
	badgeTemplateMeasure: function () {
		return $.ig.LegendTemplates.prototype.legendItemBadgeMeasure;
	}
	,
	_isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this._isDirty = value;
			return value;
		} else {
			return this._isDirty;
		}
	}
	,
	index: function () {
		if (this.model().seriesViewer() != null && this.model().seriesViewer().isMap()) {
			if (this.model().isGeographic()) {
				return this.model().seriesViewer().series().indexOf(this.model());
			} else {
				var index = this.model().seriesViewer().series().indexOf(this.model());
				if (index >= 0) {
					return index;
				}
				for (var i = 0; i < this.model().seriesViewer().series().count(); i++) {
					if (this.model().seriesViewer().series().__inner[i].isGeographic()) {
						var hosted = this.model().seriesViewer().series().__inner[i].resolveHostedSeries();
						if (hosted == this.model()) {
							return i;
						}
					}
				}
				return index;
			}
		}
		var chart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().chart());
		var before = 0;
		if (chart != null) {
			if (chart.gridMode() == $.ig.GridMode.prototype.behindSeries || chart.gridMode() == $.ig.GridMode.prototype.none) {
				before = chart.axes().count();
			}
		}
		var seriesIndex = 0;
		for (var i1 = 0; i1 < this.model().seriesViewer().series().count(); i1++) {
			if (this.model().seriesViewer().series().__inner[i1] == this.model()) {
				break;
			}
			if (this.model().seriesViewer().series().__inner[i1].isStacked()) {
				seriesIndex += (this.model().seriesViewer().series().__inner[i1]).series().count();
			} else {
				seriesIndex++;
			}
		}
		return before + seriesIndex;
	}
	,
	makeDirty: function () {
		if (this.model().seriesViewer() == null) {
			return;
		}
		if (!this.isDirty()) {
			this.isDirty(true);
			this.currentScheduler().schedule1(this.context(), this.hitContext());
		}
	}
	,
	undirty: function (clearRect) {
		this.isDirty(false);
		this.render(clearRect);
	}
	,
	__backgroundRect: null,
	onRenderFrame: function () {
		this.makeDirty();
	}
	,
	_scalingRatioOverride: 0,
	scalingRatioOverride: function (value) {
		if (arguments.length === 1) {
			this._scalingRatioOverride = value;
			return value;
		} else {
			return this._scalingRatioOverride;
		}
	}
	,
	getScalingRatio: function () {
		if (!$.ig.util.isNaN(this.scalingRatioOverride())) {
			return this.scalingRatioOverride();
		}
		if (this.model().seriesViewer() != null) {
			return this.model().seriesViewer().actualPixelScalingRatio();
		} else {
			return 1;
		}
	}
	,
	render: function (clearRect) {
		if (this.context() == null) {
			return;
		}
		if (this.__renderedRect.isEmpty()) {
			this.__renderedRect = this.viewport();
		}
		var prevRect = this.__renderedRect;
		var _container = this.model().seriesViewer().getContainerRect();
		var clearLeft = _container.left();
		var clearTop = _container.top();
		var clearWidth = _container.width();
		var clearHeight = _container.height();
		var scalingRatio = this.getScalingRatio();
		if (this.isAlternateView()) {
			clearLeft = this.viewport().left();
			clearTop = this.viewport().top();
			clearWidth = this.viewport().width();
			clearHeight = this.viewport().height();
		}
		if (this.context().shouldRender()) {
			if (scalingRatio != 1) {
				this.context().save();
				this.context().scale(scalingRatio, scalingRatio);
			}
			if (clearRect) {
				this.context().clearRectangle(clearLeft, clearTop, clearWidth, clearHeight);
			}
			if (clearRect) {
				if (this.model().seriesViewer().plotAreaBackground() != null) {
					this.__backgroundRect.canvasTop(this.viewport().top());
					this.__backgroundRect.canvasLeft(this.viewport().left());
					this.__backgroundRect.width(this.viewport().width());
					this.__backgroundRect.height(this.viewport().height());
					this.__backgroundRect.__fill = this.model().seriesViewer().plotAreaBackground();
					this.context().renderRectangle(this.__backgroundRect);
				}
			}
			if (scalingRatio != 1) {
				this.context().restore();
			}
		}
		if (this.hitContext() != null && this.isVisible()) {
			if (this.hitContext().shouldRender()) {
				if (this.model().seriesViewer() != null && scalingRatio != 1) {
					this.hitContext().save();
					this.hitContext().scale(scalingRatio, scalingRatio);
				}
				if (!prevRect.isEmpty() && clearRect) {
					this.hitContext().clearRectangle(prevRect.left(), prevRect.top(), prevRect.width(), prevRect.height());
				}
				this.setupAppearance(true);
				this.renderOverride(this.hitContext(), true);
				this.renderMarkersOverride(this.hitContext(), true);
				if (scalingRatio != 1) {
					this.hitContext().restore();
				}
			}
		}
		if (this.context().shouldRender() && this.isVisible()) {
			if (scalingRatio != 1) {
				this.context().save();
				this.context().scale(scalingRatio, scalingRatio);
			}
			this.context().save();
			if (!this.isThumbnailView() && $.ig.Rect.prototype.l_op_Inequality(this.model().customClipRect(), null) && !this.model().customClipRect().isEmpty() && (this.model().customClipRect().width() != 1 || this.model().customClipRect().height() != 1)) {
				this.context().setRectangleClip(new $.ig.Rect(0, this.viewport().left() + this.viewport().width() * this.model().customClipRect().left(), this.viewport().top() + this.viewport().height() * this.model().customClipRect().top(), this.viewport().width() * this.model().customClipRect().width(), this.viewport().height() * this.model().customClipRect().height()));
			} else {
				this.context().setRectangleClip(this.viewport());
			}
			this.setupAppearance(false);
			this.context().setOpacity(this.model().__opacity);
			if (this.model().isDropShadowEnabled() && this.model().isDropShadowSupported() && !this.isThumbnailView()) {
				if (this.model().useSingleShadow()) {
					this.context().enableDropShadow(this.model().shadowColor().colorString(), 0, this.model().shadowOffsetX(), this.model().shadowOffsetY());
					var shadowContext = this.model().seriesViewer().view().viewManager().shadowContext();
					var shadowCanvas = this.model().seriesViewer().view().viewManager().shadowCanvas();
					if (scalingRatio != 1) {
						shadowContext.save();
						shadowContext.scale(scalingRatio, scalingRatio);
					}
					shadowContext.clearRectangle(_container.left(), _container.top(), _container.width(), _container.height());
					this.renderOverride(shadowContext, false);
					this.renderMarkersOverride(shadowContext, false);
					this.context().drawImage(shadowCanvas[0], 1, 0, 0, _container.width(), _container.height());
					if (scalingRatio != 1) {
						shadowContext.restore();
					}
				} else {
					this.context().enableDropShadow(this.model().shadowColor().colorString(), this.model().shadowBlur(), this.model().shadowOffsetX(), this.model().shadowOffsetY());
					this.renderOverride(this.context(), false);
					this.renderMarkersOverride(this.context(), false);
				}
				this.context().disableDropShadow();
			} else {
				this.renderOverride(this.context(), false);
				this.renderMarkersOverride(this.context(), false);
			}
			this.context().setOpacity(1);
			this.context().restore();
			if (scalingRatio != 1) {
				this.context().restore();
			}
		}
	}
	,
	__renderedRect: null,
	setupItemAppearance: function (item, index, isHitContext) {
		if (isHitContext) {
			this.setupItemHitAppearanceOverride(item, index);
		} else {
			this.setupItemAppearanceOverride(item, index);
		}
	}
	,
	setupMarkerAppearance: function (item, index, isHitContext) {
		if (isHitContext) {
			this.setupMarkerHitAppearanceOverride(item, index);
		} else {
			this.setupMarkerAppearanceOverride(item, index);
		}
	}
	,
	getCurrentItem: function (index, isHitContext) {
		if (isHitContext) {
			return this.getHitItem(index);
		} else {
			return this.getItem(index);
		}
	}
	,
	getHitItem: function (index) {
		return null;
	}
	,
	getItem: function (index) {
		return null;
	}
	,
	setupItemAppearanceOverride: function (item, index) {
	}
	,
	setupMarkerAppearanceOverride: function (item, index) {
	}
	,
	setupItemHitAppearanceOverride: function (item, index) {
	}
	,
	setupMarkerHitAppearanceOverride: function (item, index) {
	}
	,
	setupAppearance: function (isHitContext) {
		if (isHitContext) {
			this.setupHitAppearanceOverride();
		} else {
			this.setupAppearanceOverride();
		}
	}
	,
	setupAppearanceOverride: function () {
	}
	,
	setupHitAppearanceOverride: function () {
	}
	,
	__hitBrush: null,
	getHitBrush1: function (index) {
		return this.getHitBrush();
	}
	,
	getHitBrush: function () {
		var seriesIndex = this.model()._uniqueIndex;
		var num_ = (seriesIndex + 1) * $.ig.SeriesView.prototype.iTEM_ALLOCATION;
		var r = (num_ & 0x3F) << 2;
		num_ = num_ >> 6;
		var g = (num_ & 0x3F) << 2;
		num_ = num_ >> 6;
		var b = (num_ & 0x3F) << 2;
		this.__hitBrush.__fill = "rgb(" + r + "," + g + "," + b + ")";
		return this.__hitBrush;
	}
	,
	renderOverride: function (context, isHitContext) {
		this.__renderedRect = this.viewport();
	}
	,
	renderMarkersOverride: function (context, isHitContext) {
	}
	,
	onTemplateProvided: function () {
	}
	,
	goToMouseOverState: function () {
	}
	,
	goToNormalState: function () {
	}
	,
	hideTooltip: function () {
		if (this.__toolTipObject != null && this.toolTipVisible()) {
			this.toolTipVisible(false);
			var context_ = this.toolTipContext();
			if (this.__toolTipObject.hideToolTip) { this.__toolTipObject.hideToolTip(context_); };
		}
	}
	,
	__toolTipObject: null,
	__toolTipString: null,
	updateToolTipValue: function (p) {
		var oldObject = this.__toolTipObject;
		this.__toolTipString = null;
		this.__toolTipObject = null;
		if (typeof p === 'string') {
			this.__toolTipString = p;
		} else {
			this.__toolTipObject = p;
			if (this.__toolTipObject != null) {
				this.__toolTipObject.css("position", "absolute");
				this.__toolTipObject.css("top", "0");
				this.__toolTipObject.css("left", "0");
				this.__toolTipObject.css("z-index", "10000");
				var nonTransparentOutline = this.model().actualOutline() != null && $.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.model().actualOutline().color()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) && this.model().actualOutline().color().a() > 0;
				if (nonTransparentOutline) {
					this.__toolTipObject.css("border-color", this.model().actualOutline().__fill);
				}
			} else {
				if (!this.__tooltipDisconnected && oldObject != null) {
					this.model().seriesViewer().removeTooltipFromView(oldObject);
					this.__tooltipDisconnected = true;
				}
			}
		}
	}
	,
	__seriesComponentsFromView: null,
	getSeriesComponentsFromView: function () {
		return this.__seriesComponentsFromView;
	}
	,
	setMarkerCanvas: function (canvas) {
	}
	,
	ready: function () {
		return true;
	}
	,
	onSeriesDetached: function () {
	}
	,
	onSeriesAttached: function () {
	}
	,
	resetActualBrush: function () {
		this.model().actualBrush(null);
	}
	,
	bindActualToUserBrush: function () {
		this.model().actualBrush(this.model().brush());
	}
	,
	resetActualOutlineBrush: function () {
		this.model().actualOutline(null);
	}
	,
	bindActualToUserOutline: function () {
		this.model().actualOutline(this.model().outline());
	}
	,
	getDataContextFromSender: function (sender) {
		if ($.ig.util.cast($.ig.DataContext.prototype.$type, sender) !== null) {
			return sender;
		}
		return null;
	}
	,
	_toolTipPosition: null,
	toolTipPosition: function (value) {
		if (arguments.length === 1) {
			this._toolTipPosition = value;
			return value;
		} else {
			return this._toolTipPosition;
		}
	}
	,
	_toolTipItem: null,
	toolTipItem: function (value) {
		if (arguments.length === 1) {
			this._toolTipItem = value;
			return value;
		} else {
			return this._toolTipItem;
		}
	}
	,
	_toolTipVisible: false,
	toolTipVisible: function (value) {
		if (arguments.length === 1) {
			this._toolTipVisible = value;
			return value;
		} else {
			return this._toolTipVisible;
		}
	}
	,
	_toolTipContext: null,
	toolTipContext: function (value) {
		if (arguments.length === 1) {
			this._toolTipContext = value;
			return value;
		} else {
			return this._toolTipContext;
		}
	}
	,
	__tooltipDisconnected: false,
	__tooltipInInfoBox: false,
	updateToolTip: function (pt, item, data) {
		var tooltipDisabled = false;
		if (this.model().seriesViewer() != null) {
			tooltipDisabled = this.model().seriesViewer().isDefaultTooltipDisabled();
		}
		if (tooltipDisabled) {
			return;
		}
		if (this.model().seriesViewer() == null || this.model().seriesViewer().dragCrosshairActivated()) {
			return;
		}
		this.toolTipVisible(true);
		this.toolTipPosition(pt);
		this.toolTipItem(item);
		this.toolTipContext().item(item);
		var offsets = this.model().seriesViewer().getContainerOffsets();
		var pos_ = { __x: pt.__x + 15 + offsets.__x, __y: pt.__y + 15 + offsets.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var context_ = this.toolTipContext();
		if (this.__toolTipObject != null) {
			if (this.__tooltipInInfoBox) {
				this.__tooltipInInfoBox = false;
				this.__toolTipObject.remove();
				this.__toolTipObject.css("position", "absolute");
				this.__toolTipObject.addClass(this.model().seriesViewer().tooltipStyle());
				this.model().seriesViewer().addTooltipToView(this.__toolTipObject);
				this.__toolTipObject.hide();
			}
			if (this.__tooltipDisconnected) {
				this.model().seriesViewer().addTooltipToView(this.__toolTipObject);
				this.__tooltipDisconnected = false;
			}
			var $window = $(window);
			            var wWidth = $window.width();
			            var width = this.__toolTipObject.outerWidth(true);
			            var left = pos_.__x; 
			            if (width + left > wWidth) {
				            var limit = wWidth - width;
				            pos_.__x = limit;
			            }
                ;
			context_.hideOthers = true;
			if (this.__toolTipObject.updateToolTip && !this.__toolTipObject.updateToolTip(context_)) {
				this.hideTooltip();
			}
			if (this.__toolTipObject.offset) { this.__toolTipObject.offset({ left: pos_.__x, top: pos_.__y }); };
		}
	}
	,
	showToolTip: function (pt, add) {
		this.toolTipVisible(true);
		var point = { __x: pt.__x + this.viewport().left(), __y: pt.__y + this.viewport().top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var data = this.model().item(null, point);
		if (this.toolTipContext() != null) {
			this.toolTipContext().series(this.model());
			this.toolTipContext().item(data);
		}
		var tooltip_ = this.__toolTipObject;
		var context_ = this.toolTipContext();
		if (context_ != null) {
			context_.hideOthers = false;
		}
		if (!this.__tooltipInInfoBox && tooltip_ != null) {
			this.__tooltipInInfoBox = true;
			tooltip_.remove();
			tooltip_.css("position", "relative");
			tooltip_.css("top", "");
			tooltip_.css("left", "");
			tooltip_.removeClass(this.model().seriesViewer().tooltipStyle());
		}
		if (this.__toolTipObject != null) {
			if (tooltip_.updateToolTip) { tooltip_.updateToolTip(context_); };
		}
		if (tooltip_ != null) {
			add(tooltip_);
		}
	}
	,
	getDefaultTooltipTemplate: function () {
		var tooltipObject = "<div class='ui-chart-default-tooltip-content'><span";
		var nonTransparentOutline = this.model().actualOutline() != null && $.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.model().actualOutline().color()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) && this.model().actualOutline().color().a() > 0;
		if (nonTransparentOutline) {
			tooltipObject += " style='color:" + this.model().actualOutline().__fill + "'";
		}
		tooltipObject += ">" + this.model().title() + "</span></div>";
		return tooltipObject;
	}
	,
	_context: null,
	context: function (value) {
		if (arguments.length === 1) {
			this._context = value;
			return value;
		} else {
			return this._context;
		}
	}
	,
	_hitContext: null,
	hitContext: function (value) {
		if (arguments.length === 1) {
			this._hitContext = value;
			return value;
		} else {
			return this._hitContext;
		}
	}
	,
	onContextProvided: function (context, hitContext) {
		this.context(context);
		this.hitContext(hitContext);
	}
	,
	__viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this.__viewport = value;
			return value;
		} else {
			return this.__viewport;
		}
	}
	,
	_alternateWindow: null,
	alternateWindow: function (value) {
		if (arguments.length === 1) {
			this._alternateWindow = value;
			return value;
		} else {
			return this._alternateWindow;
		}
	}
	,
	windowRect: function () {
		if (this.isAlternateView()) {
			return this.alternateWindow();
		} else if (this.isThumbnailView()) {
			return $.ig.XamDataChart.prototype.standardRect;
		} else {
			return this.model().seriesViewer() != null ? this.model().seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		}
	}
	,
	__isThumbnailView: false,
	isThumbnailView: function (value) {
		if (arguments.length === 1) {
			this.__isThumbnailView = value;
			return value;
		} else {
			return this.__isThumbnailView;
		}
	}
	,
	detachFromChart: function (oldSeriesViewer) {
		if (oldSeriesViewer != null) {
			this.currentScheduler().unRegister(this);
			if (this.model().thumbnailView() != null) {
				this.model().thumbnailView().currentScheduler().unRegister(this.model().thumbnailView());
			}
		}
	}
	,
	_currentScheduler: null,
	currentScheduler: function (value) {
		if (arguments.length === 1) {
			this._currentScheduler = value;
			return value;
		} else {
			return this._currentScheduler;
		}
	}
	,
	attachToChart: function (newSeriesViewer) {
		if (newSeriesViewer != null) {
			if (this.model().useOverlaySchdeduler()) {
				this.context(this.model().seriesViewer().view().overlayContext());
				newSeriesViewer.view().overlayScheduler().register(this);
				this.currentScheduler(newSeriesViewer.view().overlayScheduler());
			} else {
				this.context(this.model().seriesViewer().view().mainContext());
				newSeriesViewer.canvasRenderScheduler().register(this);
				this.currentScheduler(newSeriesViewer.canvasRenderScheduler());
			}
			if (this.model().thumbnailView() != null) {
				newSeriesViewer.thumbnailCanvasRenderScheduler().register(this.model().thumbnailView());
				this.model().thumbnailView().currentScheduler(newSeriesViewer.thumbnailCanvasRenderScheduler());
				this.model().thumbnailView().makeDirty();
			}
			var en = this.model().alternateViews().keys().getEnumerator();
			while (en.moveNext()) {
				var key = en.current();
				newSeriesViewer.alternateViewRenderScheduler().register(this.model().alternateViews().item(key));
				this.model().alternateViews().item(key).currentScheduler(newSeriesViewer.alternateViewRenderScheduler());
				this.model().alternateViews().item(key).makeDirty();
			}
			this.makeDirty();
		}
	}
	,
	postRender: function () {
		this.postRenderOverride();
	}
	,
	postRenderOverride: function () {
	}
	,
	getDataContextByIndex: function (itemIndex) {
		return null;
	}
	,
	prepSurface: function (surface) {
		this.model().thumbnailView().context(surface.surface());
	}
	,
	exportViewShapes: function (svd) {
	}
	,
	updateLegendItemVisual: function () {
		if (this.duringInit()) {
			return;
		}
		if (this.model().seriesViewer() != null) {
			var curLegend = (this.model().legend() != null) ? this.model().legend() : this.model().seriesViewer().legend();
			if (curLegend != null && this.model().legendItem() != null && curLegend.children().contains(this.model().legendItem())) {
				curLegend.children().remove(this.model().legendItem());
				var legendItem = this.model().provideLegendItem();
				(legendItem.content()).actualItemBrush(this.model().actualBrush());
				(legendItem.content()).outline(this.model().outline());
				(legendItem.content()).thickness(this.model().thickness());
				curLegend.addChildInOrder(this.model().legendItem(), this.model());
			}
		}
	}
	,
	onLegendItemVisibilityChanged: function () {
		this.model().assertLegendItems(this.model().actualLegend(), this.model().actualLegend());
	}
	,
	onTitlePropertyChanged: function () {
		this.updateLegendItemVisual();
	}
	,
	getViewInfo: function (viewportRect, windowRect) {
		viewportRect = this.viewport();
		windowRect = this.windowRect();
		return {
			p0: viewportRect,
			p1: windowRect
		};
	}
	,
	hasSurface: function () {
		return this.context() != null;
	}
	,
	_isVisible: false,
	isVisible: function (value) {
		if (arguments.length === 1) {
			this._isVisible = value;
			return value;
		} else {
			return this._isVisible;
		}
	}
	,
	visibilityChanged: function () {
		this.isVisible(this.model().__visibility == $.ig.Visibility.prototype.visible);
		this.makeDirty();
	}
	,
	removeToolTipFromCurrentParent: function () {
	}
	,
	getBrightenedBrush: function (brush, additionalBrightness) {
		if (brush == null) {
			return brush;
		}
		return $.ig.BrushUtil.prototype.getLightened(brush, additionalBrightness);
	}
	,
	applyDropShadowDefaultSettings: function () {
		var color = new $.ig.Color();
		color.colorString("rgba(95,95,95,0.5)");
		this.model().shadowColor(color);
		this.model().shadowBlur(5);
		this.model().shadowOffsetX(5);
		this.model().shadowOffsetY(5);
	}
	,
	handleIsDropShadowEnabledChanged: function () {
	}
	,
	preRender: function () {
		if (this.model().seriesViewer() != null && !this.isThumbnailView()) {
			this.model().seriesViewer().ensureCorrectSize();
		}
	}
	,
	isValid: function () {
		return true;
	}
	,
	_duringInit: false,
	duringInit: function (value) {
		if (arguments.length === 1) {
			this._duringInit = value;
			return value;
		} else {
			return this._duringInit;
		}
	}
	,
	_isAlternateView: false,
	isAlternateView: function (value) {
		if (arguments.length === 1) {
			this._isAlternateView = value;
			return value;
		} else {
			return this._isAlternateView;
		}
	}
	,
	prepAltSurface: function (surface) {
		this.context(surface.surface());
	}
	,
	_alternateViewIdentifier: null,
	alternateViewIdentifier: function (value) {
		if (arguments.length === 1) {
			this._alternateViewIdentifier = value;
			return value;
		} else {
			return this._alternateViewIdentifier;
		}
	}
	,
	$type: new $.ig.Type('SeriesView', $.ig.Object.prototype.$type, [$.ig.ISchedulableRender.prototype.$type, $.ig.IProvidesViewport.prototype.$type])
}, true);

$.ig.util.defType('PointerTooltipStyle', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.strokeThickness(NaN);
		this.cornerRadius(NaN);
	},
	_strokeThickness: 0,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this._strokeThickness = value;
			return value;
		} else {
			return this._strokeThickness;
		}
	}
	,
	_cornerRadius: 0,
	cornerRadius: function (value) {
		if (arguments.length === 1) {
			this._cornerRadius = value;
			return value;
		} else {
			return this._cornerRadius;
		}
	}
	,
	_strokeColor: null,
	strokeColor: function (value) {
		if (arguments.length === 1) {
			this._strokeColor = value;
			return value;
		} else {
			return this._strokeColor;
		}
	}
	,
	_fillColor: null,
	fillColor: function (value) {
		if (arguments.length === 1) {
			this._fillColor = value;
			return value;
		} else {
			return this._fillColor;
		}
	}
	,
	$type: new $.ig.Type('PointerTooltipStyle', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('FontMappingInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_fontHeight: 0,
	fontHeight: function (value) {
		if (arguments.length === 1) {
			this._fontHeight = value;
			return value;
		} else {
			return this._fontHeight;
		}
	}
	,
	_tallestLabelHeight: 0,
	tallestLabelHeight: function (value) {
		if (arguments.length === 1) {
			this._tallestLabelHeight = value;
			return value;
		} else {
			return this._tallestLabelHeight;
		}
	}
	,
	_tallestLabel: null,
	tallestLabel: function (value) {
		if (arguments.length === 1) {
			this._tallestLabel = value;
			return value;
		} else {
			return this._tallestLabel;
		}
	}
	,
	$type: new $.ig.Type('FontMappingInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisLabelPanelBase', 'Panel', {
	createView: function () {
		return new $.ig.AxisLabelPanelBaseView(this);
	}
	,
	onViewCreated: function (view) {
	}
	,
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	_finalBoundsFromLabelArranger: null,
	finalBoundsFromLabelArranger: function (value) {
		if (arguments.length === 1) {
			this._finalBoundsFromLabelArranger = value;
			return value;
		} else {
			return this._finalBoundsFromLabelArranger;
		}
	}
	,
	init: function () {
		this.__labelDatacontext = null;
		this.__windowRect = $.ig.Rect.prototype.empty();
		this._actualExtent = 50;
		$.ig.Panel.prototype.init.call(this);
		this.viewportRect($.ig.Rect.prototype.empty());
		this.labelViewport($.ig.Rect.prototype.empty());
		this.view(this.createView());
		this.onViewCreated(this.view());
		this.view().onInit();
		this.textBlocks(new $.ig.List$1($.ig.FrameworkElement.prototype.$type, 0));
		this.labelPositions(new $.ig.List$1($.ig.LabelPosition.prototype.$type, 0));
		this.labelBounds(new $.ig.List$1($.ig.Rect.prototype.$type, 0));
		this.useStaggering(false);
		this.useRotation(false);
		this.useWrapping(false);
		this.foundCollisions(false);
		this.__widthAndHeightAreSet = false;
	},
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_axis: null,
	axis: function (value) {
		if (arguments.length === 1) {
			this._axis = value;
			return value;
		} else {
			return this._axis;
		}
	}
	,
	__widthAndHeightAreSet: false,
	widthAndHeightAreSet: function (value) {
		if (arguments.length === 1) {
			this.__widthAndHeightAreSet = value;
			return value;
		} else {
			return this.__widthAndHeightAreSet;
		}
	}
	,
	__labelDatacontext: null,
	labelDataContext: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__labelDatacontext;
			this.__labelDatacontext = value;
			if (oldValue == null && oldValue != value) {
				this.makeDirty();
			}
			return value;
		} else {
			return this.__labelDatacontext;
		}
	}
	,
	_labelPositions: null,
	labelPositions: function (value) {
		if (arguments.length === 1) {
			this._labelPositions = value;
			return value;
		} else {
			return this._labelPositions;
		}
	}
	,
	_viewportRect: null,
	viewportRect: function (value) {
		if (arguments.length === 1) {
			this._viewportRect = value;
			return value;
		} else {
			return this._viewportRect;
		}
	}
	,
	__windowRect: null,
	windowRect: function (value) {
		if (arguments.length === 1) {
			var old = this.__windowRect;
			this.__windowRect = value;
			this.windowRectChanged(old, this.__windowRect);
			return value;
		} else {
			return this.__windowRect;
		}
	}
	,
	__labelViewport: null,
	labelViewport: function (value) {
		if (arguments.length === 1) {
			var old = this.__labelViewport;
			this.__labelViewport = value;
			this.labelViewportSizeChanged(old, this.__labelViewport);
			return value;
		} else {
			return this.__labelViewport;
		}
	}
	,
	__crossingValue: 0,
	crossingValue: function (value) {
		if (arguments.length === 1) {
			this.__crossingValue = value;
			return value;
		} else {
			return this.__crossingValue;
		}
	}
	,
	_seriesViewerSizeChanged: null,
	seriesViewerSizeChanged: function (value) {
		if (arguments.length === 1) {
			this._seriesViewerSizeChanged = value;
			return value;
		} else {
			return this._seriesViewerSizeChanged;
		}
	}
	,
	_textBlocks: null,
	textBlocks: function (value) {
		if (arguments.length === 1) {
			this._textBlocks = value;
			return value;
		} else {
			return this._textBlocks;
		}
	}
	,
	_labelBounds: null,
	labelBounds: function (value) {
		if (arguments.length === 1) {
			this._labelBounds = value;
			return value;
		} else {
			return this._labelBounds;
		}
	}
	,
	_labelSettings: null,
	labelSettings: function (value) {
		if (arguments.length === 1) {
			this._labelSettings = value;
			return value;
		} else {
			return this._labelSettings;
		}
	}
	,
	_foundCollisions: false,
	foundCollisions: function (value) {
		if (arguments.length === 1) {
			this._foundCollisions = value;
			return value;
		} else {
			return this._foundCollisions;
		}
	}
	,
	_useRotation: false,
	useRotation: function (value) {
		if (arguments.length === 1) {
			this._useRotation = value;
			return value;
		} else {
			return this._useRotation;
		}
	}
	,
	_useStaggering: false,
	useStaggering: function (value) {
		if (arguments.length === 1) {
			this._useStaggering = value;
			return value;
		} else {
			return this._useStaggering;
		}
	}
	,
	_useWrapping: false,
	useWrapping: function (value) {
		if (arguments.length === 1) {
			this._useWrapping = value;
			return value;
		} else {
			return this._useWrapping;
		}
	}
	,
	_longestTextBlock: null,
	longestTextBlock: function (value) {
		if (arguments.length === 1) {
			this._longestTextBlock = value;
			return value;
		} else {
			return this._longestTextBlock;
		}
	}
	,
	_areLabelsUnevenlySpaced: false,
	areLabelsUnevenlySpaced: function (value) {
		if (arguments.length === 1) {
			this._areLabelsUnevenlySpaced = value;
			return value;
		} else {
			return this._areLabelsUnevenlySpaced;
		}
	}
	,
	detectCollisions: function (rectangles) {
		for (var i = 0; i < rectangles.count() - 1; i++) {
			for (var j = i; j < rectangles.count() - 1; j++) {
				if (rectangles.__inner[i].intersectsWith(rectangles.__inner[j + 1])) {
					return true;
				}
			}
		}
		return false;
	}
	,
	staggerLabels: function (largestHeight, rectangles) {
		return {
			ret: 0,
			p1: rectangles
		};
	}
	,
	createBoundsRectangles: function () {
		return null;
	}
	,
	bindExtent: function () {
	}
	,
	applyPanelRotation: function (finalSize) {
	}
	,
	getEffectiveAngle: function () {
		return this.labelSettings() != null ? this.labelSettings().angle() : 0;
	}
	,
	getTitleEffectiveAngle: function () {
		return this.axis().titleSettings() != null ? this.axis().titleSettings().angle() : 0;
	}
	,
	shouldDisplay: function (index, bounds) {
		if (index == 0 && !this.axis().isAngular() && this.labelSettings() != null) {
			if (this.axis().isVertical()) {
				if (!this.labelSettings().showFirstLabel() && this.axis().seriesViewer().getActualWindowScaleVertical() == 1) {
					return false;
				}
			} else {
				if (!this.labelSettings().showFirstLabel() && this.axis().seriesViewer().getActualWindowScaleHorizontal() == 1) {
					return false;
				}
			}
		}
		return true;
	}
	,
	getDesiredWidth: function (element) {
		return this.view().getDesiredWidth(element);
	}
	,
	getWidthBounds: function (element) {
		return this.view().getWidthBounds(element);
	}
	,
	getHeightBounds: function (element) {
		return this.view().getHeightBounds(element);
	}
	,
	getDesiredHeight: function (element) {
		return this.view().getDesiredHeight(element);
	}
	,
	isHorizontalPanel: function () {
		return false;
	}
	,
	windowRectChanged: function (oldRect, newRect) {
	}
	,
	labelViewportSizeChanged: function (oldRect, newRect) {
	}
	,
	determineLabelBounds: function () {
		if (this.children().count() < 1 || this.labelPositions().count() == 0) {
			return new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		}
		this.textBlocks(new $.ig.List$1($.ig.FrameworkElement.prototype.$type, 0));
		this.labelBounds(new $.ig.List$1($.ig.Rect.prototype.$type, 0));
		this.bindExtent();
		this.view().determineLongestLabel();
		var angle = this.getEffectiveAngle();
		if (angle % 360 == 0) {
			this.useRotation(false);
		}
		if (this.textBlocks().count() == 0) {
			return new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		}
		this.labelBounds(this.createBoundsRectangles());
		this.__widthAndHeightAreSet = true;
		return this.labelBounds();
	}
	,
	getRotatedRectWidth: function (angleDegrees, rect) {
		var rad = angleDegrees * (Math.PI / 180);
		var rotatedTitleWidth = Math.abs(rect.width() * Math.cos(rad)) + Math.abs(rect.height() * Math.sin(rad));
		return rotatedTitleWidth;
	}
	,
	getRotatedRectHeight: function (angleDegrees, rect) {
		var rad = angleDegrees * (Math.PI / 180);
		var rotatedTitleHeight = Math.abs(rect.height() * Math.cos(rad)) + Math.abs(rect.width() * Math.sin(rad));
		return rotatedTitleHeight;
	}
	,
	getTitleWidth: function () {
		var titleWidth = this.view().getAxisTitleDesiredWidth();
		return titleWidth;
	}
	,
	getTitleHeight: function () {
		var titleHeight = this.view().getAxisTitleDesiredHeight();
		return titleHeight;
	}
	,
	getTitleHeightBounds: function () {
		if (this.axis().title() == null) {
			return 0;
		}
		var height = this.getTitleHeight();
		var width = this.getTitleWidth();
		var rect = new $.ig.Rect(0, 0, 0, width, height);
		var angleDegrees = this.getTitleEffectiveAngle();
		var rotated = $.ig.RectUtil.prototype.rotateAboutCenter(rect, angleDegrees);
		return rotated.height() + this.view().getTitleTopMargin() + this.view().getTitleBottomMargin();
	}
	,
	getTitleWidthBounds: function () {
		if (this.axis().title() == null) {
			return 0;
		}
		var height = this.getTitleHeight();
		var width = this.getTitleWidth();
		var rect = new $.ig.Rect(0, 0, 0, width, height);
		var angleDegrees = this.getTitleEffectiveAngle();
		var rotated = $.ig.RectUtil.prototype.rotateAboutCenter(rect, angleDegrees);
		return rotated.width() + this.view().getTitleLeftMargin() + this.view().getTitleRightMargin();
	}
	,
	arrangeLabels: function (finalSize) {
		if (this.axis() == null || this.children().count() == 0) {
			return finalSize;
		}
		this.arrangeTitle(finalSize);
		this.createTicks();
		this.arrangeTicks(finalSize);
		this.labelBounds(this.determineLabelBounds());
		if (this.textBlocks().count() != this.labelBounds().count()) {
			return finalSize;
		}
		var leftMargin = this.view().getLabelLeftMargin();
		var topMargin = this.view().getLabelTopMargin();
		var rightMargin = this.view().getLabelRightMargin();
		var botomMargin = this.view().getLabelBottomMargin();
		if (this.useRotation()) {
			for (var i = 0; i < this.textBlocks().count(); i++) {
				if (this.shouldDisplay(i, this.labelBounds().__inner[i])) {
					this.view().arrangeTextToBounds(this.textBlocks().__inner[i], this.labelBounds().__inner[i], leftMargin, topMargin, rightMargin, botomMargin);
				}
				this.setLabelRotationTransform(this.textBlocks().__inner[i], this.getEffectiveAngle());
			}
		}
		for (var i1 = 0; i1 < this.textBlocks().count(); i1++) {
			if (!this.useRotation()) {
				this.view().clearTransforms(this.textBlocks().__inner[i1]);
			}
			if (this.shouldDisplay(i1, this.labelBounds().__inner[i1])) {
				this.view().arrangeTextToBounds(this.textBlocks().__inner[i1], this.labelBounds().__inner[i1], leftMargin, topMargin, rightMargin, botomMargin);
			} else {
				this.view().arrangeTextToBounds(this.textBlocks().__inner[i1], new $.ig.Rect(0, 0, 0, 0, 0), leftMargin, topMargin, rightMargin, botomMargin);
			}
		}
		this.applyPanelRotation(finalSize);
		return finalSize;
	}
	,
	getTitleBounds: function () {
		return $.ig.Rect.prototype.empty();
	}
	,
	arrangeTitle: function (finalSize) {
		if (this.axis().titleTextBlock() == null) {
			return;
		}
		this.view().handleMeasureLabel1(this.axis().titleTextBlock(), new $.ig.Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
		var useTitleRotation = Math.abs(this.getTitleEffectiveAngle() - 0) > 1E-06;
		var titleBounds = this.getTitleBounds();
		var titleBoundsWidthMiddle = titleBounds.left() + (titleBounds.width() / 2);
		var titleBoundsHeightMiddle = titleBounds.top() + (titleBounds.height() / 2);
		var titleWidth = this.getTitleWidth() + this.view().getTitleLeftMargin() + this.view().getTitleRightMargin();
		var titleHeight = this.getTitleHeight() + this.view().getTitleTopMargin() + this.view().getTitleBottomMargin();
		var titleWidthHalf = titleWidth / 2;
		var titleHeightHalf = titleHeight / 2;
		var renderBounds = new $.ig.Rect(0, titleBoundsWidthMiddle - titleWidthHalf, titleBoundsHeightMiddle - titleHeightHalf, titleWidth, titleHeight);
		if (useTitleRotation) {
			this.setTitleRotationTransform(this.axis().titleTextBlock());
		} else {
			this.view().clearTransforms(this.axis().titleTextBlock());
		}
		this.view().arrangeTextToBounds(this.axis().titleTextBlock(), renderBounds, this.view().getTitleLeftMargin(), this.view().getTitleTopMargin(), this.view().getTitleRightMargin(), this.view().getTitleBottomMargin());
		if ((this.axis().titleSettings() == null || this.axis().titleSettings().visibility() == $.ig.Visibility.prototype.visible) && (this.axis().labelSettings() == null || this.axis().labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
			this.axis().titleTextBlock().__visibility = $.ig.Visibility.prototype.visible;
		} else {
			this.axis().titleTextBlock().__visibility = $.ig.Visibility.prototype.collapsed;
		}
	}
	,
	arrangeTicks: function (finalSize) {
		this.view().arrangeTicks(finalSize);
	}
	,
	createTicks: function () {
	}
	,
	getTickValues: function () {
		if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.axis()) !== null) {
			return (this.axis()).majorLinePositions();
		}
		if ($.ig.util.cast($.ig.NumericAxisBase.prototype.$type, this.axis()) !== null) {
			var values = new $.ig.List$1(Number, 0);
			var $t = (this.axis()).actualTickmarkValues().majorValuesArray();
			for (var i = 0; i < $t.length; i++) {
				var val = $t[i];
				var effectiveViewportRect = this.axis().getCurrentEffectiveViewport();
				var sParams = new $.ig.ScalerParams(0, this.axis().seriesViewer().windowRect(), this.axis().viewportRect(), this.axis().isInvertedCached(), effectiveViewportRect);
				values.add(this.axis().getScaledValue(val, sParams));
			}
			return values;
		}
		return null;
	}
	,
	actualLabelLocation: function () {
		var actualLocation = this.labelSettings() != null ? this.labelSettings().actualLocation() : this.getDefaultLabelsLocation();
		if (this.axis().crossingAxis() == null) {
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop) {
				actualLocation = $.ig.AxisLabelsLocation.prototype.insideBottom;
			} else if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideBottom) {
				actualLocation = $.ig.AxisLabelsLocation.prototype.insideTop;
			} else if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft) {
				actualLocation = $.ig.AxisLabelsLocation.prototype.insideRight;
			} else if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideRight) {
				actualLocation = $.ig.AxisLabelsLocation.prototype.insideLeft;
			}
		}
		return actualLocation;
	}
	,
	verticalTick: function (geometry, x, y1, y2, viewportRect, renderingInfo) {
		var tickLeft = x;
		var tickRight = x;
		if (renderingInfo != null) {
			var halfStroke = renderingInfo.strokeThickness() / 2;
			tickLeft -= halfStroke;
			tickRight += halfStroke;
		}
		if (tickRight >= viewportRect.left() && tickLeft <= viewportRect.right()) {
			if (renderingInfo.alignToPixels()) {
				x = this.axis().alignLineToPixels(x, viewportRect.left(), viewportRect.right(), renderingInfo);
			}
			var tick = new $.ig.LineGeometry();
			tick.startPoint({ __x: x, __y: y1, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			tick.endPoint({ __x: x, __y: y2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			geometry.add(tick);
		}
	}
	,
	horizontalTick: function (geometry, y, x1, x2, viewportRect, renderingInfo) {
		if (y <= viewportRect.bottom() && y >= viewportRect.top()) {
			if (renderingInfo.alignToPixels()) {
				y = this.axis().alignLineToPixels(y, viewportRect.top(), viewportRect.bottom(), renderingInfo);
			}
			var tick = new $.ig.LineGeometry();
			tick.startPoint({ __x: x1, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			tick.endPoint({ __x: x2, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			geometry.add(tick);
		}
	}
	,
	setLabelRotationTransform: function (label, angle) {
		var effAngle = this.getEffectiveAngle();
		this.view().handleSetLabelRotationTransform(label, effAngle);
	}
	,
	setTitleRotationTransform: function (label) {
		var effAngle = this.getTitleEffectiveAngle();
		this.handleSetTitleLabelRotationTransform(label, effAngle);
	}
	,
	handleSetTitleLabelRotationTransform: function (label, effAngle) {
		var fe = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, label);
		var height = this.getTitleHeight();
		var width = this.getTitleWidth();
		var centerX = 0.5 * width;
		var centerY = 0.5 * height;
		var transform = (function () {
			var $ret = new $.ig.RotateTransform();
			$ret.angle(effAngle);
			$ret.centerX(centerX);
			$ret.centerY(centerY);
			return $ret;
		}());
		var group = new $.ig.TransformGroup();
		group.children().add(transform);
		fe.renderTransform(group);
	}
	,
	measureLabels: function (availableSize) {
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var element = en.current();
			this.view().handleMeasureLabel(element);
		}
		var extent = (this.axis() == null || this._actualExtent <= 0 || $.ig.util.isNaN(this._actualExtent)) ? 50 : this._actualExtent;
		if (this.axis() != null && (this.axis().series() == null || this.axis().series().count() == 0)) {
			if (this.axis().hasUserExtent()) {
				extent = this.axis().getUserExtent();
			}
		}
		var size = new $.ig.Size(1, extent, extent);
		if (Number.isInfinity(size.width())) {
			size.width(50);
		}
		if (Number.isInfinity(size.height())) {
			size.height(50);
		}
		return size;
	}
	,
	extent: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AxisLabelPanelBase.prototype.extentProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AxisLabelPanelBase.prototype.extentProperty);
		}
	}
	,
	_actualExtent: 0,
	getTitlePosition: function (titleSettings) {
		if (titleSettings == null) {
			return this.axis().seriesViewer().getDefaultHorizontalAxisTitlePosition(this.axis());
		}
		if (titleSettings.position() == $.ig.AxisTitlePosition.prototype.auto) {
			if (this.axis() != null && this.axis().seriesViewer() != null) {
				return this.axis().seriesViewer().getDefaultHorizontalAxisTitlePosition(this.axis());
			}
			return $.ig.AxisTitlePosition.prototype.bottom;
		}
		return titleSettings.position();
	}
	,
	getDefaultLabelsLocation: function () {
		return $.ig.AxisLabelsLocation.prototype.outsideBottom;
	}
	,
	validLocation: function (location) {
		return true;
	}
	,
	getLabels: function () {
		var d__ = new $.ig.AxisLabelPanelBase___GetLabels__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	trimTextBlock: function (index, textblock, availableWidth) {
		var result = this.view().trimTextBlock(textblock, availableWidth);
		return result;
	}
	,
	considerForLongestTextBlock: function (textElement) {
		if (this.longestTextBlock() == null || this.getDesiredWidth(this.longestTextBlock()) < this.getDesiredWidth(textElement)) {
			this.longestTextBlock(textElement);
		}
	}
	,
	onProcessTextBlock: function (textElement) {
		this.textBlocks().add(textElement);
	}
	,
	getTextBlocks: function () {
		var d__ = new $.ig.AxisLabelPanelBase___GetTextBlocks__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	ensureExtentSet: function () {
		this.view().ensureContextFont();
		this.updateLabelBounds();
	}
	,
	updateLabelBounds: function () {
		this.labelBounds(this.determineLabelBounds());
	}
	,
	makeDirty: function () {
	}
	,
	getDesiredExtent: function (gridAreaRect) {
		return this._actualExtent;
	}
	,
	measure: function () {
		this.view().measure();
	}
	,
	provideContext: function (context) {
		this.view().onContextProvided(context);
	}
	,
	arrange: function () {
		this.view().arrange();
	}
	,
	render: function () {
		this.view().render();
	}
	,
	$type: new $.ig.Type('AxisLabelPanelBase', $.ig.Panel.prototype.$type)
}, true);

$.ig.util.defType('HorizontalAxisLabelPanelBase', 'AxisLabelPanelBase', {
	init: function () {
		$.ig.AxisLabelPanelBase.prototype.init.call(this);
	},
	createView: function () {
		return new $.ig.HorizontalAxisLabelPanelBaseView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.AxisLabelPanelBase.prototype.onViewCreated.call(this, view);
		this.horizontalView(view);
	}
	,
	_horizontalView: null,
	horizontalView: function (value) {
		if (arguments.length === 1) {
			this._horizontalView = value;
			return value;
		} else {
			return this._horizontalView;
		}
	}
	,
	_largestWidth: 0,
	largestWidth: function (value) {
		if (arguments.length === 1) {
			this._largestWidth = value;
			return value;
		} else {
			return this._largestWidth;
		}
	}
	,
	_largestHeight: 0,
	largestHeight: function (value) {
		if (arguments.length === 1) {
			this._largestHeight = value;
			return value;
		} else {
			return this._largestHeight;
		}
	}
	,
	_largestRenderWidth: 0,
	largestRenderWidth: function (value) {
		if (arguments.length === 1) {
			this._largestRenderWidth = value;
			return value;
		} else {
			return this._largestRenderWidth;
		}
	}
	,
	_largestRenderHeight: 0,
	largestRenderHeight: function (value) {
		if (arguments.length === 1) {
			this._largestRenderHeight = value;
			return value;
		} else {
			return this._largestRenderHeight;
		}
	}
	,
	bindExtent: function () {
		this.horizontalView().bindExtent();
	}
	,
	shouldRotate: function () {
		return this.labelSettings() != null && this.labelSettings().hasUserAngle() && this.getEffectiveAngle() % 360 != 0;
	}
	,
	shouldTryStagger: function () {
		return this.foundCollisions() && !this.useRotation();
	}
	,
	isHorizontalPanel: function () {
		return true;
	}
	,
	createBoundsRectangles: function () {
		var $self = this;
		var rectangles = new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		this.useStaggering(false);
		this.useRotation(false);
		this.useWrapping(false);
		var angleDegrees = this.labelSettings() != null ? (this.labelSettings().angle()) : 0;
		var angleRadians = angleDegrees * Math.PI / 180;
		if (this.shouldRotate()) {
			this.useRotation(true);
		}
		this.horizontalView().determineTallestLabel(rectangles, angleRadians);
		this.foundCollisions(this.foundCollisions() || this.detectCollisions(rectangles));
		if (this.foundCollisions()) {
			this.hideOptionalLabels(rectangles);
		} else {
			this.showOptionalLabels();
		}
		if (!this.axis().hasUserExtent()) {
			this.calculateExtent(angleDegrees);
		} else {
			this.view().bindExtentToSettings();
		}
		if (this.useRotation()) {
			for (var i = 0; i < rectangles.count(); i++) {
				var currentRect = rectangles.__inner[i];
				currentRect.x(this.labelPositions().__inner[i].value());
				rectangles.__inner[i] = currentRect;
			}
		}
		var staggerLevels = 0;
		if (this.shouldTryStagger()) {
			staggerLevels = (function () { var $ret = $self.staggerLabels($self.largestHeight(), rectangles); rectangles = $ret.p1; return $ret.ret; }());
		}
		if (this.foundCollisions() && !this.useStaggering()) {
			if (staggerLevels > 0) {
				if (this.horizontalView().shouldUseWrapping()) {
					this.useWrapping(true);
				}
			}
		}
		if (this.foundCollisions() && this.shouldClip()) {
			var actualWidth = this.labelViewport().width();
			var labelHeightSpan = this.getLabelSpan();
			var labelRenderHeightSpan = this.getLabelRenderSpan();
			var span = this.labelPositions().count() > 1 ? this.labelPositions().__inner[1].value() - this.labelPositions().__inner[0].value() : actualWidth;
			var clipWidth = Math.abs(span * 0.8);
			var RectX = 0;
			var startClippingAngle = Math.abs(Math.atan(this.largestHeight() / span) * 180 / Math.PI);
			for (var i1 = 0; i1 < rectangles.count(); i1++) {
				if (this.areLabelsUnevenlySpaced()) {
					if (i1 > 0 && i1 < rectangles.count() - 1) {
						var spanFront = this.labelPositions().count() > 1 ? this.labelPositions().__inner[i1].value() - (rectangles.__inner[i1 - 1].x() + rectangles.__inner[i1 - 1].width()) : actualWidth;
						var spanEnd = this.labelPositions().count() > 1 ? rectangles.__inner[i1 + 1].x() - this.labelPositions().__inner[i1].value() : actualWidth;
						clipWidth = Math.abs(Math.min(Math.abs(spanFront * 2), Math.abs(spanEnd * 2)) * 0.8);
					} else {
						if (i1 == 0) {
							var spanEnd1 = this.labelPositions().count() > 1 ? rectangles.__inner[i1 + 1].x() - this.labelPositions().__inner[i1].value() : actualWidth;
							clipWidth = Math.abs((span * 2) * 0.8);
						}
						if (i1 == rectangles.count() - 1) {
							var spanFront1 = this.labelPositions().count() > 1 ? this.labelPositions().__inner[i1].value() - (rectangles.__inner[i1 - 1].x() + rectangles.__inner[i1 - 1].width()) : actualWidth;
							clipWidth = Math.abs((spanFront1 * 2) * 0.8);
						}
					}
				}
				var clipValueToUse = Math.min(rectangles.__inner[i1].width(), clipWidth);
				RectX = this.useRotation() ? this.labelPositions().__inner[i1].value() : this.labelPositions().__inner[i1].value() - clipValueToUse / 2;
				var simplifiedAngleDegrees = $.ig.GeometryUtil.prototype.simplifyAngle(angleDegrees);
				var optimize = (simplifiedAngleDegrees >= startClippingAngle && simplifiedAngleDegrees <= 180 - startClippingAngle) || (simplifiedAngleDegrees >= 180 + startClippingAngle && simplifiedAngleDegrees <= 360 - startClippingAngle);
				var currentRect1 = rectangles.__inner[i1];
				if (this.useRotation() && optimize) {
					var textwidth = this.getWidthBounds(this.textBlocks().__inner[i1]);
					clipWidth = Math.min(labelHeightSpan / Math.abs(Math.sin(angleRadians)), textwidth);
				}
				currentRect1.x(RectX);
				currentRect1.width(Math.min(clipWidth, currentRect1.width()));
				rectangles.__inner[i1] = currentRect1;
				if (!($.ig.util.cast($.ig.TextBlock.prototype.$type, this.textBlocks().__inner[i1]) !== null)) {
					this.textBlocks().__inner[i1].width(Math.min(clipWidth, currentRect1.width()));
				}
				var textBlock = $.ig.util.cast($.ig.TextBlock.prototype.$type, this.textBlocks().__inner[i1]);
				if (textBlock != null) {
					var newText = this.trimTextBlock(i1, textBlock, clipWidth);
					if (this.useWrapping()) {
						textBlock.height(labelRenderHeightSpan);
					} else if (!textBlock.text().equals(newText)) {
						textBlock.text(newText);
						this.textBlocks().__inner[i1].width(Math.min(clipWidth, this.getDesiredWidth(this.textBlocks().__inner[i1])));
						this.largestRenderWidth(Math.min(this.largestRenderWidth(), this.textBlocks().__inner[i1].width()));
					}
				}
			}
			this.calculateExtent(angleDegrees);
		}
		if (this.shouldVerticalAlign()) {
			this.doVerticalAlignment(rectangles);
		}
		return rectangles;
	}
	,
	calculateExtent: function (angleDegrees) {
		var rad = angleDegrees * (Math.PI / 180);
		var rotatedLabelHeight = Math.abs(this.largestRenderWidth() * Math.sin(rad)) + Math.abs(this.largestRenderHeight() * Math.cos(rad));
		rotatedLabelHeight += this.view().getLabelTopMargin() + this.view().getLabelBottomMargin();
		var heightBounds = this.getTitleHeightBounds();
		this.extent((rotatedLabelHeight) + (heightBounds) + this.axis().actualTickLength());
	}
	,
	doVerticalAlignment: function (rectangles) {
		this.horizontalView().handleVerticalAlignment(rectangles);
	}
	,
	hideOptionalLabels: function (rectangles) {
	}
	,
	showOptionalLabels: function () {
	}
	,
	setLabelRotationTransform: function (label, angle) {
		var labelHeight = label.actualHeight();
		var labelWidth = label.actualWidth();
		var centerX = 0;
		var centerY = this.largestRenderHeight() / 2;
		var group = new $.ig.TransformGroup();
		var effectiveAngle = $.ig.GeometryUtil.prototype.simplifyAngle(this.getEffectiveAngle());
		var transform = (function () {
			var $ret = new $.ig.RotateTransform();
			$ret.angle(effectiveAngle);
			$ret.centerX(centerX);
			$ret.centerY(centerY);
			return $ret;
		}());
		var yShift = 0;
		var xShift = 0;
		if (effectiveAngle != 0 && effectiveAngle != 360) {
			if (effectiveAngle > 0 && effectiveAngle < 180) {
				yShift = -Math.sin($.ig.MathUtil.prototype.radians(effectiveAngle)) * (labelHeight / 2);
			} else {
				transform.centerX(labelWidth);
				xShift = -labelWidth;
				yShift = -Math.sin($.ig.MathUtil.prototype.radians(effectiveAngle - 180)) * (labelHeight / 2);
			}
		}
		var translate = (function () {
			var $ret = new $.ig.TranslateTransform();
			$ret.y(yShift);
			$ret.x(xShift);
			return $ret;
		}());
		group.children().add(transform);
		group.children().add(translate);
		label.renderTransform(group);
	}
	,
	shouldVerticalAlign: function () {
		return !this.useStaggering() && !this.useRotation();
	}
	,
	shouldClip: function () {
		return true;
	}
	,
	staggerLabels: function (largestHeight, rectangles) {
		var staggerLevels = 0;
		var tempRectangles = new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		var topOffset = this.getLabelTopOffset() + this.labelViewport().top();
		var span = this.getLabelSpan();
		var bottomOffset = topOffset + span;
		if (largestHeight * 3 <= this._actualExtent) {
			staggerLevels = 3;
		} else if (largestHeight * 2 <= this._actualExtent) {
			staggerLevels = 2;
		} else {
			return {
				ret: staggerLevels,
				p1: rectangles
			};
		}
		for (var i = 0; i < rectangles.count(); i++) {
			var rect = $.ig.RectUtil.prototype.duplicate(rectangles.__inner[i]);
			if (i % staggerLevels == 0) {
				rect.y(topOffset);
			} else if (i % staggerLevels == staggerLevels - 1) {
				rect.y(bottomOffset - rect.height());
			} else {
				rect.y((topOffset + (span / 2)) - rect.height() / 2);
			}
			tempRectangles.add(rect);
		}
		this.foundCollisions(this.detectCollisions(tempRectangles));
		if (!this.foundCollisions()) {
			this.useStaggering(true);
			rectangles = tempRectangles;
		}
		return {
			ret: staggerLevels,
			p1: rectangles
		};
	}
	,
	getTitleBounds: function () {
		var position = this.getTitlePosition(this.axis().titleSettings());
		var titleHeight = this.getTitleHeightBounds();
		var actualLocation = this.actualLabelLocation();
		var top = 0;
		if (position == $.ig.AxisTitlePosition.prototype.top) {
			top += this.labelViewport().top();
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideBottom || actualLocation == $.ig.AxisLabelsLocation.prototype.insideBottom) {
				top += this.axis().actualTickLength();
			}
		} else {
			top = this.labelViewport().bottom() - titleHeight;
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop || actualLocation == $.ig.AxisLabelsLocation.prototype.outsideTop) {
				top -= this.axis().actualTickLength();
			}
		}
		var titleWidth = this.getTitleWidthBounds();
		var left = 0;
		var horz = this.axis().titleSettings() == null ? $.ig.HorizontalAlignment.prototype.center : this.axis().titleSettings().horizontalAlignment();
		if (horz == $.ig.HorizontalAlignment.prototype.left) {
			left = this.labelViewport().left();
		} else if (horz == $.ig.HorizontalAlignment.prototype.right) {
			left = this.labelViewport().right() - titleWidth;
		} else {
			left = (this.labelViewport().left() + (this.labelViewport().width() / 2)) - (titleWidth / 2);
		}
		return new $.ig.Rect(0, left, top, titleWidth, titleHeight);
	}
	,
	measureLabels: function (availableSize) {
		if (this.children().contains(this.axis().titleTextBlock()) == false && this.axis().titleTextBlock() != null) {
			this.children().add(this.axis().titleTextBlock());
		}
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var element = en.current();
			if (element != this.axis().titleTextBlock() && element != this.view().ticks()) {
				this.view().handleMeasureLabel(element);
			}
		}
		var extent = (this.axis() == null || this._actualExtent <= 0 || $.ig.util.isNaN(this._actualExtent)) ? 50 : this._actualExtent;
		if (this.axis() != null && (this.axis().series() == null || this.axis().series().count() == 0)) {
			if (this.axis().hasUserExtent()) {
				extent = this.axis().getUserExtent();
			}
		}
		if (extent > availableSize.height()) {
			extent = availableSize.height();
		}
		var size = new $.ig.Size(1, 50, extent);
		if (Number.isInfinity(size.width())) {
			size.width(50);
		}
		if (Number.isInfinity(size.height())) {
			size.height(50);
		}
		return size;
	}
	,
	getLabelTopOffset: function () {
		var offset = 0;
		var posistion = this.getTitlePosition(this.axis().titleSettings());
		if (posistion == $.ig.AxisTitlePosition.prototype.top) {
			offset += this.getTitleHeightBounds();
		}
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideBottom || actualLocation == $.ig.AxisLabelsLocation.prototype.insideBottom) {
			offset += this.axis().actualTickLength();
		}
		return offset;
	}
	,
	getLabelBottomOffset: function () {
		var offset = 0;
		var posistion = this.getTitlePosition(this.axis().titleSettings());
		if (posistion == $.ig.AxisTitlePosition.prototype.bottom) {
			offset += this.getTitleHeightBounds();
		}
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideTop || actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop) {
			offset += this.axis().actualTickLength();
		}
		return offset;
	}
	,
	getLabelSpan: function () {
		var span = (this._actualExtent - this.getLabelTopOffset()) - this.getLabelBottomOffset();
		if (span < 0) {
			span = 0;
		}
		return span;
	}
	,
	getLabelRenderSpan: function () {
		var span = ((this.getLabelSpan() - this.view().getLabelTopMargin()) - this.view().getLabelBottomMargin());
		if (span < 0) {
			span = 0;
		}
		return span;
	}
	,
	createTicks: function () {
		var ticksGeometry = this.view().getTicksGeometry();
		this.axis().clearMarks(ticksGeometry);
		if (this.labelSettings() != null && this.labelSettings().visibility() != $.ig.Visibility.prototype.visible) {
			return;
		}
		var tickLength = this.axis().actualTickLength();
		if (tickLength == 0) {
			return;
		}
		var positions = this.getTickValues();
		if (positions == null) {
			return;
		}
		var y1 = this.labelViewport().top();
		var y2;
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideTop || actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop) {
			y1 = this.labelViewport().bottom();
			y2 = y1 - this.axis().actualTickLength();
		} else {
			y2 = y1 + this.axis().actualTickLength();
		}
		var tickRenderingInfo = this.view().getThicksRenderingInfo();
		var en = positions.getEnumerator();
		while (en.moveNext()) {
			var x = en.current();
			this.verticalTick(ticksGeometry, x, y1, y2, this.viewportRect(), tickRenderingInfo);
		}
		if (!this.children().contains(this.view().ticks())) {
			this.children().add(this.view().ticks());
		}
	}
	,
	$type: new $.ig.Type('HorizontalAxisLabelPanelBase', $.ig.AxisLabelPanelBase.prototype.$type)
}, true);

$.ig.util.defType('HorizontalSmartAxisLabelPanel', 'HorizontalAxisLabelPanelBase', {
	__allLabels: null,
	__visibleLabels: null,
	__labelBounds: null,
	__categoryWidth: 0,
	__gridAreaRect: null,
	__locked: false,
	__shouldResize: false,
	__labelMap: null,
	__actualPanelBounds: null,
	__labelViewportSizeChanged: false,
	__labelWindowRectChanged: false,
	__maxPanelHeight: 0,
	__minAxisInterval: 0,
	__wrapTextFlag: false,
	__wrapChars: null,
	__matchingAxis: null,
	__currentBestFontLabelSize: null,
	__isPanning: false,
	__longestLabel: null,
	__longestNonBreakingLabel: null,
	__displayType: 0,
	__fontInfoMap: null,
	extent: function () {
		return this.axis().smartAxisExtent();
	}
	,
	actualExtent1: function (value) {
		if (arguments.length === 1) {
			this.axis().actualSmartAxisExtent(value);
			return value;
		} else {
			return this.axis().actualSmartAxisExtent();
		}
	}
	,
	minimumExtent: function () {
		return this.axis().smartAxisMinimumExtent();
	}
	,
	maximumExtent: function () {
		return this.axis().smartAxisMaximumExtent();
	}
	,
	extentType: function () {
		return this.axis().smartAxisExtentType();
	}
	,
	angle: function () {
		return this.axis().smartAxisAngle();
	}
	,
	actualAngle: function (value) {
		if (arguments.length === 1) {
			this.axis().actualSmartAxisAngle(value);
			return value;
		} else {
			return this.axis().actualSmartAxisAngle();
		}
	}
	,
	minimumAngle: function () {
		return this.axis().smartAxisMinimumAngle();
	}
	,
	maximumAngle: function () {
		return this.axis().smartAxisMaximumAngle();
	}
	,
	font: function () {
		return this.axis().smartAxisFont();
	}
	,
	fontSize: function () {
		return this.axis().smartAxisFontSize();
	}
	,
	actualFontSize: function (value) {
		if (arguments.length === 1) {
			this.axis().actualSmartAxisFontSize(value);
			return value;
		} else {
			return this.axis().actualSmartAxisFontSize();
		}
	}
	,
	minimumFontSize: function () {
		return this.axis().smartAxisMinimumFontSize();
	}
	,
	maximumFontSize: function () {
		return this.axis().smartAxisMaximumFontSize();
	}
	,
	numberOfStaggerLevels: function () {
		return this.axis().smartAxisNumberOfStaggerLevels();
	}
	,
	minimumStaggerLevels: function () {
		return this.axis().smartAxisMinimumStaggerLevels();
	}
	,
	maximumStaggerLevels: function () {
		return this.axis().smartAxisMaximumStaggerLevels();
	}
	,
	actualNumberOfStaggerLevels: function (value) {
		if (arguments.length === 1) {
			this.axis().actualSmartAxisNumberOfStaggerLevels(value);
			return value;
		} else {
			return this.axis().actualSmartAxisNumberOfStaggerLevels();
		}
	}
	,
	verticalAlignment: function () {
		return this.axis().smartAxisVerticalAlignment();
	}
	,
	topMargin: function () {
		return this.axis().smartAxisTopMargin();
	}
	,
	proximityMargin: function () {
		return this.axis().smartAxisProximityMargin();
	}
	,
	categoryWidth: function () {
		return this.__categoryWidth;
	}
	,
	longestLabel: function (value) {
		if (arguments.length === 1) {
			this.__longestLabel = value;
			return value;
		} else {
			return this.__longestLabel;
		}
	}
	,
	longestNonBreakingLabel: function (value) {
		if (arguments.length === 1) {
			this.__longestNonBreakingLabel = value;
			return value;
		} else {
			return this.__longestNonBreakingLabel;
		}
	}
	,
	displayType: function (value) {
		if (arguments.length === 1) {
			this.__displayType = value;
			return value;
		} else {
			return this.__displayType;
		}
	}
	,
	shouldResize: function (value) {
		if (arguments.length === 1) {
			this.__shouldResize = this.__shouldResize || value;
			return value;
		} else {
			return this.__shouldResize;
		}
	}
	,
	labelsChanged: function () {
		var newCount = this.labelDataContext().count();
		var oldCount = this.__visibleLabels.count();
		if (oldCount != newCount) {
			return true;
		}
		for (var i = 0; i < newCount; i++) {
			var str1 = this.horizontalView().getLabel(this.labelDataContext().__inner[i]);
			var str2 = this.__visibleLabels.__inner[i];
			if (str1 != str2) {
				return true;
			}
		}
		return false;
	}
	,
	lock: function () {
		this.__locked = true;
	}
	,
	unlock: function () {
		this.resetFlags();
		this.__locked = false;
	}
	,
	createView: function () {
		return new $.ig.HorizontalSmartAxisLabelPanelView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.HorizontalAxisLabelPanelBase.prototype.onViewCreated.call(this, view);
		this.horizontalView(view);
	}
	,
	_horizontalView: null,
	horizontalView: function (value) {
		if (arguments.length === 1) {
			this._horizontalView = value;
			return value;
		} else {
			return this._horizontalView;
		}
	}
	,
	fontInfoMap: function (value) {
		if (arguments.length === 1) {
			this.__fontInfoMap = value;
			return value;
		} else {
			return this.__fontInfoMap;
		}
	}
	,
	init: function () {
		this.__wrapChars = [ ' ', '\0' ];
		this.__matchingAxis = null;
		this.__currentBestFontLabelSize = new $.ig.Size();
		this.__div = $("<div style=\"visibility:hidden; position:absolute; width:0px\"></div>");
		this.__span = $("<span>defaultText</span>");
		this.__first = true;
		$.ig.HorizontalAxisLabelPanelBase.prototype.init.call(this);
		this.__allLabels = new $.ig.List$1(String, 0);
		this.__labelBounds = new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		this.__visibleLabels = new $.ig.List$1(String, 0);
		this.__labelMap = new $.ig.List$1($.ig.List$1.prototype.$type.specialize($.ig.Rect.prototype.$type), 0);
		this.__shouldResize = true;
		this.__locked = false;
		this.__labelViewportSizeChanged = false;
		this.__labelWindowRectChanged = false;
		this.__categoryWidth = 0;
		this.__maxPanelHeight = -1;
		this.__wrapTextFlag = true;
		this.__isPanning = false;
		this.__fontInfoMap = new $.ig.Dictionary$2($.ig.Number.prototype.$type, $.ig.FontMappingInfo.prototype.$type, 0);
	},
	isHorizontal: function (angle) {
		if (angle % 180 == 0) {
			return true;
		}
		return false;
	}
	,
	isPositive: function (value) {
		if (!this.isNumber(value)) {
			return false;
		}
		if (value <= 0) {
			return false;
		}
		return true;
	}
	,
	isNotNegative: function (value) {
		if (!this.isNumber(value)) {
			return false;
		}
		if (value < 0) {
			return false;
		}
		return true;
	}
	,
	isNumber: function (value) {
		if ($.ig.util.isNaN(value) || Number.isInfinity(value)) {
			return false;
		}
		return true;
	}
	,
	resolveTopMargin: function () {
		var top = 0;
		if (this.actualLabelLocation() == $.ig.AxisLabelsLocation.prototype.outsideTop || this.actualLabelLocation() == $.ig.AxisLabelsLocation.prototype.insideTop) {
			top = top + this.getTitleHeightBounds() + this.topMargin();
		}
		if (this.actualLabelLocation() == $.ig.AxisLabelsLocation.prototype.outsideBottom || this.actualLabelLocation() == $.ig.AxisLabelsLocation.prototype.insideBottom) {
			top = top + this.axis().actualTickLength() + this.topMargin();
		}
		return top;
	}
	,
	resolveUserAngle: function () {
		var minAngle = 0;
		if (this.isNumber(this.minimumAngle())) {
			minAngle = this.minimumAngle();
		}
		var maxAngle = 180;
		if (this.isNumber(this.maximumAngle())) {
			maxAngle = this.maximumAngle();
		}
		if (this.isUserAngle()) {
			var angle = this.getSmartAxisSimplifiedAngle(this.angle());
			if (angle < minAngle) {
				angle = minAngle;
			}
			if (angle > maxAngle) {
				angle = maxAngle;
			}
			this.actualAngle(this.getSmartAxisSimplifiedAngle(angle));
		}
	}
	,
	resetFlags: function () {
		this.__wrapTextFlag = true;
	}
	,
	getDesiredExtent: function (gridAreaRect) {
		if (!this.__locked) {
			if (this.axis() != null && this.labelPositions() != null && this.labelPositions().count() > 0 && this.labelDataContext() != null) {
				var matchingAxes = this.axis().chart().findMatchingAxes(this.axis());
				if (matchingAxes != null && matchingAxes.count() > 0) {
					this.__matchingAxis = matchingAxes.__inner[0];
					if (this.__matchingAxis.labelPanel().widthAndHeightAreSet() || this.__matchingAxis.labelSettings().visibility() == $.ig.Visibility.prototype.collapsed) {
						var left = this.__matchingAxis.labelPanel().extent() + gridAreaRect.left();
						var top = this.labelViewport().top();
						var width = gridAreaRect.width() - left;
						var height = 1.7976931348623157E+308;
						this.__gridAreaRect = new $.ig.Rect(0, left, gridAreaRect.top(), width, gridAreaRect.height());
						this.axis().doRenderAxis(false);
						this.__actualPanelBounds = new $.ig.Rect(0, left, top, width, this.actualExtent1());
						this.calculatePanelSize(new $.ig.Size(1, width, height));
						if (width == this.labelViewport().width() && width == this.axis().viewportRect().width()) {
							if (this.__visibleLabels.count() > 0) {
								this.lock();
							}
						}
						this.axis().view().labelNeedRearrange();
					}
				}
			}
		}
		return this.actualExtent1();
	}
	,
	getLabelPosition: function (index) {
		if (this.labelPositions().count() > index) {
			return this.labelPositions().__inner[index].value();
		}
		return 0;
	}
	,
	createFontInfoMap: function () {
		this.fontInfoMap().clear();
		var fontInfo = this.font().copyFontInfo();
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		for (var currentFontSize = 4; currentFontSize <= this.maximumFontSize(); currentFontSize++) {
			var tempFontInfo = $.ig.FontUtil.prototype.getFontWithNewFontSize(fontInfo, currentFontSize);
			this.getTallestLabel(availableCategoryWidth, tempFontInfo);
		}
	}
	,
	fetchFontHeightForFontSize: function (fontSize) {
		var fontHeight = 0;
		if (this.fontInfoMap().containsKey(fontSize)) {
			var info = this.fontInfoMap().item(fontSize);
			fontHeight = info.fontHeight();
		} else {
			var tempFontInfo = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), fontSize);
			fontHeight = $.ig.FontUtil.prototype.measureStringHeight("gM", tempFontInfo);
		}
		return fontHeight;
	}
	,
	getLongestNonBreakingLabelWidth: function (label, fontSize) {
		var labelWidth = 0;
		var currentWidth = 0;
		var labelString = "";
		var fontString = fontSize + "px " + this.font().fontFamily();
		var substrings = this.horizontalView().splitString(label, this.__wrapChars);
		var en = substrings.getEnumerator();
		while (en.moveNext()) {
			var substring = en.current();
			currentWidth = $.ig.FontUtil.prototype.measureStringWidth1(substring, fontString, this.horizontalView().getRenderingContext());
			if (currentWidth > labelWidth) {
				labelString = substring;
				labelWidth = currentWidth;
			}
		}
		return labelWidth;
	}
	,
	resolveLongestNonBreakingLabel: function () {
		var label = "";
		var labelWidth = 0;
		var currentWidth = 0;
		var fontString = "16px " + this.font().fontFamily();
		var en = this.__allLabels.getEnumerator();
		while (en.moveNext()) {
			var currentLabel = en.current();
			var substrings = this.horizontalView().splitString(currentLabel, this.__wrapChars);
			var en1 = substrings.getEnumerator();
			while (en1.moveNext()) {
				var substring = en1.current();
				currentWidth = $.ig.FontUtil.prototype.measureStringWidth1(substring, fontString, this.horizontalView().getRenderingContext());
				if (currentWidth > labelWidth) {
					label = substring;
					labelWidth = currentWidth;
				}
			}
		}
		return label;
	}
	,
	resolveLongestLabel: function () {
		var label = "";
		var labelWidth = 0;
		var currentWidth = 0;
		var fontString = "16px " + this.font().fontFamily();
		var en = this.__allLabels.getEnumerator();
		while (en.moveNext()) {
			var currentLabel = en.current();
			currentWidth = $.ig.FontUtil.prototype.measureStringWidth1(currentLabel, fontString, this.horizontalView().getRenderingContext());
			if (currentWidth > labelWidth) {
				label = currentLabel;
				labelWidth = currentWidth;
			}
		}
		return label;
	}
	,
	getTallestLabel: function (width, fontInfo) {
		var label = "";
		var labelHeight = 0;
		var currentHeight = 0;
		var en = this.__allLabels.getEnumerator();
		while (en.moveNext()) {
			var currentLabel = en.current();
			currentHeight = this.measureMultilineStringHeight(currentLabel, fontInfo, width);
			if (currentHeight > labelHeight) {
				label = currentLabel;
				labelHeight = currentHeight;
			}
		}
		this.__span.remove();
		this.__div.remove();
		this.__first = false;
		var fontSize = $.ig.truncate(fontInfo.fontSize());
		if (this.fontInfoMap().containsKey(fontSize)) {
			this.fontInfoMap().item(fontSize).tallestLabel(label);
			this.fontInfoMap().item(fontSize).tallestLabelHeight(labelHeight);
		} else {
			var info = new $.ig.FontMappingInfo();
			info.tallestLabelHeight(labelHeight);
			info.tallestLabel(label);
			info.fontHeight(this.fetchFontHeightForFontSize(fontSize));
			this.fontInfoMap().add(fontSize, info);
		}
		return label;
	}
	,
	hasBreakingChars: function (text) {
		for (var i = 0; i < this.__wrapChars.length; i++) {
			for (var j = 0; j < text.length; j++) {
				if ($.ig.FontUtil.prototype.charsEqual(text, j, this.__wrapChars, i)) {
					return true;
				}
			}
		}
		return false;
	}
	,
	recreateAllLabels: function () {
		this.__allLabels.clear();
		if (this.axis().isDateTime() && (this.axis()).displayType() == $.ig.TimeAxisDisplayType.prototype.continuous) {
			for (var currentLabelIndex = 0; currentLabelIndex < this.labelDataContext().count(); currentLabelIndex++) {
				var label = this.horizontalView().getLabel(this.labelDataContext().__inner[currentLabelIndex]);
				this.__allLabels.add(label);
			}
		} else {
			var axisInterval = this.axis().getAxisInterval();
			if ($.ig.util.isNaN(axisInterval) || axisInterval == 0) {
				axisInterval = 1;
			}
			var interval = $.ig.truncate(axisInterval);
			var fastItemsSource = (this.axis()).fastItemsSource();
			for (var i = 0; i < fastItemsSource.count(); i = i + interval) {
				var label1 = this.horizontalView().getLabel(fastItemsSource.item(i));
				this.__allLabels.add(label1);
			}
		}
	}
	,
	getVisibleLabels: function () {
		if (this.labelsChanged() || this.labelDataContext().count() != 0 && this.labelDataContext().count() != this.__visibleLabels.count()) {
			this.recreateAllLabels();
			this.__visibleLabels.clear();
			var en = this.labelDataContext().getEnumerator();
			while (en.moveNext()) {
				var obj = en.current();
				var label = this.horizontalView().getLabel(obj);
				this.__visibleLabels.add(label);
			}
			this.longestLabel(this.resolveLongestLabel());
			this.longestNonBreakingLabel(this.resolveLongestNonBreakingLabel());
		}
		return this.__visibleLabels;
	}
	,
	hideAllLabels: function () {
		this.horizontalView().hideAllLabels();
	}
	,
	calculateCategoryWidth: function () {
		var categoryAxis = this.axis();
		var categoryWidth = 0;
		var viewportWidth = 0;
		var useGridAreaRect = true;
		var viewportRect = categoryAxis.chart().viewportRect();
		var windowRect = categoryAxis.chart().windowRect();
		var leftMargin = categoryAxis.chart().plotAreaMarginLeft();
		var rightMargin = categoryAxis.chart().plotAreaMarginRight();
		var effectiveViewport = categoryAxis.getCurrentEffectiveViewport();
		if ($.ig.Rect.prototype.l_op_Equality(this.__gridAreaRect, null) || this.__gridAreaRect.isEmpty() || $.ig.Rect.prototype.l_op_Equality(viewportRect, null) || viewportRect.isEmpty()) {
			useGridAreaRect = false;
		}
		if (useGridAreaRect && this.__gridAreaRect.width() != viewportRect.width()) {
			useGridAreaRect = false;
		}
		if (useGridAreaRect) {
			viewportWidth = this.__gridAreaRect.width();
		} else {
			viewportWidth = viewportRect.width();
		}
		if (this.__locked && windowRect.width() < 1) {
			categoryWidth = categoryAxis.getCategorySize(categoryAxis.chart().windowRect(), categoryAxis.chart().viewportRect(), effectiveViewport);
		} else {
			categoryWidth = (viewportWidth - leftMargin - rightMargin) / (categoryAxis._cachedItemsCount * windowRect.width());
		}
		this.__categoryWidth = Math.max(0, categoryWidth);
	}
	,
	getAvailableCategoryWidth: function () {
		return Math.max(this.categoryWidth() * this.__minAxisInterval - this.proximityMargin(), 0);
	}
	,
	getBestMinimumInterval: function (panelWidth) {
		if (this.__allLabels.count() == 0 || this.__visibleLabels.count() == 0 || this.axis() == null || this.__matchingAxis == null) {
			this.__minAxisInterval = -1;
			return -1;
		}
		var categoryWidth = this.categoryWidth();
		var minInterval = this.axis().getAxisInterval();
		if ($.ig.util.isNaN(minInterval) || minInterval <= 0) {
			minInterval = 1;
		}
		var availableCategoryWidth = 0;
		if (categoryWidth == 0 && minInterval > 1) {
			availableCategoryWidth = this.viewportRect().width() / this.__visibleLabels.count();
		} else {
			availableCategoryWidth = Math.max(categoryWidth * minInterval - this.proximityMargin(), 0);
		}
		var minFontSize = this.isUserFont() ? this.fontSize() : this.minimumFontSize();
		var minFont = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), minFontSize);
		var availableHeight = this.__maxPanelHeight - this.topMargin() - this.axis().actualTickLength() - this.getTitleHeightBounds();
		var fontHeight = $.ig.FontUtil.prototype.getCurrentFontHeight(minFont);
		if (availableCategoryWidth < fontHeight) {
			this.__minAxisInterval = -1;
			return -1;
		}
		var longestLabel = this.longestLabel();
		var firstLabel = this.__allLabels.__inner[0];
		var lastLabel = this.__allLabels.__inner[this.__allLabels.count() - 1];
		var textWidth = this.horizontalView().measureStringWidth(longestLabel, minFont);
		var container = this.horizontalView().getSeriesViewerViewContainer();
		var firstAndLastLabelsOutOfBounds = (this.__matchingAxis.labelPanel().extent() - this.horizontalView().measureStringWidth(firstLabel, minFont) / Math.sqrt(2) < container.left()) && (this.labelViewport().right() + this.horizontalView().measureStringWidth(lastLabel, minFont) / Math.sqrt(2) > container.right());
		if (textWidth > availableHeight && textWidth > availableHeight * Math.sqrt(2) * availableHeight && firstAndLastLabelsOutOfBounds && this.horizontalView().measureStringWidth(this.longestNonBreakingLabel(), minFont) > availableCategoryWidth && this.measureMultilineStringHeight(longestLabel, minFont, availableCategoryWidth) > availableHeight) {
			this.__span.remove();
			this.__div.remove();
			this.__first = false;
			this.__minAxisInterval = -1;
			return -1;
		}
		this.__minAxisInterval = $.ig.truncate(minInterval);
		return $.ig.truncate(minInterval);
	}
	,
	windowRectChanged: function (oldRect, newRect) {
		$.ig.HorizontalAxisLabelPanelBase.prototype.windowRectChanged.call(this, oldRect, newRect);
		if (oldRect.equals1(newRect)) {
			return;
		}
		this.__isPanning = false;
		if (oldRect.x() != newRect.x() && oldRect.width() == newRect.width()) {
			this.__isPanning = true;
		}
		if (oldRect.width() != newRect.width()) {
			this.__gridAreaRect = this.axis().viewportRect();
			this.__labelWindowRectChanged = true;
			this.__wrapTextFlag = true;
			this.calculateCategoryWidth();
		}
	}
	,
	labelViewportSizeChanged: function (oldRect, newRect) {
		$.ig.HorizontalAxisLabelPanelBase.prototype.labelViewportSizeChanged.call(this, oldRect, newRect);
		if (newRect.isEmpty() || oldRect.equals1(newRect)) {
			return;
		}
		this.__labelViewportSizeChanged = true;
		if (this.horizontalView() != null) {
			this.__gridAreaRect = newRect;
			this.__wrapTextFlag = true;
			this.calculateCategoryWidth();
		}
	}
	,
	shouldRearrangeLabels: function () {
		return this.shouldResize() || this.__labelViewportSizeChanged || this.__labelWindowRectChanged;
	}
	,
	shouldUseWrapping: function (maxHeight) {
		if (this.shouldUseRotation() || this.shouldUseStagger() || this.__maxPanelHeight <= 0 || !this.__wrapTextFlag) {
			return false;
		}
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		var availableHeight = maxHeight;
		var minFontSize = this.isUserFont() ? this.fontSize() : this.minimumFontSize();
		var minFont = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), minFontSize);
		var labelBounds = this.horizontalView().measureString(this.longestNonBreakingLabel(), minFont);
		if (labelBounds.width() > availableCategoryWidth || labelBounds.height() > availableHeight) {
			this.__wrapTextFlag = false;
			return false;
		}
		var info = this.fontInfoMap().item($.ig.truncate(minFontSize));
		var multilineHeight = 0;
		if (info != null) {
			multilineHeight = info.tallestLabelHeight();
		}
		if (multilineHeight > availableHeight) {
			this.__wrapTextFlag = false;
			return false;
		}
		return true;
	}
	,
	shouldUseRotation: function () {
		if (this.isNumber(this.angle())) {
			if (this.isHorizontal(this.angle())) {
				return false;
			}
			return true;
		}
		if (this.isNumber(this.minimumAngle()) && !this.isHorizontal(this.minimumAngle())) {
			return true;
		}
		return false;
	}
	,
	shouldUseStagger: function () {
		if (this.isUserStaggerLevels() && this.numberOfStaggerLevels() > 1) {
			return true;
		}
		if (this.minimumStaggerLevels() > 1 && this.maximumStaggerLevels() > 1) {
			return true;
		}
		return false;
	}
	,
	isUserFont: function () {
		if (this.isNumber(this.fontSize()) && this.fontSize() >= this.minimumFontSize() && this.fontSize() <= this.maximumFontSize()) {
			return true;
		}
		return false;
	}
	,
	isUserAngle: function () {
		if (this.isNumber(this.angle())) {
			return true;
		}
		return false;
	}
	,
	isUserStaggerLevels: function () {
		if (this.isPositive(this.numberOfStaggerLevels()) && this.numberOfStaggerLevels() >= this.minimumStaggerLevels() && this.numberOfStaggerLevels() <= this.maximumStaggerLevels()) {
			return true;
		}
		return false;
	}
	,
	isUserExtent: function () {
		if (this.isNumber(this.extent()) && this.extent() >= this.minimumExtent() && this.extent() <= this.maximumExtent()) {
			return true;
		}
		return false;
	}
	,
	isHorizontalPanel: function () {
		return true;
	}
	,
	makeDirty: function () {
		this.__shouldResize = true;
	}
	,
	calculateWidthForLabel: function (label, fontSize) {
		var fontString = fontSize.toString() + "px " + this.font().fontFamily();
		return $.ig.FontUtil.prototype.measureStringWidth1(label, fontString, this.view().getRenderingContext());
	}
	,
	calculateTotalWidthForFont: function (fontSize) {
		if (this.labelPositions().count() == 0) {
			return 0;
		}
		if (this.__visibleLabels.count() == 1) {
			return this.calculateWidthForLabel(this.__visibleLabels.__inner[0], fontSize);
		}
		var totalWidth = this.calculateWidthForLabel(this.__visibleLabels.__inner[0], fontSize) / 2;
		for (var i = 0; i < this.__visibleLabels.count() - 1; i++) {
			var posCurrent = this.getLabelPosition(i);
			var posNext = this.getLabelPosition(i + 1);
			var labelCurrent = this.__visibleLabels.__inner[i];
			var labelNext = this.__visibleLabels.__inner[i + 1];
			var labelWidthCurrent = this.calculateWidthForLabel(labelCurrent, fontSize);
			var labelWidthNext = this.calculateWidthForLabel(labelNext, fontSize);
			var calcWidth = Math.max(posNext - posCurrent, labelWidthNext / 2 + labelWidthCurrent / 2);
			totalWidth = totalWidth + calcWidth;
		}
		totalWidth = totalWidth + this.calculateWidthForLabel(this.__visibleLabels.__inner[this.__visibleLabels.count() - 1], fontSize) / 2;
		return totalWidth;
	}
	,
	calculateFontHeight: function (fontSize) {
		return this.fetchFontHeightForFontSize($.ig.truncate(fontSize));
	}
	,
	getSmartAxisSimplifiedAngle: function (angle) {
		var result = $.ig.GeometryUtil.prototype.simplifyAngle(angle);
		if (result > 180) {
			result = result % 180;
		}
		return result;
	}
	,
	calculatePanelHeightForTextWrapping: function (minHeight, maxHeight, minFontSize, maxFontSize) {
		this.__wrapTextFlag = false;
		var bestFontSize = this.getBestFontSizeForWrapping(minFontSize, maxFontSize, maxHeight);
		var labelSize = this.__currentBestFontLabelSize;
		if (bestFontSize == -1) {
			return -1;
		}
		var newFont = this.font();
		newFont.fontSize(bestFontSize);
		this.__wrapTextFlag = true;
		return Math.max(labelSize.height() + this.topMargin() + this.axis().actualTickLength() + this.getTitleHeightBounds(), minHeight);
	}
	,
	getBestFontSizeForWrapping: function (minFontSize, maxFontSize, maxHeight) {
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		var labelSize = new $.ig.Size(1, 0, 0);
		for (var currentFontSize = maxFontSize; currentFontSize >= minFontSize; currentFontSize = currentFontSize - 1) {
			var stringWidth = 0;
			var newFont = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), currentFontSize);
			var fontString = currentFontSize + "px " + this.font().fontFamily();
			stringWidth = $.ig.FontUtil.prototype.measureStringWidth1(this.longestNonBreakingLabel(), fontString, this.horizontalView().getRenderingContext());
			if (stringWidth > availableCategoryWidth) {
				continue;
			}
			var labelHeight = 1000;
			this.getTallestLabel(availableCategoryWidth, newFont);
			labelHeight = this.fontInfoMap().item($.ig.truncate(currentFontSize)).tallestLabelHeight();
			if ((labelHeight < maxHeight)) {
				labelSize.width(availableCategoryWidth);
				labelSize.height(labelHeight);
				this.__currentBestFontLabelSize = labelSize;
				this.actualFontSize(currentFontSize);
				return currentFontSize;
			}
		}
		return -1;
	}
	,
	createLabelMapForTextWrapping: function (fontSizeToUse, labelHeight) {
		this.__labelMap.clear();
		this.__labelMap.add(new $.ig.List$1($.ig.Rect.prototype.$type, 0));
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		var top = this.resolveTopMargin() + this.labelViewport().top();
		for (var i = 0; i < this.__visibleLabels.count(); i++) {
			var anchorX = this.getLabelPosition(i) - availableCategoryWidth / 2;
			var labelRect = new $.ig.Rect(0, anchorX, top, availableCategoryWidth, labelHeight);
			this.__labelMap.__inner[0].add(labelRect);
		}
	}
	,
	calculatePanelHeight: function (minHeight, maxHeight, availableWidth, minAngle, maxAngle, minFontSize, maxFontSize) {
		if (this.isUserFont()) {
			var curFont = this.fontSize();
			if (curFont < minFontSize) {
				curFont = minFontSize;
			}
			if (curFont > maxFontSize) {
				curFont = maxFontSize;
			}
			minFontSize = maxFontSize = curFont;
			this.actualFontSize(curFont);
		}
		if (this.shouldUseWrapping(maxHeight)) {
			var panelHeight = this.calculatePanelHeightForTextWrapping(minHeight, maxHeight, minFontSize, maxFontSize);
			if (panelHeight != -1) {
				this.actualNumberOfStaggerLevels(1);
				return panelHeight + 1;
			}
		}
		if (!this.shouldUseRotation() && this.determineNumberOfStaggerLevels(availableWidth, maxHeight) > 0) {
			return this.calculateFontHeight(this.actualFontSize()) * this.actualNumberOfStaggerLevels() + this.resolveTopMargin();
		}
		var longestLabelWidth = this.calculateWidthForLabel(this.longestLabel(), minFontSize);
		var minFontHeight = this.calculateFontHeight(minFontSize);
		var titleHeight = this.getTitleHeightBounds();
		var finalHeight = titleHeight;
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		this.actualFontSize(minFontSize);
		if (this.isUserAngle()) {
			return Math.min(maxHeight, this.topMargin() + titleHeight + this.axis().actualTickLength() + minFontHeight + longestLabelWidth * Math.abs(Math.sin(this.actualAngle() * $.ig.MathUtil.prototype.degreeAsRadian)));
		}
		if (minFontHeight > availableCategoryWidth) {
			return titleHeight;
		}
		var categoryAxis = this.axis();
		var offset = availableCategoryWidth / 2;
		if (categoryAxis.categoryMode() == $.ig.CategoryMode.prototype.mode0) {
			offset = 0;
		}
		var firstLabel = this.__allLabels.__inner[0];
		var lastLabel = this.__allLabels.__inner[this.__allLabels.count() - 1];
		var minFont = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), minFontSize);
		var container = this.horizontalView().getSeriesViewerViewContainer();
		var firstAndLastLabelsOutOfBounds = (this.__matchingAxis.labelPanel().extent() - this.horizontalView().measureStringWidth(firstLabel, minFont) / Math.sqrt(2) + offset < 0) && (this.labelViewport().right() + this.horizontalView().measureStringWidth(lastLabel, minFont) / Math.sqrt(2) - offset > container.width());
		if (!firstAndLastLabelsOutOfBounds) {
			finalHeight = this.topMargin() + titleHeight + this.axis().actualTickLength() + (minFontHeight + longestLabelWidth) * Math.sin(Math.PI / 4) + (minFontHeight - minFontHeight * Math.sin(Math.PI / 4));
		} else {
			finalHeight = this.topMargin() + longestLabelWidth + titleHeight + this.axis().actualTickLength();
		}
		var bottomPadding = 1;
		finalHeight = Math.ceil(finalHeight + bottomPadding);
		if (finalHeight > maxHeight) {
			return titleHeight;
		}
		return finalHeight + 1;
	}
	,
	calculatePanelHeightWithNoRotation: function (availableWidth, minHeight, maxHeight, minFontSize, maxFontSize) {
		var fontSize = (minFontSize + maxFontSize) / 2;
		var direction = 0;
		var fontHeight = 0;
		var currentHeight = 0;
		var userFont = this.isUserFont();
		var userStagger = this.isUserStaggerLevels();
		if (userFont) {
			fontHeight = this.calculateFontHeight(this.fontSize());
			if (userStagger) {
				this.actualNumberOfStaggerLevels(this.numberOfStaggerLevels());
				currentHeight = fontHeight * this.numberOfStaggerLevels() + this.topMargin();
			} else {
				var totalWidth = this.calculateTotalWidthForFont(this.fontSize());
				for (var stagger = 1; stagger <= this.maximumStaggerLevels(); stagger++) {
					if (totalWidth / stagger <= availableWidth) {
						this.actualNumberOfStaggerLevels(stagger);
						currentHeight = fontHeight * stagger + this.topMargin();
						break;
					}
				}
			}
		} else {
			while (fontSize >= this.minimumFontSize() && fontSize <= this.maximumFontSize()) {
				var totalWidth1 = this.calculateTotalWidthForFont(fontSize);
				if (direction == 0) {
					if (totalWidth1 / this.maximumStaggerLevels() <= availableWidth) {
						direction = 1;
					} else {
						direction = -1;
					}
				}
				if (userStagger) {
					this.actualNumberOfStaggerLevels(this.numberOfStaggerLevels());
					fontHeight = this.calculateFontHeight(fontSize);
					currentHeight = fontHeight * this.numberOfStaggerLevels() + this.topMargin();
				} else {
					for (var stagger1 = 1; stagger1 <= this.actualNumberOfStaggerLevels(); stagger1++) {
						if (totalWidth1 / stagger1 <= availableWidth) {
							this.actualNumberOfStaggerLevels(stagger1);
							fontHeight = this.calculateFontHeight(fontSize);
							currentHeight = fontHeight * stagger1 + this.topMargin();
							break;
						}
					}
				}
				fontSize = fontSize + direction;
			}
		}
		currentHeight = Math.max(currentHeight, minHeight);
		currentHeight = Math.min(currentHeight, maxHeight);
		return currentHeight;
	}
	,
	calculatePanelSize: function (availableSize) {
		if (this.axis() == null || this.axis().viewportRect().isEmpty()) {
			this.actualExtent1(0);
			return this.horizontalView().getEmptySize();
		}
		var height = 0;
		var viewportHeight = this.axis().viewportRect().height();
		this.calculateCategoryWidth();
		if (this.__categoryWidth <= 0) {
			var returnHeight = this.getTitleHeightBounds();
			this.actualExtent1(returnHeight);
			return new $.ig.Size(1, availableSize.width(), returnHeight);
		}
		this.resolveUserAngle();
		this.recreateAllLabels();
		this.longestLabel(this.resolveLongestLabel());
		this.longestNonBreakingLabel(this.resolveLongestNonBreakingLabel());
		var minHeight = 0;
		var maxHeight = availableSize.height();
		if (this.isNotNegative(this.minimumExtent())) {
			if (this.extentType() != $.ig.AxisExtentType.prototype.percent) {
				minHeight = this.minimumExtent();
			} else {
				minHeight = this.minimumExtent() * viewportHeight / 100;
			}
		}
		if (this.isNotNegative(this.maximumExtent())) {
			if (this.extentType() != $.ig.AxisExtentType.prototype.percent) {
				maxHeight = this.maximumExtent();
			} else {
				maxHeight = this.maximumExtent() * viewportHeight / 100;
			}
		}
		this.__maxPanelHeight = maxHeight;
		if (this.isNotNegative(this.extent())) {
			if (this.extentType() == $.ig.AxisExtentType.prototype.pixel) {
				height = this.extent();
			} else {
				height = viewportHeight * this.extent() / 100;
			}
			if (height < minHeight) {
				height = minHeight;
			}
			if (height > maxHeight) {
				height = maxHeight;
			}
			this.actualExtent1(height);
			return new $.ig.Size(1, availableSize.width(), height);
		}
		var minAngle = 0;
		if (this.isNumber(this.minimumAngle())) {
			minAngle = this.minimumAngle();
		}
		var maxAngle = 180;
		if (this.isNumber(this.maximumAngle())) {
			maxAngle = this.maximumAngle();
		}
		var minFont = 8;
		if (this.isNumber(this.minimumFontSize())) {
			minFont = this.minimumFontSize();
		}
		var maxFont = 16;
		if (this.isNumber(this.maximumFontSize())) {
			maxFont = this.maximumFontSize();
		}
		this.getBestMinimumInterval(availableSize.width());
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		if (this.__minAxisInterval <= 0 || this.calculateFontHeight(minFont) > availableCategoryWidth) {
			var returnHeight1 = this.getTitleHeightBounds();
			this.actualExtent1(returnHeight1);
			return new $.ig.Size(1, availableSize.width(), returnHeight1);
		}
		this.createFontInfoMap();
		var panelHeight = this.calculatePanelHeight(minHeight, maxHeight, availableSize.width(), minAngle, maxAngle, minFont, maxFont);
		this.actualExtent1(panelHeight);
		return new $.ig.Size(1, availableSize.width(), panelHeight);
	}
	,
	foundHorizontalCollisions: function (rects, containerBounds) {
		if (rects == null || rects.count() == 0) {
			return false;
		}
		if (rects.count() == 1) {
			var rect = rects.__inner[0];
			if (rect.width() > containerBounds.width() || rect.bottom() > containerBounds.bottom()) {
				return true;
			}
		}
		for (var i = 0; i < rects.count() - 1; i++) {
			var current = rects.__inner[i];
			var next = rects.__inner[i + 1];
			if (current.right() + this.proximityMargin() > next.left() || current.right() > containerBounds.right() || next.right() > containerBounds.right() || current.bottom() > containerBounds.bottom() || next.bottom() > containerBounds.bottom()) {
				return true;
			}
		}
		return false;
	}
	,
	foundAngledCollisions: function (rects, angle, containerBounds, fontSizeToUse) {
		if (rects == null) {
			return false;
		}
		if (rects.count() == 1) {
			var current = rects.__inner[0];
			var currentRotated = $.ig.RectUtil.prototype.rotateAboutPoint(current, current.x(), current.y() + current.height() / 2, angle);
			if (!containerBounds.containsRect(currentRotated)) {
				return true;
			}
		}
		for (var i = 0; i < rects.count() - 1; i++) {
			var current1 = rects.__inner[i];
			var next = rects.__inner[i + 1];
			var displacement = (next.left() - current1.left()) * Math.sin(angle * $.ig.MathUtil.prototype.degreeAsRadian);
			var nextTransformed = new $.ig.Rect(0, next.left(), next.top() - displacement, next.width(), next.height());
			if (current1.intersectsWith(nextTransformed)) {
				return true;
			}
			var currentRotated1 = $.ig.RectUtil.prototype.rotateAboutPoint(current1, current1.x(), current1.y() + current1.height() / 2, angle);
			var nextRotated = ($.ig.RectUtil.prototype.rotateAboutPoint(next, next.x(), next.y() + next.height() / 2, angle));
			currentRotated1.y(current1.top());
			nextRotated.y(next.top());
			if (!containerBounds.containsRect(currentRotated1)) {
				return true;
			}
			if (!containerBounds.containsRect(nextRotated)) {
				return true;
			}
		}
		return false;
	}
	,
	createLabelMap: function (staggerLevels, fontSizeToUse, fontHeight, rotated) {
		this.__labelMap.clear();
		var top = this.resolveTopMargin();
		for (var i = 0; i < staggerLevels; i++) {
			this.__labelMap.add(new $.ig.List$1($.ig.Rect.prototype.$type, 0));
		}
		for (var i1 = 0; i1 < this.__visibleLabels.count(); i1++) {
			var labelString = this.__visibleLabels.__inner[i1];
			var labelWidth = this.calculateWidthForLabel(labelString, fontSizeToUse);
			var anchorX = rotated ? this.getLabelPosition(i1) : this.getLabelPosition(i1) - labelWidth / 2;
			var labelRect = new $.ig.Rect(0, anchorX, top, labelWidth, fontHeight);
			this.__labelMap.__inner[i1 % staggerLevels].add(labelRect);
		}
		if (!rotated) {
			for (var i2 = 0; i2 < staggerLevels; i2++) {
				var first = this.__labelMap.__inner[i2].__inner[0];
				var last = this.__labelMap.__inner[i2].__inner[this.__labelMap.__inner[i2].count() - 1];
				if (first.left() < 0) {
					var offset = 0 - first.left();
					first.x(first.x() + offset);
					this.__labelMap.__inner[i2].__inner[0] = first;
				}
				if (last.right() > this.__actualPanelBounds.right()) {
					var offset1 = last.right() - this.__actualPanelBounds.right();
					last.x(last.x() - offset1);
					this.__labelMap.__inner[i2].__inner[this.__labelMap.__inner[i2].count() - 1] = last;
				}
			}
		}
	}
	,
	determineNumberOfStaggerLevels: function (width, height) {
		var numLevels = -1;
		if (this.__visibleLabels.count() == 0) {
			return 0;
		}
		var userFont = this.isUserFont();
		var useRotation = this.shouldUseRotation();
		var userStagger = this.isUserStaggerLevels();
		var fontSizeToUse = userFont ? this.fontSize() : this.minimumFontSize();
		var horizontalLayout = false;
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		if (this.horizontalView().measureStringWidth(this.longestLabel(), $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), fontSizeToUse)) > 2 * availableCategoryWidth) {
			return -1;
		}
		var minimumTotalWidth = this.calculateTotalWidthForFont(fontSizeToUse);
		var fontHeight = this.calculateFontHeight(fontSizeToUse);
		var staggerLevels = $.ig.truncate(Math.min(this.maximumStaggerLevels(), height / fontHeight));
		var containerBounds = new $.ig.Rect(0, this.__actualPanelBounds.left(), this.__actualPanelBounds.top(), this.__actualPanelBounds.width(), height);
		if ((this.isNumber(this.angle()) && this.isHorizontal(this.angle())) || minimumTotalWidth / staggerLevels <= width) {
			horizontalLayout = true;
		}
		if (!horizontalLayout || useRotation) {
			this.actualNumberOfStaggerLevels(0);
			return -1;
		}
		if (userStagger) {
			staggerLevels = this.numberOfStaggerLevels();
		}
		this.__labelMap = new $.ig.List$1($.ig.List$1.prototype.$type.specialize($.ig.Rect.prototype.$type), 0);
		if (userFont) {
			fontSizeToUse = this.fontSize();
			fontHeight = this.calculateFontHeight(this.fontSize());
			if (userStagger) {
				numLevels = this.numberOfStaggerLevels();
			} else {
				var foundCollisions = false;
				for (var i = 1; i <= Math.min(staggerLevels, this.maximumStaggerLevels()); i++) {
					this.createLabelMap(i, fontSizeToUse, fontHeight, false);
					for (var j = 0; j < i; j++) {
						foundCollisions = this.foundHorizontalCollisions(this.__labelMap.__inner[j], containerBounds);
						if (foundCollisions) {
							break;
						}
					}
					if (!foundCollisions) {
						numLevels = i;
						break;
					}
				}
			}
		} else {
			var currentStaggerLevels = userStagger ? this.numberOfStaggerLevels() : 1;
			while (height >= currentStaggerLevels * fontHeight && fontSizeToUse <= this.maximumFontSize() && currentStaggerLevels <= this.maximumStaggerLevels()) {
				this.createLabelMap(currentStaggerLevels, fontSizeToUse, fontHeight, false);
				var foundCollisions1 = false;
				for (var i1 = 0; i1 < currentStaggerLevels; i1++) {
					if (foundCollisions1) {
						break;
					}
					foundCollisions1 = this.foundHorizontalCollisions(this.__labelMap.__inner[i1], containerBounds);
				}
				if (!foundCollisions1) {
					numLevels = currentStaggerLevels;
					fontSizeToUse = fontSizeToUse + 1;
					fontHeight = this.calculateFontHeight(fontSizeToUse);
				} else {
					if (userStagger) {
						break;
					} else {
						currentStaggerLevels = currentStaggerLevels + 1;
					}
				}
			}
			fontSizeToUse = Math.max(fontSizeToUse - 1, this.minimumFontSize());
			fontHeight = this.calculateFontHeight(fontSizeToUse);
		}
		if (numLevels > 0) {
			this.createLabelMap(numLevels, fontSizeToUse, fontHeight, false);
			this.__labelBounds.clear();
			for (var i2 = 0; i2 < this.__visibleLabels.count(); i2++) {
				this.__labelBounds.add(this.__labelMap.__inner[i2 % numLevels].__inner[$.ig.intDivide(i2, numLevels)]);
			}
		}
		this.actualFontSize(fontSizeToUse);
		this.actualNumberOfStaggerLevels(Math.max(0, numLevels));
		return numLevels;
	}
	,
	determineLabelBounds: function () {
		return null;
	}
	,
	createBoundsRectangles: function () {
		return null;
	}
	,
	shouldRender: function () {
		if (this.__visibleLabels == null || this.__visibleLabels.count() == 0 || this.__minAxisInterval == -1) {
			return false;
		}
		return true;
	}
	,
	measureLabels: function (availableSize) {
		if (this.labelViewport().isEmpty() || this.labelDataContext() == null) {
			return availableSize;
		}
		this.getVisibleLabels();
		if (!this.__locked) {
			this.axis().chart().invalidatePanels();
		}
		var windowScale = 1;
		var chartWidth = this.labelViewport().width();
		var axisWindowRect = this.windowRect();
		if (this.axis() != null && this.axis().chart() != null && this.axis().chart().view() != null) {
			chartWidth = this.horizontalView().getSeriesViewerViewContainer().width();
			windowScale = Math.min(1, this.axis().chart().windowRect().width());
			axisWindowRect = this.axis().chart().windowRect();
		}
		var panelWidth = chartWidth / windowScale;
		var panelHeight = this.labelViewport().height();
		var panelLeft = 0 - axisWindowRect.left() * panelWidth;
		var panelTop = 0;
		this.__actualPanelBounds = new $.ig.Rect(0, panelLeft, panelTop, panelWidth, panelHeight);
		var size = new $.ig.Size(1, panelWidth, panelHeight);
		return size;
	}
	,
	__div: null,
	__span: null,
	__first: false,
	measureMultilineStringHeight: function (text, fontInfo, width) {
		var doc = $('body');
		if (this.__first) {
			this.__first = false;
			this.__div.append(this.__span);
			doc.append(this.__div);
		}
		this.__span.text(text);
		this.__div.width(width);
		this.__div.css("font-size", fontInfo.fontSize() + "px");
		return this.__div.height();
	}
	,
	arrangeLabels: function (finalSize) {
		if (!this.__locked) {
			return finalSize;
		}
		var width = finalSize.width();
		var height = finalSize.height();
		var userFont = this.isUserFont();
		var userAngle = this.isUserAngle();
		var minFontSize = this.minimumFontSize();
		var maxFontSize = this.maximumFontSize();
		if (this.__visibleLabels.count() == 0 || this.axis() == null || width <= 0 || height <= 0) {
			this.hideAllLabels();
			this.actualFontSize(0);
			return finalSize;
		}
		this.calculateCategoryWidth();
		var availableCategoryWidth = this.getAvailableCategoryWidth();
		this.arrangeTitle(finalSize);
		this.resolveUserAngle();
		if (this.shouldRearrangeLabels()) {
			this.__labelWindowRectChanged = false;
			this.__labelViewportSizeChanged = false;
			this.getBestMinimumInterval(finalSize.width());
		}
		if (this.__minAxisInterval == -1) {
			this.hideAllLabels();
			this.actualFontSize(0);
			return finalSize;
		}
		this.createTicks();
		this.arrangeTicks(finalSize);
		if (userFont) {
			minFontSize = this.fontSize();
			maxFontSize = this.fontSize();
		}
		var fontSizeToUse = minFontSize;
		var fontToUse = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), fontSizeToUse);
		var fontHeight = this.calculateFontHeight(fontSizeToUse);
		var availableHeight = height - this.resolveTopMargin();
		this.getTallestLabel(availableCategoryWidth, fontToUse);
		if (this.shouldUseWrapping(availableHeight)) {
			this.displayType($.ig.SmartAxisLabelDisplayType.prototype.wrap);
			fontSizeToUse = this.getBestFontSizeForWrapping(minFontSize, maxFontSize, availableHeight);
			var labelSize = this.__currentBestFontLabelSize;
			this.createLabelMapForTextWrapping(fontSizeToUse, labelSize.height());
			this.__labelBounds.clear();
			for (var i = 0; i < this.__visibleLabels.count(); i++) {
				this.__labelBounds.add(this.__labelMap.__inner[0].__inner[i]);
			}
			this.actualFontSize(fontSizeToUse);
			this.actualAngle(0);
			this.actualNumberOfStaggerLevels(1);
			this.horizontalView().arrangeTextBlocksForWrapping(this.__labelBounds, labelSize, availableCategoryWidth);
			return finalSize;
		}
		var numberOfStaggerLevels;
		if (this.__isPanning) {
			numberOfStaggerLevels = this.actualNumberOfStaggerLevels();
			if (numberOfStaggerLevels > 0) {
				this.createLabelMap(numberOfStaggerLevels, this.actualFontSize(), this.calculateFontHeight(this.actualFontSize()), false);
				this.__labelBounds.clear();
				for (var i1 = 0; i1 < this.__visibleLabels.count(); i1++) {
					this.__labelBounds.add(this.__labelMap.__inner[i1 % numberOfStaggerLevels].__inner[$.ig.intDivide(i1, numberOfStaggerLevels)]);
				}
			}
		} else {
			numberOfStaggerLevels = this.determineNumberOfStaggerLevels(width, availableHeight);
		}
		if (numberOfStaggerLevels > 0) {
			this.displayType($.ig.SmartAxisLabelDisplayType.prototype.stagger);
			fontHeight = this.calculateFontHeight(this.actualFontSize());
			this.horizontalView().arrangeTextblocskWithoutRotation(this.__labelBounds, fontHeight);
		} else if (userAngle) {
			var angle = this.actualAngle();
			var previousFontSize = fontSizeToUse;
			var containerBounds = new $.ig.Rect(0, this.__actualPanelBounds.left(), this.__actualPanelBounds.top(), this.__actualPanelBounds.width(), finalSize.height());
			this.displayType($.ig.SmartAxisLabelDisplayType.prototype.rotate);
			while (fontSizeToUse <= this.maximumFontSize() && !userFont) {
				this.__labelMap.clear();
				fontHeight = this.calculateFontHeight(fontSizeToUse);
				this.createLabelMap(1, fontSizeToUse, fontHeight, true);
				var foundCollisions = this.foundAngledCollisions(this.__labelMap.__inner[0], angle, containerBounds, fontSizeToUse);
				if (foundCollisions) {
					break;
				}
				previousFontSize = fontSizeToUse;
				fontSizeToUse = fontSizeToUse + 1;
			}
			this.actualFontSize(previousFontSize);
			this.actualAngle(angle);
			var newFont = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), fontSizeToUse);
			this.horizontalView().arrangeTextblocksWithRotation(newFont, fontHeight, availableHeight);
		} else {
			this.displayType($.ig.SmartAxisLabelDisplayType.prototype.rotate);
			var minAngle = 45;
			if (this.isNumber(this.minimumAngle())) {
				minAngle = this.minimumAngle();
			}
			var maxAngle = 135;
			if (this.isNumber(this.maximumAngle())) {
				maxAngle = this.maximumAngle();
			}
			var angles = new $.ig.List$1($.ig.Number.prototype.$type, 0);
			if (minAngle <= 45) {
				angles.add(45);
			}
			if (maxAngle >= 135) {
				angles.add(135);
			}
			if (minAngle <= 90 && maxAngle >= 90) {
				angles.add(90);
			}
			if (angles.count() == 0) {
				this.hideAllLabels();
				this.actualFontSize(0);
				return finalSize;
			}
			var index = 0;
			var angle1 = angles.__inner[index];
			var previousAngle = angles.__inner[angles.count() - 1];
			var previousFontSize1 = fontSizeToUse;
			var containerBounds1 = new $.ig.Rect(0, this.__actualPanelBounds.left(), this.__actualPanelBounds.top(), this.__actualPanelBounds.width(), finalSize.height());
			;
			var foundCollisions1 = false;
			while (fontSizeToUse <= this.maximumFontSize()) {
				this.__labelMap.clear();
				fontHeight = this.calculateFontHeight(fontSizeToUse);
				this.createLabelMap(1, fontSizeToUse, fontHeight, true);
				foundCollisions1 = this.foundAngledCollisions(this.__labelMap.__inner[0], angle1, containerBounds1, fontSizeToUse);
				if (foundCollisions1) {
					index++;
					if (index >= angles.count()) {
						break;
					}
					angle1 = angles.__inner[index];
					continue;
				}
				previousAngle = angle1;
				previousFontSize1 = fontSizeToUse;
				if (userFont) {
					break;
				}
				fontSizeToUse = fontSizeToUse + 1;
				index = 0;
				angle1 = angles.__inner[index];
			}
			if (foundCollisions1 && fontSizeToUse == minFontSize) {
				this.hideAllLabels();
				this.actualFontSize(0);
				return finalSize;
			}
			this.actualFontSize(previousFontSize1);
			this.actualAngle(previousAngle);
			var newFont1 = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.font(), previousFontSize1);
			this.horizontalView().arrangeTextblocksWithRotation(newFont1, fontHeight, availableHeight);
		}
		return finalSize;
	}
	,
	$type: new $.ig.Type('HorizontalSmartAxisLabelPanel', $.ig.HorizontalAxisLabelPanelBase.prototype.$type)
}, true);

$.ig.util.defType('AxisLabelPanelBaseView', 'Object', {
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	_ticks: null,
	ticks: function (value) {
		if (arguments.length === 1) {
			this._ticks = value;
			return value;
		} else {
			return this._ticks;
		}
	}
	,
	init: function (model) {
		this.__renderedRect = $.ig.Rect.prototype.empty();
		this.__fontHeight = 0;
		this.__titleHeight = NaN;
		$.ig.Object.prototype.init.call(this);
		this.model(model);
	},
	arrangeTextToBounds: function (frameworkElement, rect, leftMargin, topMargin, rightMargin, bottomMargin) {
		var tb = $.ig.util.cast($.ig.TextBlock.prototype.$type, frameworkElement);
		if (tb != null) {
			tb.__visibility = $.ig.Visibility.prototype.visible;
			if (rect.width() == 0 && rect.height() == 0) {
				tb.__visibility = $.ig.Visibility.prototype.collapsed;
			}
			var newHeight = rect.height() - (topMargin + bottomMargin);
			var newWidth = rect.width() - (leftMargin + rightMargin);
			tb.canvasLeft(rect.left() + leftMargin);
			tb.canvasTop(rect.top() + topMargin);
			if (newWidth < 0) {
				newWidth = 0;
			}
			if (newHeight < 0) {
				newHeight = 0;
			}
			tb.actualHeight(newHeight);
			tb.actualWidth(newWidth);
			if (tb.renderTransform() != null) {
				var tg = tb.renderTransform();
				var rot = tg.children().__inner[0];
				rot.centerX(rot.centerX() + tb.canvasLeft());
				rot.centerY(rot.centerY() + tb.canvasTop());
			}
		}
	}
	,
	clearTransforms: function (frameworkElement) {
		var fe = frameworkElement;
		fe.renderTransform(null);
	}
	,
	handleMeasureLabel: function (element) {
	}
	,
	handleMeasureLabel1: function (element, availableSize) {
	}
	,
	handleSetLabelRotationTransform: function (label, effAngle) {
		var fe = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, label);
		var centerX = 0;
		var centerY = 0;
		var group = new $.ig.TransformGroup();
		var transform = (function () {
			var $ret = new $.ig.RotateTransform();
			$ret.angle(effAngle);
			$ret.centerX(centerX);
			$ret.centerY(centerY);
			return $ret;
		}());
		group.children().add(transform);
		fe.renderTransform(group);
	}
	,
	trimTextBlock: function (textblock, availableWidth) {
		var length = textblock.text().length;
		var text = textblock.text();
		var originalText = textblock.text();
		while (this.getWidthBounds(textblock) > availableWidth && length > 0) {
			length--;
			text = text.substr(0, length) + "\u2026";
			textblock.text(text);
		}
		textblock.text(originalText);
		return text;
	}
	,
	determineLongestLabel: function () {
		var labels = this.getLabels();
		var en = labels.getEnumerator();
		while (en.moveNext()) {
			var child = en.current();
			var tb = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, child);
			if (tb != null) {
				this.model().onProcessTextBlock(tb);
			}
			this.model().considerForLongestTextBlock(child);
		}
	}
	,
	getLabels: function () {
		var textBlocks = this.model().getTextBlocks();
		var children = this.model().getLabels();
		if (!this.model().axis().usingTemplate()) {
			return textBlocks;
		} else {
			return children;
		}
	}
	,
	getDesiredHeight: function (element) {
		return this.__fontHeight;
	}
	,
	getHeightBounds: function (element) {
		return this.getDesiredHeight(element) + this.getLabelTopMargin() + this.getLabelBottomMargin();
	}
	,
	onInit: function () {
		this.ticks((function () {
			var $ret = new $.ig.Path();
			$ret.data(new $.ig.GeometryGroup());
			$ret.isHitTestVisible(false);
			return $ret;
		}()));
	}
	,
	getDesiredWidth: function (element) {
		var tb = element;
		if (tb != null && tb.text() != null) {
			return this.context().measureTextWidth(tb.text());
		}
		return 0;
	}
	,
	getWidthBounds: function (element) {
		var tb = element;
		if (tb != null && tb.text() != null) {
			return this.getDesiredWidth(element) + this.getLabelLeftMargin() + this.getLabelRightMargin();
		}
		return 0;
	}
	,
	bindExtentToSettings: function () {
		this.model().extent(this.model().axis().getUserExtent());
	}
	,
	measure: function () {
		this.ensureContextFont();
		this.model().measureLabels(new $.ig.Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
	}
	,
	_context: null,
	context: function (value) {
		if (arguments.length === 1) {
			this._context = value;
			return value;
		} else {
			return this._context;
		}
	}
	,
	getRenderingContext: function () {
		return this.context();
	}
	,
	onContextProvided: function (context) {
		this.context(context);
	}
	,
	arrange: function () {
		if (this.model().labelViewport().isEmpty()) {
			return;
		}
		var oldExtent = this.model()._actualExtent;
		this.model().arrangeLabels(new $.ig.Size(1, this.model().labelViewport().width(), this.model().labelViewport().height()));
		if (this.model()._actualExtent != oldExtent) {
			this.model().axis().chart().invalidatePanels();
			this.onExtentChangedAfterArrange();
		}
	}
	,
	onExtentChangedAfterArrange: function () {
	}
	,
	__renderedRect: null,
	renderTextBlock: function (tb) {
		this.context().renderTextBlock(tb);
	}
	,
	render: function () {
		if (this.context() == null) {
			return;
		}
		if (this.context().shouldRender()) {
			if (this.model().axis().seriesViewer() != null && this.model().axis().seriesViewer().actualPixelScalingRatio() != 1) {
				this.context().save();
				this.context().scale(this.model().axis().seriesViewer().actualPixelScalingRatio(), this.model().axis().seriesViewer().actualPixelScalingRatio());
			}
			this.ensureContextFont();
			this.__renderedRect = this.model().labelViewport();
			var labelBrush = this.model().axis().chart().getFontBrush();
			if (this.model().labelSettings() != null && this.model().labelSettings().textColor() != null) {
				labelBrush = this.model().labelSettings().textColor();
			}
			if (this.model().renderTransform() != null) {
				this.context().save();
				this.context().applyTransform(this.model().renderTransform());
			}
			var en = this.getLabels().getEnumerator();
			while (en.moveNext()) {
				var child = en.current();
				var tb = $.ig.util.cast($.ig.TextBlock.prototype.$type, child);
				if (tb != null) {
					tb.fill(labelBrush);
					if (tb.renderTransform() != null) {
						this.context().save();
						this.context().applyTransform(tb.renderTransform());
					}
					this.renderTextBlock(tb);
					if (tb.renderTransform() != null) {
						this.context().restore();
					}
				}
			}
			if (this.model().renderTransform() != null) {
				this.context().restore();
			}
			this.renderTicks();
			labelBrush = this.getAxisTitleColor();
			this.context().setFontInfo(this.getAxisTitleFont());
			var axisTitleTb = this.model().axis().titleTextBlock();
			if (axisTitleTb != null) {
				axisTitleTb.fill(labelBrush);
				if (axisTitleTb.renderTransform() != null) {
					this.context().save();
					this.context().applyTransform(axisTitleTb.renderTransform());
				}
				this.context().renderTextBlock(axisTitleTb);
				if (axisTitleTb.renderTransform() != null) {
					this.context().restore();
				}
			}
			if (this.model().axis().seriesViewer() != null && this.model().axis().seriesViewer().actualPixelScalingRatio() != 1) {
				this.context().restore();
			}
		}
	}
	,
	getAxisTitleFont: function () {
		var font = this.model().axis().seriesViewer().getFontInfo();
		if (this.model().axis().titleSettings() != null && this.model().axis().titleSettings().textStyle() != null) {
			font = this.model().axis().titleSettings().getFontInfo();
		} else {
			var defFont = this.model().axis().seriesViewer().getDefaultHorizontalAxisFont();
			if (defFont != null) {
				font = defFont;
			}
		}
		return font;
	}
	,
	getAxisTitleColor: function () {
		var brush = this.model().axis().chart().getFontBrush();
		if (this.model().axis().titleSettings() != null && this.model().axis().titleSettings().textColor() != null) {
			brush = this.model().axis().titleSettings().textColor();
		} else {
			var defBrush = this.model().axis().seriesViewer().getDefaultHorizontalAxisColor();
			if (defBrush != null) {
				brush = defBrush;
			}
		}
		return brush;
	}
	,
	__previousFont: null,
	ensureContextFont: function () {
		if (this.context() == null) {
			return;
		}
		var font = this.model().axis().seriesViewer().getFontInfo();
		if (this.model().labelSettings() != null && this.model().labelSettings().textStyle() != null) {
			font = this.model().labelSettings().getFontInfo();
		}
		if (this.__previousFont != font) {
			this.updateCurrentFontHeight();
		}
		this.context().setFontInfo(font);
	}
	,
	__fontHeight: 0,
	updateCurrentFontHeight: function () {
		if (this.model().axis() != null && this.model().axis().seriesViewer() != null) {
			if (this.model().labelSettings() == null || this.model().labelSettings().textStyle() == null) {
				this.__fontHeight = this.model().axis().seriesViewer().view().fontHeight();
				return;
			}
			if (this.__fontHeight == 0) {
				this.__fontHeight = this.model().axis().seriesViewer().view().fontHeight();
			}
			var oldHeight = this.__fontHeight;
			var font = this.model().axis().seriesViewer().getFontInfo();
			if (this.model().labelSettings() != null && this.model().labelSettings().textStyle() != null) {
				font = this.model().labelSettings().getFontInfo();
			}
			var height = $.ig.FontUtil.prototype.getCurrentFontHeight(font);
			this.__fontHeight = height;
			if (oldHeight != this.__fontHeight) {
				this.model().axis().seriesViewer().invalidatePanels();
			}
		}
	}
	,
	__titleHeight: 0,
	getAxisTitleDesiredHeight: function () {
		if (this.model().axis().title() == null) {
			return 0;
		}
		if (!$.ig.util.isNaN(this.__titleHeight)) {
			return this.__titleHeight;
		}
		var font = this.getAxisTitleFont();
		this.__titleHeight = $.ig.FontUtil.prototype.getCurrentFontHeight(font);
		return this.__titleHeight;
	}
	,
	getAxisTitleDesiredWidth: function () {
		var tb = this.model().axis().titleTextBlock();
		if (tb != null && tb.text() != null) {
			this.context().setFontInfo(this.getAxisTitleFont());
			var val = this.context().measureTextWidth(tb.text());
			this.ensureContextFont();
			return val;
		}
		return 0;
	}
	,
	renderTicks: function () {
		if (this.model().children().count() == 0) {
			return;
		}
		if (this.model().axis().tickStroke() == null) {
			this.ticks().__stroke = this.model().axis().chart().getAxisLineBrush();
		} else {
			this.ticks().__stroke = this.model().axis().tickStroke();
		}
		this.ticks().strokeThickness(this.model().axis().tickStrokeThickness());
		this.context().renderPath(this.ticks());
	}
	,
	arrangeTicks: function (finalSize) {
	}
	,
	getTitleMargin: function () {
		return this.model().axis().seriesViewer().getDefaultHorizontalAxisTitleMargin();
	}
	,
	getTitleTopMargin: function () {
		if (this.model().axis().titleSettings() != null && !$.ig.util.isNaN(this.model().axis().titleSettings().topMargin())) {
			return Math.max(0, this.model().axis().titleSettings().topMargin());
		} else {
			return this.getTitleMargin().top();
		}
	}
	,
	getTitleBottomMargin: function () {
		if (this.model().axis().titleSettings() != null && !$.ig.util.isNaN(this.model().axis().titleSettings().bottomMargin())) {
			return Math.max(0, this.model().axis().titleSettings().bottomMargin());
		} else {
			return this.getTitleMargin().bottom();
		}
	}
	,
	getTitleLeftMargin: function () {
		if (this.model().axis().titleSettings() != null && !$.ig.util.isNaN(this.model().axis().titleSettings().leftMargin())) {
			return Math.max(0, this.model().axis().titleSettings().leftMargin());
		} else {
			return this.getTitleMargin().left();
		}
	}
	,
	getTitleRightMargin: function () {
		if (this.model().axis().titleSettings() != null && !$.ig.util.isNaN(this.model().axis().titleSettings().rightMargin())) {
			return Math.max(0, this.model().axis().titleSettings().rightMargin());
		} else {
			return this.getTitleMargin().right();
		}
	}
	,
	getTicksGeometry: function () {
		return (this.ticks().data()).children();
	}
	,
	getThicksRenderingInfo: function () {
		var $self = this;
		var ret = (function () {
			var $ret = new $.ig.PathRenderingInfo();
			$ret.stroke($self.model().axis().tickStroke());
			$ret.strokeThickness($self.model().axis().tickStrokeThickness());
			return $ret;
		}());
		if (this.model().axis() != null && $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().axis().chart()) !== null) {
			var c = this.model().axis().chart();
			if (c.alignsGridLinesToPixels() && c.state() != $.ig.InteractionState.prototype.dragPan && c.state() != $.ig.InteractionState.prototype.dragZoom) {
				ret.alignToPixels(true);
			}
		}
		return ret;
	}
	,
	getLabelTopMargin: function () {
		if (this.model().labelSettings() == null) {
			return 0;
		}
		return Math.max(0, this.model().labelSettings().topMargin());
	}
	,
	getLabelLeftMargin: function () {
		if (this.model().labelSettings() == null) {
			return 0;
		}
		return Math.max(0, this.model().labelSettings().leftMargin());
	}
	,
	getLabelRightMargin: function () {
		if (this.model().labelSettings() == null) {
			return 0;
		}
		return Math.max(0, this.model().labelSettings().rightMargin());
	}
	,
	getLabelBottomMargin: function () {
		if (this.model().labelSettings() == null) {
			return 0;
		}
		return Math.max(0, this.model().labelSettings().bottomMargin());
	}
	,
	$type: new $.ig.Type('AxisLabelPanelBaseView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('HorizontalAxisLabelPanelBaseView', 'AxisLabelPanelBaseView', {
	_horizontalModel: null,
	horizontalModel: function (value) {
		if (arguments.length === 1) {
			this._horizontalModel = value;
			return value;
		} else {
			return this._horizontalModel;
		}
	}
	,
	init: function (model) {
		$.ig.AxisLabelPanelBaseView.prototype.init.call(this, model);
		this.horizontalModel(model);
	},
	bindExtent: function () {
	}
	,
	determineTallestLabel: function (rectangles, angleRadians) {
		var titleHeightBounds = this.model().getTitleHeightBounds();
		var topOffset = this.horizontalModel().getLabelTopOffset();
		this.horizontalModel().largestHeight(-1.7976931348623157E+308);
		this.horizontalModel().largestWidth(-1.7976931348623157E+308);
		this.horizontalModel().largestRenderHeight(-1.7976931348623157E+308);
		this.horizontalModel().largestRenderWidth(-1.7976931348623157E+308);
		var leftMargin = this.getLabelLeftMargin();
		var rightMargin = this.getLabelRightMargin();
		var topMargin = this.getLabelTopMargin();
		var bottomMargin = this.getLabelBottomMargin();
		var viewportTop = this.model().labelViewport().top();
		var actualHeight = (this.model().labelViewport().height() - titleHeightBounds);
		for (var i = 0; i < this.model().textBlocks().count(); i++) {
			if (this.model().labelPositions() == null || i >= this.model().labelPositions().count()) {
				break;
			}
			var x, y, height, elementWidth, renderWidth, renderHeight;
			var currentLabel = this.model().textBlocks().__inner[i];
			renderWidth = this.getDesiredWidth(currentLabel);
			renderHeight = this.getDesiredHeight(currentLabel);
			elementWidth = renderWidth + leftMargin + rightMargin;
			height = renderHeight + topMargin + bottomMargin;
			if (this.model().useRotation()) {
				x = this.model().labelPositions().__inner[i].value();
			} else {
				x = this.model().labelPositions().__inner[i].value() - elementWidth / 2;
			}
			y = viewportTop + topOffset;
			this.horizontalModel().largestHeight(Math.max(height, this.horizontalModel().largestHeight()));
			this.horizontalModel().largestWidth(Math.max(elementWidth, this.horizontalModel().largestWidth()));
			this.horizontalModel().largestRenderHeight(Math.max(renderHeight, this.horizontalModel().largestRenderHeight()));
			this.horizontalModel().largestRenderWidth(Math.max(renderWidth, this.horizontalModel().largestRenderWidth()));
			var rect = new $.ig.Rect(0, x, y, elementWidth, height);
			rectangles.add(rect);
			var lengthV = elementWidth * Math.abs(Math.sin(angleRadians));
			this.model().foundCollisions(lengthV > actualHeight);
		}
	}
	,
	shouldUseWrapping: function () {
		return false;
	}
	,
	handleVerticalAlignment: function (rectangles) {
		var titleHeight = this.model().getTitleHeightBounds();
		var topOffset, bottomOffset;
		topOffset = this.horizontalModel().getLabelTopOffset();
		bottomOffset = this.horizontalModel().getLabelBottomOffset();
		var alignment = this.model().labelSettings() != null ? this.model().labelSettings().verticalAlignment() : $.ig.VerticalAlignment.prototype.center;
		var extent = this.model()._actualExtent;
		var count = rectangles.count();
		var labelViewport = this.model().labelViewport();
		var span = this.horizontalModel().getLabelSpan();
		var halfSpan = span / 2;
		for (var i = 0; i < count; i++) {
			var rect = rectangles.__inner[i];
			var halfRectHeight = rect.height() / 2;
			switch (alignment) {
				case $.ig.VerticalAlignment.prototype.top:
					rect.y(labelViewport.top() + topOffset);
					break;
				case $.ig.VerticalAlignment.prototype.center:
				case $.ig.VerticalAlignment.prototype.stretch:
					rect.y((labelViewport.top() + topOffset + halfSpan) - halfRectHeight);
					break;
				case $.ig.VerticalAlignment.prototype.bottom:
					rect.y((labelViewport.bottom() - bottomOffset) - rect.height());
					break;
			}
		}
	}
	,
	$type: new $.ig.Type('HorizontalAxisLabelPanelBaseView', $.ig.AxisLabelPanelBaseView.prototype.$type)
}, true);

$.ig.util.defType('HorizontalSmartAxisLabelPanelView', 'HorizontalAxisLabelPanelBaseView', {
	_horizontalSmartAxisModel: null,
	horizontalSmartAxisModel: function (value) {
		if (arguments.length === 1) {
			this._horizontalSmartAxisModel = value;
			return value;
		} else {
			return this._horizontalSmartAxisModel;
		}
	}
	,
	init: function (model) {
		$.ig.HorizontalAxisLabelPanelBaseView.prototype.init.call(this, model);
		this.horizontalSmartAxisModel(model);
	},
	ensureSmartAxisContextFont: function () {
		var fontInfo = $.ig.FontUtil.prototype.getFontWithNewFontSize(this.horizontalSmartAxisModel().font(), this.horizontalSmartAxisModel().actualFontSize());
		$.ig.FontUtil.prototype.updateFontString(fontInfo);
		this.context().setFontInfo(fontInfo);
	}
	,
	measure: function () {
		this.model().measureLabels(new $.ig.Size(1, Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY));
	}
	,
	arrange: function () {
		if (this.model().labelViewport().isEmpty()) {
			return;
		}
		this.model().arrangeLabels(new $.ig.Size(1, this.model().labelViewport().width(), this.model().labelViewport().height()));
	}
	,
	render: function () {
		if (!this.horizontalSmartAxisModel().shouldRender()) {
			return;
		}
		$.ig.HorizontalAxisLabelPanelBaseView.prototype.render.call(this);
	}
	,
	renderTextBlock: function (tb) {
		this.context().save();
		this.ensureSmartAxisContextFont();
		if (this.horizontalSmartAxisModel().displayType() == $.ig.SmartAxisLabelDisplayType.prototype.wrap) {
			var lineHeight = this.horizontalSmartAxisModel().actualFontSize();
			this.context().renderTextBlockInRect(tb, new $.ig.Rect(0, tb.canvasLeft(), tb.canvasTop(), tb.width(), tb.height()), lineHeight);
		} else {
			this.context().renderTextBlock(tb);
		}
		this.context().restore();
	}
	,
	__fakeContainer: null,
	getContainer: function () {
		if (this.model().axis().seriesViewer() != null) {
			return this.model().axis().seriesViewer().view().viewManager().container();
		} else {
			if (this.__fakeContainer == null) {
				this.__fakeContainer = $("<div></div>");
			}
			return this.__fakeContainer;
		}
	}
	,
	getSeriesViewerViewContainer: function () {
		var view = this.model().axis().chart().view();
		return new $.ig.Rect(0, 0, 0, view.getSeriesViewerViewContainerWidth(), view.getSeriesViewerViewContainerHeight());
	}
	,
	getLabel: function (label) {
		if ($.ig.util.cast(String, label) != null) {
			return label;
		}
		var axisLabel = this.model().axis().getLabel(label);
		if ($.ig.util.cast(String, axisLabel) != null) {
			return axisLabel;
		}
		return label.toString();
	}
	,
	arrangeTextblockWithoutRotation: function (textBlock, index, arrangeBounds, useWrapping) {
		if (!useWrapping) {
			textBlock.width(NaN);
			textBlock.height(NaN);
		} else {
			textBlock.width(arrangeBounds.width());
			textBlock.height(arrangeBounds.height());
		}
		textBlock.renderTransform(null);
		textBlock.canvasLeft(arrangeBounds.x());
		textBlock.canvasTop(arrangeBounds.y());
		textBlock.__visibility = $.ig.Visibility.prototype.visible;
	}
	,
	arrangeTextblockWithRotation: function (textBlock, index, angle, anchor, font, fontHeight) {
		textBlock.width(NaN);
		textBlock.height(NaN);
		this.setRotationTransform(textBlock, angle, index, anchor, font, fontHeight);
	}
	,
	setRotationTransform: function (textBlock, angle, index, anchorX, font, fontHeight) {
		var anchor = { __x: anchorX, __y: this.horizontalSmartAxisModel().resolveTopMargin(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var translateY = this.horizontalSmartAxisModel().labelViewport().top() + anchor.__y;
		var transform = new $.ig.TransformGroup();
		var translate = new $.ig.TranslateTransform();
		var rotate = new $.ig.RotateTransform();
		var simplifiedAngle = angle;
		var offset = 0;
		var labelWidth = this.horizontalSmartAxisModel().calculateWidthForLabel(textBlock.text(), font.fontSize());
		if (this.horizontalSmartAxisModel().isHorizontal(simplifiedAngle)) {
			offset = labelWidth / 2;
		}
		if (simplifiedAngle > 90 && simplifiedAngle < 270) {
			translate.x(anchor.__x + offset - labelWidth + fontHeight / 2 * Math.cos(simplifiedAngle * $.ig.MathUtil.prototype.degreeAsRadian));
			rotate.angle(simplifiedAngle + 180);
		} else {
			translate.x(anchor.__x - offset - fontHeight / 2 * Math.sin(simplifiedAngle * $.ig.MathUtil.prototype.degreeAsRadian));
			rotate.angle(simplifiedAngle);
		}
		translate.y(translateY);
		rotate.centerX(anchor.__x);
		rotate.centerY(translateY + fontHeight / 2);
		transform.children().add(rotate);
		textBlock.renderTransform(transform);
		textBlock.canvasLeft(translate.x());
		textBlock.canvasTop(translate.y());
	}
	,
	arrangeTextBlocksForWrapping: function (labelBounds, labelSize, availableCategoryWidth) {
		var counter = 0;
		var en = this.model().getTextBlocks().getEnumerator();
		while (en.moveNext()) {
			var textBlock = en.current();
			var x = this.horizontalSmartAxisModel().getLabelPosition(counter) - availableCategoryWidth / 2;
			var y = labelBounds.__inner[counter].y();
			var arrangeWidth = availableCategoryWidth;
			var arrangeHeight = labelSize.height();
			var arrangeBounds = new $.ig.Rect(0, x, y, arrangeWidth, arrangeHeight);
			this.arrangeTextblockWithoutRotation(textBlock, counter, arrangeBounds, true);
			counter++;
		}
	}
	,
	arrangeTextblocskWithoutRotation: function (labelBounds, fontHeight) {
		var counter = 0;
		var en = this.horizontalSmartAxisModel().getTextBlocks().getEnumerator();
		while (en.moveNext()) {
			var textBlock = en.current();
			var x = labelBounds.__inner[counter].x();
			var y = labelBounds.__inner[counter].y() + this.horizontalSmartAxisModel().labelViewport().top() + fontHeight * (counter % this.horizontalSmartAxisModel().actualNumberOfStaggerLevels());
			var arrangeWidth = Number.POSITIVE_INFINITY;
			var arrangeHeight = Number.POSITIVE_INFINITY;
			var arrangeBounds = new $.ig.Rect(0, x, y, arrangeWidth, arrangeHeight);
			this.arrangeTextblockWithoutRotation(textBlock, counter, arrangeBounds, false);
			counter++;
		}
	}
	,
	arrangeTextblocksWithRotation: function (font, fontHeight, availableHeight) {
		if (availableHeight == 0) {
			this.hideAllLabels();
			return;
		}
		var counter = 0;
		var en = this.horizontalSmartAxisModel().getTextBlocks().getEnumerator();
		while (en.moveNext()) {
			var textBlock = en.current();
			if (availableHeight == 0) {
				textBlock.__visibility = $.ig.Visibility.prototype.collapsed;
			} else {
				textBlock.__visibility = $.ig.Visibility.prototype.visible;
			}
			this.arrangeTextblockWithRotation(textBlock, counter, this.horizontalSmartAxisModel().actualAngle(), this.horizontalSmartAxisModel().getLabelPosition(counter), font, fontHeight);
			counter++;
		}
	}
	,
	hideAllLabels: function () {
		var en = this.getLabels().getEnumerator();
		while (en.moveNext()) {
			var label = en.current();
			label.__visibility = $.ig.Visibility.prototype.collapsed;
		}
	}
	,
	splitString: function (label, delimiters) {
		var strings = $.ig.FontUtil.prototype.splitString(label, delimiters);
		var list = new $.ig.List$1(String, 1, strings);
		return list;
	}
	,
	getEmptySize: function () {
		return new $.ig.Size(1, 0, 0);
	}
	,
	measureStringWidth: function (text, fontInfo) {
		var fontString = fontInfo.fontSize().toString() + "px " + fontInfo.fontFamily();
		return $.ig.FontUtil.prototype.measureStringWidth1(text, fontString, this.context());
	}
	,
	measureStringHeight: function (text, fontInfo) {
		return this.horizontalSmartAxisModel().fetchFontHeightForFontSize($.ig.truncate(fontInfo.fontSize()));
	}
	,
	measureStringHeight1: function (text, fontSize) {
		return this.horizontalSmartAxisModel().fetchFontHeightForFontSize($.ig.truncate(fontSize));
	}
	,
	measureString: function (text, fontInfo) {
		var fontString = fontInfo.fontSize().toString() + "px " + fontInfo.fontFamily();
		var width = $.ig.FontUtil.prototype.measureStringWidth1(text, fontString, this.context());
		var height = this.horizontalSmartAxisModel().fetchFontHeightForFontSize($.ig.truncate(fontInfo.fontSize()));
		return new $.ig.Rect(0, 0, 0, width, height);
	}
	,
	$type: new $.ig.Type('HorizontalSmartAxisLabelPanelView', $.ig.HorizontalAxisLabelPanelBaseView.prototype.$type)
}, true);

$.ig.util.defType('MarkerTemplates', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	startMarker: function (context, dataContext, info) {
		context.beginPath();
		var brush = dataContext.actualItemBrush();
		var outlineBrush = dataContext.outline();
		if (brush != null) {
			if (brush._isGradient) {
				var halfWidth = info.availableWidth / 2;
				var halfHeight = info.availableHeight / 2;
				var x = info.xPosition - halfWidth;
				var y = info.yPosition - halfWidth;
				x += info.renderOffsetX;
				y += info.renderOffsetY;
				var grad = $.ig.CanvasViewRenderer.prototype.createGradient(context, brush, x, y, x + info.availableWidth, y + info.availableHeight, dataContext.thickness(), false);
				context.fillStyle = grad;
			} else {
				if (context.fillStyle != brush.__fill) {
					context.fillStyle = brush.__fill;
				}
			}
		}
		if (dataContext.outline() != null) {
			if (dataContext.outline()._isGradient) {
				var halfWidth1 = info.availableWidth / 2;
				var halfHeight1 = info.availableHeight / 2;
				var x1 = info.xPosition - halfWidth1;
				var y1 = info.yPosition - halfWidth1;
				x1 += info.renderOffsetX;
				y1 += info.renderOffsetY;
				var grad1 = $.ig.CanvasViewRenderer.prototype.createGradient(context, dataContext.outline(), x1, y1, x1 + info.availableWidth, y1 + info.availableHeight, dataContext.thickness(), true);
				context.strokeStyle = grad1;
			} else {
				if (context.strokeStyle != dataContext.outline().__fill) {
					context.strokeStyle = dataContext.outline().__fill;
				}
			}
			context.lineWidth = dataContext.thickness();
		}
	}
	,
	endMarker: function (context, dataContext) {
		if (dataContext.actualItemBrush() != null) {
			context.fill();
		}
		if (dataContext.outline() != null) {
			context.stroke();
		}
		context.closePath();
	}
	,
	measureAsEightByEightConstantMarkerTemplate: function (info) {
		info.isConstant = true;
		info.width = 8;
		info.height = 8;
	}
	,
	renderCircleMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var radius = Math.min(info.availableWidth, info.availableHeight) / 2;
		ctx.arc(info.xPosition, info.yPosition, radius, 0, (Math.PI * 2), false);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderTriangleMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left, top);
		ctx.lineTo(left + halfWidth, top + info.availableHeight);
		ctx.lineTo(left + info.availableWidth, top + 0);
		ctx.lineTo(left, top);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderPyramidMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left, top + info.availableHeight);
		ctx.lineTo(left + halfWidth, top + 0);
		ctx.lineTo(left + info.availableWidth, top + info.availableHeight);
		ctx.lineTo(left, top + info.availableHeight);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderSquareMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.rect(left, top, info.availableWidth, info.availableHeight);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderAlignedSquareMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left_ = (info.xPosition - halfWidth);
		var top_ = (info.yPosition - halfHeight);
		ctx.rect(left_ | 0, top_ | 0, info.availableWidth, info.availableHeight);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderDiamondMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + 0, top + halfHeight);
		ctx.lineTo(left + halfWidth, top + info.availableHeight);
		ctx.lineTo(left + info.availableWidth, top + halfHeight);
		ctx.lineTo(left + halfWidth, top + 0);
		ctx.lineTo(left + 0, top + halfHeight);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderPentagonMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + ((4 / 8) * info.availableWidth), top + 0);
		ctx.lineTo(left + ((0.1956000030040741 / 8) * info.availableWidth), top + ((2.7639999389648438 / 8) * info.availableHeight));
		ctx.lineTo(left + ((1.6499999761581421 / 8) * info.availableWidth), top + ((7.2360000610351562 / 8) * info.availableHeight));
		ctx.lineTo(left + ((6.3499999046325684 / 8) * info.availableWidth), top + ((7.2360000610351562 / 8) * info.availableHeight));
		ctx.lineTo(left + ((7.8043999671936035 / 8) * info.availableWidth), top + ((2.7639999389648438 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + 0);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderHexagonMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + ((4 / 8) * info.availableWidth), top + 0);
		ctx.lineTo(left + ((0.35600000619888306 / 8) * info.availableWidth), top + ((2 / 8) * info.availableHeight));
		ctx.lineTo(left + ((0.35600000619888306 / 8) * info.availableWidth), top + ((6 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + (info.availableHeight));
		ctx.lineTo(left + ((7.4640002250671387 / 8) * info.availableWidth), top + ((6 / 8) * info.availableHeight));
		ctx.lineTo(left + ((7.4640002250671387 / 8) * info.availableWidth), top + ((2 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + 0);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderTetragramMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + ((4 / 8) * info.availableWidth), top + 0);
		ctx.lineTo(left + ((2.5855998992919922 / 8) * info.availableWidth), top + ((2.5856 / 8) * info.availableHeight));
		ctx.lineTo(left + ((0 / 8) * info.availableWidth), top + ((4 / 8) * info.availableHeight));
		ctx.lineTo(left + ((2.5855998992919922 / 8) * info.availableWidth), top + ((5.4144001007080078 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + ((8 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5.4144001007080078 / 8) * info.availableWidth), top + ((5.4144001007080078 / 8) * info.availableHeight));
		ctx.lineTo(left + ((8 / 8) * info.availableWidth), top + ((4 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5.4144001007080078 / 8) * info.availableWidth), top + ((2.5855998992919922 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + 0);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderPentagramMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + ((4 / 8) * info.availableWidth), top + 0);
		ctx.lineTo(left + ((2.8243999481201172 / 8) * info.availableWidth), top + ((2.382 / 8) * info.availableHeight));
		ctx.lineTo(left + ((0.1956 / 8) * info.availableWidth), top + ((2.7639999389648438 / 8) * info.availableHeight));
		ctx.lineTo(left + ((2.0980000495910645 / 8) * info.availableWidth), top + ((4.6180000305175781 / 8) * info.availableHeight));
		ctx.lineTo(left + ((1.6488000154495239 / 8) * info.availableWidth), top + ((7.2360000610351562 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + ((6 / 8) * info.availableHeight));
		ctx.lineTo(left + ((6.3512 / 8) * info.availableWidth), top + ((7.2360000610351562 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5.9019999504089355 / 8) * info.availableWidth), top + ((4.6180000305175781 / 8) * info.availableHeight));
		ctx.lineTo(left + ((7.8043999671936035 / 8) * info.availableWidth), top + ((2.7639999389648438 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5.1756000518798828 / 8) * info.availableWidth), top + ((2.3819999694824219 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + 0);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	renderHexagramMarkerTemplate: function (info) {
		var ctx = info.context;
		var dataContext = info.data;
		$.ig.MarkerTemplates.prototype.startMarker(ctx, dataContext, info);
		var halfHeight = (info.availableHeight / 2);
		var halfWidth = (info.availableWidth / 2);
		var left = (info.xPosition - halfWidth);
		var top = (info.yPosition - halfHeight);
		ctx.moveTo(left + ((4 / 8) * info.availableWidth), top + 0);
		ctx.lineTo(left + ((3 / 8) * info.availableWidth), top + ((2.268 / 8) * info.availableHeight));
		ctx.lineTo(left + ((0.536 / 8) * info.availableWidth), top + ((2 / 8) * info.availableHeight));
		ctx.lineTo(left + ((2 / 8) * info.availableWidth), top + ((4 / 8) * info.availableHeight));
		ctx.lineTo(left + ((0.536 / 8) * info.availableWidth), top + ((6 / 8) * info.availableHeight));
		ctx.lineTo(left + ((3 / 8) * info.availableWidth), top + ((5.73199987411499 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + ((8 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5 / 8) * info.availableWidth), top + ((5.73199987411499 / 8) * info.availableHeight));
		ctx.lineTo(left + ((7.4640002250671387 / 8) * info.availableWidth), top + ((6 / 8) * info.availableHeight));
		ctx.lineTo(left + ((6 / 8) * info.availableWidth), top + ((4 / 8) * info.availableHeight));
		ctx.lineTo(left + ((7.4640002250671387 / 8) * info.availableWidth), top + ((2 / 8) * info.availableHeight));
		ctx.lineTo(left + ((5 / 8) * info.availableWidth), top + ((2.2679998874664307 / 8) * info.availableHeight));
		ctx.lineTo(left + ((4 / 8) * info.availableWidth), top + 0);
		$.ig.MarkerTemplates.prototype.endMarker(ctx, dataContext);
	}
	,
	$type: new $.ig.Type('MarkerTemplates', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieChartBaseView', 'Object', {
	init: function (model) {
		this.__dirty = false;
		this.__renderedRect = $.ig.Rect.prototype.empty();
		$.ig.Object.prototype.init.call(this);
		this.model(model);
		this.viewManager(new $.ig.PieChartViewManager(this));
	},
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	onInit: function () {
		this.fontBrush(null);
		this.toolTipContext(new $.ig.PieSliceDataContext());
		this.toolTipContext().series(this.model());
		this.viewport($.ig.Rect.prototype.empty());
		this.slices(new $.ig.List$1($.ig.Slice.prototype.$type, 0));
		this.labels(new $.ig.List$1($.ig.PieLabel.prototype.$type, 0));
		this.model().legendItemTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.LegendTemplates.prototype.pieLegendItemRender);
			$ret.measure($.ig.LegendTemplates.prototype.defaultLegendItemMeasure);
			return $ret;
		}()));
		this.model().legendItemBadgeTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.LegendTemplates.prototype.pieBadgeTemplate);
			$ret.measure($.ig.LegendTemplates.prototype.legendItemBadgeMeasure);
			return $ret;
		}()));
	}
	,
	setDefaultBrushes: function () {
		var brushes = new $.ig.BrushCollection();
		var outlines = new $.ig.BrushCollection();
		var fontBrush;
		var font;
		var $ret = this.viewManager().getDefaultStyle(brushes, outlines, fontBrush, font);
		brushes = $ret.p0;
		outlines = $ret.p1;
		fontBrush = $ret.p2;
		font = $ret.p3;
		if (this.model().brushes() == null) {
			this.model().brushes(brushes);
		}
		if (this.model().outlines() == null) {
			this.model().outlines(outlines);
		}
		this.fontBrush(fontBrush);
		if (this.model().textStyle() != null) {
			this.font(this.model().getFontInfo());
		} else {
			this.font(font);
		}
	}
	,
	_fontBrush: null,
	fontBrush: function (value) {
		if (arguments.length === 1) {
			this._fontBrush = value;
			return value;
		} else {
			return this._fontBrush;
		}
	}
	,
	_font: null,
	font: function (value) {
		if (arguments.length === 1) {
			this._font = value;
			return value;
		} else {
			return this._font;
		}
	}
	,
	_backgroundContext: null,
	backgroundContext: function (value) {
		if (arguments.length === 1) {
			this._backgroundContext = value;
			return value;
		} else {
			return this._backgroundContext;
		}
	}
	,
	_mainContext: null,
	mainContext: function (value) {
		if (arguments.length === 1) {
			this._mainContext = value;
			return value;
		} else {
			return this._mainContext;
		}
	}
	,
	_labelContext: null,
	labelContext: function (value) {
		if (arguments.length === 1) {
			this._labelContext = value;
			return value;
		} else {
			return this._labelContext;
		}
	}
	,
	_overlayContext: null,
	overlayContext: function (value) {
		if (arguments.length === 1) {
			this._overlayContext = value;
			return value;
		} else {
			return this._overlayContext;
		}
	}
	,
	_viewManager: null,
	viewManager: function (value) {
		if (arguments.length === 1) {
			this._viewManager = value;
			return value;
		} else {
			return this._viewManager;
		}
	}
	,
	onContainerProvided: function (container) {
		if (container == null) {
			this.__dirty = false;
			this.viewManager().onContainerProvided(null);
			this.backgroundContext(null);
			this.mainContext(null);
			this.labelContext(null);
			this.overlayContext(null);
			return;
		}
		this.viewManager().onContainerProvided(container);
		this.backgroundContext(this.viewManager().backgroundContext());
		this.mainContext(this.viewManager().mainContext());
		this.labelContext(this.viewManager().labelContext());
		this.overlayContext(this.viewManager().overlayContext());
	}
	,
	getContainerRect: function () {
		return this.viewport();
	}
	,
	getContainerOffsets: function () {
		return this.viewManager().getContainerOffsets();
	}
	,
	resize: function () {
		this.viewport(this.viewManager().resize());
		this.model().onSizeUpdated();
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	__dirty: false,
	makeDirty: function () {
		if (!this.__dirty) {
			this.__dirty = true;
			this.viewManager().queueWork(this.undirty.runOn(this));
		}
	}
	,
	undirty: function () {
		if (this.__dirty) {
			this.__dirty = false;
			this.render();
		}
	}
	,
	__renderedRect: null,
	render: function () {
		this.ensureContextFont();
		if (!this.__renderedRect.isEmpty()) {
			if (this.overlayContext().shouldRender()) {
				this.overlayContext().clearRectangle(this.__renderedRect.left(), this.__renderedRect.top(), this.__renderedRect.width(), this.__renderedRect.height());
			}
			if (this.labelContext().shouldRender()) {
				this.labelContext().clearRectangle(this.__renderedRect.left(), this.__renderedRect.top(), this.__renderedRect.width(), this.__renderedRect.height());
			}
			if (this.mainContext().shouldRender()) {
				this.mainContext().clearRectangle(this.__renderedRect.left(), this.__renderedRect.top(), this.__renderedRect.width(), this.__renderedRect.height());
			}
			if (this.backgroundContext().shouldRender()) {
				this.backgroundContext().clearRectangle(this.__renderedRect.left(), this.__renderedRect.top(), this.__renderedRect.width(), this.__renderedRect.height());
			}
		}
		this.renderOverride();
	}
	,
	renderOverride: function () {
		this.__renderedRect = this.viewport();
		if (this.mainContext() != null && this.mainContext().shouldRender()) {
			var en = this.slices().getEnumerator();
			while (en.moveNext()) {
				var slice = en.current();
				if (slice.__visibility == $.ig.Visibility.prototype.visible) {
					var slicePath = slice.view().getSlicePath();
					this.viewManager().setDefaultSliceBrushes(slicePath);
					slicePath.strokeThickness(1);
					slicePath.__opacity = slice.__opacity;
					if (slice.background() != null) {
						slicePath.__fill = slice.background();
					}
					if (slice.borderBrush() != null) {
						slicePath.__stroke = slice.borderBrush();
					}
					if (slice.style() != null) {
						this.mainContext().applyStyle(slicePath, slice.style());
					}
					if (slicePath.renderTransform() != null) {
						this.mainContext().save();
						this.mainContext().applyTransform(slicePath.renderTransform());
					}
					var fillBrush = slicePath.__fill;
					var strokeBrush = slicePath.__stroke;
					var changed = this.centerRadialBrushes(slice, slicePath, this.mainContext());
					this.mainContext().renderPath(slicePath);
					if (changed) {
						slicePath.__fill = fillBrush;
						slicePath.__stroke = strokeBrush;
					}
					if (slicePath.renderTransform() != null) {
						this.mainContext().restore();
					}
				}
			}
		}
		if (this.labelContext() != null && this.labelContext().shouldRender()) {
			var font = this.font();
			if (this.model().textStyle() != null) {
				font = this.model().getFontInfo();
			}
			this.labelContext().setFontInfo(font);
			var en1 = this.labels().getEnumerator();
			while (en1.moveNext()) {
				var label = en1.current();
				if (label.__visibility == $.ig.Visibility.prototype.visible) {
					var txt = label.label();
					if (txt != null) {
						{
							txt.fill(this.fontBrush());
							this.labelContext().renderTextBlock(txt);
						}
					}
					var sliceBackground = label.slice().background();
					if (label.slice().style() != null) {
						var path = new $.ig.Path();
						this.mainContext().applyStyle(path, label.slice().style());
						sliceBackground = path.__fill;
					}
					if (this.model().leaderLineType() != $.ig.LeaderLineType.prototype.straight && label.leaderLinePath() != null) {
						label.leaderLinePath().__stroke = sliceBackground;
						label.leaderLinePath().strokeThickness(1);
						if (this.model().leaderLineStyle() != null) {
							this.labelContext().applyStyle(label.leaderLinePath(), this.model().leaderLineStyle());
						}
						this.labelContext().renderPath(label.leaderLinePath());
					}
					if (this.model().leaderLineType() == $.ig.LeaderLineType.prototype.straight && label.leaderLine() != null) {
						label.leaderLine().__stroke = sliceBackground;
						label.leaderLine().strokeThickness(1);
						if (this.model().leaderLineStyle() != null) {
							this.labelContext().applyStyle(label.leaderLine(), this.model().leaderLineStyle());
						}
						this.labelContext().renderLine(label.leaderLine());
					}
				}
			}
		}
	}
	,
	centerRadialBrushes: function (slice, slicePath, context) {
		return false;
	}
	,
	canvasMouseMove: function (p, onMouseMove, isFinger) {
		var prev = this.activeSlice();
		this.updateActiveSlice(p);
		if (this.activeSlice() == null && prev != null) {
			var me = (function () {
				var $ret = new $.ig.MouseEventArgs();
				$ret.position(p);
				return $ret;
			}());
			this.model().itemMouseLeft(this.activeSlice(), me);
		} else if (this.activeSlice() != null) {
			var me1 = (function () {
				var $ret = new $.ig.MouseEventArgs();
				$ret.position(p);
				return $ret;
			}());
			this.model().itemMouseMoved(this.activeSlice(), me1);
		}
	}
	,
	canvasMouseLeave: function (p) {
		var prev = this.activeSlice();
		this.updateActiveSlice(p);
		var me = (function () {
			var $ret = new $.ig.MouseEventArgs();
			$ret.position(p);
			return $ret;
		}());
		this.model().itemMouseLeft(prev, me);
	}
	,
	canvasMouseDown: function (p) {
		this.updateActiveSlice(p);
	}
	,
	canvasMouseUp: function (p) {
		var me = (function () {
			var $ret = new $.ig.MouseButtonEventArgs();
			$ret.position(p);
			return $ret;
		}());
		var shouldFireSliceClick = true;
		var labelClicked = null;
		var en = this.labels().getEnumerator();
		while (en.moveNext()) {
			var pl = en.current();
			var containsPoint = pl.bounds().containsPoint(p);
			if (containsPoint) {
				labelClicked = pl;
				shouldFireSliceClick = this.model().labelClicked(pl.slice(), me);
				break;
			}
		}
		this.updateActiveSlice(p);
		if (this.activeSlice() == null && shouldFireSliceClick && labelClicked != null) {
			this.model().sliceClicked(labelClicked.slice(), me);
		} else if (this.activeSlice() != null && shouldFireSliceClick) {
			this.model().sliceClicked(this.activeSlice(), me);
		}
	}
	,
	_activeSlice: null,
	activeSlice: function (value) {
		if (arguments.length === 1) {
			this._activeSlice = value;
			return value;
		} else {
			return this._activeSlice;
		}
	}
	,
	updateActiveSlice: function (p) {
		this.activeSlice(null);
		for (var i = 0; i < this.slices().count(); i++) {
			if (this.slices().__inner[i].__visibility == $.ig.Visibility.prototype.visible && this.slices().__inner[i].containsPoint(p)) {
				this.activeSlice(this.slices().__inner[i]);
				break;
			}
		}
	}
	,
	sizeUpdated: function () {
		this.model().onSizeUpdated();
	}
	,
	closeToolTip: function () {
		this.hideTooltip();
	}
	,
	updateToolTip: function (item, args) {
		var me = args;
		this.updateToolTip1(me.position(), item, args);
	}
	,
	_slices: null,
	slices: function (value) {
		if (arguments.length === 1) {
			this._slices = value;
			return value;
		} else {
			return this._slices;
		}
	}
	,
	sliceCreate: function () {
		var slice = new $.ig.Slice();
		slice.owner(this.model());
		this.slices().add(slice);
		return slice;
	}
	,
	sliceActivate: function (slice) {
		slice.__visibility = $.ig.Visibility.prototype.visible;
	}
	,
	sliceDisactivate: function (slice) {
		slice.__visibility = $.ig.Visibility.prototype.collapsed;
	}
	,
	sliceDestroy: function (slice) {
		slice.owner(null);
		this.slices().remove(slice);
	}
	,
	_labels: null,
	labels: function (value) {
		if (arguments.length === 1) {
			this._labels = value;
			return value;
		} else {
			return this._labels;
		}
	}
	,
	labelCreate: function () {
		var label = new $.ig.PieLabel();
		if (this.model().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
			label.leaderLine(new $.ig.Line());
		} else {
			label.leaderLinePath(new $.ig.Path());
			var geom = new $.ig.PathGeometry();
			geom.figures().add(new $.ig.PathFigure());
			geom.figures().__inner[0].__segments.add(new $.ig.BezierSegment(0));
			label.leaderLinePath().data(geom);
		}
		this.labels().add(label);
		return label;
	}
	,
	labelActivate: function (label) {
		label.__visibility = $.ig.Visibility.prototype.visible;
	}
	,
	labelDisactivate: function (label) {
		label.__visibility = $.ig.Visibility.prototype.collapsed;
	}
	,
	labelDestroy: function (label) {
		this.labels().remove(label);
	}
	,
	updateLabelLeaderLine: function (label) {
		if ((this.model().leaderLineType() != $.ig.LeaderLineType.prototype.straight && label.leaderLinePath() != null) || (this.model().leaderLineType() == $.ig.LeaderLineType.prototype.straight && label.leaderLine() != null)) {
			return;
		}
		if (this.model().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
			label.leaderLinePath(null);
			label.leaderLine(new $.ig.Line());
		} else {
			label.leaderLine(null);
			label.leaderLinePath(new $.ig.Path());
			var geom = new $.ig.PathGeometry();
			geom.figures().add(new $.ig.PathFigure());
			geom.figures().__inner[0].__segments.add(new $.ig.BezierSegment(0));
			label.leaderLinePath().data(geom);
		}
	}
	,
	setSliceAppearance: function (slice) {
		if (this.model().othersCategoryStyle() != null && slice.isOthersSlice()) {
			slice.style(this.model().othersCategoryStyle());
		} else if (slice.isSelected() && this.model().allowSliceSelection() && this.model().selectedStyle() != null) {
			slice.style(this.model().selectedStyle());
		} else {
			slice.style(null);
			var background;
			var borderBrush;
			if (this.model().brushes() != null && slice.index() >= 0 && this.model().brushes().count() > 0) {
				background = this.model().brushes().item(slice.index() % this.model().brushes().count());
			} else {
				background = null;
			}
			if (this.model().outlines() != null && slice.index() >= 0 && this.model().outlines().count() > 0) {
				borderBrush = this.model().outlines().item(slice.index() % this.model().outlines().count());
			} else {
				borderBrush = null;
			}
			slice.background(background);
			slice.borderBrush(borderBrush);
		}
	}
	,
	getLabel: function (slice) {
		if (slice == null || slice.label() == null) {
			return this.model().labelMemberPath();
		}
		var pieLabel = slice.label();
		var label = pieLabel.label();
		if ($.ig.util.cast($.ig.TextBlock.prototype.$type, label) !== null) {
			return (label).text();
		}
		return label;
	}
	,
	getDesiredWidth: function (element) {
		var tb = $.ig.util.cast($.ig.TextBlock.prototype.$type, element);
		if (tb != null && tb.text() != null) {
			return this.labelContext().measureTextWidth(tb.text()) + $.ig.PieChartBaseView.prototype.tEXT_MARGIN;
		}
		return 0;
	}
	,
	updateCurrentFontHeight: function () {
		this.fontHeight($.ig.FontUtil.prototype.getCurrentFontHeight(this.viewManager().getOwnerFont()));
	}
	,
	_fontHeight: 0,
	fontHeight: function (value) {
		if (arguments.length === 1) {
			this._fontHeight = value;
			return value;
		} else {
			return this._fontHeight;
		}
	}
	,
	getDesiredHeight: function (element) {
		return this.fontHeight() + $.ig.PieChartBaseView.prototype.tEXT_MARGIN;
	}
	,
	getLabelBounds: function (label) {
		var lbl = label.label();
		if ($.ig.util.cast($.ig.TextBlock.prototype.$type, lbl) !== null) {
			var desiredWidth = this.getDesiredWidth(lbl);
			var desiredHeight = this.getDesiredHeight(lbl);
			return new $.ig.Rect(0, 0, 0, desiredWidth, desiredHeight);
		}
		return $.ig.Rect.prototype.empty();
	}
	,
	updatePieViewport: function () {
		return new $.ig.Size(1, this.viewport().width(), this.viewport().height());
	}
	,
	updateLabelPosition: function (label, x, y) {
		var txt = $.ig.util.cast($.ig.TextBlock.prototype.$type, label.label());
		if (txt != null) {
			txt.canvasLeft(x);
			txt.canvasTop(y);
		}
		this.makeDirty();
	}
	,
	updateToolTipContent: function (toolTip) {
		this.updateToolTipValue(toolTip);
	}
	,
	updateView: function () {
		this.makeDirty();
	}
	,
	labelPreMeasure: function () {
		this.ensureContextFont();
	}
	,
	ensureContextFont: function () {
		var font = this.font();
		if (this.model().textStyle() != null) {
			font = this.model().getFontInfo();
		}
		if (this.labelContext() != null) {
			this.labelContext().setFontInfo(font);
		}
	}
	,
	onContainerResized: function (width, height) {
		this.viewManager().onContainerResized(width, height);
	}
	,
	notifyContainerResized: function () {
		this.viewManager().notifyContainerResized();
	}
	,
	_toolTipPosition: null,
	toolTipPosition: function (value) {
		if (arguments.length === 1) {
			this._toolTipPosition = value;
			return value;
		} else {
			return this._toolTipPosition;
		}
	}
	,
	_toolTipItem: null,
	toolTipItem: function (value) {
		if (arguments.length === 1) {
			this._toolTipItem = value;
			return value;
		} else {
			return this._toolTipItem;
		}
	}
	,
	_toolTipVisible: false,
	toolTipVisible: function (value) {
		if (arguments.length === 1) {
			this._toolTipVisible = value;
			return value;
		} else {
			return this._toolTipVisible;
		}
	}
	,
	_toolTipContext: null,
	toolTipContext: function (value) {
		if (arguments.length === 1) {
			this._toolTipContext = value;
			return value;
		} else {
			return this._toolTipContext;
		}
	}
	,
	hideTooltip: function () {
		if (this.toolTipVisible() == true) {
			this.toolTipVisible(false);
			this.viewManager().hideTooltip(this.toolTipContext());
		}
	}
	,
	updateToolTipValue: function (p) {
		this.viewManager().updateTooltipValue(p);
	}
	,
	updateToolTip1: function (pt, item, data) {
		this.toolTipVisible(true);
		this.toolTipPosition(pt);
		if (item == null) {
			this.toolTipItem(null);
			this.toolTipContext().item(null);
		} else {
			this.toolTipItem((item).dataContext());
			this.toolTipContext().item((item).dataContext());
		}
		var offsets = this.model().getContainerOffsets();
		var pos_ = { __x: pt.__x + 15 + offsets.__x, __y: pt.__y + 15 + offsets.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var context_ = this.toolTipContext();
		this.viewManager().updateTooltipPosition(pos_, context_);
	}
	,
	styleUpdated: function () {
		this.setDefaultBrushes();
		this.updateCurrentFontHeight();
		this.model().renderChart();
	}
	,
	onIsSurfaceInteractionDisabledChanged: function () {
		this.viewManager().onIsSurfaceInteractionDisabledChanged(this.model().isSurfaceInteractionDisabled());
	}
	,
	getContainer: function () {
		return this.viewManager().getContainer();
	}
	,
	flush: function () {
		if (this.__dirty) {
			this.undirty();
		}
	}
	,
	ready: function () {
		return this.getContainer() != null;
	}
	,
	exportViewData: function (visualData) {
		this.viewManager().exportViewData(visualData);
	}
	,
	isValid: function () {
		return true;
	}
	,
	preRender: function () {
	}
	,
	getActualBackground: function (slice) {
		var bg = this.viewManager().getStyleBackground(slice.style());
		if (bg != null) {
			return bg;
		}
		return slice.background();
	}
	,
	getActualOutline: function (slice) {
		var outline = this.viewManager().getStyleOutline(slice.style());
		if (outline != null) {
			return outline;
		}
		return slice.borderBrush();
	}
	,
	getOriginalEvent: function (args) {
		return this.viewManager().eventProxy().originalEvent();
	}
	,
	$type: new $.ig.Type('PieChartBaseView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LegendBaseViewManager', 'Object', {
	__owner: null,
	init: function (owner) {
		this.__gradientsEnabled = false;
		$.ig.Object.prototype.init.call(this);
		this.__owner = owner;
		this.items(new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.JQueryObject.prototype.$type, 0));
	},
	onContainerProvided: function (container) {
		this.container($(container));
		this.list($("<table></table>"));
		this.list().addClass(this.__owner.legendItemsListStyle());
		this.container().append(this.list());
	}
	,
	_list: null,
	list: function (value) {
		if (arguments.length === 1) {
			this._list = value;
			return value;
		} else {
			return this._list;
		}
	}
	,
	_container: null,
	container: function (value) {
		if (arguments.length === 1) {
			this._container = value;
			return value;
		} else {
			return this._container;
		}
	}
	,
	__gradientsEnabled: false,
	getVisual: function (item, container) {
		var legendItem = $.ig.util.cast($.ig.ContentControl.prototype.$type, item);
		var row = $("<tr></tr>");
		row.addClass(this.__owner.legendItemStyle());
		if (legendItem != null) {
			var dc = $.ig.util.cast($.ig.DataContext.prototype.$type, legendItem.content());
			if (dc != null && legendItem.contentTemplate() != null) {
				var passInfo = new $.ig.DataTemplatePassInfo();
				passInfo.context = row;
				passInfo.passID = "LegendItem";
				var measureInfo = new $.ig.DataTemplateMeasureInfo();
				measureInfo.passInfo = passInfo;
				measureInfo.width = NaN;
				measureInfo.height = NaN;
				measureInfo.data = dc;
				measureInfo.context = row;
				var renderInfo = new $.ig.DataTemplateRenderInfo();
				renderInfo.passInfo = passInfo;
				if (legendItem.contentTemplate().measure() != null) {
					legendItem.contentTemplate().measure()(measureInfo);
				}
				renderInfo.context = row;
				renderInfo.availableWidth = measureInfo.width;
				renderInfo.availableHeight = measureInfo.height;
				renderInfo.data = dc;
				renderInfo.xPosition = 0;
				renderInfo.yPosition = 0;
				legendItem.contentTemplate().render()(renderInfo);
				row.find(".ui-legend-item-badge").removeClass("ui-legend-item-badge").addClass(this.__owner.legendItemBadgeStyle());
				row.find(".ui-legend-item-text").removeClass("ui-legend-item-text").addClass(this.__owner.legendItemTextStyle());
			}
		}
		return row;
	}
	,
	_items: null,
	items: function (value) {
		if (arguments.length === 1) {
			this._items = value;
			return value;
		} else {
			return this._items;
		}
	}
	,
	addItemVisual: function (item, index) {
		var visual = this.getVisual(item, this.list());
		visual.mouseup(this.__owner.legendMouseUp.runOn(this.__owner));
		visual.mousedown(this.__owner.legendMouseDown.runOn(this.__owner));
		visual.mouseleave(this.__owner.legendMouseLeave.runOn(this.__owner));
		visual.mousemove(this.__owner.legendMouseOver.runOn(this.__owner));
		this.items().add(item, visual);
		if ((this.list().children().length == 0) || (index >= this.list().children().length)) {
			this.list().append(visual);
		} else {
			var insBefore = this.list().children().eq(index);
			insBefore.before(visual);
		}
	}
	,
	refreshLegendItem: function (index) {
	}
	,
	removeItemVisual: function (item) {
		var $self = this;
		var toRemove;
		if ((function () { var $ret = $self.items().tryGetValue(item, toRemove); toRemove = $ret.p1; return $ret.ret; }())) {
			toRemove.remove();
			this.items().remove(item);
		}
	}
	,
	getItem: function (visual_) {
		var en = this.items().getEnumerator();
		while (en.moveNext()) {
			var pair_ = en.current();
			if(pair_.value()[0]===visual_[0]){
                                    return pair_.key();
                                };
		}
		return null;
	}
	,
	containsContext: function (dataContext) {
		var en = this.items().keys().getEnumerator();
		while (en.moveNext()) {
			var element = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, element);
			if (contentControl != null && contentControl.content() != null) {
				var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				if (context != null && context.itemLabel() == dataContext.itemLabel() && context.series() == dataContext.series() && context.itemBrush() == dataContext.itemBrush()) {
					return true;
				}
			}
		}
		return false;
	}
	,
	_scaleCanvas: null,
	scaleCanvas: function (value) {
		if (arguments.length === 1) {
			this._scaleCanvas = value;
			return value;
		} else {
			return this._scaleCanvas;
		}
	}
	,
	_scaleContext: null,
	scaleContext: function (value) {
		if (arguments.length === 1) {
			this._scaleContext = value;
			return value;
		} else {
			return this._scaleContext;
		}
	}
	,
	getScaleContext: function (container) {
		var width = this.container().width();
		var height = this.container().height();
		var div = $("<div style=\"position : relative;\" />");
		this.scaleCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.container().append(div);
		div.append(this.scaleCanvas());
		this.scaleContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.scaleCanvas()[0]).getContext("2d")));
		this.scaleCanvas().attr("width", width.toString());
		this.scaleCanvas().attr("height", height.toString());
		return this.scaleContext();
	}
	,
	getScaleContainerSize: function () {
		return new $.ig.Size(1, this.container().width(), Math.max(10, this.container().height() - 15));
	}
	,
	renderGradientShape: function (ScaleContext, polygon, currGradient, rect) {
		var cont = ScaleContext.getUnderlyingContext();
		cont.beginPath();
		cont.moveTo(polygon.points().__inner[0].__x, polygon.points().__inner[0].__y);
		for (var i = 1; i < polygon.points().count(); i++) {
			cont.lineTo(polygon.points().__inner[i].__x, polygon.points().__inner[i].__y);
		}
		cont.lineTo(polygon.points().__inner[0].__x, polygon.points().__inner[0].__y);
		var grad = cont.createLinearGradient(rect.left(), rect.top(), rect.left(), rect.top() + rect.height());
		var en = currGradient.gradientStops().getEnumerator();
		while (en.moveNext()) {
			var stop = en.current();
			grad.addColorStop(stop.offset(), stop.brush().__fill);
		}
		cont.fillStyle = grad;
		cont.fill();
	}
	,
	$type: new $.ig.Type('LegendBaseViewManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieChartViewManager', 'Object', {
	_container: null,
	container: function (value) {
		if (arguments.length === 1) {
			this._container = value;
			return value;
		} else {
			return this._container;
		}
	}
	,
	_backgroundCanvas: null,
	backgroundCanvas: function (value) {
		if (arguments.length === 1) {
			this._backgroundCanvas = value;
			return value;
		} else {
			return this._backgroundCanvas;
		}
	}
	,
	_overlayCanvas: null,
	overlayCanvas: function (value) {
		if (arguments.length === 1) {
			this._overlayCanvas = value;
			return value;
		} else {
			return this._overlayCanvas;
		}
	}
	,
	_mainCanvas: null,
	mainCanvas: function (value) {
		if (arguments.length === 1) {
			this._mainCanvas = value;
			return value;
		} else {
			return this._mainCanvas;
		}
	}
	,
	_labelCanvas: null,
	labelCanvas: function (value) {
		if (arguments.length === 1) {
			this._labelCanvas = value;
			return value;
		} else {
			return this._labelCanvas;
		}
	}
	,
	__containerWidth: 0,
	__containerHeight: 0,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_backgroundContext: null,
	backgroundContext: function (value) {
		if (arguments.length === 1) {
			this._backgroundContext = value;
			return value;
		} else {
			return this._backgroundContext;
		}
	}
	,
	_mainContext: null,
	mainContext: function (value) {
		if (arguments.length === 1) {
			this._mainContext = value;
			return value;
		} else {
			return this._mainContext;
		}
	}
	,
	_labelContext: null,
	labelContext: function (value) {
		if (arguments.length === 1) {
			this._labelContext = value;
			return value;
		} else {
			return this._labelContext;
		}
	}
	,
	_overlayContext: null,
	overlayContext: function (value) {
		if (arguments.length === 1) {
			this._overlayContext = value;
			return value;
		} else {
			return this._overlayContext;
		}
	}
	,
	__owner: null,
	init: function (owner) {
		this.__containerWidth = 0;
		this.__containerHeight = 0;
		this.__sizeChanged = false;
		this.__toolTipObject = null;
		this.__toolTipString = null;
		this.__tooltipDisconnected = true;
		$.ig.Object.prototype.init.call(this);
		this.__owner = owner;
	},
	__sizeChanged: false,
	notifyContainerResized: function () {
		var newWidth = this.container().width();
		var newHeight = this.container().height();
		this.onContainerResized(newWidth, newHeight);
	}
	,
	onContainerResized: function (width, height) {
		this.eventProxy().viewport(new $.ig.Rect(0, 0, 0, width, height));
		if (this.__containerWidth != width) {
			this.__sizeChanged = true;
		}
		this.__containerWidth = width;
		if (this.__containerHeight != height) {
			this.__sizeChanged = true;
		}
		this.__containerHeight = height;
		this.__owner.resize();
	}
	,
	resize: function () {
		this.viewport(new $.ig.Rect(0, 0, 0, this.__containerWidth, this.__containerHeight));
		this.backgroundCanvas().attr("width", this.__containerWidth.toString());
		this.backgroundCanvas().attr("height", this.__containerHeight.toString());
		this.mainCanvas().attr("width", this.__containerWidth.toString());
		this.mainCanvas().attr("height", this.__containerHeight.toString());
		this.labelCanvas().attr("width", this.__containerWidth.toString());
		this.labelCanvas().attr("height", this.__containerHeight.toString());
		this.overlayCanvas().attr("width", this.__containerWidth.toString());
		this.overlayCanvas().attr("height", this.__containerHeight.toString());
		return this.viewport();
	}
	,
	getOwnerFont: function () {
		return this.__owner.font();
	}
	,
	getContainerOffsets: function () {
		var offset = $.ig.DOMEventProxy.prototype.getOffset(this.container());
		return { __x: offset.left(), __y: offset.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getCssBrushColors: function (className, obj) {
		var brushes = new Array(2);
		obj.addClass(className);
		var fill = new $.ig.Brush();
		fill.__fill = obj.css("background-color");
		var outline = new $.ig.Brush();
		outline.__fill = obj.css("border-top-color");
		obj.removeClass(className);
		brushes[0] = fill;
		brushes[1] = outline;
		return brushes;
	}
	,
	queueWork: function (work) {
		window.setTimeout(work, 0);
	}
	,
	getDefaultStyle: function (brushes, outlines, fontBrush, font) {
		var $ret = $.ig.BrushUtil.prototype.getBrushCollection("chart", this.container(), brushes, outlines, null);
		brushes = $ret.p2;
		outlines = $ret.p3;
		fontBrush = new $.ig.Brush();
		fontBrush.__fill = this.container().css("color");
		font = $.ig.FontUtil.prototype.getFont(this.container());
		return {
			p0: brushes,
			p1: outlines,
			p2: fontBrush,
			p3: font
		};
	}
	,
	setDefaultSliceBrushes: function (slicePath) {
		slicePath.__stroke = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#000000");
			return $ret;
		}());
		slicePath.__fill = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#222222");
			return $ret;
		}());
	}
	,
	_eventProxy: null,
	eventProxy: function (value) {
		if (arguments.length === 1) {
			this._eventProxy = value;
			return value;
		} else {
			return this._eventProxy;
		}
	}
	,
	onContainerProvided: function (theContainer) {
		if (theContainer == null) {
			if (this.eventProxy() != null) {
				this.eventProxy().destroy();
			}
			this.container(null);
			this.backgroundCanvas(null);
			this.mainCanvas(null);
			this.labelCanvas(null);
			this.overlayCanvas(null);
			this.backgroundContext(null);
			this.mainContext(null);
			this.labelContext(null);
			this.overlayContext(null);
			this.eventProxy(null);
			return;
		}
		var container = theContainer;
		this.container($(container));
		this.__owner.setDefaultBrushes();
		this.__owner.updateCurrentFontHeight();
		this.container().css("position", "relative");
		this.container().addClass("ui-corner-all ui-widget-content");
		this.backgroundCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.mainCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.labelCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.overlayCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.container().append(this.backgroundCanvas());
		this.container().append(this.mainCanvas());
		this.container().append(this.labelCanvas());
		this.container().append(this.overlayCanvas());
		this.backgroundContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.backgroundCanvas()[0]).getContext("2d")));
		this.mainContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.mainCanvas()[0]).getContext("2d")));
		this.labelContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.labelCanvas()[0]).getContext("2d")));
		this.overlayContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.overlayCanvas()[0]).getContext("2d")));
		this.eventProxy(new $.ig.DOMEventProxy(this.overlayCanvas()));
		var $t = this.eventProxy();
		$t.onMouseOver = $.ig.Delegate.prototype.combine($t.onMouseOver, this.__owner.canvasMouseMove.runOn(this.__owner));
		var $t1 = this.eventProxy();
		$t1.onMouseLeave = $.ig.Delegate.prototype.combine($t1.onMouseLeave, this.__owner.canvasMouseLeave.runOn(this.__owner));
		var $t2 = this.eventProxy();
		$t2.onMouseDown = $.ig.Delegate.prototype.combine($t2.onMouseDown, this.__owner.canvasMouseDown.runOn(this.__owner));
		var $t3 = this.eventProxy();
		$t3.onMouseUp = $.ig.Delegate.prototype.combine($t3.onMouseUp, this.__owner.canvasMouseUp.runOn(this.__owner));
		this.eventProxy().isInteractionDisabled(this.__owner.model().isSurfaceInteractionDisabled());
		this.onContainerResized(this.container().width(), this.container().height());
	}
	,
	addToContainer: function (_toolTipObject) {
		this.container().append(_toolTipObject);
	}
	,
	onIsSurfaceInteractionDisabledChanged: function (newValue) {
		if (this.eventProxy() == null) {
			return;
		}
		this.eventProxy().isInteractionDisabled(newValue);
	}
	,
	getContainer: function () {
		return this.container();
	}
	,
	exportViewData: function (visualData) {
		visualData.width(this.__containerWidth);
		visualData.height(this.__containerHeight);
	}
	,
	__toolTipObject: null,
	__toolTipString: null,
	__tooltipDisconnected: false,
	updateTooltipValue: function (p) {
		this.__toolTipString = null;
		this.__toolTipObject = null;
		if (typeof p === 'string') {
			this.__toolTipString = p;
		} else {
			this.__toolTipObject = p;
			if (this.__toolTipObject != null) {
				this.__toolTipObject.css("position", "fixed");
				this.__toolTipObject.css("top", "0");
				this.__toolTipObject.css("left", "0");
				this.__toolTipObject.css("z-index", "10000");
			}
		}
	}
	,
	updateTooltipPosition: function (pos_, context_) {
		if (this.__toolTipObject != null) {
			if (this.__tooltipDisconnected) {
				this.addToContainer(this.__toolTipObject);
				this.__tooltipDisconnected = false;
			}
			context_.hideOthers = true;
			if (this.__toolTipObject.updateToolTip) { this.__toolTipObject.updateToolTip(context_); };
			if (this.__toolTipObject.offset) { this.__toolTipObject.offset({ left: pos_.__x, top: pos_.__y }); };
		}
	}
	,
	hideTooltip: function (context) {
		if (this.__toolTipObject != null) {
			var context_ = context;
			if (this.__toolTipObject.hideToolTip) { this.__toolTipObject.hideToolTip(context_); };
		}
	}
	,
	getStyleBackground: function (style_) {
		var actualBrush = null;
		var fillColor_ = null;
		if (style_ != null) {
			if (style_.fill) { fillColor_ = style_.fill };
			if (fillColor_ != null) {
				actualBrush = $.ig.Brush.prototype.create(fillColor_);
			}
		}
		return actualBrush;
	}
	,
	getStyleOutline: function (style_) {
		var actualOutline = null;
		var outlineColor_ = null;
		if (style_ != null) {
			if (style_.stroke) { outlineColor_ = style_.stroke };
			if (outlineColor_ != null) {
				actualOutline = $.ig.Brush.prototype.create(outlineColor_);
			}
		}
		return actualOutline;
	}
	,
	$type: new $.ig.Type('PieChartViewManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('NumericAxisBase', 'Axis', {
	createView: function () {
		return new $.ig.NumericAxisBaseView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.Axis.prototype.onViewCreated.call(this, view);
		this.numericView(view);
	}
	,
	_numericView: null,
	numericView: function (value) {
		if (arguments.length === 1) {
			this._numericView = value;
			return value;
		} else {
			return this._numericView;
		}
	}
	,
	isNumeric: function () {
		return true;
	}
	,
	init: function () {
		$.ig.Axis.prototype.init.call(this);
		this.logarithmBaseCached(10);
	},
	minimumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.minimumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.minimumValueProperty);
		}
	}
	,
	actualMinimumValue: function (value) {
		if (arguments.length === 1) {
			if (this.actualMinimumValue() != value) {
				var oldValue = this._actualMinimumValue;
				this._actualMinimumValue = value;
				this.logActualMinimumValue(Math.log(this.actualMinimumValue()));
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualMinimumValuePropertyName, oldValue, this.actualMinimumValue());
			}
			return value;
		} else {
			return this._actualMinimumValue;
		}
	}
	,
	_actualMinimumValue: 0,
	_logActualMinimumValue: 0,
	logActualMinimumValue: function (value) {
		if (arguments.length === 1) {
			this._logActualMinimumValue = value;
			return value;
		} else {
			return this._logActualMinimumValue;
		}
	}
	,
	actualVisibleMinimumValue: function (value) {
		if (arguments.length === 1) {
			if (this.actualVisibleMinimumValue() != value) {
				var oldValue = this._actualVisibleMinimumValue;
				this._actualVisibleMinimumValue = value;
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualVisibleMinimumValuePropertyName, oldValue, this.actualVisibleMinimumValue());
			}
			return value;
		} else {
			return this._actualVisibleMinimumValue;
		}
	}
	,
	_actualVisibleMinimumValue: 0,
	maximumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.maximumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.maximumValueProperty);
		}
	}
	,
	actualMaximumValue: function (value) {
		if (arguments.length === 1) {
			if (this.actualMaximumValue() != value) {
				var oldValue = this._actualMaximumValue;
				this._actualMaximumValue = value;
				this.logActualMaximumValue(Math.log(this.actualMaximumValue()));
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualMaximumValuePropertyName, oldValue, this.actualMaximumValue());
			}
			return value;
		} else {
			return this._actualMaximumValue;
		}
	}
	,
	_actualMaximumValue: 0,
	_logActualMaximumValue: 0,
	logActualMaximumValue: function (value) {
		if (arguments.length === 1) {
			this._logActualMaximumValue = value;
			return value;
		} else {
			return this._logActualMaximumValue;
		}
	}
	,
	_actualVisibleMaximumValue: 0,
	actualVisibleMaximumValue: function (value) {
		if (arguments.length === 1) {
			if (this.actualVisibleMaximumValue() != value) {
				var oldValue = this._actualVisibleMaximumValue;
				this._actualVisibleMaximumValue = value;
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualVisibleMaximumValuePropertyName, oldValue, this.actualVisibleMaximumValue());
			}
			return value;
		} else {
			return this._actualVisibleMaximumValue;
		}
	}
	,
	interval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.intervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.intervalProperty);
		}
	}
	,
	_actualInterval: 0,
	actualInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualInterval() != value) {
				var oldValue = this._actualInterval;
				this._actualInterval = value;
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualIntervalPropertyName, oldValue, this.actualInterval());
			}
			return value;
		} else {
			return this._actualInterval;
		}
	}
	,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.minorIntervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.minorIntervalProperty);
		}
	}
	,
	_actualMinorInterval: 0,
	actualMinorInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualMinorInterval() != value) {
				var oldValue = this._actualMinorInterval;
				this._actualMinorInterval = value;
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype.actualMinorIntervalPropertyName, oldValue, this.actualMinorInterval());
			}
			return value;
		} else {
			return this._actualMinorInterval;
		}
	}
	,
	referenceValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.referenceValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.referenceValueProperty);
		}
	}
	,
	isLogarithmic: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.isLogarithmicProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericAxisBase.prototype.isLogarithmicProperty);
		}
	}
	,
	__actualIsLogarithmic: false,
	actualIsLogarithmic: function (value) {
		if (arguments.length === 1) {
			if (this.actualIsLogarithmic() != value) {
				var oldValue = this.__actualIsLogarithmic;
				if (oldValue != value) {
					this.__actualIsLogarithmic = value;
					this.raisePropertyChanged($.ig.NumericAxisBase.prototype._actualIsLogarithmicPropertyName, oldValue, this.actualIsLogarithmic());
				}
			}
			return value;
		} else {
			return this.__actualIsLogarithmic;
		}
	}
	,
	isReallyLogarithmic: function () {
		return this.actualIsLogarithmic() && this.actualMinimumValue() > 0 && this.logarithmBaseCached() > 1;
	}
	,
	logarithmBase: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.logarithmBaseProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.NumericAxisBase.prototype.logarithmBaseProperty));
		}
	}
	,
	_logarithmBaseCached: 0,
	logarithmBaseCached: function (value) {
		if (arguments.length === 1) {
			this._logarithmBaseCached = value;
			return value;
		} else {
			return this._logarithmBaseCached;
		}
	}
	,
	_renderer: null,
	renderer: function (value) {
		if (arguments.length === 1) {
			this._renderer = value;
			return value;
		} else {
			return this._renderer;
		}
	}
	,
	_logDirty: false,
	logDirty: function (value) {
		if (arguments.length === 1) {
			this._logDirty = value;
			return value;
		} else {
			return this._logDirty;
		}
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.Axis.prototype.renderAxisOverride.call(this, animate);
		if (this.isReallyLogarithmic() && this.seriesViewer() != null) {
			var effectiveViewportRect = this.getCurrentEffectiveViewport();
			var contentViewport = this.getContentViewport();
			var renderingParams = this.createRenderingParams(this.viewportRect(), this.seriesViewer().actualWindowRect(), effectiveViewportRect, contentViewport);
			if (renderingParams == null) {
				return;
			}
			for (var i = 0; i < renderingParams.rangeInfos().count(); i++) {
				var logBase = this.logarithmBase();
				var currentRange = renderingParams.rangeInfos().__inner[i];
				var trueVisibleMinimum = Math.min(currentRange.visibleMinimum(), currentRange.visibleMaximum());
				var trueVisibleMaximum = Math.max(currentRange.visibleMinimum(), currentRange.visibleMaximum());
				var logMin = Math.floor(Math.logBase(trueVisibleMinimum, logBase));
				var logMax = Math.ceil(Math.logBase(trueVisibleMaximum, logBase));
				if (logMax - logMin < 2) {
					if ($.ig.util.cast($.ig.LogarithmicTickmarkValues.prototype.$type, this.__actualTickmarkValues) !== null) {
						this.__actualTickmarkValues = new $.ig.LinearTickmarkValues();
					}
				} else {
					this.__actualTickmarkValues = this.tickmarkValues() != null ? this.tickmarkValues() : (function () {
						var $ret = new $.ig.LogarithmicTickmarkValues();
						$ret.logarithmBase(logBase);
						return $ret;
					}());
				}
			}
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.Axis.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.NumericAxisBase.prototype.minimumValuePropertyName:
				this.updateRange();
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype.maximumValuePropertyName:
				this.updateRange();
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype.isLogarithmicPropertyName:
				this.logDirty(true);
				this.actualIsLogarithmic(this.isLogarithmic());
				break;
			case $.ig.Axis.prototype.crossingValuePropertyName:
			case $.ig.Axis.prototype.crossingAxisPropertyName:
			case $.ig.NumericAxisBase.prototype.intervalPropertyName:
			case $.ig.NumericAxisBase.prototype.minorIntervalPropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype.logarithmBasePropertyName:
				this.logDirty(true);
				this.logarithmBaseCached(this.logarithmBase());
				if (this.actualIsLogarithmic()) {
					this.updateRange();
					this.invalidateSeries();
					this.renderAxis1(false);
				}
				break;
			case $.ig.NumericAxisBase.prototype.referenceValuePropertyName:
				var ea = new $.ig.AxisRangeChangedEventArgs(this.actualMinimumValue(), this.actualMinimumValue(), this.actualMaximumValue(), this.actualMaximumValue());
				this.raiseRangeChanged(ea);
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype.labelSettingsPropertyName:
				this.renderer(this.createRenderer());
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype._tickmarkValuesPropertyName:
				this.updateActualTickmarkValues();
				break;
			case $.ig.NumericAxisBase.prototype._actualIsLogarithmicPropertyName:
				this.updateRange();
				this.invalidateSeries();
				this.mustInvalidateLabels(true);
				this.updateActualTickmarkValues();
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype._actualTickmarkValuesPropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
		}
	}
	,
	invalidateSeries: function () {
		var en = this.directSeries().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.renderSeries(false);
		}
	}
	,
	getAxisRange: function () {
		var newRange = new $.ig.AxisRange(Number.POSITIVE_INFINITY, Number.NEGATIVE_INFINITY);
		var rangeFound = false;
		if (this.seriesViewer() != null) {
			var en = this.directSeries().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				var range = series.getRange(this);
				if (range != null) {
					rangeFound = true;
					newRange = new $.ig.AxisRange(Math.min(newRange.minimum(), range.minimum()), Math.max(newRange.maximum(), range.maximum()));
				}
			}
		}
		if (rangeFound) {
			return newRange;
		}
		return null;
	}
	,
	calculateRange: function (target, minimumValue, maximumValue, isLogarithmic, logarithmBase, actualMinimumValue, actualMaximumValue) {
		var $ret = $.ig.AutoRangeCalculator.prototype.calculateRange(target, minimumValue, maximumValue, isLogarithmic, logarithmBase, actualMinimumValue, actualMaximumValue);
		actualMinimumValue = $ret.p5;
		actualMaximumValue = $ret.p6;
		return {
			p5: actualMinimumValue,
			p6: actualMaximumValue
		};
	}
	,
	updateRangeOverride: function () {
		var isLogarithmic = this.actualIsLogarithmic() && !$.ig.util.isNaN(this.logarithmBase()) && !Number.isInfinity(this.logarithmBase()) && this.logarithmBase() > 1;
		var minimumValue;
		var maximumValue;
		var $ret = this.calculateRange(this, this.minimumValue(), this.maximumValue(), isLogarithmic, this.logarithmBase(), minimumValue, maximumValue);
		minimumValue = $ret.p5;
		maximumValue = $ret.p6;
		if (minimumValue != this.actualMinimumValue() || maximumValue != this.actualMaximumValue() || this.logDirty()) {
			this.logDirty(false);
			var ea = new $.ig.AxisRangeChangedEventArgs(this.actualMinimumValue(), minimumValue, this.actualMaximumValue(), maximumValue);
			this.actualMinimumValue(minimumValue);
			this.actualMaximumValue(maximumValue);
			this.raiseRangeChanged(ea);
			this.onRangeChanged(ea);
			this.renderAxis1(true);
			return true;
		}
		return false;
	}
	,
	onRangeChanged: function (ea) {
	}
	,
	registerSeries: function (series) {
		var success = $.ig.Axis.prototype.registerSeries.call(this, series);
		if (success) {
			this.updateRange();
		}
		return success;
	}
	,
	deregisterSeries: function (series) {
		var success = $.ig.Axis.prototype.deregisterSeries.call(this, series);
		if (success) {
			this.updateRange();
		}
		return success;
	}
	,
	createRenderer: function () {
		var $self = this;
		var labelManager = (function () {
			var $ret = new $.ig.AxisLabelManager();
			$ret.axis($self);
			$ret.labelPositions($self.labelPositions());
			$ret.labelDataContext($self.labelDataContext());
			$ret.targetPanel($self.labelPanel());
			return $ret;
		}());
		if (this.labelSettings() != null) {
			this.labelSettings().registerAxis(this);
		}
		var renderer = new $.ig.NumericAxisRenderer(labelManager);
		renderer.clear(function () {
			var axisGeometry = $self.view().getAxisLinesGeometry();
			var stripsGeometry = $self.view().getStripsGeometry();
			var majorGeometry = $self.view().getMajorLinesGeometry();
			var minorGeometry = $self.view().getMinorLinesGeometry();
			$self.updateLineVisibility();
			$self.clearMarks(axisGeometry);
			$self.clearMarks(stripsGeometry);
			$self.clearMarks(majorGeometry);
			$self.clearMarks(minorGeometry);
		});
		renderer.shouldRender(function (viewport, window) {
			return !window.isEmpty() && !viewport.isEmpty();
		});
		renderer.createRenderingParams(function (viewport, window, effectiveViewportRect, contentViewport) {
			return $self.createRenderingParams(viewport, window, effectiveViewportRect, contentViewport);
		});
		renderer.getLabelForItem(function (item) {
			return $self.getLabel(item);
		});
		return renderer;
	}
	,
	createRenderingParamsInstance: function () {
		return new $.ig.NumericAxisRenderingParameters();
	}
	,
	floatLabelPanel: function () {
	}
	,
	createScalerOverride: function () {
		return null;
	}
	,
	createRenderingParams: function (viewportRect, windowRect, effectiveViewportRect, contentViewport) {
		var parameters = this.createRenderingParamsInstance();
		var axisGeometry = this.view().getAxisLinesGeometry();
		var stripsGeometry = this.view().getStripsGeometry();
		var majorGeometry = this.view().getMajorLinesGeometry();
		var minorGeometry = this.view().getMinorLinesGeometry();
		var axisRenderingInfo = this.view().getAxisLinesPathInfo();
		var majorLinesRenderingInfo = this.view().getMajorLinesPathInfo();
		var minorLinesRenderingInfo = this.view().getMinorLinesPathInfo();
		parameters.axisGeometry(axisGeometry);
		parameters.strips(stripsGeometry);
		parameters.major(majorGeometry);
		parameters.minor(minorGeometry);
		parameters.axisRenderingInfo(axisRenderingInfo);
		parameters.majorRenderingInfo(majorLinesRenderingInfo);
		parameters.minorRenderingInfo(minorLinesRenderingInfo);
		parameters.actualMaximumValue(this.actualMaximumValue());
		parameters.actualMinimumValue(this.actualMinimumValue());
		parameters.hasUserMax(this.hasUserMaximum());
		parameters.tickmarkValues(this.actualTickmarkValues());
		parameters.viewportRect(viewportRect);
		parameters.effectiveViewportRect(effectiveViewportRect);
		parameters.contentViewport(contentViewport);
		parameters.windowRect(windowRect);
		parameters.heuristicResolution(this.resolveHeuristicResolution());
		parameters.hasUserInterval(this.hasUserInterval());
		parameters.interval(this.interval());
		parameters.minorInterval(this.minorInterval());
		parameters.label(this.label());
		if (this.label() == null && this.formatLabel() != null) {
			parameters.label("Format");
		}
		parameters.shouldRenderMinorLines(this.shouldRenderMinorLines());
		return parameters;
	}
	,
	unscaleValue: function (unscaledValue) {
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var sParams = new $.ig.ScalerParams(0, this.seriesViewer().windowRect(), this.viewportRect(), this.isInverted(), effectiveViewportRect);
		return this.getUnscaledValue(unscaledValue, sParams);
	}
	,
	hasUserInterval: function () {
		return !$.ig.util.isNaN(this.interval());
	}
	,
	hasUserMinimum: function () {
		return !$.ig.util.isNaN(this.minimumValue());
	}
	,
	hasUserMaximum: function () {
		return !$.ig.util.isNaN(this.maximumValue());
	}
	,
	updateActualTickmarkValues: function () {
		if (this.tickmarkValues() != null) {
			this.actualTickmarkValues(this.tickmarkValues());
		} else if (this.actualIsLogarithmic()) {
			this.actualTickmarkValues(new $.ig.LogarithmicTickmarkValues());
			this.numericView().bindLogarithmBaseToActualTickmarks();
		} else {
			this.actualTickmarkValues(new $.ig.LinearTickmarkValues());
		}
	}
	,
	tickmarkValues: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericAxisBase.prototype.tickmarkValuesProperty, value);
			return value;
		} else {
			return $.ig.util.cast($.ig.TickmarkValues.prototype.$type, this.getValue($.ig.NumericAxisBase.prototype.tickmarkValuesProperty));
		}
	}
	,
	__actualTickmarkValues: null,
	actualTickmarkValues: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualTickmarkValues;
			var changed = oldValue != value;
			if (changed) {
				this.__actualTickmarkValues = value;
				this.raisePropertyChanged($.ig.NumericAxisBase.prototype._actualTickmarkValuesPropertyName, oldValue, value);
			}
			return value;
		} else {
			if (this.__actualTickmarkValues == null) {
				this.updateActualTickmarkValues();
			}
			return this.__actualTickmarkValues;
		}
	}
	,
	$type: new $.ig.Type('NumericAxisBase', $.ig.Axis.prototype.$type)
}, true);

$.ig.util.defType('StraightNumericAxisBase', 'NumericAxisBase', {
	init: function () {
		$.ig.NumericAxisBase.prototype.init.call(this);
		this.updateActualScaler();
	},
	createView: function () {
		return new $.ig.StraightNumericAxisBaseView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.NumericAxisBase.prototype.onViewCreated.call(this, view);
		this.straightView(view);
	}
	,
	_straightView: null,
	straightView: function (value) {
		if (arguments.length === 1) {
			this._straightView = value;
			return value;
		} else {
			return this._straightView;
		}
	}
	,
	scaleMode: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StraightNumericAxisBase.prototype.scaleModeProperty, $.ig.NumericScaleMode.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StraightNumericAxisBase.prototype.scaleModeProperty));
		}
	}
	,
	scaler: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StraightNumericAxisBase.prototype.scalerProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StraightNumericAxisBase.prototype.scalerProperty);
		}
	}
	,
	onScalerPropertyChanged: function (d, e) {
		var strNumAcxisBase = $.ig.util.cast($.ig.StraightNumericAxisBase.prototype.$type, d);
		strNumAcxisBase.updateActualScaler();
		strNumAcxisBase.raisePropertyChanged($.ig.StraightNumericAxisBase.prototype.scalerPropertyName, e.oldValue(), e.newValue());
	}
	,
	createLinearScaler: function () {
		return null;
	}
	,
	_cachedActualScaler: null,
	actualScaler: function (value) {
		if (arguments.length === 1) {
			var changed = this._cachedActualScaler != value;
			if (changed) {
				var oldValue = this._cachedActualScaler;
				this._cachedActualScaler = value;
				this.raisePropertyChanged($.ig.StraightNumericAxisBase.prototype._actualScalerPropertyName, oldValue, value);
			}
			return value;
		} else {
			if (this._cachedActualScaler == null) {
				this.updateActualScaler();
			}
			return this._cachedActualScaler;
		}
	}
	,
	calculateRange: function (target, minimumValue, maximumValue, isLogarithmic, logarithmBase, actualMinimumValue, actualMaximumValue) {
		var $ret = this.actualScaler().calculateRange(target, minimumValue, maximumValue, actualMinimumValue, actualMaximumValue);
		actualMinimumValue = $ret.p3;
		actualMaximumValue = $ret.p4;
		return {
			p5: actualMinimumValue,
			p6: actualMaximumValue
		};
	}
	,
	suspendPropertyUpdatedAndExecute: function (a) {
		var suspendPropertyUpdatedStored = this.suspendPropertyUpdated();
		this.suspendPropertyUpdated(true);
		a();
		this.suspendPropertyUpdated(suspendPropertyUpdatedStored);
	}
	,
	_suspendPropertyUpdated: false,
	suspendPropertyUpdated: function (value) {
		if (arguments.length === 1) {
			this._suspendPropertyUpdated = value;
			return value;
		} else {
			return this._suspendPropertyUpdated;
		}
	}
	,
	updateActualScaler: function () {
		var scaler = this.scaler();
		if (scaler == null) {
			scaler = this.createScalerOverride();
		}
		this.actualScaler(scaler);
		if (this.actualScaler() == null) {
			throw new $.ig.ArgumentNullException(0, "ActualScaler");
		}
		this.bindScalerProperties();
	}
	,
	bindScalerProperties: function () {
		this.straightView().bindScalerProperties();
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		if (this.suspendPropertyUpdated()) {
			return;
		}
		$.ig.NumericAxisBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.NumericAxisBase.prototype.logarithmBasePropertyName:
				this.updateActualScaler();
				break;
			case $.ig.NumericAxisBase.prototype.isLogarithmicPropertyName:
				this.updateActualScaler();
				break;
			case $.ig.StraightNumericAxisBase.prototype.scaleModePropertyName:
				this.updateActualScaler();
				break;
			case $.ig.StraightNumericAxisBase.prototype.scalerPropertyName:
				this.updateActualScaler();
				break;
			case $.ig.StraightNumericAxisBase.prototype._actualScalerPropertyName:
				this.actualIsLogarithmic($.ig.util.cast($.ig.LogarithmicScaler.prototype.$type, this.actualScaler()) !== null);
				this.bindScalerProperties();
				this.updateRange();
				this.renderAxis1(false);
				break;
			case $.ig.NumericAxisBase.prototype.actualMaximumValuePropertyName:
				this.onActualMaximumValueChanged();
				break;
			case $.ig.NumericAxisBase.prototype.actualMinimumValuePropertyName:
				this.onActualMinimumValueChanged();
				this.updateActualScaler();
				break;
		}
	}
	,
	onActualMinimumValueChanged: function () {
		this.actualScaler().setActualMinimumValue(this.actualMinimumValue());
	}
	,
	onActualMaximumValueChanged: function () {
		this.actualScaler().setActualMaximumValue(this.actualMaximumValue());
	}
	,
	getProportionalAxisValue: function (axisValue, axis) {
		if (axisValue < this.actualMinimumValue()) {
			axisValue = this.actualMinimumValue();
		} else if (axisValue > this.actualMaximumValue()) {
			axisValue = this.actualMaximumValue();
		}
		if ($.ig.util.cast($.ig.NumericXAxis.prototype.$type, axis) !== null) {
			return (axisValue - this.actualMinimumValue()) / (this.actualMaximumValue() - this.actualMinimumValue());
		} else if ($.ig.util.cast($.ig.NumericYAxis.prototype.$type, axis) !== null) {
			return (axisValue - this.actualMaximumValue()) / (this.actualMinimumValue() - this.actualMaximumValue());
		} else {
			return NaN;
		}
	}
	,
	$type: new $.ig.Type('StraightNumericAxisBase', $.ig.NumericAxisBase.prototype.$type)
}, true);

$.ig.util.defType('IScaler', 'Object', {
	$type: new $.ig.Type('IScaler', null)
}, true);

$.ig.util.defType('NumericXAxis', 'StraightNumericAxisBase', {
	createView: function () {
		return new $.ig.NumericXAxisView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.StraightNumericAxisBase.prototype.onViewCreated.call(this, view);
		this.xView(view);
	}
	,
	_xView: null,
	xView: function (value) {
		if (arguments.length === 1) {
			this._xView = value;
			return value;
		} else {
			return this._xView;
		}
	}
	,
	init: function () {
		$.ig.StraightNumericAxisBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.NumericXAxis.prototype.$type);
		this.renderer(this.createRenderer());
	},
	createLabelPanel: function () {
		if (this.useSmartAxis()) {
			return new $.ig.HorizontalSmartAxisLabelPanel();
		} else {
			return new $.ig.HorizontalAxisLabelPanel();
		}
	}
	,
	createRenderer: function () {
		var $self = this;
		var renderer = $.ig.StraightNumericAxisBase.prototype.createRenderer.call(this);
		renderer.labelManager().floatPanelAction(function (crossing) {
			if (($self.labelSettings() == null || $self.labelSettings().visibility() == $.ig.Visibility.prototype.visible) && $self.crossingAxis() != null) {
				$self.labelPanel().crossingValue(crossing);
				if ($self.labelSettings() != null && ($self.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideTop || $self.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideBottom)) {
					$self.seriesViewer().invalidatePanels();
				}
			}
		});
		renderer.line(function (p, g, value) {
			$self.verticalLine(g, value, p.viewportRect(), p.currentRenderingInfo(), false);
		});
		renderer.strip(function (p, g, start, end) {
			$self.verticalStrip(g, start, end, p.viewportRect());
		});
		renderer.scaling(function (p, unscaled) {
			var effectiveViewport = p.effectiveViewportRect();
			var sParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), $self.isInvertedCached(), effectiveViewport);
			return $self.getScaledValue(unscaled, sParams);
		});
		renderer.shouldRenderLines(function (p, value) {
			return true;
		});
		renderer.axisLine(function (p) {
			$self.horizontalLine(p.axisGeometry(), p.crossingValue(), p.viewportRect(), p.axisRenderingInfo(), true);
		});
		renderer.determineCrossingValue(function (p) {
			p.crossingValue(p.viewportRect().bottom());
			if ($self.crossingAxis() != null && $self.crossingAxis().seriesViewer() != null) {
				var crossingValue = p.crossingValue();
				var relativeCrossingValue = p.relativeCrossingValue();
				var $ret = $self.scaleCrossingValue(crossingValue, relativeCrossingValue, p.windowRect(), p.viewportRect(), p.effectiveViewportRect(), p.viewportRect().top(), p.viewportRect().bottom());
				crossingValue = $ret.p0;
				relativeCrossingValue = $ret.p1;
				p.crossingValue(crossingValue);
				p.relativeCrossingValue(relativeCrossingValue);
			}
		});
		renderer.shouldRenderLabel(function (p, value, last) {
			var pixelValue = Math.round(value);
			return pixelValue >= Math.floor(p.viewportRect().left()) && pixelValue <= Math.ceil(p.viewportRect().right());
		});
		return renderer;
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (this._cachedActualScaler != null) {
			return this._cachedActualScaler.getScaledValue(unscaledValue, p);
		}
		return this.actualScaler().getScaledValue(unscaledValue, p);
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		if (this._cachedActualScaler != null) {
			return this._cachedActualScaler.getUnscaledValue(scaledValue, p);
		}
		return this.actualScaler().getUnscaledValue(scaledValue, p);
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
		if (this._cachedActualScaler != null) {
			this._cachedActualScaler.getScaledValueList(unscaledValues, startIndex, count, p);
			return;
		}
		this.actualScaler().getScaledValueList(unscaledValues, startIndex, count, p);
	}
	,
	getUnscaledValueList: function (scaledValues, startIndex, count, p) {
		if (this._cachedActualScaler != null) {
			this._cachedActualScaler.getUnscaledValueList(scaledValues, startIndex, count, p);
			return;
		}
		this.actualScaler().getUnscaledValueList(scaledValues, startIndex, count, p);
	}
	,
	scrollRangeIntoView: function (minimum, maximum) {
		if (minimum == NaN || maximum == NaN) {
			return;
		}
		var proportionMin = this.getProportionalAxisValue(minimum, this);
		var proportionMax = this.getProportionalAxisValue(maximum, this);
		if (proportionMin == NaN || proportionMax == NaN) {
			return;
		}
		this.seriesViewer().windowRect(new $.ig.Rect(0, proportionMin, this.seriesViewer().windowRect().y(), proportionMax - proportionMin, this.seriesViewer().windowRect().height()));
	}
	,
	createRenderingParams: function (viewportRect, windowRect, effectiveViewportRect, contentViewport) {
		var resolvedViewportRect = contentViewport;
		var renderingParams = $.ig.StraightNumericAxisBase.prototype.createRenderingParams.call(this, viewportRect, windowRect, effectiveViewportRect, contentViewport);
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var visibleMinimum = NaN;
		var visibleMaximum = NaN;
		if (!this.isInverted() && windowRect.right() == 1) {
			visibleMaximum = this.actualMaximumValue();
		} else if (this.isInverted() && windowRect.left() == 0) {
			visibleMinimum = this.actualMaximumValue();
		}
		if ($.ig.util.isNaN(visibleMinimum)) {
			visibleMinimum = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
		}
		if ($.ig.util.isNaN(visibleMaximum)) {
			visibleMaximum = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
		}
		var trueVisibleMinimum = Math.min(visibleMinimum, visibleMaximum);
		var trueVisibleMaximum = Math.max(visibleMinimum, visibleMaximum);
		this.actualVisibleMinimumValue(trueVisibleMinimum);
		this.actualVisibleMaximumValue(trueVisibleMaximum);
		renderingParams.rangeInfos().add((function () {
			var $ret = new $.ig.RangeInfo();
			$ret.visibleMinimum(trueVisibleMinimum);
			$ret.visibleMaximum(trueVisibleMaximum);
			$ret.resolution(resolvedViewportRect.width());
			return $ret;
		}()));
		return renderingParams;
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.StraightNumericAxisBase.prototype.renderAxisOverride.call(this, animate);
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = !windowRect.isEmpty() ? this.viewportRect() : $.ig.Rect.prototype.empty();
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var contentViewport = this.getContentViewport();
		var renderParams = this.renderer().render(animate, viewportRect, windowRect, effectiveViewportRect, contentViewport);
		if (renderParams != null) {
			this.actualInterval(renderParams.tickmarkValues().interval());
			this.actualMinorInterval(renderParams.tickmarkValues().actualMinorInterval());
		}
	}
	,
	viewportChangedOverride: function (oldRect, newRect) {
		$.ig.StraightNumericAxisBase.prototype.viewportChangedOverride.call(this, oldRect, newRect);
		if (newRect.height() != oldRect.height()) {
			this.updateRange();
		}
	}
	,
	orientation: function () {
		return $.ig.AxisOrientation.prototype.horizontal;
	}
	,
	createScalerOverride: function () {
		if (this.isLogarithmic()) {
			return new $.ig.HorizontalLogarithmicScaler();
		}
		switch (this.scaleMode()) {
			case $.ig.NumericScaleMode.prototype.linear: return new $.ig.HorizontalLinearScaler();
			case $.ig.NumericScaleMode.prototype.logarithmic: return new $.ig.HorizontalLogarithmicScaler();
		}
		return null;
	}
	,
	$type: new $.ig.Type('NumericXAxis', $.ig.StraightNumericAxisBase.prototype.$type, [$.ig.IScaler.prototype.$type])
}, true);

$.ig.util.defType('NumericYAxis', 'StraightNumericAxisBase', {
	createView: function () {
		return new $.ig.NumericYAxisView(this);
	}
	,
	init: function () {
		$.ig.StraightNumericAxisBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.NumericYAxis.prototype.$type);
		this.renderer(this.createRenderer());
	},
	createLabelPanel: function () {
		return new $.ig.VerticalAxisLabelPanel();
	}
	,
	isVertical: function () {
		return true;
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (this._cachedActualScaler != null) {
			return this._cachedActualScaler.getScaledValue(unscaledValue, p);
		}
		return this.actualScaler().getScaledValue(unscaledValue, p);
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
		if (this._cachedActualScaler != null) {
			this._cachedActualScaler.getScaledValueList(unscaledValues, startIndex, count, p);
			return;
		}
		this.actualScaler().getScaledValueList(unscaledValues, startIndex, count, p);
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		if (this._cachedActualScaler != null) {
			return this._cachedActualScaler.getUnscaledValue(scaledValue, p);
		}
		return this.actualScaler().getUnscaledValue(scaledValue, p);
	}
	,
	getUnscaledValueList: function (scaledValues, startIndex, count, p) {
		if (this._cachedActualScaler != null) {
			this._cachedActualScaler.getUnscaledValueList(scaledValues, startIndex, count, p);
			return;
		}
		this.actualScaler().getUnscaledValueList(scaledValues, startIndex, count, p);
	}
	,
	scrollRangeIntoView: function (minimum, maximum) {
		if (minimum == NaN || maximum == NaN) {
			return;
		}
		var proportionMin = this.getProportionalAxisValue(minimum, this);
		var proportionMax = this.getProportionalAxisValue(maximum, this);
		if (proportionMin == NaN || proportionMax == NaN) {
			return;
		}
		this.seriesViewer().windowRect(new $.ig.Rect(0, this.seriesViewer().windowRect().x(), proportionMax, this.seriesViewer().windowRect().width(), proportionMin - proportionMax));
	}
	,
	createRenderer: function () {
		var $self = this;
		var renderer = $.ig.StraightNumericAxisBase.prototype.createRenderer.call(this);
		renderer.labelManager().floatPanelAction(function (crossing) {
			if ($self.labelSettings() == null || $self.labelSettings().visibility() == $.ig.Visibility.prototype.visible) {
				$self.labelPanel().crossingValue(crossing);
				if ($self.labelSettings() != null && ($self.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideRight || $self.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideLeft)) {
					$self.seriesViewer().invalidatePanels();
				}
			}
		});
		renderer.line(function (p, g, value) {
			$self.horizontalLine(g, value, p.viewportRect(), p.currentRenderingInfo(), false);
		});
		renderer.strip(function (p, g, start, end) {
			$self.horizontalStrip(g, start, end, p.viewportRect());
		});
		renderer.scaling(function (p, unscaled) {
			var effectiveViewport = p.effectiveViewportRect();
			var sParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), $self.isInvertedCached(), effectiveViewport);
			return $self.getScaledValue(unscaled, sParams);
		});
		renderer.shouldRenderLines(function (p, value) {
			return true;
		});
		renderer.axisLine(function (p) {
			$self.verticalLine(p.axisGeometry(), p.crossingValue(), p.viewportRect(), p.axisRenderingInfo(), true);
		});
		renderer.determineCrossingValue(function (p) {
			p.crossingValue(p.viewportRect().left());
			var effectiveViewport = p.effectiveViewportRect();
			var sParams2 = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), $self.isInvertedCached(), effectiveViewport);
			if ($self.crossingAxis() != null && $self.crossingAxis().seriesViewer() != null) {
				var crossingValue = p.crossingValue();
				var relativeCrossingValue = p.relativeCrossingValue();
				var $ret = $self.scaleCrossingValue(crossingValue, relativeCrossingValue, p.windowRect(), p.viewportRect(), p.effectiveViewportRect(), p.viewportRect().left(), p.viewportRect().right());
				crossingValue = $ret.p0;
				relativeCrossingValue = $ret.p1;
				p.crossingValue(crossingValue);
				p.relativeCrossingValue(relativeCrossingValue);
			}
		});
		renderer.shouldRenderLabel(function (p, value, last) {
			var pixelValue = Math.round(value);
			return pixelValue >= Math.floor(p.viewportRect().top()) && pixelValue <= Math.ceil(p.viewportRect().bottom());
		});
		return renderer;
	}
	,
	createRenderingParams: function (viewportRect, windowRect, effectiveViewportRect, contentViewport) {
		var resolvedViewportRect = contentViewport;
		var renderingParams = $.ig.StraightNumericAxisBase.prototype.createRenderingParams.call(this, viewportRect, windowRect, effectiveViewportRect, contentViewport);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var visibleMinimum = NaN;
		var visibleMaximum = NaN;
		if (!this.isInverted() && windowRect.top() == 0) {
			visibleMaximum = this.actualMaximumValue();
		} else if (this.isInverted() && windowRect.bottom() == 1) {
			visibleMinimum = this.actualMaximumValue();
		}
		if ($.ig.util.isNaN(visibleMinimum)) {
			visibleMinimum = this.getUnscaledValue(resolvedViewportRect.bottom(), yParams);
		}
		if ($.ig.util.isNaN(visibleMaximum)) {
			visibleMaximum = this.getUnscaledValue(resolvedViewportRect.top(), yParams);
		}
		var trueVisibleMinimum = Math.min(visibleMinimum, visibleMaximum);
		var trueVisibleMaximum = Math.max(visibleMinimum, visibleMaximum);
		this.actualVisibleMinimumValue(trueVisibleMinimum);
		this.actualVisibleMaximumValue(trueVisibleMaximum);
		var newRangeInfo = (function () {
			var $ret = new $.ig.RangeInfo();
			$ret.visibleMinimum(trueVisibleMinimum);
			$ret.visibleMaximum(trueVisibleMaximum);
			$ret.resolution(resolvedViewportRect.height());
			return $ret;
		}());
		renderingParams.rangeInfos().add(newRangeInfo);
		return renderingParams;
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.StraightNumericAxisBase.prototype.renderAxisOverride.call(this, animate);
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.viewportRect();
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var contentViewport = this.getContentViewport();
		var renderParams = this.renderer().render(animate, viewportRect, windowRect, effectiveViewportRect, contentViewport);
		if (renderParams != null) {
			this.actualInterval(renderParams.tickmarkValues().interval());
			this.actualMinorInterval(renderParams.tickmarkValues().actualMinorInterval());
		}
	}
	,
	viewportChangedOverride: function (oldRect, newRect) {
		$.ig.StraightNumericAxisBase.prototype.viewportChangedOverride.call(this, oldRect, newRect);
		if (newRect.height() != oldRect.height()) {
			this.updateRange();
		}
	}
	,
	orientation: function () {
		return $.ig.AxisOrientation.prototype.vertical;
	}
	,
	createScalerOverride: function () {
		if (this.isLogarithmic()) {
			return new $.ig.VerticalLogarithmicScaler();
		}
		switch (this.scaleMode()) {
			case $.ig.NumericScaleMode.prototype.linear: return new $.ig.VerticalLinearScaler();
			case $.ig.NumericScaleMode.prototype.logarithmic: return new $.ig.VerticalLogarithmicScaler();
		}
		return null;
	}
	,
	createLinearScaler: function () {
		return new $.ig.VerticalLinearScaler();
	}
	,
	$type: new $.ig.Type('NumericYAxis', $.ig.StraightNumericAxisBase.prototype.$type, [$.ig.IScaler.prototype.$type])
}, true);

$.ig.util.defType('LegendTemplates', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	defaultLegendItemRender: function (info) {
		var cont = info.data;
		var s = cont.series();
		var template = s.legendItemBadgeTemplate();
		var title = s.title();
		if (title == null) {
			title = "Series Title";
		}
		$.ig.LegendTemplates.prototype.coreLegendItemRender(info.context, info.xPosition, info.yPosition, info.availableWidth, info.availableHeight, info.data, title.toString(), template, info.passInfo);
	}
	,
	defaultDiscreteLegendItemRender: function (info) {
		var cont = info.data;
		var s = cont.series();
		var template = s.legendItemBadgeTemplate();
		var title = cont.itemLabel();
		if (title == null) {
			title = "Series Item";
		}
		$.ig.LegendTemplates.prototype.coreLegendItemRender(info.context, info.xPosition, info.yPosition, info.availableWidth, info.availableHeight, info.data, title.toString(), template, info.passInfo);
	}
	,
	pieLegendItemRender: function (info) {
		var cont = info.data;
		var s = cont.series();
		var template = s.legendItemBadgeTemplate();
		var title = cont.itemLabel();
		if (title == null) {
			title = "Pie Item";
		}
		$.ig.LegendTemplates.prototype.coreLegendItemRender(info.context, info.xPosition, info.yPosition, info.availableWidth, info.availableHeight, info.data, title.toString(), template, info.passInfo);
	}
	,
	doughnutLegendItemRender: function (info) {
		var cont = info.data;
		var s = cont.series();
		var template = s.legendItemBadgeTemplate();
		var title = cont.itemLabel();
		if (title == null) {
			title = "Doughnut Item";
		}
		$.ig.LegendTemplates.prototype.coreLegendItemRender(info.context, info.xPosition, info.yPosition, info.availableWidth, info.availableHeight, info.data, title.toString(), template, info.passInfo);
	}
	,
	funnelLegendItemRender: function (info) {
		var cont = info.data;
		var s = cont.series();
		var template = s.legendItemBadgeTemplate();
		var title = cont.itemLabel();
		if (title == null) {
			title = "Funnel Item";
		}
		$.ig.LegendTemplates.prototype.coreLegendItemRender(info.context, info.xPosition, info.yPosition, info.availableWidth, info.availableHeight, info.data, title.toString(), template, info.passInfo);
	}
	,
	coreLegendItemRender: function (context, xPosition, yPosition, availableWidth, availableHeight, data, title, template, passInfo) {
		var obj = context;
		var cont = data;
		if (cont != null && cont.series() != null) {
			if (template != null) {
				var badgeDom = $("<canvas></canvas>");
				badgeDom.attr("width", "18");
				badgeDom.attr("height", "16");
				var badgeCellDom = $("<td class='ui-legend-item-badge'></td>");
				badgeCellDom.append(badgeDom);
				var badgeContext = (badgeDom[0]).getContext("2d");
				var measureInfo = new $.ig.DataTemplateMeasureInfo();
				measureInfo.passInfo = passInfo;
				measureInfo.context = badgeContext;
				measureInfo.width = 18;
				measureInfo.height = 16;
				measureInfo.data = cont;
				template.measure()(measureInfo);
				var renderInfo = new $.ig.DataTemplateRenderInfo();
				renderInfo.availableWidth = $.ig.util.isNaN(measureInfo.width) ? 18 : Math.min(measureInfo.width, 18);
				renderInfo.availableHeight = $.ig.util.isNaN(measureInfo.height) ? 16 : Math.min(measureInfo.height, 16);
				renderInfo.passInfo = passInfo;
				renderInfo.context = badgeContext;
				renderInfo.data = cont;
				renderInfo.xPosition = 0;
				renderInfo.yPosition = 0;
				template.render()(renderInfo);
				obj.append(badgeCellDom);
			}
			var titleDom = $("<td class='ui-legend-item-text'><span>" + title + "</span></td>");
			obj.append(titleDom);
		}
	}
	,
	pieBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		var slice = dc.slice();
		var pieChart = dc.series();
		var itemBrush = pieChart.view().getActualBackground(slice);
		var itemOutline = pieChart.view().getActualOutline(slice);
		var rect = new $.ig.Rectangle();
		rect.width(info.availableWidth - (slice.strokeThickness() * 2) - 2);
		rect.height(info.availableHeight - (slice.strokeThickness() * 2));
		rect.canvasLeft(slice.strokeThickness() + 1);
		rect.canvasTop(slice.strokeThickness());
		rect.strokeThickness(slice.strokeThickness());
		rect.__fill = itemBrush;
		rect.__stroke = itemOutline;
		renderCont.renderRectangle(rect);
	}
	,
	doughnutBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		var slice = dc.slice();
		var pieChart = (dc.series()).ring().ringControl()._arcs.item(0);
		var itemBrush = pieChart.view().getActualBackground(slice);
		var itemOutline = pieChart.view().getActualOutline(slice);
		var rect = new $.ig.Rectangle();
		rect.width(info.availableWidth - (slice.strokeThickness() * 2) - 2);
		rect.height(info.availableHeight - (slice.strokeThickness() * 2));
		rect.canvasLeft(slice.strokeThickness() + 1);
		rect.canvasTop(slice.strokeThickness());
		rect.strokeThickness(slice.strokeThickness());
		rect.__fill = itemBrush;
		rect.__stroke = itemOutline;
		renderCont.renderRectangle(rect);
	}
	,
	funnelBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		}
		if (dc.itemOutline() != null) {
			dc.outline(dc.itemOutline());
		}
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		var strokeThickness = dc.thickness();
		if ($.ig.util.isNaN(strokeThickness)) {
			strokeThickness = 1;
		}
		var rect = new $.ig.Rectangle();
		rect.width(info.availableWidth - (strokeThickness * 2) - 2);
		rect.height(info.availableHeight - (strokeThickness * 2));
		rect.canvasLeft(strokeThickness + 1);
		rect.canvasTop(strokeThickness);
		rect.strokeThickness(strokeThickness);
		rect.__fill = dc.actualItemBrush();
		rect.__stroke = dc.outline();
		renderCont.renderRectangle(rect);
	}
	,
	lineBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var s = dc.series();
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			dc.actualItemBrush(s.actualBrush());
		}
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		var line = new $.ig.Line();
		line.x1(0);
		line.y1(info.availableHeight / 2);
		line.x2(info.availableWidth);
		line.y2(info.availableHeight / 2);
		line.strokeThickness(s.thickness());
		line.__stroke = dc.actualItemBrush();
		line.strokeDashArray(s.dashArray());
		renderCont.renderLine(line);
		var m = $.ig.util.cast($.ig.MarkerSeries.prototype.$type, dc.series());
		if (m != null && m.actualMarkerTemplate() != null && m.actualMarkerTemplate().render() != null) {
			dc.outline(m.actualMarkerOutline());
			dc.thickness($.ig.MarkerSeries.prototype.markerThicknessDefault);
			$.ig.LegendTemplates.prototype.renderMarkerTemplate(m.actualMarkerTemplate(), info);
		}
	}
	,
	renderMarkerTemplate: function (template, info) {
		var measureInfo = new $.ig.DataTemplateMeasureInfo();
		measureInfo.passInfo = info.passInfo;
		measureInfo.width = 11;
		measureInfo.height = 11;
		measureInfo.data = info.data;
		measureInfo.context = info.context;
		measureInfo.renderContext = info.renderContext;
		var dc = info.data;
		var oldActualFill = dc.actualItemBrush();
		var oldFill = dc.itemBrush();
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			if (dc.itemBrush() == null) {
				var ser = dc.series();
				dc.actualItemBrush(ser.getActualMarkerBrush());
			}
		}
		if (template.measure() != null) {
			template.measure()(measureInfo);
			if ($.ig.util.isNaN(measureInfo.width) || Number.isInfinity(measureInfo.width) || measureInfo.width > 11) {
				measureInfo.width = 11;
			}
			if ($.ig.util.isNaN(measureInfo.height) || Number.isInfinity(measureInfo.height) || measureInfo.height > 11) {
				measureInfo.height = 11;
			}
		}
		var renderInfo = new $.ig.DataTemplateRenderInfo();
		renderInfo.passInfo = info.passInfo;
		renderInfo.availableWidth = measureInfo.width;
		renderInfo.availableHeight = measureInfo.height;
		renderInfo.xPosition = info.availableWidth / 2;
		renderInfo.yPosition = info.availableHeight / 2;
		renderInfo.data = info.data;
		renderInfo.context = info.context;
		renderInfo.renderContext = info.renderContext;
		template.render()(renderInfo);
		dc.itemBrush(oldFill);
		dc.actualItemBrush(oldActualFill);
	}
	,
	updateItemBrush: function (dc) {
		var s = null;
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			s = dc.series();
		}
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			if (s != null) {
				dc.actualItemBrush(s.actualBrush());
			} else {
				dc.actualItemBrush(dc.itemBrush());
			}
		}
	}
	,
	defaultLegendItemMeasure: function (info) {
	}
	,
	defaultDiscreteLegendItemMeasure: function (info) {
	}
	,
	legendItemBadgeMeasure: function (info) {
	}
	,
	rectBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		$.ig.LegendTemplates.prototype.updateItemBrush(dc);
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		var p = new $.ig.Path();
		var pg = new $.ig.PathGeometry();
		var f = new $.ig.PathFigure();
		f.__isFilled = true;
		f.__startPoint = { __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f.__segments.add(new $.ig.LineSegment(0, { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 11, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 16, __y: 9, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 5, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		pg.figures().add(f);
		p.data(pg);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p.strokeThickness((dc.series()).thickness());
			p.__stroke = (dc.series()).actualOutline();
			p.strokeDashArray((dc.series()).dashArray());
		}
		p.__fill = dc.actualItemBrush();
		renderCont.renderPath(p);
		var m = $.ig.util.cast($.ig.MarkerSeries.prototype.$type, dc.series());
		if (m != null && m.actualMarkerTemplate() != null && m.actualMarkerTemplate().render() != null) {
			if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
				dc.outline((dc.series()).actualOutline());
			}
			$.ig.LegendTemplates.prototype.renderMarkerTemplate(m.actualMarkerTemplate(), info);
		}
	}
	,
	markerlessRectBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		$.ig.LegendTemplates.prototype.updateItemBrush(dc);
		var p = new $.ig.Path();
		var pg = new $.ig.PathGeometry();
		var f = new $.ig.PathFigure();
		f.__isFilled = true;
		f.__startPoint = { __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f.__segments.add(new $.ig.LineSegment(0, { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 11, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 16, __y: 9, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 5, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		pg.figures().add(f);
		p.data(pg);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p.strokeThickness((dc.series()).thickness());
			p.__stroke = (dc.series()).actualOutline();
			p.strokeDashArray((dc.series()).dashArray());
		}
		p.__fill = dc.actualItemBrush();
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		renderCont.renderPath(p);
	}
	,
	markerlessLineBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var s = dc.series();
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			dc.actualItemBrush(s.actualBrush());
		}
		var line = new $.ig.Line();
		line.x1(0);
		line.y1(info.availableHeight / 2);
		line.x2(info.availableWidth);
		line.y2(info.availableHeight / 2);
		line.strokeThickness(s.thickness());
		line.strokeDashArray(s.dashArray());
		line.__stroke = dc.actualItemBrush();
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		renderCont.renderLine(line);
	}
	,
	pointBadgeTemplate: function (info) {
		var dc = info.data;
		$.ig.LegendTemplates.prototype.updateItemBrush(dc);
		var m = $.ig.util.cast($.ig.MarkerSeries.prototype.$type, dc.series());
		if (m != null && m.actualMarkerTemplate() != null && m.actualMarkerTemplate().render() != null) {
			if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
				dc.outline((dc.series()).actualOutline());
			}
			$.ig.LegendTemplates.prototype.renderMarkerTemplate(m.actualMarkerTemplate(), info);
		}
	}
	,
	positiveNegativeBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var s = dc.series();
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			dc.actualItemBrush(s.actualBrush());
		}
		var p = new $.ig.Path();
		var pg = new $.ig.PathGeometry();
		var f = new $.ig.PathFigure();
		f.__isFilled = true;
		f.__startPoint = { __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f.__segments.add(new $.ig.LineSegment(0, { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 5, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		pg.figures().add(f);
		p.data(pg);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p.strokeThickness((dc.series()).thickness());
			p.__stroke = (dc.series()).actualOutline();
			p.strokeDashArray((dc.series()).dashArray());
		}
		p.__fill = dc.actualItemBrush();
		var p2 = new $.ig.Path();
		var pg2 = new $.ig.PathGeometry();
		var f2 = new $.ig.PathFigure();
		f2.__isFilled = true;
		f2.__startPoint = { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 11, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f2.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 16, __y: 9, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		pg2.figures().add(f2);
		p2.data(pg2);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p2.strokeThickness((dc.series()).thickness());
			p2.__stroke = (dc.series()).actualOutline();
		}
		if ($.ig.util.cast($.ig.WaterfallSeries.prototype.$type, dc.series()) !== null) {
			p2.__fill = (dc.series()).negativeBrush();
		}
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		renderCont.renderPath(p);
		renderCont.renderPath(p2);
		var m = $.ig.util.cast($.ig.MarkerSeries.prototype.$type, dc.series());
		if (m != null && m.actualMarkerTemplate() != null && m.actualMarkerTemplate().render() != null) {
			if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
				dc.outline((dc.series()).actualOutline());
			}
			$.ig.LegendTemplates.prototype.renderMarkerTemplate(m.actualMarkerTemplate(), info);
		}
	}
	,
	financialBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var s = dc.series();
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			dc.actualItemBrush(s.actualBrush());
		}
		var p = new $.ig.Path();
		var pg = new $.ig.PathGeometry();
		var f = new $.ig.PathFigure();
		f.__isFilled = true;
		f.__startPoint = { __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f.__segments.add(new $.ig.LineSegment(0, { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 5, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		pg.figures().add(f);
		p.data(pg);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p.strokeThickness((dc.series()).thickness());
			p.__stroke = (dc.series()).actualOutline();
			p.strokeDashArray((dc.series()).dashArray());
		}
		p.__fill = dc.actualItemBrush();
		var p2 = new $.ig.Path();
		var pg2 = new $.ig.PathGeometry();
		var f2 = new $.ig.PathFigure();
		f2.__isFilled = true;
		f2.__startPoint = { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 11, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f2.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 16, __y: 9, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		pg2.figures().add(f2);
		p2.data(pg2);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p2.strokeThickness((dc.series()).thickness());
			p2.__stroke = (dc.series()).actualOutline();
			p2.strokeDashArray((dc.series()).dashArray());
		}
		if ($.ig.util.cast($.ig.FinancialSeries.prototype.$type, dc.series()) !== null) {
			p2.__fill = (dc.series()).negativeBrush();
		}
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		renderCont.renderPath(p);
		renderCont.renderPath(p2);
	}
	,
	financialIndicatorBadgeTemplate: function (info) {
		var dc = info.data;
		var cont = info.context;
		var s = dc.series();
		if (dc.itemBrush() != null) {
			dc.actualItemBrush(dc.itemBrush());
		} else {
			dc.actualItemBrush(s.actualBrush());
		}
		var p = new $.ig.Path();
		var pg = new $.ig.PathGeometry();
		var f = new $.ig.PathFigure();
		f.__isFilled = true;
		f.__startPoint = { __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f.__segments.add(new $.ig.LineSegment(0, { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add(new $.ig.LineSegment(0, { __x: 5, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 0, __y: 5, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		pg.figures().add(f);
		p.data(pg);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p.strokeThickness((dc.series()).thickness());
			p.__stroke = (dc.series()).actualOutline();
			p.strokeDashArray((dc.series()).dashArray());
		}
		p.__fill = dc.actualItemBrush();
		var p2 = new $.ig.Path();
		var pg2 = new $.ig.PathGeometry();
		var f2 = new $.ig.PathFigure();
		f2.__isFilled = true;
		f2.__startPoint = { __x: 0, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 11, __y: 14, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		f2.__segments.add((function () {
			var $ret = new $.ig.ArcSegment();
			$ret.size(new $.ig.Size(1, 5, 5));
			$ret.isLargeArc(false);
			$ret.point({ __x: 16, __y: 9, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			return $ret;
		}()));
		f2.__segments.add(new $.ig.LineSegment(0, { __x: 16, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		pg2.figures().add(f2);
		p2.data(pg2);
		if ($.ig.util.cast($.ig.Series.prototype.$type, dc.series()) !== null) {
			p2.strokeThickness((dc.series()).thickness());
			p2.__stroke = (dc.series()).actualOutline();
			p2.strokeDashArray((dc.series()).dashArray());
		}
		if ($.ig.util.cast($.ig.FinancialSeries.prototype.$type, dc.series()) !== null) {
			p2.__fill = (dc.series()).negativeBrush();
		}
		var renderCont = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), cont);
		renderCont.renderPath(p);
		renderCont.renderPath(p2);
	}
	,
	$type: new $.ig.Type('LegendTemplates', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesViewerSurfaceViewer', 'DependencyObject', {
	init: function (model, view) {
		this.__isDirty = true;
		$.ig.DependencyObject.prototype.init.call(this);
		if (model == null || view == null) {
			throw new $.ig.ArgumentNullException(0, "model");
		}
		this.model(model);
		var $t = this.model();
		$t.windowRectChanged = $.ig.Delegate.prototype.combine($t.windowRectChanged, this.model_WindowRectChanged.runOn(this));
		this.view(view);
		this.previewCanvas(new $.ig.Canvas());
		this.updateZoomLevelDisplayText();
	},
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	_suspendWindowRectChanges: false,
	suspendWindowRectChanges: function (value) {
		if (arguments.length === 1) {
			this._suspendWindowRectChanges = value;
			return value;
		} else {
			return this._suspendWindowRectChanges;
		}
	}
	,
	model_WindowRectChanged: function (sender, e) {
		var suspendWindowRectChangesStored = this.suspendWindowRectChanges();
		this.suspendWindowRectChanges(true);
		this.zoomLevel(1 - Math.min(e.newRect().height(), e.newRect().width()));
		this.suspendWindowRectChanges(suspendWindowRectChangesStored);
	}
	,
	__model: null,
	model: function (value) {
		if (arguments.length === 1) {
			if (this.__model != null) {
				var asIPropChange = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, this.__model);
				if (asIPropChange != null) {
					asIPropChange.propertyChanged = $.ig.Delegate.prototype.remove(asIPropChange.propertyChanged, this.model_PropertyChanged.runOn(this));
				}
			}
			this.__model = value;
			if (this.__model != null) {
				var asIPropChange1 = $.ig.util.cast($.ig.INotifyPropertyChanged.prototype.$type, this.__model);
				if (asIPropChange1 != null) {
					asIPropChange1.propertyChanged = $.ig.Delegate.prototype.combine(asIPropChange1.propertyChanged, this.model_PropertyChanged.runOn(this));
				}
			}
			return value;
		} else {
			return this.__model;
		}
	}
	,
	model_PropertyChanged: function (sender, e) {
		if (e.propertyName() == "DefaultInteraction") {
			this.__defaultInteraction = this.model().defaultInteraction();
			this.onPropertyChanged(e.propertyName(), $.ig.InteractionState.prototype.getBox(this.defaultInteraction()), $.ig.InteractionState.prototype.getBox(this.defaultInteraction()));
		}
	}
	,
	_previewCanvas: null,
	previewCanvas: function (value) {
		if (arguments.length === 1) {
			this._previewCanvas = value;
			return value;
		} else {
			return this._previewCanvas;
		}
	}
	,
	zoomTo100: function () {
		this.model().windowRect($.ig.XamDataChart.prototype.standardRect);
	}
	,
	scaleToFit: function () {
		this.model().windowRect($.ig.XamDataChart.prototype.standardRect);
	}
	,
	renderPreview: function () {
		if (!this.isDirty()) {
			return;
		}
		var surface = new $.ig.RenderSurface();
		surface.surface(this.view().overviewPlusDetailPane().view().thumbnailContext());
		if (surface.surface() != null && surface.surface().shouldRender()) {
			var thumbnailSize = this.view().overviewPlusDetailPane().view().thumbnailSize();
			this.view().getThumbnail(thumbnailSize.width(), thumbnailSize.height(), surface);
		}
		this.isDirty(false);
	}
	,
	worldRect: function () {
		return $.ig.XamDataChart.prototype.standardRect;
	}
	,
	viewportRect: function () {
		return this.model().viewportRect();
	}
	,
	minimumZoomLevel: function () {
		return 0;
	}
	,
	maximumZoomLevel: function () {
		if (this.model().windowRectMinWidth() == 0.0001) {
			return 0.9;
		} else {
			return 1 - this.model().windowRectMinWidth();
		}
	}
	,
	__isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this.__isDirty = value;
			return value;
		} else {
			return this.__isDirty;
		}
	}
	,
	isIsoScaled: function () {
		if (this.__model == null) {
			return false;
		}
		return this.__model.isIsoScaled();
	}
	,
	zoomLevel: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewerSurfaceViewer.prototype.zoomLevelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewerSurfaceViewer.prototype.zoomLevelProperty);
		}
	}
	,
	onPropertyChanged: function (propertyName, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
		switch (propertyName) {
			case $.ig.SeriesViewerSurfaceViewer.prototype._zoomLevelPropertyName:
				if (newValue - this.minimumZoomLevel() < -1E-05) {
					this.zoomLevel(this.minimumZoomLevel());
					return;
				}
				if (newValue - this.maximumZoomLevel() > 0.0001) {
					this.zoomLevel(this.maximumZoomLevel());
					return;
				}
				var updatingSliderRanges = this.model() != null && this.model().overviewPlusDetailPane() != null && this.model().overviewPlusDetailPane().updatingSliderRanges();
				if (!this.suspendWindowRectChanges() && !updatingSliderRanges) {
					var windowSize = 1 - this.zoomLevel();
					var center = $.ig.RectUtil.prototype.getCenter(this.model().actualWindowRect());
					var newRect = new $.ig.Rect(0, center.__x - windowSize / 2, center.__y - windowSize / 2, windowSize, windowSize);
					this.model().windowRect($.ig.SeriesViewerSurfaceViewer.prototype.changeRect(this.model().windowRect(), newRect, this.model().isZoomingHorizontallyEnabled(), this.model().isZoomingVerticallyEnabled(), this.worldRect()));
				}
				this.updateZoomLevelDisplayText();
				if (this.model().overviewPlusDetailPane() != null) {
					this.model().overviewPlusDetailPane().pushZoomLevel(this.zoomLevel());
				}
				break;
		}
	}
	,
	updateZoomLevelDisplayText: function () {
		var zoomLevelDisplay = Math.round(100 * (1 / (1 - this.zoomLevel())));
		if (zoomLevelDisplay <= 1000) {
			this.zoomLevelDisplayText(zoomLevelDisplay.toString());
		} else {
			this.zoomLevelDisplayText("> 1000");
		}
	}
	,
	__zoomLevelDisplayText: null,
	zoomLevelDisplayText: function (value) {
		if (arguments.length === 1) {
			var changed = this.zoomLevelDisplayText() != value;
			if (changed) {
				var oldValue = this.zoomLevelDisplayText();
				this.__zoomLevelDisplayText = value;
				this.onPropertyChanged($.ig.SeriesViewerSurfaceViewer.prototype._zoomLevelDisplayTextPropertyName, oldValue, value);
			}
			return value;
		} else {
			return this.__zoomLevelDisplayText;
		}
	}
	,
	__defaultInteraction: 0,
	defaultInteraction: function (value) {
		if (arguments.length === 1) {
			this.__defaultInteraction = value;
			this.model().defaultInteraction(value);
			return value;
		} else {
			return this.__defaultInteraction;
		}
	}
	,
	propertyChanged: null,
	changeRect: function (oldRect, newRect, horizontalZoomable, verticalZoomable, worldRect) {
		var left, top, width, height;
		if (horizontalZoomable) {
			left = newRect.left();
			width = newRect.width();
		} else {
			left = oldRect.left();
			width = oldRect.width();
		}
		if (verticalZoomable) {
			top = newRect.top();
			height = newRect.height();
		} else {
			top = oldRect.top();
			height = oldRect.height();
		}
		var right = left + width;
		var bottom = top + height;
		var leftOverflow = Math.max(0, worldRect.left() - left);
		var rightOverflow = Math.max(0, right - worldRect.right());
		var topOverflow = Math.max(0, worldRect.top() - top);
		var bottomOverflow = Math.max(0, bottom - worldRect.bottom());
		left += leftOverflow - rightOverflow;
		top += topOverflow - bottomOverflow;
		var result = new $.ig.Rect(0, left, top, width, height);
		result.intersect(worldRect);
		return result;
	}
	,
	$type: new $.ig.Type('SeriesViewerSurfaceViewer', $.ig.DependencyObject.prototype.$type, [$.ig.IOverviewPlusDetailControl.prototype.$type, $.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('SeriesViewerViewManager', 'Object', {
	_container: null,
	container: function (value) {
		if (arguments.length === 1) {
			this._container = value;
			return value;
		} else {
			return this._container;
		}
	}
	,
	_backgroundCanvas: null,
	backgroundCanvas: function (value) {
		if (arguments.length === 1) {
			this._backgroundCanvas = value;
			return value;
		} else {
			return this._backgroundCanvas;
		}
	}
	,
	_overlayCanvas: null,
	overlayCanvas: function (value) {
		if (arguments.length === 1) {
			this._overlayCanvas = value;
			return value;
		} else {
			return this._overlayCanvas;
		}
	}
	,
	_mainCanvas: null,
	mainCanvas: function (value) {
		if (arguments.length === 1) {
			this._mainCanvas = value;
			return value;
		} else {
			return this._mainCanvas;
		}
	}
	,
	_hitCanvas: null,
	hitCanvas: function (value) {
		if (arguments.length === 1) {
			this._hitCanvas = value;
			return value;
		} else {
			return this._hitCanvas;
		}
	}
	,
	_shadowCanvas: null,
	shadowCanvas: function (value) {
		if (arguments.length === 1) {
			this._shadowCanvas = value;
			return value;
		} else {
			return this._shadowCanvas;
		}
	}
	,
	_backgroundContext: null,
	backgroundContext: function (value) {
		if (arguments.length === 1) {
			this._backgroundContext = value;
			return value;
		} else {
			return this._backgroundContext;
		}
	}
	,
	_overlayContext: null,
	overlayContext: function (value) {
		if (arguments.length === 1) {
			this._overlayContext = value;
			return value;
		} else {
			return this._overlayContext;
		}
	}
	,
	_mainContext: null,
	mainContext: function (value) {
		if (arguments.length === 1) {
			this._mainContext = value;
			return value;
		} else {
			return this._mainContext;
		}
	}
	,
	_hitContext: null,
	hitContext: function (value) {
		if (arguments.length === 1) {
			this._hitContext = value;
			return value;
		} else {
			return this._hitContext;
		}
	}
	,
	_shadowContext: null,
	shadowContext: function (value) {
		if (arguments.length === 1) {
			this._shadowContext = value;
			return value;
		} else {
			return this._shadowContext;
		}
	}
	,
	_eventProxy: null,
	eventProxy: function (value) {
		if (arguments.length === 1) {
			this._eventProxy = value;
			return value;
		} else {
			return this._eventProxy;
		}
	}
	,
	__owner: null,
	init: function (owner) {
		this.__currentCanvasWidth = 0;
		this.__currentCanvasHeight = 0;
		this.__currentPixelRatio = 1;
		this.__defaultChartTitleFont = null;
		this.__defaultChartTitleMargin = new $.ig.Thickness(0, 0);
		this.__defaultChartTitleTextAlign = null;
		this.__defaultChartSubTitleTextAlign = String.empty();
		this.__defaultChartSubTitleMargin = new $.ig.Thickness(0, 0);
		this.__defaultChartTitleColor = null;
		this.__defaultChartSubTitleColor = null;
		this.__defaultChartSubTitleFont = null;
		this.__defaultAxisTitlePosition = $.ig.AxisTitlePosition.prototype.auto;
		this.__defaultVerticalAxisTitlePosition = $.ig.AxisTitlePosition.prototype.auto;
		this.__defaultVerticalAxisFont = null;
		this.__defaultVerticalAxisColor = null;
		this.__defaultHorizontalAxisFont = null;
		this.__defaultHorizontalAxisColor = null;
		this.__defaultHorizontalAxisTitleMargin = new $.ig.Thickness(0, 0);
		this.__defaultVerticalAxisTitleMargin = new $.ig.Thickness(0, 0);
		this.__pointerTooltipStyle = null;
		this.__tileMap = new $.ig.Dictionary$2(String, $.ig.Tuple$2.prototype.$type.specialize($.ig.CanvasElement.prototype.$type, $.ig.RenderingContext.prototype.$type), 0);
		this.__cacheClearID = -1;
		this.__endTileID = -1;
		this.__cachedHitContext = null;
		$.ig.Object.prototype.init.call(this);
		this.__owner = owner;
	},
	_infoBox: null,
	infoBox: function (value) {
		if (arguments.length === 1) {
			this._infoBox = value;
			return value;
		} else {
			return this._infoBox;
		}
	}
	,
	pixelScalingRatioChanged: function () {
	}
	,
	onContainerProvided: function (theContainer) {
		if (theContainer == null) {
			if (this.eventProxy() != null) {
				this.eventProxy().destroy();
			}
			this.container(null);
			this.backgroundCanvas(null);
			this.overlayCanvas(null);
			this.mainCanvas(null);
			this.hitCanvas(null);
			this.shadowCanvas(null);
			this.backgroundContext(null);
			this.overlayContext(null);
			this.mainContext(null);
			this.hitContext(null);
			this.infoBox(null);
			this.eventProxy(null);
			return;
		}
		var container = theContainer;
		this.container($(container));
		this.__owner.setDefaultBrushes();
		this.__owner.updateCurrentFontHeight();
		this.styleUpdated();
		this.container().css("position", "relative");
		this.backgroundCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.overlayCanvas($("<canvas style=\"position : absolute; top : 0; left : 0;\" />"));
		this.mainCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.hitCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.shadowCanvas($("<canvas style=\"position : absolute; top : 0; left : 0\" />"));
		this.container().append(this.backgroundCanvas());
		this.container().append(this.mainCanvas());
		this.container().append(this.overlayCanvas());
		this.backgroundContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.backgroundCanvas()[0]).getContext("2d")));
		this.overlayContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.overlayCanvas()[0]).getContext("2d")));
		this.mainContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.mainCanvas()[0]).getContext("2d")));
		if (this.__owner.model().actualContentHitTestMode() != $.ig.ChartHitTestMode.prototype.computational) {
			this.hitContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.hitCanvas()[0]).getContext("2d")));
			this.__cachedHitContext = this.hitContext();
		} else {
			this.hitContext(new $.ig.RenderingContext(null, null));
		}
		this.shadowContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.shadowCanvas()[0]).getContext("2d")));
		this.__owner.provideBackgroundContext(this.backgroundContext());
		this.__owner.onContainerResized(this.container().width(), this.container().height());
		{
			this.eventProxy(new $.ig.CanvasGestureDOMEventProxy(this.overlayCanvas()));
			this.eventProxy().shouldInteractForDirection(this.__owner.shouldInteractForDirection.runOn(this.__owner));
		}
		this.infoBox($("<div></div>"));
		this.infoBox().hide();
		this.infoBox().css("position", "absolute");
		this.infoBox().css("z-index", "10000");
		this.infoBox().addClass(this.__owner.model().tooltipStyle());
		this.container().append(this.infoBox());
	}
	,
	setDefaultCursor: function () {
		this.overlayCanvas().css("cursor", "default");
	}
	,
	setHandCursor: function () {
		this.overlayCanvas().css("cursor", "pointer");
	}
	,
	getBlackBrush: function () {
		return (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("#000000");
			return $ret;
		}());
	}
	,
	__currentCanvasWidth: 0,
	__currentCanvasHeight: 0,
	__currentPixelRatio: 0,
	containerSizeChanging: function (width, height, pixelScale) {
		this.__currentCanvasWidth = width;
		this.__currentCanvasHeight = height;
		this.__currentPixelRatio = pixelScale;
		var pixelWidth = width;
		var pixelHeight = height;
		if (pixelScale != 1) {
			pixelWidth = Math.round(width * pixelScale);
			pixelHeight = Math.round(height * pixelScale);
		}
		this.backgroundCanvas().attr("width", pixelWidth.toString());
		this.backgroundCanvas().attr("height", pixelHeight.toString());
		this.backgroundCanvas().css("width", width.toString() + "px");
		this.backgroundCanvas().css("height", height.toString() + "px");
		this.overlayCanvas().attr("width", pixelWidth.toString());
		this.overlayCanvas().attr("height", pixelHeight.toString());
		this.overlayCanvas().css("width", width.toString() + "px");
		this.overlayCanvas().css("height", height.toString() + "px");
		this.overlayCanvas().attr("tabindex", "0");
		this.overlayCanvas().css("outline", "0");
		this.mainCanvas().attr("width", pixelWidth.toString());
		this.mainCanvas().attr("height", pixelHeight.toString());
		this.mainCanvas().css("width", width.toString() + "px");
		this.mainCanvas().css("height", height.toString() + "px");
		this.hitCanvas().attr("width", pixelWidth.toString());
		this.hitCanvas().attr("height", pixelHeight.toString());
		this.hitCanvas().css("width", width.toString() + "px");
		this.hitCanvas().css("height", height.toString() + "px");
		this.shadowCanvas().attr("width", pixelWidth.toString());
		this.shadowCanvas().attr("height", pixelHeight.toString());
		this.shadowCanvas().css("width", width.toString() + "px");
		this.shadowCanvas().css("height", height.toString() + "px");
		this.__owner.model().canvasRenderScheduler().schedule();
		this.__owner.model().thumbnailCanvasRenderScheduler().schedule();
		this.__owner.model().alternateViewRenderScheduler().schedule();
	}
	,
	getContainerOffsets: function () {
		var offset = $.ig.DOMEventProxy.prototype.getOffset(this.container());
		return { __x: offset.left(), __y: offset.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getDefaultPalette: function (brushes, outlines, fontBrush, font, axisLineBrush) {
		brushes = new $.ig.BrushCollection();
		outlines = new $.ig.BrushCollection();
		var names = new $.ig.List$1(String, 0);
		names.add("background-image");
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		this.container().append(discovery);
		var fillsPalette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, "ui-chart-fill-palette-", names);
		var numFillsPaletteColors = fillsPalette.count();
		var outlinesPalette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, "ui-chart-outline-palette-", names);
		var numOutlinesPaletteColors = outlinesPalette.count();
		for (var i = 0; i < numFillsPaletteColors; i++) {
			brushes.add($.ig.CssGradientUtil.prototype.brushFromGradientString(fillsPalette.__inner[i].__inner[0]));
		}
		for (var i1 = 0; i1 < numOutlinesPaletteColors; i1++) {
			outlines.add($.ig.CssGradientUtil.prototype.brushFromGradientString(outlinesPalette.__inner[i1].__inner[0]));
		}
		names.clear();
		var fillIndex = 0;
		var outlineIndex = 0;
		var numPaletteColors = Math.min(numFillsPaletteColors, numOutlinesPaletteColors);
		var palette = null;
		if (numFillsPaletteColors == 0) {
			names.add("background-color");
		}
		if (numOutlinesPaletteColors == 0) {
			names.add("border-top-color");
			outlineIndex = numFillsPaletteColors == 0 ? 1 : 0;
		}
		if (names.count() > 0) {
			palette = $.ig.CssHelper.prototype.getValuesForClassCollection(discovery, "ui-chart-palette-", names);
			numPaletteColors = palette.count();
		}
		if (numFillsPaletteColors == 0) {
			if (numPaletteColors > 0) {
				for (var i2 = 0; i2 < numPaletteColors; i2++) {
					var fillBrush = new $.ig.Brush();
					fillBrush.__fill = palette.__inner[i2].__inner[fillIndex];
					brushes.add(fillBrush);
				}
			} else {
				var b1Fill = new $.ig.Brush();
				b1Fill.__fill = "#50a8be";
				var b2Fill = new $.ig.Brush();
				b2Fill.__fill = "#fc6754";
				var b3Fill = new $.ig.Brush();
				b3Fill.__fill = "#fec33c";
				var b4Fill = new $.ig.Brush();
				b4Fill.__fill = "#3c6399";
				var b5Fill = new $.ig.Brush();
				b5Fill.__fill = "#91af49";
				brushes.add(b1Fill);
				brushes.add(b2Fill);
				brushes.add(b3Fill);
				brushes.add(b4Fill);
				brushes.add(b5Fill);
			}
		}
		if (numOutlinesPaletteColors == 0) {
			if (numPaletteColors > 0) {
				for (var i3 = 0; i3 < numPaletteColors; i3++) {
					var outlineBrush = new $.ig.Brush();
					outlineBrush.__fill = palette.__inner[i3].__inner[outlineIndex];
					outlines.add(outlineBrush);
				}
			} else {
				var b1Outline = new $.ig.Brush();
				b1Outline.__fill = "#B1BFC9";
				var b2Outline = new $.ig.Brush();
				b2Outline.__fill = "#798995";
				var b3Outline = new $.ig.Brush();
				b3Outline.__fill = "#4F606C";
				var b4Outline = new $.ig.Brush();
				b4Outline.__fill = "#374650";
				var b5Outline = new $.ig.Brush();
				b5Outline.__fill = "#162C3B";
				outlines.add(b1Outline);
				outlines.add(b2Outline);
				outlines.add(b3Outline);
				outlines.add(b4Outline);
				outlines.add(b5Outline);
			}
		}
		var axisStrokeColor = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-axis", "border-top-color");
		if (axisStrokeColor != null) {
			axisLineBrush = new $.ig.Brush();
			axisLineBrush.__fill = axisStrokeColor;
		} else {
			var axisStroke = new $.ig.Brush();
			axisStroke.__fill = "#989EA3";
			axisLineBrush = axisStroke;
		}
		discovery.remove();
		fontBrush = new $.ig.Brush();
		fontBrush.__fill = this.container().css("color");
		font = $.ig.FontUtil.prototype.getFont(this.container());
		return {
			p0: brushes,
			p1: outlines,
			p2: fontBrush,
			p3: font,
			p4: axisLineBrush
		};
	}
	,
	getChartSpecificDefaults: function (opacity, margins, axisStroke, axisMajorStroke, categoryAxisTickLength, alignsGridLines) {
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		this.container().append(discovery);
		var cssOpacity = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-area-fill-opacity", "opacity");
		opacity = cssOpacity != null ? parseFloat(cssOpacity) : 1;
		margins = new Array(4);
		var marginTop = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-render-margins", "margin-top");
		var marginRight = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-render-margins", "margin-right");
		var marginBottom = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-render-margins", "margin-bottom");
		var marginLeft = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-render-margins", "margin-left");
		margins[0] = marginTop != null ? parseFloat(marginTop) : NaN;
		margins[1] = marginRight != null ? parseFloat(marginRight) : NaN;
		margins[2] = marginBottom != null ? parseFloat(marginBottom) : NaN;
		margins[3] = marginLeft != null ? parseFloat(marginLeft) : NaN;
		axisStroke = axisMajorStroke = null;
		var cssAxisStroke = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-axis-stroke", "border-top-color");
		if (cssAxisStroke != null) {
			var b = new $.ig.Brush();
			b.__fill = cssAxisStroke;
			axisStroke = b;
		}
		var cssAxisMajorStroke = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-axis-major-line", "border-top-color");
		if (cssAxisMajorStroke != null) {
			var b1 = new $.ig.Brush();
			b1.__fill = cssAxisMajorStroke;
			axisMajorStroke = b1;
		}
		var cssAlignsGridLines = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-aligned-gridlines", "visibility");
		alignsGridLines = cssAlignsGridLines != null && cssAlignsGridLines == "visible";
		var cssCategoryAxisTickLength = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-category-axis-tick", "height");
		if (cssCategoryAxisTickLength != null) {
			categoryAxisTickLength = parseFloat(cssCategoryAxisTickLength);
			if (Math.abs(categoryAxisTickLength) > 4000) {
				categoryAxisTickLength = 0;
			}
		} else {
			cssCategoryAxisTickLength = $.ig.CssHelper.prototype.getPropertyValue(discovery, "ui-chart-category-axis-tick", "width");
			categoryAxisTickLength = cssCategoryAxisTickLength != null ? parseFloat(cssCategoryAxisTickLength) : 0;
		}
		discovery.remove();
		return {
			p0: opacity,
			p1: margins,
			p2: axisStroke,
			p3: axisMajorStroke,
			p4: categoryAxisTickLength,
			p5: alignsGridLines
		};
	}
	,
	clearInfoBox: function () {
		this.infoBox().children().remove();
	}
	,
	updateInfoBoxXTranslation: function (x_) {
		var box_ = this.infoBox();
		var offset_ = $.ig.DOMEventProxy.prototype.getOffset(this.infoBox());
		var container = this.getContainerOffsets();
		x_ = container.__x + this.__owner.model().viewportRect().left() + x_;
		box_.offset({ left: x_, top: offset_.top});
	}
	,
	updateInfoBoxYTranslation: function (y_) {
		var box_ = this.infoBox();
		var offset_ = this.infoBox().offset();
		var container = this.getContainerOffsets();
		y_ = container.__y + this.__owner.model().viewportRect().top() + y_;
		box_.offset({ left: offset_.left, top: y_});
	}
	,
	addToInfoBox: function (control) {
		var c = control;
		c.show();
		this.infoBox().append(c);
	}
	,
	hideInfoBox: function () {
		this.infoBox().hide();
	}
	,
	showInfoBox: function () {
		this.infoBox().show();
	}
	,
	addTooltipToView: function (control) {
		$("body").append(control);
	}
	,
	removeTooltipFromView: function (control) {
		(control).remove();
	}
	,
	notifyContainerResized: function () {
		this.__owner.onContainerResized(this.container().width(), this.container().height());
	}
	,
	__defaultChartTitleFont: null,
	getDefaultChartTitleFont: function () {
		return this.__defaultChartTitleFont;
	}
	,
	__defaultChartTitleMargin: null,
	getDefaultChartTitleMargin: function () {
		return this.__defaultChartTitleMargin;
	}
	,
	__defaultChartTitleTextAlign: null,
	getDefaultChartTitleTextAlign: function () {
		return this.__defaultChartTitleTextAlign;
	}
	,
	__defaultChartSubTitleTextAlign: null,
	getDefaultChartSubTitleTextAlign: function () {
		return this.__defaultChartSubTitleTextAlign;
	}
	,
	__defaultChartSubTitleMargin: null,
	getDefaultChartSubTitleMargin: function () {
		return this.__defaultChartSubTitleMargin;
	}
	,
	__defaultChartTitleColor: null,
	getDefaultChartTitleColor: function () {
		return this.__defaultChartTitleColor;
	}
	,
	__defaultChartSubTitleColor: null,
	getDefaultChartSubTitleColor: function () {
		return this.__defaultChartSubTitleColor;
	}
	,
	__defaultChartSubTitleFont: null,
	getDefaultChartSubTitleFont: function () {
		return this.__defaultChartSubTitleFont;
	}
	,
	__defaultAxisTitlePosition: 0,
	getDefaultHorizontalAxisTitlePosition: function () {
		return this.__defaultAxisTitlePosition;
	}
	,
	__defaultVerticalAxisTitlePosition: 0,
	getDefaultVerticalAxisTitlePosition: function () {
		return this.__defaultVerticalAxisTitlePosition;
	}
	,
	__defaultVerticalAxisFont: null,
	getDefaultVerticalAxisFont: function () {
		return this.__defaultVerticalAxisFont;
	}
	,
	__defaultVerticalAxisColor: null,
	getDefaultVerticalAxisColor: function () {
		return this.__defaultVerticalAxisColor;
	}
	,
	__defaultHorizontalAxisFont: null,
	getDefaultHorizontalAxisFont: function () {
		return this.__defaultHorizontalAxisFont;
	}
	,
	__defaultHorizontalAxisColor: null,
	getDefaultHorizontalAxisColor: function () {
		return this.__defaultHorizontalAxisColor;
	}
	,
	__defaultHorizontalAxisTitleMargin: null,
	getDefaultHorizontalAxisTitleMargin: function () {
		return this.__defaultHorizontalAxisTitleMargin;
	}
	,
	__defaultVerticalAxisTitleMargin: null,
	getDefaultVerticalAxisTitleMargin: function () {
		return this.__defaultVerticalAxisTitleMargin;
	}
	,
	styleUpdated: function () {
		var ele = $.ig.CssHelper.prototype.getDisoveryElement();
		var fontEle = $("<div></div>");
		this.container().append(fontEle);
		this.container().append(ele);
		this.updateChartTitle(fontEle, ele);
		this.updateChartSubTitle(fontEle, ele);
		this.updateDefaulVerrticalAxis(fontEle, ele);
		this.updateDefaultHorizontalAxis(fontEle, ele);
		this.updatePointerTooltipStyle(fontEle, ele);
		fontEle.remove();
		ele.remove();
	}
	,
	updatePointerTooltipStyle: function (fontEle, ele) {
		var className = "ui-chart-pointer-tooltip";
		var backgroundColor = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "background-color");
		var borderColor = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "border-top-color");
		var borderRadius = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "border-top-left-radius");
		var borderWidth = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "border-top-width");
		var style = new $.ig.PointerTooltipStyle();
		style.cornerRadius(borderRadius != null ? parseFloat(borderRadius) : 0);
		style.fillColor(backgroundColor != null ? $.ig.Brush.prototype.create(backgroundColor) : (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("white");
			return $ret;
		}()));
		style.strokeColor(borderColor != null ? $.ig.Brush.prototype.create(borderColor) : (function () {
			var $ret = new $.ig.Brush();
			$ret.fill("gray");
			return $ret;
		}()));
		style.strokeThickness(borderWidth != null ? parseFloat(borderWidth) : 0);
		this.__pointerTooltipStyle = style;
	}
	,
	updateChartTitle: function (fontEle, ele) {
		var className = "ui-chart-title";
		fontEle.addClass(className);
		this.__defaultChartTitleFont = $.ig.FontUtil.prototype.getFont(fontEle);
		this.__defaultChartTitleColor = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill(fontEle.css("color"));
			return $ret;
		}());
		fontEle.removeClass(className);
		this.__defaultChartTitleTextAlign = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "text-align");
		if (this.__defaultChartTitleTextAlign == null) {
			this.__defaultChartTitleTextAlign = "center";
		}
		var marginTop = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-top");
		var marginBottom = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-bottom");
		var marginLeft = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-left");
		var marginRight = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-right");
		var marginTopDb = marginTop != null ? parseFloat(marginTop) : 0;
		var marginBottomDb = marginBottom != null ? parseFloat(marginBottom) : 0;
		var marginLeftDb = marginLeft != null ? parseFloat(marginLeft) : 0;
		var marginRightDb = marginRight != null ? parseFloat(marginRight) : 0;
		this.__defaultChartTitleMargin = new $.ig.Thickness(1, marginLeftDb, marginTopDb, marginRightDb, marginBottomDb);
	}
	,
	updateChartSubTitle: function (fontEle, ele) {
		var className = "ui-chart-subtitle";
		fontEle.addClass(className);
		this.__defaultChartSubTitleFont = $.ig.FontUtil.prototype.getFont(fontEle);
		this.__defaultChartSubTitleColor = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill(fontEle.css("color"));
			return $ret;
		}());
		fontEle.removeClass(className);
		this.__defaultChartSubTitleTextAlign = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "text-align");
		if (this.__defaultChartSubTitleTextAlign == null) {
			this.__defaultChartSubTitleTextAlign = "center";
		}
		var marginTop = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-top");
		var marginBottom = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-bottom");
		var marginLeft = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-left");
		var marginRight = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-right");
		var marginTopDb = marginTop != null ? parseFloat(marginTop) : 0;
		var marginBottomDb = marginBottom != null ? parseFloat(marginBottom) : 0;
		var marginLeftDb = marginLeft != null ? parseFloat(marginLeft) : 0;
		var marginRightDb = marginRight != null ? parseFloat(marginRight) : 0;
		this.__defaultChartSubTitleMargin = new $.ig.Thickness(1, marginLeftDb, marginTopDb, marginRightDb, marginBottomDb);
	}
	,
	updateDefaultHorizontalAxis: function (fontEle, ele) {
		var className = "ui-chart-horizontal-axis-title";
		fontEle.addClass(className);
		this.__defaultHorizontalAxisFont = $.ig.FontUtil.prototype.getFont(fontEle);
		this.__defaultHorizontalAxisColor = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill(fontEle.css("color"));
			return $ret;
		}());
		fontEle.removeClass(className);
		var val = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "vertical-align");
		if (val == null) {
			this.__defaultAxisTitlePosition = $.ig.AxisTitlePosition.prototype.auto;
		} else if (val.toLowerCase() == "bottom") {
			this.__defaultAxisTitlePosition = $.ig.AxisTitlePosition.prototype.bottom;
		} else {
			this.__defaultAxisTitlePosition = $.ig.AxisTitlePosition.prototype.top;
		}
		var marginTop = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-top");
		var marginBottom = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-bottom");
		var marginLeft = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-left");
		var marginRight = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-right");
		var marginTopDb = marginTop != null ? parseFloat(marginTop) : 2;
		var marginBottomDb = marginBottom != null ? parseFloat(marginBottom) : 2;
		var marginLeftDb = marginLeft != null ? parseFloat(marginLeft) : 2;
		var marginRightDb = marginRight != null ? parseFloat(marginRight) : 2;
		this.__defaultHorizontalAxisTitleMargin = new $.ig.Thickness(1, marginLeftDb, marginTopDb, marginRightDb, marginBottomDb);
	}
	,
	updateDefaulVerrticalAxis: function (fontEle, ele) {
		var className = "ui-chart-vertical-axis-title";
		fontEle.addClass(className);
		this.__defaultVerticalAxisFont = $.ig.FontUtil.prototype.getFont(fontEle);
		this.__defaultVerticalAxisColor = (function () {
			var $ret = new $.ig.Brush();
			$ret.fill(fontEle.css("color"));
			return $ret;
		}());
		fontEle.removeClass(className);
		var val = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "text-align");
		if (val == null) {
			this.__defaultVerticalAxisTitlePosition = $.ig.AxisTitlePosition.prototype.auto;
		} else if (val.toLowerCase() == "right") {
			this.__defaultVerticalAxisTitlePosition = $.ig.AxisTitlePosition.prototype.right;
		} else {
			this.__defaultVerticalAxisTitlePosition = $.ig.AxisTitlePosition.prototype.left;
		}
		var marginTop = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-top");
		var marginBottom = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-bottom");
		var marginLeft = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-left");
		var marginRight = $.ig.CssHelper.prototype.getPropertyValue(ele, className, "margin-right");
		var marginTopDb = marginTop != null ? parseFloat(marginTop) : 0;
		var marginBottomDb = marginBottom != null ? parseFloat(marginBottom) : 0;
		var marginLeftDb = marginLeft != null ? parseFloat(marginLeft) : 0;
		var marginRightDb = marginRight != null ? parseFloat(marginRight) : 0;
		this.__defaultVerticalAxisTitleMargin = new $.ig.Thickness(1, marginLeftDb, marginTopDb, marginRightDb, marginBottomDb);
	}
	,
	ensureCorrectSize: function (width, height) {
		var pixelRatio = this.__owner.model().actualPixelScalingRatio();
		if (width != this.__currentCanvasWidth || height != this.__currentCanvasHeight || pixelRatio != this.__currentPixelRatio) {
			this.containerSizeChanging(width, height, this.__owner.model().actualPixelScalingRatio());
		}
	}
	,
	__pointerTooltipStyle: null,
	getPointerTooltipStyle: function () {
		return this.__pointerTooltipStyle;
	}
	,
	isPagePanningAllowedChanged: function (allowed) {
		this.eventProxy().deferredTouchStartMode(allowed);
		this.eventProxy().shouldInteractForDirection(this.__owner.shouldInteractForDirection.runOn(this.__owner));
	}
	,
	__tileMap: null,
	acquireTileContent: function (window, tile, tileSize) {
		var $self = this;
		var canvas;
		if (!(function () { var $ret = $self.__tileMap.tryGetValue(tile.iD().toString(), canvas); canvas = $ret.p1; return $ret.ret; }())) {
			var canv = $("<canvas></canvas>");
			canv.attr("width", tileSize.toString());
			canv.attr("height", tileSize.toString());
			canv.css("width", tileSize.toString() + "px");
			canv.css("height", tileSize.toString() + "px");
			var c = canv[0];
			var context = c.getContext("2d");
			var r = new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), context);
			var t = new $.ig.Tuple$2($.ig.CanvasElement.prototype.$type, $.ig.RenderingContext.prototype.$type, c, r);
			canvas = t;
			this.__tileMap.add(tile.iD().toString(), canvas);
		}
		var viewport = new $.ig.Rect(0, 0, 0, tileSize, tileSize);
		var surface = new $.ig.RenderSurface();
		surface.surface(canvas.item2());
		for (var i = 0; i < this.__owner.model().series().count(); i++) {
			var series = this.__owner.model().series().__inner[i];
			series.renderAlternateView(viewport, window, surface, "tile", 1);
		}
		this.__owner.model().alternateViewRenderScheduler().flush();
		return canvas.item1();
	}
	,
	destroyTileContent: function (tile) {
		this.__tileMap.remove(tile.iD().toString());
	}
	,
	destroyAllTileContent: function () {
		this.__tileMap.clear();
	}
	,
	renderTiles: function (visibleTiles) {
		for (var i = 0; i < visibleTiles.count(); i++) {
			var tile = visibleTiles.__inner[i];
			this.__owner.overlayContext().drawImage(tile.content(), 1, tile.xPosition() + this.__owner.model().viewportRect().left(), tile.yPosition() + this.__owner.model().viewportRect().top(), tile.width(), tile.height());
		}
	}
	,
	__cacheClearID: 0,
	deferCacheClear: function () {
		var $self = this;
		if (this.__cacheClearID != -1) {
			this.cancelDeferredCacheClear();
		}
		this.__cacheClearID = window.setTimeout(function () { $self.__owner.model().deferredClearOfTileZoomCache(); }, 5000);
	}
	,
	cancelDeferredCacheClear: function () {
		if (this.__cacheClearID != -1) {
			window.clearTimeout(this.__cacheClearID);
			this.__cacheClearID = -1;
		}
	}
	,
	__endTileID: 0,
	deferEndToTiledZoom: function (delay) {
		var $self = this;
		if (this.__endTileID != -1) {
			this.cancelEndToTiledZoom();
		}
		this.__endTileID = window.setTimeout(function () { $self.__owner.model().endTiledZoomingIfRunning(); }, delay);
	}
	,
	cancelEndToTiledZoom: function () {
		if (this.__endTileID != -1) {
			window.clearTimeout(this.__endTileID);
			this.__endTileID = -1;
		}
	}
	,
	__cachedHitContext: null,
	onActualHitTestModeChanged: function () {
		if (this.__owner.model().actualContentHitTestMode() != $.ig.ChartHitTestMode.prototype.computational) {
			if (this.__cachedHitContext == null) {
				this.hitContext(new $.ig.RenderingContext(new $.ig.CanvasViewRenderer(), (this.hitCanvas()[0]).getContext("2d")));
				this.__cachedHitContext = this.hitContext();
			} else {
				this.hitContext(this.__cachedHitContext);
			}
		} else {
			this.hitContext(new $.ig.RenderingContext(null, null));
		}
		this.__owner.propagateHitContext(this.hitContext());
	}
	,
	updateMobileMode: function (value) {
		if (this.container() != null) {
			var className = "igTouch";
			if (value) {
				this.container().addClass(className);
			} else {
				this.container().removeClass(className);
			}
		}
	}
	,
	$type: new $.ig.Type('SeriesViewerViewManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ICategoryScaler', 'Object', {
	$type: new $.ig.Type('ICategoryScaler', null, [$.ig.IScaler.prototype.$type])
}, true);

$.ig.util.defType('CategoryAxisBase', 'Axis', {
	createView: function () {
		return new $.ig.CategoryAxisBaseView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.Axis.prototype.onViewCreated.call(this, view);
		this.categoryView(view);
	}
	,
	_categoryView: null,
	categoryView: function (value) {
		if (arguments.length === 1) {
			this._categoryView = value;
			return value;
		} else {
			return this._categoryView;
		}
	}
	,
	init: function () {
		this.__itemsCount = 0;
		this._cachedItemsCount = 0;
		this._mode2GroupCount = 0;
		this.__spreading = false;
		$.ig.Axis.prototype.init.call(this);
		this.majorLinePositions(new $.ig.List$1(Number, 0));
	},
	validateAxis: function (viewportRect, windowRect, view) {
		var isValid = $.ig.Axis.prototype.validateAxis.call(this, viewportRect, windowRect, view);
		if (!isValid) {
			return false;
		}
		return this.itemsSource() != null && this._cachedItemsCount > 0;
	}
	,
	onDetached: function () {
		if (this.fastItemsSource() != null && this.fastItemsSourceProvider() != null && this.itemsSource() != null) {
			this.fastItemsSource(this.fastItemsSourceProvider().releaseFastItemsSource(this.itemsSource()));
		}
	}
	,
	onAttached: function () {
		if (this.fastItemsSource() == null && this.fastItemsSourceProvider() != null && this.itemsSource() != null) {
			this.fastItemsSource(this.fastItemsSourceProvider().getFastItemsSource(this.itemsSource()));
		}
	}
	,
	_majorLinePositions: null,
	majorLinePositions: function (value) {
		if (arguments.length === 1) {
			this._majorLinePositions = value;
			return value;
		} else {
			return this._majorLinePositions;
		}
	}
	,
	isCategory: function () {
		return true;
	}
	,
	getCategoryBoundingBox: function (point, useInterpolation, singularWidth) {
		if (this.isAngular()) {
			return $.ig.Rect.prototype.empty();
		}
		return this.getCategoryBoundingBoxHelper(point, useInterpolation, singularWidth, this.isVertical());
	}
	,
	getCategoryBoundingBoxHelper: function (point, useInterpolation, singularWidth, isVertical) {
		var i = 0;
		var comparison = point.__x;
		var viewportMinExtreme = this.viewportRect().left();
		var viewportMaxExtreme = this.viewportRect().right();
		if (isVertical) {
			comparison = point.__y;
			viewportMinExtreme = this.viewportRect().top();
			viewportMaxExtreme = this.viewportRect().bottom();
		}
		var positions = this.majorLinePositions();
		if ((isVertical && !this.isInverted()) || (!isVertical && this.isInverted())) {
			positions = new $.ig.List$1(Number, 0);
			for (var j = this.majorLinePositions().count() - 1; j >= 0; j--) {
				positions.add(this.majorLinePositions().__inner[j]);
			}
		}
		if (this.categoryMode() == $.ig.CategoryMode.prototype.mode0) {
			if (useInterpolation) {
				var ret;
				if (isVertical) {
					ret = new $.ig.Rect(0, this.viewportRect().left(), point.__y - singularWidth / 2, this.viewportRect().width(), singularWidth);
				} else {
					ret = new $.ig.Rect(0, point.__x - singularWidth / 2, this.viewportRect().top(), singularWidth, this.viewportRect().height());
				}
				ret.intersect(this.viewportRect());
				return ret;
			} else {
				if (comparison > viewportMaxExtreme) {
					return $.ig.Rect.prototype.empty();
				}
				if (comparison < viewportMinExtreme) {
					return $.ig.Rect.prototype.empty();
				}
				var minDist = 1.7976931348623157E+308;
				var minPos = -1;
				for (i = 0; i < positions.count(); i++) {
					var dist = Math.abs(positions.__inner[i] - comparison);
					if (dist < minDist) {
						minDist = dist;
						minPos = i;
					}
				}
				if (minPos == -1) {
					return $.ig.Rect.prototype.empty();
				}
				var target = positions.__inner[minPos];
				var ret1;
				if (isVertical) {
					ret1 = new $.ig.Rect(0, this.viewportRect().left(), target - singularWidth / 2, this.viewportRect().width(), singularWidth);
				} else {
					ret1 = new $.ig.Rect(0, target - singularWidth / 2, this.viewportRect().top(), singularWidth, this.viewportRect().height());
				}
				ret1.intersect(this.viewportRect());
				return ret1;
			}
		} else {
			for (i = 0; i < positions.count(); i++) {
				if (positions.__inner[i] > comparison) {
					break;
				}
			}
			if (i == 0) {
				return $.ig.Rect.prototype.empty();
			}
			if (comparison > viewportMaxExtreme) {
				return $.ig.Rect.prototype.empty();
			}
			if (comparison < viewportMinExtreme) {
				return $.ig.Rect.prototype.empty();
			}
			var curr = this.viewportRect().right();
			if (isVertical) {
				curr = this.viewportRect().bottom();
			}
			if (i < positions.count()) {
				curr = positions.__inner[i];
			}
			if (isVertical) {
				return new $.ig.Rect(0, this.viewportRect().left(), positions.__inner[i - 1], this.viewportRect().width(), curr - positions.__inner[i - 1]);
			} else {
				return new $.ig.Rect(0, positions.__inner[i - 1], this.viewportRect().top(), curr - positions.__inner[i - 1], this.viewportRect().height());
			}
		}
	}
	,
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryAxisBase.prototype.fastItemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryAxisBase.prototype.fastItemsSourceProperty);
		}
	}
	,
	__fastItemsSource: null,
	itemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryAxisBase.prototype.itemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryAxisBase.prototype.itemsSourceProperty);
		}
	}
	,
	__itemsCount: 0,
	_cachedItemsCount: 0,
	itemsCount: function (value) {
		if (arguments.length === 1) {
			this.__itemsCount = value;
			this._cachedItemsCount = this.__itemsCount;
			return value;
		} else {
			return this.__itemsCount;
		}
	}
	,
	categoryMode: function (value) {
		if (arguments.length === 1) {
			if (this.__categoryMode != value) {
				var oldValue = this.__categoryMode;
				this.__categoryMode = value;
				this.raisePropertyChanged($.ig.CategoryAxisBase.prototype.categoryModePropertyName, $.ig.CategoryMode.prototype.getBox(oldValue), $.ig.CategoryMode.prototype.getBox(value));
			}
			return value;
		} else {
			return this.__categoryMode;
		}
	}
	,
	__categoryMode: 0,
	gap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryAxisBase.prototype.gapProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryAxisBase.prototype.gapProperty);
		}
	}
	,
	overlap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryAxisBase.prototype.overlapProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryAxisBase.prototype.overlapProperty);
		}
	}
	,
	useClusteringMode: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryAxisBase.prototype.useClusteringModeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryAxisBase.prototype.useClusteringModeProperty);
		}
	}
	,
	mode2GroupCount: function (value) {
		if (arguments.length === 1) {
			if (value != this._mode2GroupCount) {
				var oldGroupCount = this._mode2GroupCount;
				this._mode2GroupCount = value;
				this.raisePropertyChanged($.ig.CategoryAxisBase.prototype.groupCountPropertyName, oldGroupCount, this._mode2GroupCount);
			}
			return value;
		} else {
			return this._mode2GroupCount;
		}
	}
	,
	_mode2GroupCount: 0,
	getUnscaledValue: function (scaledValue, p) {
		return NaN;
	}
	,
	getUnscaledValue3: function (scaledValue, windowRect, viewportRect, categoryMode) {
		return NaN;
	}
	,
	getCategorySize: function (windowRect, viewportRect, effectiveViewportRect) {
		return NaN;
	}
	,
	getGroupSize: function (windowRect, viewportRect, effectiveViewportRect) {
		return NaN;
	}
	,
	getGroupCenter: function (index, windowRect, viewportRect, effectiveViewportRect) {
		return NaN;
	}
	,
	unscaleValue: function (unscaledValue) {
		var windowRect = this.seriesViewer().windowRect();
		var viewportRect = this.viewportRect();
		var effectiveViewport = this.getCurrentEffectiveViewport();
		var sParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewport);
		return this.getUnscaledValue(unscaledValue, sParams);
	}
	,
	relatedSeries: function () {
		var d__ = new $.ig.CategoryAxisBase___RelatedSeries__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	hasSeries: function (series) {
		return this.series().contains(series);
	}
	,
	shouldShareMode: function (chart) {
		return false;
	}
	,
	relatedAxes: function () {
		var d__ = new $.ig.CategoryAxisBase___RelatedAxes__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	__spreading: false,
	spread: function (propagate) {
		if (this.__spreading) {
			return;
		}
		try {
			this.__spreading = true;
			var categoryMode = $.ig.CategoryMode.prototype.mode0;
			var mode2GroupCount = 0;
			var mode2Present = false;
			var en = this.relatedSeries().getEnumerator();
			while (en.moveNext()) {
				var currentSeries = en.current();
				var categorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, currentSeries);
				if (categorySeries != null) {
					var seriesMode = categorySeries.preferredCategoryMode(this);
					if (seriesMode == $.ig.CategoryMode.prototype.mode2) {
						categoryMode = $.ig.CategoryMode.prototype.mode2;
						mode2Present = true;
						if (this.hasSeries(currentSeries)) {
							mode2GroupCount++;
						}
					}
					if (seriesMode == $.ig.CategoryMode.prototype.mode1 && !mode2Present) {
						categoryMode = $.ig.CategoryMode.prototype.mode1;
					}
				}
			}
			var useClusteringMode = this.useClusteringMode();
			var en1 = this.relatedAxes().getEnumerator();
			while (en1.moveNext()) {
				var axis = en1.current();
				if (axis.useClusteringMode()) {
					useClusteringMode = true;
				}
				if (propagate) {
					axis.spread(false);
				}
			}
			if (categoryMode == $.ig.CategoryMode.prototype.mode0 && useClusteringMode) {
				categoryMode = $.ig.CategoryMode.prototype.mode2;
				if (mode2GroupCount == 0) {
					mode2GroupCount = 1;
				}
			}
			this.categoryMode(categoryMode);
			this.mode2GroupCount(mode2GroupCount);
		}
		finally {
			this.__spreading = false;
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.Axis.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.CategoryAxisBase.prototype.fastItemsSourceProviderPropertyName:
				if (($.ig.util.cast($.ig.IFastItemsSourceProvider.prototype.$type, oldValue)) != null) {
					this.fastItemsSource((oldValue).releaseFastItemsSource(this.itemsSource()));
				}
				if (($.ig.util.cast($.ig.IFastItemsSourceProvider.prototype.$type, newValue)) != null) {
					this.fastItemsSource((newValue).getFastItemsSource(this.itemsSource()));
				}
				this.itemsCount(0);
				if (this.fastItemsSource() != null) {
					this.itemsCount(this.fastItemsSource().count());
				}
				this.spread(true);
				break;
			case $.ig.CategoryAxisBase.prototype.itemsSourcePropertyName:
				if (this.fastItemsSourceProvider() != null) {
					this.fastItemsSource(this.fastItemsSourceProvider().getFastItemsSource(this.itemsSource()));
				}
				break;
			case $.ig.CategoryAxisBase.prototype.fastItemsSourcePropertyName:
				var oldFastItemsSource = $.ig.util.cast($.ig.IFastItemsSource.prototype.$type, oldValue);
				this.cacheFastItemsSource();
				this.mustInvalidateLabels(true);
				if (oldFastItemsSource != null) {
					oldFastItemsSource.event = $.ig.Delegate.prototype.remove(oldFastItemsSource.event, this.handleFastItemsSourceEvent.runOn(this));
				}
				this.itemsCount(0);
				if (this.fastItemsSource() != null) {
					this.itemsCount(this.fastItemsSource().count());
				}
				if (this.fastItemsSource() != null) {
					var $t = this.fastItemsSource();
					$t.event = $.ig.Delegate.prototype.combine($t.event, this.handleFastItemsSourceEvent.runOn(this));
					this.renderAxis1(false);
					var en = this.directSeries().getEnumerator();
					while (en.moveNext()) {
						var currentSeries = en.current();
						currentSeries.renderSeries(false);
						if (currentSeries.seriesViewer() != null) {
							currentSeries.notifyThumbnailAppearanceChanged();
						}
					}
				} else {
					this.clearAllMarks();
					var en1 = this.directSeries().getEnumerator();
					while (en1.moveNext()) {
						var currentSeries1 = en1.current();
						currentSeries1.clearRendering(true, currentSeries1.view());
						if (currentSeries1.seriesViewer() != null) {
							currentSeries1.notifyThumbnailAppearanceChanged();
						}
					}
				}
				break;
			case $.ig.CategoryAxisBase.prototype.itemsCountPropertyName:
				this.raiseRangeChanged(new $.ig.AxisRangeChangedEventArgs(0, 0, $.ig.util.getValue((oldValue)) - 1, $.ig.util.getValue((newValue)) - 1));
				this.renderAxis1(false);
				break;
			case $.ig.CategoryAxisBase.prototype.useClusteringModePropertyName:
				this.mustInvalidateLabels(true);
				this.updateCategoryMode();
				this.renderAxis1(false);
				this.forceSeriesUpdate();
				break;
			case $.ig.CategoryAxisBase.prototype.categoryModePropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				this.renderCrossingAxis();
				this.forceSeriesUpdate();
				break;
			case $.ig.CategoryAxisBase.prototype.overlapPropertyName:
			case $.ig.CategoryAxisBase.prototype.gapPropertyName:
				this.mustInvalidateLabels(true);
				var en2 = this.directSeries().getEnumerator();
				while (en2.moveNext()) {
					var currentSeries2 = en2.current();
					currentSeries2.thumbnailDirty(true);
					var currentCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, currentSeries2);
					if (currentCategorySeries != null && currentCategorySeries.preferredCategoryMode(this) == $.ig.CategoryMode.prototype.mode2) {
						currentSeries2.renderSeries(false);
					}
				}
				this.renderAxis1(false);
				if (this.seriesViewer() != null) {
					this.seriesViewer().notifyThumbnailAppearanceChanged();
				}
				break;
			case $.ig.CategoryAxisBase.prototype.crossingValuePropertyName:
			case $.ig.CategoryAxisBase.prototype.crossingAxisPropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(true);
				break;
		}
	}
	,
	forceSeriesUpdate: function () {
		var en = this.directSeries().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			currentSeries.renderSeries(false);
		}
	}
	,
	handleFastItemsSourceEvent: function (sender, e) {
		switch (e.action()) {
			case $.ig.FastItemsSourceEventAction.prototype.change:
			case $.ig.FastItemsSourceEventAction.prototype.remove:
			case $.ig.FastItemsSourceEventAction.prototype.insert:
			case $.ig.FastItemsSourceEventAction.prototype.replace:
			case $.ig.FastItemsSourceEventAction.prototype.reset:
				if (this.fastItemsSource() != null) {
					this.itemsCount(this.fastItemsSource().count());
				}
				this.renderAxis1(false);
				break;
		}
		if (this.fastItemsSource() != null) {
			this.itemsCount(this.fastItemsSource().count());
		}
	}
	,
	updateCategoryMode: function () {
		var mode1Present = false, mode2Present = false;
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			var currentCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, currentSeries);
			if (currentCategorySeries == null) {
				continue;
			}
			var currentMode = currentCategorySeries.preferredCategoryMode(this);
			mode1Present |= currentMode == $.ig.CategoryMode.prototype.mode1;
			mode2Present |= currentMode == $.ig.CategoryMode.prototype.mode2;
		}
		var categoryMode = mode2Present ? $.ig.CategoryMode.prototype.mode2 : mode1Present ? $.ig.CategoryMode.prototype.mode1 : $.ig.CategoryMode.prototype.mode0;
		if (categoryMode == $.ig.CategoryMode.prototype.mode0 && this.useClusteringMode()) {
			categoryMode = $.ig.CategoryMode.prototype.mode1;
			if (this.mode2GroupCount() == 0) {
				this.mode2GroupCount(1);
			}
		}
		this.categoryMode(categoryMode);
	}
	,
	registerSeries: function (series) {
		var success = $.ig.Axis.prototype.registerSeries.call(this, series);
		if (success) {
			this.spread(true);
			var registeredCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, series);
			if (registeredCategorySeries != null && registeredCategorySeries.preferredCategoryMode(this) == $.ig.CategoryMode.prototype.mode2) {
				var en = this.directSeries().getEnumerator();
				while (en.moveNext()) {
					var currentSeries = en.current();
					var currentCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, currentSeries);
					if (currentCategorySeries != null && currentCategorySeries != registeredCategorySeries && currentCategorySeries.preferredCategoryMode(this) == $.ig.CategoryMode.prototype.mode2) {
						currentSeries.renderSeries(false);
					}
				}
			}
			this.renderAxis1(false);
			this.updateRange();
		}
		return success;
	}
	,
	deregisterSeries: function (series) {
		var success = $.ig.Axis.prototype.deregisterSeries.call(this, series);
		if (success) {
			this.spread(true);
			var deregisteredCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, series);
			if (deregisteredCategorySeries != null && deregisteredCategorySeries.preferredCategoryMode(this) != $.ig.CategoryMode.prototype.mode0) {
				var en = this.directSeries().getEnumerator();
				while (en.moveNext()) {
					var currentSeries = en.current();
					var currentCategorySeries = $.ig.util.cast($.ig.IHasCategoryModePreference.prototype.$type, currentSeries);
					if (currentCategorySeries != null) {
						currentSeries.renderSeries(false);
					}
				}
			}
			this.renderAxis1(false);
		}
		return success;
	}
	,
	renderCrossingAxis: function () {
		var crossingAxis = null;
		var en = this.directSeries().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			var categorySeries = $.ig.util.cast($.ig.CategorySeries.prototype.$type, currentSeries);
			if (categorySeries != null) {
				var yAxis = categorySeries.getYAxis();
				if (yAxis != null && yAxis.crossingAxis() == this) {
					crossingAxis = yAxis;
				}
			}
		}
		if (crossingAxis != null) {
			crossingAxis.renderAxis();
		}
	}
	,
	cacheFastItemsSource: function () {
		this.__fastItemsSource = this.fastItemsSource();
	}
	,
	renderLabels: function () {
		var labelSettings = this.labelSettings();
		if (labelSettings == null) {
			labelSettings = new $.ig.AxisLabelSettings();
		}
		if (labelSettings.visibility() == $.ig.Visibility.prototype.collapsed) {
			this.textBlocks().count(0);
		} else {
			var textBlockCount = 0;
			textBlockCount = this.categoryView().addLabels(this.labelDataContext());
			this.textBlocks().count(textBlockCount);
		}
	}
	,
	handleCollectionChanged: function (e) {
		if (this.fastItemsSource() != null) {
			this.fastItemsSource().handleCollectionChanged(e);
		}
	}
	,
	notifySetItem: function (index, oldItem, newItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, newItem, oldItem, index));
	}
	,
	notifyClearItems: function () {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset));
	}
	,
	notifyInsertItem: function (index, newItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, newItem, index));
	}
	,
	notifyRemoveItem: function (index, oldItem) {
		this.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.remove, oldItem, index));
	}
	,
	$type: new $.ig.Type('CategoryAxisBase', $.ig.Axis.prototype.$type, [$.ig.ICategoryScaler.prototype.$type])
}, true);

$.ig.util.defType('AutoRangeCalculator', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getAxisWidth: function (target) {
		return target.viewportRect().width();
	}
	,
	getAxisHeight: function (target) {
		return target.viewportRect().height();
	}
	,
	calculateRange: function (target, userMinimum, userMaximum, isLogarithmic, logarithmBase, minimumValue, maximumValue) {
		minimumValue = !$.ig.util.isNaN(userMinimum) && !Number.isInfinity(userMinimum) ? userMinimum : Number.POSITIVE_INFINITY;
		maximumValue = !$.ig.util.isNaN(userMaximum) && !Number.isInfinity(userMaximum) ? userMaximum : Number.NEGATIVE_INFINITY;
		var min = minimumValue;
		var max = maximumValue;
		if (Number.isInfinity(min) || Number.isInfinity(max)) {
			if (target != null) {
				var axisRange = target.getAxisRange();
				if (axisRange != null) {
					min = Math.min(min, axisRange.minimum());
					max = Math.max(max, axisRange.maximum());
				}
			}
		}
		if (!Number.isInfinity(min) && !Number.isInfinity(max)) {
			if (min == max && min != 0) {
				min *= min > 0 ? 0.9 : 1.1;
				max *= max > 0 ? 1.1 : 0.9;
			}
			if (min == max && min == 0) {
				max = 1;
			}
			if (userMinimum > userMaximum) {
				var temp = userMaximum;
				userMaximum = userMinimum;
				userMinimum = temp;
			}
			var actualMinimum = $.ig.util.isNaN(userMinimum) || Number.isInfinity(userMinimum) ? min : userMinimum;
			var actualMaximum = $.ig.util.isNaN(userMaximum) || Number.isInfinity(userMaximum) ? max : userMaximum;
			if (isLogarithmic) {
				if (actualMinimum <= 0) {
					if (actualMaximum > 1) {
						actualMinimum = 1;
					} else {
						actualMinimum = Math.pow(logarithmBase, Math.floor(Math.logBase(actualMaximum, logarithmBase)));
					}
				}
				if ($.ig.util.isNaN(userMinimum) || Number.isInfinity(userMinimum)) {
					min = Math.pow(logarithmBase, Math.floor(Math.logBase(actualMinimum, logarithmBase)));
				} else {
					min = actualMinimum;
				}
				if ($.ig.util.isNaN(userMaximum) || Number.isInfinity(userMaximum)) {
					max = Math.pow(logarithmBase, Math.ceil(Math.logBase(actualMaximum, logarithmBase)));
				} else {
					max = actualMaximum;
				}
			} else {
				var n = Math.pow(10, Math.floor(Math.log10(actualMaximum - actualMinimum)) - 1);
				var axisResolution = $.ig.AutoRangeCalculator.prototype.getAxisWidth(target);
				if ($.ig.util.cast($.ig.NumericYAxis.prototype.$type, target) !== null) {
					axisResolution = $.ig.AutoRangeCalculator.prototype.getAxisHeight(target);
				}
				if ($.ig.util.cast($.ig.NumericRadiusAxis.prototype.$type, target) !== null && axisResolution > 0) {
					var radiusExtentScale = (target).actualRadiusExtentScale();
					var innerRadiusExtentScale = (target).actualInnerRadiusExtentScale();
					axisResolution = Math.min($.ig.AutoRangeCalculator.prototype.getAxisWidth(target), $.ig.AutoRangeCalculator.prototype.getAxisHeight(target)) * (radiusExtentScale - innerRadiusExtentScale) / 2;
					axisResolution = Math.max(axisResolution, 14);
				}
				if (target != null && axisResolution > 0 && (!target.hasUserMinimum() && !target.hasUserMaximum())) {
					var snapper = new $.ig.LinearNumericSnapper(0, min, max, axisResolution, target.resolveHeuristicResolution());
					n = snapper.interval();
				}
				if (($.ig.util.isNaN(userMinimum) || Number.isInfinity(userMinimum)) && !$.ig.util.isNaN(min) && !$.ig.util.isNaN(n) && n != 0) {
					{
						min = n * Math.floor(min / n);
					}
				} else {
					min = actualMinimum;
				}
				if (($.ig.util.isNaN(userMaximum) || Number.isInfinity(userMaximum)) && !$.ig.util.isNaN(max) && !$.ig.util.isNaN(n) && n != 0) {
					var ceilingOfQuotient = Math.ceil(max / n);
					{
						max = n * ceilingOfQuotient;
					}
				} else {
					max = actualMaximum;
				}
			}
		}
		minimumValue = min;
		maximumValue = max;
		return {
			p5: minimumValue,
			p6: maximumValue
		};
	}
	,
	$type: new $.ig.Type('AutoRangeCalculator', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LabelFontHeuristics', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.labelHeight(NaN);
		this.labelWidestCharacterGuess(NaN);
		this.labelMinimumDesiredCharacters(NaN);
		this.labelMinimumWidth(NaN);
	},
	_labelHeight: 0,
	labelHeight: function (value) {
		if (arguments.length === 1) {
			this._labelHeight = value;
			return value;
		} else {
			return this._labelHeight;
		}
	}
	,
	_labelWidestCharacterGuess: 0,
	labelWidestCharacterGuess: function (value) {
		if (arguments.length === 1) {
			this._labelWidestCharacterGuess = value;
			return value;
		} else {
			return this._labelWidestCharacterGuess;
		}
	}
	,
	_labelMinimumDesiredCharacters: 0,
	labelMinimumDesiredCharacters: function (value) {
		if (arguments.length === 1) {
			this._labelMinimumDesiredCharacters = value;
			return value;
		} else {
			return this._labelMinimumDesiredCharacters;
		}
	}
	,
	_labelMinimumWidth: 0,
	labelMinimumWidth: function (value) {
		if (arguments.length === 1) {
			this._labelMinimumWidth = value;
			return value;
		} else {
			return this._labelMinimumWidth;
		}
	}
	,
	$type: new $.ig.Type('LabelFontHeuristics', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisLabelManager', 'Object', {
	_labelDataContext: null,
	labelDataContext: function (value) {
		if (arguments.length === 1) {
			this._labelDataContext = value;
			return value;
		} else {
			return this._labelDataContext;
		}
	}
	,
	_labelPositions: null,
	labelPositions: function (value) {
		if (arguments.length === 1) {
			this._labelPositions = value;
			return value;
		} else {
			return this._labelPositions;
		}
	}
	,
	_targetPanel: null,
	targetPanel: function (value) {
		if (arguments.length === 1) {
			this._targetPanel = value;
			return value;
		} else {
			return this._targetPanel;
		}
	}
	,
	_axis: null,
	axis: function (value) {
		if (arguments.length === 1) {
			this._axis = value;
			return value;
		} else {
			return this._axis;
		}
	}
	,
	_floatPanelAction: null,
	floatPanelAction: function (value) {
		if (arguments.length === 1) {
			this._floatPanelAction = value;
			return value;
		} else {
			return this._floatPanelAction;
		}
	}
	,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.floatPanelAction(function (crossing) {
		});
	},
	clear: function (windowRect, viewportRect) {
		this.labelDataContext().clear();
		this.labelPositions().clear();
		this.targetPanel().axis(this.axis());
		this.targetPanel().windowRect(windowRect);
		this.targetPanel().viewportRect(viewportRect);
		if (viewportRect.isEmpty() || windowRect.isEmpty()) {
			this.setTextBlockCount(0);
		}
		if (this.axis().textBlocks().count() == 0) {
			this.targetPanel().children().clear();
		}
	}
	,
	addLabelObject: function (labelObject, position) {
		this.labelDataContext().add1(labelObject);
		this.labelPositions().add(position);
	}
	,
	updateLabelPanel: function () {
		this.targetPanel().labelDataContext(this.labelDataContext());
		this.targetPanel().labelPositions(this.labelPositions());
	}
	,
	bindLabel: function (label) {
	}
	,
	bindTitleLabel: function (label) {
	}
	,
	addLabel: function (label) {
		this.targetPanel().children().add(label);
	}
	,
	setLabelInterval: function (p) {
		this.targetPanel().interval(p);
	}
	,
	floatPanel: function (crossingValue) {
		this.floatPanelAction()(crossingValue);
	}
	,
	getTextBlock: function (i) {
		var tb = this.axis().textBlocks().item(i);
		return tb;
	}
	,
	setTextBlockCount: function (p) {
		if (this.axis() == null) {
			return;
		}
		this.axis().textBlocks().count(p);
	}
	,
	labelsHidden: function () {
		if (this.axis() == null || this.axis().labelSettings() == null) {
			return false;
		}
		return this.axis().labelSettings().visibility() != $.ig.Visibility.prototype.visible;
	}
	,
	resetLabels: function () {
		this.axis().textBlocks().count(0);
		this.axis().labelPanel().textBlocks().clear();
	}
	,
	notifyMustRefresh: function () {
		this.axis().mustInvalidateLabels(true);
	}
	,
	$type: new $.ig.Type('AxisLabelManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LabelPosition', 'Object', {
	_value: 0,
	value: function (value) {
		if (arguments.length === 1) {
			this._value = value;
			return value;
		} else {
			return this._value;
		}
	}
	,
	init: function (value) {
		$.ig.Object.prototype.init.call(this);
		this.value(value);
	},
	$type: new $.ig.Type('LabelPosition', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisRenderingParametersBase', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.rangeInfos(new $.ig.List$1($.ig.RangeInfo.prototype.$type, 0));
	},
	_heuristicResolution: 0,
	heuristicResolution: function (value) {
		if (arguments.length === 1) {
			this._heuristicResolution = value;
			return value;
		} else {
			return this._heuristicResolution;
		}
	}
	,
	_viewportRect: null,
	viewportRect: function (value) {
		if (arguments.length === 1) {
			this._viewportRect = value;
			return value;
		} else {
			return this._viewportRect;
		}
	}
	,
	_windowRect: null,
	windowRect: function (value) {
		if (arguments.length === 1) {
			this._windowRect = value;
			return value;
		} else {
			return this._windowRect;
		}
	}
	,
	_effectiveViewportRect: null,
	effectiveViewportRect: function (value) {
		if (arguments.length === 1) {
			this._effectiveViewportRect = value;
			return value;
		} else {
			return this._effectiveViewportRect;
		}
	}
	,
	_contentViewport: null,
	contentViewport: function (value) {
		if (arguments.length === 1) {
			this._contentViewport = value;
			return value;
		} else {
			return this._contentViewport;
		}
	}
	,
	_rangeInfos: null,
	rangeInfos: function (value) {
		if (arguments.length === 1) {
			this._rangeInfos = value;
			return value;
		} else {
			return this._rangeInfos;
		}
	}
	,
	_currentRangeInfo: null,
	currentRangeInfo: function (value) {
		if (arguments.length === 1) {
			this._currentRangeInfo = value;
			return value;
		} else {
			return this._currentRangeInfo;
		}
	}
	,
	_tickmarkValues: null,
	tickmarkValues: function (value) {
		if (arguments.length === 1) {
			this._tickmarkValues = value;
			return value;
		} else {
			return this._tickmarkValues;
		}
	}
	,
	_strips: null,
	strips: function (value) {
		if (arguments.length === 1) {
			this._strips = value;
			return value;
		} else {
			return this._strips;
		}
	}
	,
	_major: null,
	major: function (value) {
		if (arguments.length === 1) {
			this._major = value;
			return value;
		} else {
			return this._major;
		}
	}
	,
	_minor: null,
	minor: function (value) {
		if (arguments.length === 1) {
			this._minor = value;
			return value;
		} else {
			return this._minor;
		}
	}
	,
	_axisGeometry: null,
	axisGeometry: function (value) {
		if (arguments.length === 1) {
			this._axisGeometry = value;
			return value;
		} else {
			return this._axisGeometry;
		}
	}
	,
	_actualMinimumValue: 0,
	actualMinimumValue: function (value) {
		if (arguments.length === 1) {
			this._actualMinimumValue = value;
			return value;
		} else {
			return this._actualMinimumValue;
		}
	}
	,
	_actualMaximumValue: 0,
	actualMaximumValue: function (value) {
		if (arguments.length === 1) {
			this._actualMaximumValue = value;
			return value;
		} else {
			return this._actualMaximumValue;
		}
	}
	,
	_crossingValue: 0,
	crossingValue: function (value) {
		if (arguments.length === 1) {
			this._crossingValue = value;
			return value;
		} else {
			return this._crossingValue;
		}
	}
	,
	_relativeCrossingValue: 0,
	relativeCrossingValue: function (value) {
		if (arguments.length === 1) {
			this._relativeCrossingValue = value;
			return value;
		} else {
			return this._relativeCrossingValue;
		}
	}
	,
	_label: null,
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	,
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_hasUserInterval: false,
	hasUserInterval: function (value) {
		if (arguments.length === 1) {
			this._hasUserInterval = value;
			return value;
		} else {
			return this._hasUserInterval;
		}
	}
	,
	_hasUserMax: false,
	hasUserMax: function (value) {
		if (arguments.length === 1) {
			this._hasUserMax = value;
			return value;
		} else {
			return this._hasUserMax;
		}
	}
	,
	_shouldRenderMinorLines: false,
	shouldRenderMinorLines: function (value) {
		if (arguments.length === 1) {
			this._shouldRenderMinorLines = value;
			return value;
		} else {
			return this._shouldRenderMinorLines;
		}
	}
	,
	_currentRenderingInfo: null,
	currentRenderingInfo: function (value) {
		if (arguments.length === 1) {
			this._currentRenderingInfo = value;
			return value;
		} else {
			return this._currentRenderingInfo;
		}
	}
	,
	_axisRenderingInfo: null,
	axisRenderingInfo: function (value) {
		if (arguments.length === 1) {
			this._axisRenderingInfo = value;
			return value;
		} else {
			return this._axisRenderingInfo;
		}
	}
	,
	_majorRenderingInfo: null,
	majorRenderingInfo: function (value) {
		if (arguments.length === 1) {
			this._majorRenderingInfo = value;
			return value;
		} else {
			return this._majorRenderingInfo;
		}
	}
	,
	_minorRenderingInfo: null,
	minorRenderingInfo: function (value) {
		if (arguments.length === 1) {
			this._minorRenderingInfo = value;
			return value;
		} else {
			return this._minorRenderingInfo;
		}
	}
	,
	_minorInterval: 0,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this._minorInterval = value;
			return value;
		} else {
			return this._minorInterval;
		}
	}
	,
	$type: new $.ig.Type('AxisRenderingParametersBase', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CategoryAxisRenderingParameters', 'AxisRenderingParametersBase', {
	init: function () {
		$.ig.AxisRenderingParametersBase.prototype.init.call(this);
	},
	_count: 0,
	count: function (value) {
		if (arguments.length === 1) {
			this._count = value;
			return value;
		} else {
			return this._count;
		}
	}
	,
	_categoryMode: 0,
	categoryMode: function (value) {
		if (arguments.length === 1) {
			this._categoryMode = value;
			return value;
		} else {
			return this._categoryMode;
		}
	}
	,
	_wrapAround: false,
	wrapAround: function (value) {
		if (arguments.length === 1) {
			this._wrapAround = value;
			return value;
		} else {
			return this._wrapAround;
		}
	}
	,
	_mode2GroupCount: 0,
	mode2GroupCount: function (value) {
		if (arguments.length === 1) {
			this._mode2GroupCount = value;
			return value;
		} else {
			return this._mode2GroupCount;
		}
	}
	,
	_isInverted: false,
	isInverted: function (value) {
		if (arguments.length === 1) {
			this._isInverted = value;
			return value;
		} else {
			return this._isInverted;
		}
	}
	,
	$type: new $.ig.Type('CategoryAxisRenderingParameters', $.ig.AxisRenderingParametersBase.prototype.$type)
}, true);

$.ig.util.defType('AxisRendererBase', 'Object', {
	init: function (labelManager) {
		var $self = this;
		$.ig.Object.prototype.init.call(this);
		this.clear(function () {
		});
		this.shouldRender(function (r1, r2) {
			return false;
		});
		this.onRendering(function () {
		});
		this.scaling(function (p, v) {
			return v;
		});
		this.strip(function (p, g, min, max) {
		});
		this.line(function (p, g, v) {
		});
		this.shouldRenderLines(function (p, v) {
			return false;
		});
		this.shouldRenderContent(function (p, v) {
			return $self.shouldRenderLines()(p, v);
		});
		this.axisLine(function (p) {
		});
		this.determineCrossingValue(function (p) {
		});
		this.shouldRenderLabel(function (p, v, last) {
			return false;
		});
		this.getLabelLocation(function (p, v) {
			return new $.ig.LabelPosition(v);
		});
		this.transformToLabelValue(function (p, v) {
			return v;
		});
		this.getLabelForItem(function (item) { return null; });
		this.snapMajorValue(function (p, v, i, interval) { return v; });
		this.adjustMajorValue(function (p, v, i, interval) { return v; });
		this.labelManager(labelManager);
		this.createRenderingParams(function (r1, r2, r3, r4) {
			return null;
		});
	},
	_clear: null,
	clear: function (value) {
		if (arguments.length === 1) {
			this._clear = value;
			return value;
		} else {
			return this._clear;
		}
	}
	,
	_shouldRender: null,
	shouldRender: function (value) {
		if (arguments.length === 1) {
			this._shouldRender = value;
			return value;
		} else {
			return this._shouldRender;
		}
	}
	,
	_onRendering: null,
	onRendering: function (value) {
		if (arguments.length === 1) {
			this._onRendering = value;
			return value;
		} else {
			return this._onRendering;
		}
	}
	,
	_scaling: null,
	scaling: function (value) {
		if (arguments.length === 1) {
			this._scaling = value;
			return value;
		} else {
			return this._scaling;
		}
	}
	,
	_strip: null,
	strip: function (value) {
		if (arguments.length === 1) {
			this._strip = value;
			return value;
		} else {
			return this._strip;
		}
	}
	,
	_line: null,
	line: function (value) {
		if (arguments.length === 1) {
			this._line = value;
			return value;
		} else {
			return this._line;
		}
	}
	,
	_shouldRenderLines: null,
	shouldRenderLines: function (value) {
		if (arguments.length === 1) {
			this._shouldRenderLines = value;
			return value;
		} else {
			return this._shouldRenderLines;
		}
	}
	,
	_shouldRenderContent: null,
	shouldRenderContent: function (value) {
		if (arguments.length === 1) {
			this._shouldRenderContent = value;
			return value;
		} else {
			return this._shouldRenderContent;
		}
	}
	,
	_axisLine: null,
	axisLine: function (value) {
		if (arguments.length === 1) {
			this._axisLine = value;
			return value;
		} else {
			return this._axisLine;
		}
	}
	,
	_determineCrossingValue: null,
	determineCrossingValue: function (value) {
		if (arguments.length === 1) {
			this._determineCrossingValue = value;
			return value;
		} else {
			return this._determineCrossingValue;
		}
	}
	,
	_shouldRenderLabel: null,
	shouldRenderLabel: function (value) {
		if (arguments.length === 1) {
			this._shouldRenderLabel = value;
			return value;
		} else {
			return this._shouldRenderLabel;
		}
	}
	,
	_getLabelLocation: null,
	getLabelLocation: function (value) {
		if (arguments.length === 1) {
			this._getLabelLocation = value;
			return value;
		} else {
			return this._getLabelLocation;
		}
	}
	,
	_transformToLabelValue: null,
	transformToLabelValue: function (value) {
		if (arguments.length === 1) {
			this._transformToLabelValue = value;
			return value;
		} else {
			return this._transformToLabelValue;
		}
	}
	,
	_labelManager: null,
	labelManager: function (value) {
		if (arguments.length === 1) {
			this._labelManager = value;
			return value;
		} else {
			return this._labelManager;
		}
	}
	,
	_getLabelForItem: null,
	getLabelForItem: function (value) {
		if (arguments.length === 1) {
			this._getLabelForItem = value;
			return value;
		} else {
			return this._getLabelForItem;
		}
	}
	,
	_createRenderingParams: null,
	createRenderingParams: function (value) {
		if (arguments.length === 1) {
			this._createRenderingParams = value;
			return value;
		} else {
			return this._createRenderingParams;
		}
	}
	,
	_snapMajorValue: null,
	snapMajorValue: function (value) {
		if (arguments.length === 1) {
			this._snapMajorValue = value;
			return value;
		} else {
			return this._snapMajorValue;
		}
	}
	,
	_adjustMajorValue: null,
	adjustMajorValue: function (value) {
		if (arguments.length === 1) {
			this._adjustMajorValue = value;
			return value;
		} else {
			return this._adjustMajorValue;
		}
	}
	,
	_getGroupCenter: null,
	getGroupCenter: function (value) {
		if (arguments.length === 1) {
			this._getGroupCenter = value;
			return value;
		} else {
			return this._getGroupCenter;
		}
	}
	,
	_getUnscaledGroupCenter: null,
	getUnscaledGroupCenter: function (value) {
		if (arguments.length === 1) {
			this._getUnscaledGroupCenter = value;
			return value;
		} else {
			return this._getUnscaledGroupCenter;
		}
	}
	,
	render: function (animate, viewportRect, windowRect, effectiveViewportRect, contentViewport) {
		this.clearLabels(windowRect, viewportRect);
		if (this.shouldRender()(viewportRect, windowRect)) {
			this.onRendering()();
			var renderingParams = this.createRenderingParams()(viewportRect, windowRect, effectiveViewportRect, contentViewport);
			this.clearLabels(windowRect, viewportRect);
			if (renderingParams == null) {
				this.resetLabels();
				return null;
			}
			if (renderingParams.rangeInfos().count() > 1 && !renderingParams.hasUserInterval()) {
				this.spreadInterval(renderingParams);
			}
			var en = renderingParams.rangeInfos().getEnumerator();
			while (en.moveNext()) {
				var range = en.current();
				renderingParams.currentRangeInfo(range);
				if ($.ig.util.isNaN(range.visibleMaximum()) || Number.isInfinity(range.visibleMaximum()) || $.ig.util.isNaN(range.visibleMinimum()) || Number.isInfinity(range.visibleMinimum())) {
					continue;
				}
				if (range.visibleMinimum() == range.visibleMaximum()) {
					continue;
				}
				this.determineCrossingValue()(renderingParams);
				this.labelManager().floatPanel(renderingParams.relativeCrossingValue());
				var mode = $.ig.CategoryMode.prototype.mode0;
				var mode2GroupCount = 0;
				var isInverted = false;
				var getUnscaledGroupCenter = function (n) { return n; };
				if (this.getGroupCenter() != null) {
					getUnscaledGroupCenter = this.getUnscaledGroupCenter();
				}
				if ($.ig.util.cast($.ig.CategoryAxisRenderingParameters.prototype.$type, renderingParams) !== null) {
					mode = (renderingParams).categoryMode();
					mode2GroupCount = (renderingParams).mode2GroupCount();
					isInverted = (renderingParams).isInverted();
				}
				renderingParams.tickmarkValues(this.getTickmarkValues(renderingParams));
				renderingParams.tickmarkValues().initialize((function () {
					var $ret = new $.ig.TickmarkValuesInitializationParameters();
					$ret.visibleMinimum(renderingParams.currentRangeInfo().visibleMinimum());
					$ret.visibleMaximum(renderingParams.currentRangeInfo().visibleMaximum());
					$ret.actualMinimum(renderingParams.actualMinimumValue());
					$ret.actualMaximum(renderingParams.actualMaximumValue());
					$ret.resolution(renderingParams.currentRangeInfo().resolution());
					$ret.hasUserInterval(renderingParams.hasUserInterval());
					$ret.userInterval(renderingParams.interval());
					$ret.minorInterval(renderingParams.minorInterval());
					$ret.heuristicResolution(renderingParams.heuristicResolution());
					$ret.intervalOverride(renderingParams.currentRangeInfo().intervalOverride());
					$ret.minorCountOverride(renderingParams.currentRangeInfo().minorCountOverride());
					$ret.mode(mode);
					$ret.mode2GroupCount(mode2GroupCount);
					$ret.window(renderingParams.windowRect());
					$ret.viewport(renderingParams.viewportRect());
					$ret.isInverted(isInverted);
					$ret.getUnscaledGroupCenter(getUnscaledGroupCenter);
					return $ret;
				}()));
				this.renderInternal(renderingParams);
			}
			this.renderLabels();
			return renderingParams;
		}
		return null;
	}
	,
	resetLabels: function () {
		this.labelManager().resetLabels();
	}
	,
	spreadInterval: function (renderingParams) {
		var maxInterval = -1.7976931348623157E+308;
		var maxMinorCount = -2147483648;
		var mode = $.ig.CategoryMode.prototype.mode0;
		var mode2GroupCount = 0;
		var isInverted = false;
		var getUnscaledGroupCenter = function (n) { return n; };
		if (this.getGroupCenter() != null) {
			getUnscaledGroupCenter = this.getUnscaledGroupCenter();
		}
		if ($.ig.util.cast($.ig.CategoryAxisRenderingParameters.prototype.$type, renderingParams) !== null) {
			mode = (renderingParams).categoryMode();
			mode2GroupCount = (renderingParams).mode2GroupCount();
			isInverted = (renderingParams).isInverted();
		}
		var en = renderingParams.rangeInfos().getEnumerator();
		while (en.moveNext()) {
			var rangeInfo = en.current();
			renderingParams.currentRangeInfo(rangeInfo);
			renderingParams.tickmarkValues().initialize((function () {
				var $ret = new $.ig.TickmarkValuesInitializationParameters();
				$ret.visibleMinimum(rangeInfo.visibleMinimum());
				$ret.visibleMaximum(rangeInfo.visibleMaximum());
				$ret.actualMinimum(renderingParams.actualMinimumValue());
				$ret.actualMaximum(renderingParams.actualMaximumValue());
				$ret.resolution(rangeInfo.resolution());
				$ret.hasUserInterval(renderingParams.hasUserInterval());
				$ret.userInterval(renderingParams.interval());
				$ret.intervalOverride(rangeInfo.intervalOverride());
				$ret.minorCountOverride(rangeInfo.minorCountOverride());
				$ret.heuristicResolution(renderingParams.heuristicResolution());
				$ret.minorInterval(renderingParams.minorInterval());
				$ret.mode(mode);
				$ret.mode2GroupCount(mode2GroupCount);
				$ret.window(renderingParams.windowRect());
				$ret.viewport(renderingParams.viewportRect());
				$ret.isInverted(isInverted);
				$ret.getUnscaledGroupCenter(getUnscaledGroupCenter);
				return $ret;
			}()));
			rangeInfo.intervalOverride(renderingParams.tickmarkValues().interval());
			rangeInfo.minorCountOverride(renderingParams.tickmarkValues().minorCount());
			if (!$.ig.util.isNaN(renderingParams.tickmarkValues().interval())) {
				maxInterval = Math.max(maxInterval, renderingParams.tickmarkValues().interval());
				maxMinorCount = Math.max(maxMinorCount, renderingParams.tickmarkValues().minorCount());
			}
		}
		var en1 = renderingParams.rangeInfos().getEnumerator();
		while (en1.moveNext()) {
			var rangeInfo1 = en1.current();
			if (rangeInfo1.intervalOverride() == maxInterval) {
				rangeInfo1.intervalOverride(-1);
				rangeInfo1.minorCountOverride(-1);
			} else {
				rangeInfo1.intervalOverride(maxInterval);
				rangeInfo1.minorCountOverride(maxMinorCount);
			}
		}
	}
	,
	clearLabels: function (windowRect, viewportRect) {
		this.clear()();
		this.labelManager().clear(windowRect, viewportRect);
		this.labelManager().updateLabelPanel();
	}
	,
	renderLabels: function () {
		this.labelManager().updateLabelPanel();
		var mustRefresh = false;
		if (this.labelManager().labelsHidden()) {
			this.labelManager().setTextBlockCount(0);
		} else {
			var textBlockCount = 0;
			var en = this.labelManager().labelDataContext().getEnumerator();
			while (en.moveNext()) {
				var labelObj = en.current();
				var label = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, labelObj);
				if (label == null) {
					label = this.labelManager().getTextBlock(textBlockCount);
					var currentText = (label).text();
					var nextText = labelObj.toString();
					var currentLen = 0;
					var nextLen = 0;
					if (currentText != null) {
						currentLen = currentText.length;
					}
					if (nextText != null) {
						nextLen = nextText.length;
					}
					if (currentLen != nextLen) {
						mustRefresh = true;
					}
					(label).text(nextText);
					textBlockCount++;
				} else {
					this.labelManager().addLabel(label);
				}
			}
			if (mustRefresh) {
				this.labelManager().notifyMustRefresh();
			}
			this.labelManager().setTextBlockCount(textBlockCount);
		}
	}
	,
	getTickmarkValues: function (renderingParams) {
		return renderingParams.tickmarkValues();
	}
	,
	renderInternal: function (renderingParams) {
		var majorTicks = renderingParams.tickmarkValues().majorValuesArray();
		var minorTicks = renderingParams.tickmarkValues().minorValuesArray();
		this.labelManager().setLabelInterval(this.scaling()(renderingParams, renderingParams.tickmarkValues().interval()));
		this.axisLine()(renderingParams);
		for (var maj = 0; maj < majorTicks.length; maj++) {
			var absoluteIndex = renderingParams.tickmarkValues().firstIndex() + maj;
			var majorTick = majorTicks[maj];
			var unscaledValue = majorTick;
			var nextUnscaledValue = 0;
			if (maj < majorTicks.length - 1) {
				nextUnscaledValue = majorTicks[maj + 1];
			} else {
				nextUnscaledValue = Number.POSITIVE_INFINITY;
			}
			unscaledValue = this.snapMajorValue()(renderingParams, unscaledValue, absoluteIndex, renderingParams.tickmarkValues().interval());
			nextUnscaledValue = this.snapMajorValue()(renderingParams, nextUnscaledValue, absoluteIndex, renderingParams.tickmarkValues().interval());
			var majorValue = this.scaling()(renderingParams, unscaledValue);
			var nextMajorValue = this.scaling()(renderingParams, nextUnscaledValue);
			if (this.shouldRenderLines()(renderingParams, majorValue)) {
				if (absoluteIndex % 2 == 0 && this.shouldRenderContent()(renderingParams, nextMajorValue) && !Number.isInfinity(nextMajorValue)) {
					this.strip()(renderingParams, renderingParams.strips(), majorValue, nextMajorValue);
				}
				renderingParams.currentRenderingInfo(renderingParams.majorRenderingInfo());
				this.line()(renderingParams, renderingParams.major(), majorValue);
				renderingParams.currentRenderingInfo(null);
			}
			majorValue = this.adjustMajorValue()(renderingParams, majorValue, absoluteIndex, renderingParams.tickmarkValues().interval());
			if (!$.ig.util.isNaN(majorValue) && !Number.isInfinity(majorValue) && this.shouldRenderLabel()(renderingParams, majorValue, maj == majorTicks.length - 1)) {
				var label = this.getLabel(renderingParams, unscaledValue, absoluteIndex, renderingParams.tickmarkValues().interval());
				if (label != null) {
					this.labelManager().addLabelObject(label, this.getLabelLocation()(renderingParams, majorValue));
				}
			}
		}
		if (renderingParams.shouldRenderMinorLines()) {
			for (var min = 0; min < minorTicks.length; min++) {
				var minorTick = minorTicks[min];
				var minorValue = this.scaling()(renderingParams, minorTick);
				renderingParams.currentRenderingInfo(renderingParams.minorRenderingInfo());
				this.line()(renderingParams, renderingParams.minor(), minorValue);
				renderingParams.currentRenderingInfo(null);
			}
		}
	}
	,
	getLabel: function (renderingParams, unscaledValue, index, interval) {
		return null;
	}
	,
	$type: new $.ig.Type('AxisRendererBase', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('NumericAxisRenderingParameters', 'AxisRenderingParametersBase', {
	init: function () {
		$.ig.AxisRenderingParametersBase.prototype.init.call(this);
	},
	$type: new $.ig.Type('NumericAxisRenderingParameters', $.ig.AxisRenderingParametersBase.prototype.$type)
}, true);

$.ig.util.defType('ISortingAxis', 'Object', {
	$type: new $.ig.Type('ISortingAxis', null)
}, true);

$.ig.util.defType('CategoryDateTimeXAxis', 'CategoryAxisBase', {
	init: function () {
		$.ig.CategoryAxisBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.CategoryDateTimeXAxis.prototype.$type);
		this.__actualMinimumValue = new Date();
		this.__actualMaximumValue = new Date();
	},
	createView: function () {
		return new $.ig.CategoryDateTimeXAxisView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.CategoryAxisBase.prototype.onViewCreated.call(this, view);
		this.dateTimeView(view);
	}
	,
	_dateTimeView: null,
	dateTimeView: function (value) {
		if (arguments.length === 1) {
			this._dateTimeView = value;
			return value;
		} else {
			return this._dateTimeView;
		}
	}
	,
	isSorting: function () {
		return true;
	}
	,
	isDateTime: function () {
		return true;
	}
	,
	displayType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.displayTypeProperty, $.ig.TimeAxisDisplayType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.CategoryDateTimeXAxis.prototype.displayTypeProperty));
		}
	}
	,
	isDataPreSorted: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedProperty);
		}
	}
	,
	minimumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.minimumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryDateTimeXAxis.prototype.minimumValueProperty);
		}
	}
	,
	maximumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.maximumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryDateTimeXAxis.prototype.maximumValueProperty);
		}
	}
	,
	interval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.intervalProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.CategoryDateTimeXAxis.prototype.intervalProperty));
		}
	}
	,
	_actualInterval: 0,
	actualInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualInterval() != value) {
				var oldValue = this._actualInterval;
				this._actualInterval = value;
				this.raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.actualIntervalPropertyName, oldValue, this.actualInterval());
			}
			return value;
		} else {
			return this._actualInterval;
		}
	}
	,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.minorIntervalProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.CategoryDateTimeXAxis.prototype.minorIntervalProperty));
		}
	}
	,
	_actualMinorInterval: 0,
	actualMinorInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualMinorInterval() != value) {
				var oldValue = this._actualMinorInterval;
				this._actualMinorInterval = value;
				this.raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.actualMinorIntervalPropertyName, oldValue, this.actualMinorInterval());
			}
			return value;
		} else {
			return this._actualMinorInterval;
		}
	}
	,
	validateAxis: function (viewportRect, windowRect, view) {
		var isValid = $.ig.CategoryAxisBase.prototype.validateAxis.call(this, viewportRect, windowRect, view);
		if (!isValid) {
			return false;
		}
		return +(this.actualMinimumValue()) != +(this.actualMaximumValue());
	}
	,
	createLabelPanel: function () {
		if (this.useSmartAxis()) {
			return new $.ig.HorizontalSmartAxisLabelPanel();
		} else {
			return new $.ig.HorizontalAxisLabelPanel();
		}
	}
	,
	getCategorySize: function (windowRect, viewportRect, effectiveViewportRect) {
		if (this._cachedItemsCount == 0) {
			return 0;
		}
		var resolvedViewportRect = this.getInitialSafeViewport(viewportRect, effectiveViewportRect);
		return resolvedViewportRect.width() / (this._cachedItemsCount * windowRect.width());
	}
	,
	getGroupCenter: function (groupIndex, windowRect, viewportRect, effectiveViewportRect) {
		return this.getCategorySize(windowRect, viewportRect, effectiveViewportRect) * 0.5;
	}
	,
	getGroupSize: function (windowRect, viewportRect, effectiveviewportRect) {
		var gap = !$.ig.util.isNaN(this.gap()) ? $.ig.MathUtil.prototype.clamp(this.gap(), 0, 1) : 0;
		var categorySpace = 1 - 0.5 * gap;
		var ret = this.getCategorySize(windowRect, viewportRect, effectiveviewportRect) * categorySpace;
		return ret;
	}
	,
	getAxisInterval: function () {
		return this.actualInterval();
	}
	,
	__sorderDateTimeIndices: null,
	sortedDateTimeIndices: function (value) {
		if (arguments.length === 1) {
			this.__sorderDateTimeIndices = value;
			return value;
		} else {
			return this.__sorderDateTimeIndices;
		}
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.CategoryAxisBase.prototype.renderAxisOverride.call(this, animate);
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = !windowRect.isEmpty() ? this.viewportRect() : $.ig.Rect.prototype.empty();
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var resolvedViewportRect = this.getContentViewport();
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var axisGeometry = this.view().getAxisLinesGeometry();
		var stripsGeometry = this.view().getStripsGeometry();
		var majorGeometry = this.view().getMajorLinesGeometry();
		var minorGeometry = this.view().getMinorLinesGeometry();
		var axisLinesPathInfo = this.view().getAxisLinesPathInfo();
		var majorLinesPathInfo = this.view().getMajorLinesPathInfo();
		var minorLinesPathInfo = this.view().getMinorLinesPathInfo();
		this.updateLineVisibility();
		this.clearMarks(axisGeometry);
		this.clearMarks(stripsGeometry);
		this.clearMarks(majorGeometry);
		this.clearMarks(minorGeometry);
		this.labelDataContext().clear();
		this.labelPositions().clear();
		this.majorLinePositions().clear();
		this.labelPanel().axis(this);
		this.labelPanel().windowRect(windowRect);
		this.labelPanel().viewportRect(viewportRect);
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			this.textBlocks().count(0);
		}
		if (this.textBlocks().count() == 0) {
			this.labelPanel().children().clear();
		}
		if (this.labelSettings() != null) {
			this.labelSettings().registerAxis(this);
		}
		this.initializeActualMinimumAndMaximum();
		if (this.dateTimeColumn() == null && !this.maximumValueIsSet() && !this.minimumValueIsSet()) {
			return;
		}
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && (this.displayType() != $.ig.TimeAxisDisplayType.prototype.discrete || this.dateTimeColumn() != null)) {
			var crossingValue = viewportRect.bottom();
			var relativeCrossingValue = crossingValue - viewportRect.top();
			if (this.crossingAxis() != null) {
				var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.crossingAxis());
				if (yAxis != null) {
					var $ret = this.scaleCrossingValue(crossingValue, relativeCrossingValue, windowRect, viewportRect, effectiveViewportRect, viewportRect.top(), viewportRect.bottom());
					crossingValue = $ret.p0;
					relativeCrossingValue = $ret.p1;
				}
			}
			if ($.ig.util.isNaN(crossingValue)) {
				crossingValue = 0;
			}
			this.horizontalLine(axisGeometry, crossingValue, viewportRect, axisLinesPathInfo, true);
			this.labelPanel().crossingValue(relativeCrossingValue);
			if (this.displayType() == $.ig.TimeAxisDisplayType.prototype.discrete) {
				var first = (this).getFirstVisibleIndex(windowRect, viewportRect, effectiveViewportRect, resolvedViewportRect);
				var last = (this).getLastVisibleIndex(windowRect, viewportRect, effectiveViewportRect, resolvedViewportRect);
				if (first < 0 || last < 0) {
					return;
				}
				var lastMajorValue = NaN;
				for (var i = first; i <= last; i++) {
					var sortedIndex = this.sortedDateTimeIndices() == null ? i : this.sortedDateTimeIndices().__inner[i];
					var majorValue = this.getScaledValue(this.dateTimeColumn().item(sortedIndex).getTime(), xParams);
					if (majorValue == lastMajorValue) {
						continue;
					}
					lastMajorValue = majorValue;
					if (this.categoryMode() == $.ig.CategoryMode.prototype.mode2) {
						majorValue += this.isInverted() ? -this.getGroupCenter(i, windowRect, viewportRect, effectiveViewportRect) : this.getGroupCenter(i, windowRect, viewportRect, effectiveViewportRect);
					}
					if (majorValue < resolvedViewportRect.left() || majorValue > resolvedViewportRect.right()) {
						continue;
					}
					this.verticalLine(majorGeometry, majorValue, viewportRect, majorLinesPathInfo, false);
					this.majorLinePositions().add(majorValue);
					if (this.fastItemsSource() != null && i < this.fastItemsSource().count()) {
						var dataItem = this.fastItemsSource().item(sortedIndex);
						var labelText = $.ig.CategoryAxisBase.prototype.getLabel.call(this, dataItem);
						if (!$.ig.util.isNaN(majorValue) && !Number.isInfinity(majorValue) && labelText != null) {
							if ((typeof labelText === 'string') && (labelText).equals("")) {
							} else {
								this.labelDataContext().add1(labelText);
								this.labelPositions().add(new $.ig.LabelPosition(majorValue));
							}
						}
					}
				}
			} else {
				var visibleMinimum = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
				var visibleMaximum = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
				var trueVisibleMinimum = Math.min(visibleMinimum, visibleMaximum);
				var trueVisibleMaximum = Math.max(visibleMinimum, visibleMaximum);
				var snapper = new $.ig.LinearNumericSnapper(0, trueVisibleMinimum, trueVisibleMaximum, resolvedViewportRect.width(), this.resolveHeuristicResolution());
				var interval = this.hasUserInterval() ? this.getUserIntervalTicks() : snapper.interval();
				this.setActualIntervalInternal($.ig.truncate(interval));
				var first1 = $.ig.truncate(Math.floor((trueVisibleMinimum - this.actualMinimumValue().getTime()) / interval));
				var last1 = $.ig.truncate(Math.ceil((trueVisibleMaximum - this.actualMinimumValue().getTime()) / interval));
				var offset = 0;
				if (this.categoryMode() == $.ig.CategoryMode.prototype.mode2) {
					offset = this.getGroupCenter(0, windowRect, viewportRect, effectiveViewportRect);
					offset = this.isInverted() ? -offset : offset;
				}
				var viewportPixelRight = $.ig.truncate(Math.ceil(resolvedViewportRect.right()));
				var viewportPixelLeft = $.ig.truncate(Math.floor(resolvedViewportRect.left()));
				var majorValue1 = this.getScaledValue(this.actualMinimumValue().getTime() + first1 * interval, xParams) + offset;
				for (var i1 = first1; i1 <= last1; i1++) {
					var nextMajorValue = this.getScaledValue(this.actualMinimumValue().getTime() + (i1 + 1) * interval, xParams) + offset;
					if (!$.ig.util.isNaN(majorValue1) && !Number.isInfinity(majorValue1)) {
						var categoryPixelValue = $.ig.truncate(Math.round(majorValue1));
						if (categoryPixelValue <= viewportPixelRight) {
							if (i1 % 2 == 0) {
								this.verticalStrip(stripsGeometry, majorValue1, nextMajorValue, viewportRect);
							}
							this.verticalLine(majorGeometry, majorValue1, viewportRect, majorLinesPathInfo, false);
							this.majorLinePositions().add(majorValue1);
							if (this.shouldRenderMinorLines()) {
								var minorIntervalTicks = this.getMinorIntervalTicks();
								if (minorIntervalTicks > 0 && minorIntervalTicks < interval) {
									if (interval / minorIntervalTicks < 20) {
										var curValue = majorValue1;
										var step = Math.abs(this.getScaledValue(this.actualMinimumValue().getTime() + minorIntervalTicks, xParams) - this.getScaledValue(this.actualMinimumValue().getTime(), xParams));
										while (curValue + step < nextMajorValue) {
											if (Math.abs(curValue + step - nextMajorValue) < 0.0001) {
												break;
											}
											curValue += step;
											if (curValue > 0) {
												this.verticalLine(minorGeometry, curValue, viewportRect, minorLinesPathInfo, false);
											}
										}
										this.setActualMinorIntervalInternal(minorIntervalTicks);
									}
								} else {
									for (var j = 1; j < snapper.minorCount(); ++j) {
										var minorValue = this.getScaledValue(this.actualMinimumValue().getTime() + i1 * interval + (j * interval) / snapper.minorCount(), xParams) + offset;
										this.verticalLine(minorGeometry, minorValue, viewportRect, minorLinesPathInfo, false);
									}
									if (snapper.minorCount() > 0) {
										this.setActualMinorIntervalInternal($.ig.truncate((interval / snapper.minorCount())));
									}
								}
							}
						}
						if (categoryPixelValue >= viewportPixelLeft && categoryPixelValue <= viewportPixelRight) {
							var majorX = this.actualMinimumValue().getTime() + i1 * interval;
							var ticks_ = $.ig.truncate(Math.floor(majorX));
							var dateValue = new Date(ticks_);
							var labelText1 = this.getLabel(dateValue);
							if (labelText1 != null) {
								this.labelDataContext().add1(labelText1);
								this.labelPositions().add(new $.ig.LabelPosition(majorValue1));
							}
						}
					}
					majorValue1 = nextMajorValue;
				}
			}
			if ((this.labelSettings() == null || this.labelSettings().visibility() == $.ig.Visibility.prototype.visible) && this.crossingAxis() != null) {
				if (this.labelSettings() != null && (this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideTop || this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideBottom)) {
					this.seriesViewer().invalidatePanels();
				}
			}
			this.labelPanel().labelDataContext(this.labelDataContext());
			this.labelPanel().labelPositions(this.labelPositions());
			this.renderLabels();
		}
	}
	,
	getUserIntervalTicks: function () {
		return this.actualInterval();
	}
	,
	getMinorIntervalTicks: function () {
		return this.minorInterval();
	}
	,
	setActualIntervalInternal: function (ticks) {
		this.actualInterval(ticks);
	}
	,
	setActualMinorIntervalInternal: function (ticks) {
		this.actualMinorInterval(ticks);
	}
	,
	initializeActualMinimumAndMaximum: function () {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = !windowRect.isEmpty() ? this.viewportRect() : $.ig.Rect.prototype.empty();
		var newActualMinimum = new Date();
		var newActualMaximum = new Date();
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && this.dateTimeColumn() != null) {
			var fastDateColumn = $.ig.util.cast($.ig.FastItemDateTimeColumn.prototype.$type, this.dateTimeColumn());
			if (fastDateColumn != null) {
				if (this.sortedDateTimeIndices() == null) {
					this.populateSortedIndices();
				}
			} else {
				this.sortedDateTimeIndices(null);
			}
			if (this.dateTimeColumn().count() > 0) {
				var firstIndex = this.sortedDateTimeIndices() == null ? 0 : this.sortedDateTimeIndices().__inner[0];
				var lastIndex = this.sortedDateTimeIndices() == null ? this.dateTimeColumn().count() - 1 : this.sortedDateTimeIndices().__inner[this.dateTimeColumn().count() - 1];
				newActualMinimum = this.dateTimeColumn().item(firstIndex);
				newActualMaximum = this.dateTimeColumn().item(lastIndex);
				this.hasUserInterval(false);
				if (this.categoryMode() == $.ig.CategoryMode.prototype.mode2) {
					var timeSpan = newActualMaximum.getTime() - newActualMinimum.getTime();
					var timeOffset_ = $.ig.truncate(Math.round(timeSpan * 1.25 / this._cachedItemsCount / 2));
					if (timeOffset_ == 0) {
						timeOffset_ = 1;
					}
					var minTime_ = newActualMinimum.getTime();
					var maxTime_ = newActualMaximum.getTime();
					newActualMinimum = new Date(minTime_ - timeOffset_);
					newActualMaximum = new Date(maxTime_ + timeOffset_);
				}
			}
		}
		if (this.minimumValueIsSet()) {
			newActualMinimum = this.minimumValue();
		}
		if (this.maximumValueIsSet()) {
			newActualMaximum = this.maximumValue();
		}
		if (this.intervalIsSet()) {
			this.actualInterval(this.interval());
			var span = Math.abs(newActualMaximum.getTime() - newActualMinimum.getTime());
			this.hasUserInterval(this.actualIntervalIsEmpty() || (this.displayType() == $.ig.TimeAxisDisplayType.prototype.discrete) || (1 * span / this.getUserIntervalTicks() > (viewportRect.width() / windowRect.width())) ? false : true);
		} else {
			this.hasUserInterval(false);
		}
		this.actualMinimumValue(newActualMinimum);
		this.actualMaximumValue(newActualMaximum);
	}
	,
	intervalIsSet: function () {
		return this.interval() != 0;
	}
	,
	actualIntervalIsEmpty: function () {
		return this.actualInterval() == 0;
	}
	,
	minimumValueIsSet: function () {
		return this.minimumValue() != null;
	}
	,
	maximumValueIsSet: function () {
		return this.maximumValue() != null;
	}
	,
	__actualMinimumValue: new Date(),
	actualMinimumValue: function (value) {
		if (arguments.length === 1) {
			var changed = +(this.__actualMinimumValue) != +value;
			if (changed) {
				var oldValue = this.__actualMinimumValue;
				this.__actualMinimumValue = value;
				this.raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype._actualMinimumValuePropertyName, oldValue, value);
			}
			return value;
		} else {
			return this.__actualMinimumValue;
		}
	}
	,
	__actualMaximumValue: new Date(),
	actualMaximumValue: function (value) {
		if (arguments.length === 1) {
			var changed = +(this.__actualMaximumValue) != +value;
			if (changed) {
				var oldValue = this.__actualMaximumValue;
				this.__actualMaximumValue = value;
				this.raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype._actualMaximumValuePropertyName, oldValue, value);
			}
			return value;
		} else {
			return this.__actualMaximumValue;
		}
	}
	,
	_hasUserInterval: false,
	hasUserInterval: function (value) {
		if (arguments.length === 1) {
			this._hasUserInterval = value;
			return value;
		} else {
			return this._hasUserInterval;
		}
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValueHelper(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, $.ig.Rect.prototype.empty());
			scaledValue = (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			scaledValue = p._viewportRect.left() + p._viewportRect.width() * (scaledValue - p._windowRect.left()) / p._windowRect.width();
			return scaledValue;
		}
		return this.getScaledValueHelper(unscaledValue, p._windowRect, p._viewportRect, p._effectiveViewportRect);
	}
	,
	getScaledValueHelper: function (unscaledValue, windowRect, viewportRect, effectiveViewportRect) {
		var scaledValue;
		if (+(this.actualMaximumValue()) == +(this.actualMinimumValue())) {
			scaledValue = -1;
		} else {
			scaledValue = (unscaledValue - this.actualMinimumValue().getTime()) / (this.actualMaximumValue().getTime() - this.actualMinimumValue().getTime());
		}
		var offset = 0;
		if (this.categoryMode() == $.ig.CategoryMode.prototype.mode2) {
			offset = this.getGroupCenter(0, windowRect, viewportRect, effectiveViewportRect);
		}
		if (this.isInverted()) {
			scaledValue = 1 - scaledValue;
			offset = -offset;
		}
		return viewportRect.left() + viewportRect.width() * (scaledValue - windowRect.left()) / windowRect.width() - offset;
	}
	,
	getScaledValueHelper1: function (unscaledValue, windowRect, viewportRect) {
		var scaledValue;
		if (+(this.actualMaximumValue()) == +(this.actualMinimumValue())) {
			scaledValue = -1;
		} else {
			scaledValue = (unscaledValue - this.actualMinimumValue().getTime()) / (this.actualMaximumValue().getTime() - this.actualMinimumValue().getTime());
		}
		var offset = 0;
		if (this.isInverted()) {
			scaledValue = 1 - scaledValue;
			offset = -offset;
		}
		return viewportRect.left() + viewportRect.width() * (scaledValue - windowRect.left()) / windowRect.width() - offset;
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.left() + p._windowRect.width() * (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			unscaledValue = (unscaledValue * p._viewportRect.width()) + p._viewportRect.left();
			unscaledValue = this.getUnscaledValue3(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, this.categoryMode());
			return unscaledValue;
		}
		return this.getUnscaledValue3(scaledValue, p._windowRect, p._viewportRect, this.categoryMode());
	}
	,
	getUnscaledValue3: function (scaledValue, windowRect, viewportRect, categoryMode) {
		var unscaledValue = windowRect.left() + windowRect.width() * (scaledValue - viewportRect.left()) / viewportRect.width();
		if (this.isInverted()) {
			unscaledValue = 1 - unscaledValue;
		}
		return $.ig.truncate(Math.floor(this.actualMinimumValue().getTime() + unscaledValue * (this.actualMaximumValue().getTime() - this.actualMinimumValue().getTime())));
	}
	,
	getDate: function (index) {
		return this.dateTimeColumn() == null ? $.ig.Date.prototype.minValue() : this.dateTimeColumn().item(index);
	}
	,
	scrollIntoView: function (minimum, maximum) {
		if (minimum > maximum || this.fastItemsSource() == null || this.fastItemsSource().count() == 0) {
			return;
		}
		var proportionMin = (minimum.getTime() - this.actualMinimumValue().getTime()) / (this.actualMaximumValue().getTime() - this.actualMinimumValue().getTime());
		var proprotionMax = (maximum.getTime() - this.actualMinimumValue().getTime()) / (this.actualMaximumValue().getTime() - this.actualMinimumValue().getTime());
		this.seriesViewer().windowRect(new $.ig.Rect(0, proportionMin, this.seriesViewer().windowRect().y(), proprotionMax - proportionMin, this.seriesViewer().windowRect().height()));
	}
	,
	dateTimeMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryDateTimeXAxis.prototype.dateTimeMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryDateTimeXAxis.prototype.dateTimeMemberPathProperty);
		}
	}
	,
	dateTimeColumn: function (value) {
		if (arguments.length === 1) {
			if (this._dateTimeColumn != value) {
				var oldDateTimeColumn = this._dateTimeColumn;
				this._dateTimeColumn = value;
				this.raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.dateTimeColumnPropertyName, oldDateTimeColumn, this._dateTimeColumn);
			}
			return value;
		} else {
			return this._dateTimeColumn;
		}
	}
	,
	_dateTimeColumn: null,
	registerDateTimeColumn: function (memberPath) {
		if (memberPath == null) {
			return this.fastItemsSource().registerColumnDateTime(null, null, false);
		}
		var coercionMethod = null;
		var info = $.ig.SeriesViewer.prototype.getCoercionMethod(memberPath, this.coercionMethods());
		memberPath = info.memberPath();
		coercionMethod = info.coercionMethod();
		return this.fastItemsSource().registerColumnDateTime(memberPath, coercionMethod, this.expectFunctions());
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.CategoryAxisBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.CategoryAxisBase.prototype.fastItemsSourcePropertyName:
				var oldFastItemsSource = $.ig.util.cast($.ig.IFastItemsSource.prototype.$type, oldValue);
				if (oldFastItemsSource != null) {
					oldFastItemsSource.deregisterColumn(this.dateTimeColumn());
					this.dateTimeColumn(null);
					oldFastItemsSource.event = $.ig.Delegate.prototype.remove(oldFastItemsSource.event, this.fastItemsSource_Event.runOn(this));
				}
				var newFastItemsSource = $.ig.util.cast($.ig.IFastItemsSource.prototype.$type, newValue);
				if (newFastItemsSource != null) {
					this.sortedDateTimeIndices(null);
					this.dateTimeColumn(this.registerDateTimeColumn(this.dateTimeMemberPath()));
					newFastItemsSource.event = $.ig.Delegate.prototype.combine(newFastItemsSource.event, this.fastItemsSource_Event.runOn(this));
				}
				this.renderAxisAndSeries(false);
				break;
			case $.ig.CategoryDateTimeXAxis.prototype._dateTimeMemberPathPropertyName:
				if (this.fastItemsSource() != null) {
					this.fastItemsSource().deregisterColumn(this.dateTimeColumn());
					this.dateTimeColumn(this.registerDateTimeColumn(this.dateTimeMemberPath()));
					this.sortedDateTimeIndices(null);
				}
				break;
			case $.ig.CategoryDateTimeXAxis.prototype.displayTypePropertyName:
				this.mustInvalidateLabels(true);
				this.labelPanel().areLabelsUnevenlySpaced(this.displayType() == $.ig.TimeAxisDisplayType.prototype.discrete);
				this.renderAxis1(false);
				break;
			case $.ig.CategoryDateTimeXAxis.prototype.minimumValuePropertyName:
				this.updateRange();
				this.renderAxisAndSeries(false);
				break;
			case $.ig.CategoryDateTimeXAxis.prototype.maximumValuePropertyName:
				this.updateRange();
				this.renderAxisAndSeries(false);
				break;
			case $.ig.CategoryDateTimeXAxis.prototype.intervalPropertyName:
				this.mustInvalidateLabels(true);
				this.renderAxis1(false);
				break;
		}
	}
	,
	fastItemsSource_Event: function (sender, e) {
		this.sortedDateTimeIndices(null);
	}
	,
	renderAxisAndSeries: function (animate) {
		this.renderAxisOverride(animate);
		if (this.fastItemsSource() == null) {
			return;
		}
		var en = this.directSeries().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			currentSeries.renderSeries(animate);
		}
	}
	,
	updateRangeOverride: function () {
		if (this.mustInvalidateLabels() && this.useEnhancedIntervalManagement()) {
			this.labelFontHeuristics(this.gatherLabelFontHeuristics());
		}
		var oldMin = this.actualMinimumValue().getTime();
		var oldMax = this.actualMaximumValue().getTime();
		this.initializeActualMinimumAndMaximum();
		var newMin = !this.minimumValueIsSet() ? this.actualMinimumValue().getTime() : this.minimumValue().getTime();
		var newMax = !this.maximumValueIsSet() ? this.actualMaximumValue().getTime() : this.maximumValue().getTime();
		var ea = new $.ig.AxisRangeChangedEventArgs(oldMin, newMin, oldMax, newMax);
		this.raiseRangeChanged(ea);
		return true;
	}
	,
	sortedIndices: function () {
		if (this.sortedDateTimeIndices() == null) {
			var fastDateColumn = $.ig.util.cast($.ig.FastItemDateTimeColumn.prototype.$type, this.dateTimeColumn());
			if (fastDateColumn != null) {
				this.populateSortedIndices();
			} else {
				this.sortedDateTimeIndices(null);
			}
		}
		return this.sortedDateTimeIndices();
	}
	,
	populateSortedIndices: function () {
		if (this.isDataPreSorted()) {
			this.sortedDateTimeIndices(new $.ig.List$1($.ig.Number.prototype.$type, 0));
			var sortedIndices = this.sortedDateTimeIndices();
			var count = this.dateTimeColumn().count();
			for (var i = 0; i < count; i++) {
				sortedIndices.add(i);
			}
		} else {
			var fastDateColumn = $.ig.util.cast($.ig.FastItemDateTimeColumn.prototype.$type, this.dateTimeColumn());
			this.sortedDateTimeIndices(fastDateColumn.getSortedIndices());
		}
	}
	,
	getFirstVisibleIndex: function (windowRect, viewportRect, effectiveViewportRect, contentViewport) {
		var resolvedViewportRect = contentViewport;
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var x0, x1;
		if (this.isInverted()) {
			x1 = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
			x0 = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
		} else {
			x0 = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
			x1 = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
		}
		var result = 0;
		for (var i = 0; i < this.sortedDateTimeIndices().count(); i++) {
			if (this.dateTimeColumn() == null) {
				break;
			}
			var currentDateTime = this.dateTimeColumn().item(this.sortedDateTimeIndices().__inner[i]);
			if (currentDateTime.getTime() >= x0) {
				break;
			}
			result = i;
		}
		return result;
	}
	,
	getLastVisibleIndex: function (windowRect, viewportRect, effectiveViewportRect, contentViewport) {
		var resolvedViewportRect = contentViewport;
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var x0, x1;
		if (this.isInverted()) {
			x1 = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
			x0 = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
		} else {
			x0 = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
			x1 = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
		}
		var last = this.sortedDateTimeIndices().count() - 1;
		var result = last;
		for (var i = last; i >= 0; i--) {
			if (this.dateTimeColumn() == null || this.sortedDateTimeIndices().count() <= i) {
				break;
			}
			var sortedIndex = this.sortedDateTimeIndices().__inner[i];
			if (sortedIndex >= this.dateTimeColumn().count()) {
				break;
			}
			var currentDateTime = this.dateTimeColumn().item(sortedIndex);
			if (currentDateTime.getTime() < x1) {
				break;
			}
			result = Math.min(i + 1, this.sortedDateTimeIndices().count() - 1);
		}
		return result;
	}
	,
	getUnscaledValueAt: function (index) {
		if (this.dateTimeColumn() == null) {
			return NaN;
		}
		var date = this._dateTimeColumn.item(index);
		var ticks = date.getTime();
		var ticksAsDouble = ticks;
		return ticksAsDouble;
	}
	,
	getExactUnsortedIndexClosestToUnscaledValue: function (unscaledValue) {
		var sorting = this;
		if (sorting.sortedIndices() == null) {
			return -1;
		}
		var view = new $.ig.SortedListView$1($.ig.Date.prototype.$type, this.dateTimeColumn(), sorting.sortedIndices());
		var ticks_ = unscaledValue;
		var target = new Date(ticks_);
		var res = this.getSearchResult(unscaledValue, target, view);
		if (res >= 0 && res < sorting.sortedIndices().count() && res - 1 >= 0 && res - 1 < sorting.sortedIndices().count()) {
			var diff1_ = target.getTime() - view.item(res - 1).getTime();
			var diff2_ = view.item(res).getTime() - target.getTime();
			var prev = res - 1;
			var next = res;
			if (prev < 0 && next >= 0) {
				return next;
			}
			if (next > sorting.sortedIndices().count() - 1 && prev < sorting.sortedIndices().count()) {
				return prev;
			}
			if (prev < 0 && next < 0) {
				return -1;
			}
			if (prev > sorting.sortedIndices().count() - 1 && next > sorting.sortedIndices().count() - 1) {
				return -1;
			}
			var p = diff1_ / (diff1_ + diff2_);
			if ($.ig.util.isNaN(p)) {
				p = 0;
			}
			return prev + p;
		}
		if (res >= 0 && res < sorting.sortedIndices().count()) {
			return res;
		}
		return -1;
	}
	,
	getSearchResult: function (unscaledValue, target, view) {
		var sorting = this;
		if (this.dateTimeColumn() == null || sorting.sortedIndices() == null) {
			return -1;
		}
		var res = -1;
		var result = $.ig.ArrayUtil.prototype.binarySearch$11($.ig.Date.prototype.$type, view, function (item) {
			if (target < item) {
				return -1;
			}
			if (target > item) {
				return 1;
			}
			return 0;
		});
		if (result >= 0) {
			res = result;
		} else {
			res = ~result;
		}
		while (res >= 0 && res < view.count() && res - 1 >= 0 && +(view.item(res)) == +(view.item(res - 1))) {
			res--;
		}
		return res;
	}
	,
	getIndexClosestToUnscaledValue: function (unscaledValue) {
		var sorting = this;
		if (sorting.sortedIndices() == null) {
			return -1;
		}
		var view = new $.ig.SortedListView$1($.ig.Date.prototype.$type, this.dateTimeColumn(), sorting.sortedIndices());
		var ticks_ = unscaledValue;
		var target = new Date(ticks_);
		var res = this.getSearchResult(unscaledValue, target, view);
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		if (res >= 0 && res < sorting.sortedIndices().count() && res - 1 >= 0 && res - 1 < sorting.sortedIndices().count()) {
			var diff1 = target - view.item(res - 1);
			var diff2 = view.item(res) - target;
			if (diff1 < diff2) {
				res = res - 1;
			}
		}
		if (res >= 0 && res < sorting.sortedIndices().count()) {
			return sorting.sortedIndices().__inner[res];
		}
		if (res == sorting.sortedIndices().count() && this.seriesViewer() != null && Math.abs(this.getScaledValue(unscaledValue, new $.ig.ScalerParams(0, this.seriesViewer().actualWindowRect(), this.viewportRect(), this.isInverted(), effectiveViewportRect)) - this.viewportRect().right()) < 2) {
			return res - 1;
		}
		if (res == -1 && this.seriesViewer() != null && Math.abs(this.getScaledValue(unscaledValue, new $.ig.ScalerParams(0, this.seriesViewer().actualWindowRect(), this.viewportRect(), this.isInverted(), effectiveViewportRect)) - this.viewportRect().left()) < 2) {
			return 0;
		}
		return -1;
	}
	,
	notifyDataChanged: function () {
		this.sortedDateTimeIndices(null);
		this.renderAxis();
	}
	,
	orientation: function () {
		return $.ig.AxisOrientation.prototype.horizontal;
	}
	,
	$type: new $.ig.Type('CategoryDateTimeXAxis', $.ig.CategoryAxisBase.prototype.$type, [$.ig.ISortingAxis.prototype.$type])
}, true);

$.ig.util.defType('CategoryXAxis', 'CategoryAxisBase', {
	createView: function () {
		return new $.ig.CategoryXAxisView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.CategoryAxisBase.prototype.onViewCreated.call(this, view);
		this.xView(view);
	}
	,
	_xView: null,
	xView: function (value) {
		if (arguments.length === 1) {
			this._xView = value;
			return value;
		} else {
			return this._xView;
		}
	}
	,
	init: function () {
		this.__actualMinimum = 1;
		this.__actualMaximum = 1;
		$.ig.CategoryAxisBase.prototype.init.call(this);
		this.majorLinePositions(new $.ig.List$1(Number, 0));
		this.defaultStyleKey($.ig.CategoryXAxis.prototype.$type);
	},
	__actualMinimum: 0,
	actualMinimum: function (value) {
		if (arguments.length === 1) {
			this.__actualMinimum = value;
			return value;
		} else {
			return this.__actualMinimum;
		}
	}
	,
	__actualMaximum: 0,
	actualMaximum: function (value) {
		if (arguments.length === 1) {
			this.__actualMaximum = value;
			return value;
		} else {
			return this.__actualMaximum;
		}
	}
	,
	createLabelPanel: function () {
		if (this.useSmartAxis()) {
			return new $.ig.HorizontalSmartAxisLabelPanel();
		} else {
			return new $.ig.HorizontalAxisLabelPanel();
		}
	}
	,
	getCategorySize: function (windowRect, viewportRect, effectiveViewportRect) {
		var effectiveViewport = this.getInitialSafeViewport(viewportRect, effectiveViewportRect);
		return effectiveViewport.width() / (this._cachedItemsCount * windowRect.width());
	}
	,
	getGroupSize: function (windowRect, viewportRect, effectiveViewportRect) {
		var gap = !$.ig.util.isNaN(this.gap()) ? $.ig.MathUtil.prototype.clamp(this.gap(), 0, 1) : 0;
		var overlap = 0;
		if (!$.ig.util.isNaN(this.overlap())) {
			overlap = Math.min(this.overlap(), 1);
		} else {
			overlap = 0;
		}
		;
		var categorySpace = 1 - 0.5 * gap;
		var mode2GroupCount = this.mode2GroupCount() == 0 ? 1 : this.mode2GroupCount();
		var ret = this.getCategorySize(windowRect, viewportRect, effectiveViewportRect) * categorySpace / (mode2GroupCount - (mode2GroupCount - 1) * overlap);
		return ret;
	}
	,
	getGroupCenter: function (groupIndex, windowRect, viewportRect, effectiveViewportRect) {
		var groupCenter = 0.5;
		if (this.mode2GroupCount() > 1) {
			var gap = !$.ig.util.isNaN(this.gap()) ? $.ig.MathUtil.prototype.clamp(this.gap(), 0, 1) : 0;
			var overlap = 0;
			if (!$.ig.util.isNaN(this.overlap())) {
				overlap = Math.min(this.overlap(), 1);
			}
			var categorySpace = 1 - 0.5 * gap;
			var groupWidth = categorySpace / (this.mode2GroupCount() - (this.mode2GroupCount() - 1) * overlap);
			var groupSep = (categorySpace - groupWidth) / (this.mode2GroupCount() - 1);
			groupCenter = 0.25 * gap + 0.5 * groupWidth + groupIndex * groupSep;
		}
		return this.getCategorySize(windowRect, viewportRect, effectiveViewportRect) * groupCenter;
	}
	,
	getAxisInterval: function () {
		return this.interval();
	}
	,
	scrollIntoView: function (item) {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.viewportRect();
		var effectiveViewportRect = this.getEffectiveViewportForUnitViewport();
		var unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
		var xParams = new $.ig.ScalerParams(0, unitRect, unitRect, this.isInverted(), effectiveViewportRect);
		var index = !windowRect.isEmpty() && !viewportRect.isEmpty() && this.fastItemsSource() != null ? this.fastItemsSource().indexOf(item) : -1;
		var cx = index > -1 ? this.getScaledValue(index, xParams) : NaN;
		if (!$.ig.util.isNaN(cx) && this.seriesViewer().isSyncReady()) {
			if (!$.ig.util.isNaN(cx)) {
				if (cx < windowRect.left() + 0.1 * windowRect.width()) {
					cx = cx + 0.4 * windowRect.width();
					windowRect.x(cx - 0.5 * windowRect.width());
				}
				if (cx > windowRect.right() - 0.1 * windowRect.width()) {
					cx = cx - 0.4 * windowRect.width();
					windowRect.x(cx - 0.5 * windowRect.width());
				}
			}
			this.seriesViewer().windowNotify(windowRect, false);
		}
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValueHelper(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, this.categoryMode());
			scaledValue = (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			scaledValue = p._viewportRect.left() + p._viewportRect.width() * (scaledValue - p._windowRect.left()) / p._windowRect.width();
			return scaledValue;
		}
		return this.getScaledValueHelper(unscaledValue, p._windowRect, p._viewportRect, this.categoryMode());
	}
	,
	getScaledValue1: function (unscaledValue, p, categoryMode) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValueHelper(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, categoryMode);
			scaledValue = (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			scaledValue = p._viewportRect.left() + p._viewportRect.width() * (scaledValue - p._windowRect.left()) / p._windowRect.width();
			return scaledValue;
		}
		return this.getScaledValueHelper(unscaledValue, p._windowRect, p._viewportRect, categoryMode);
	}
	,
	getScaledValueHelper: function (unscaledValue, windowRect, viewportRect, mode) {
		var itemCount = mode == $.ig.CategoryMode.prototype.mode0 ? this._cachedItemsCount - 1 : this._cachedItemsCount;
		if (itemCount < 0) {
			itemCount = 0;
		}
		var scaledValue = itemCount >= 1 ? (unscaledValue) / (itemCount) : itemCount == 0 ? 0.5 : NaN;
		if (this.isInvertedCached()) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.left() + viewportRect.width() * (scaledValue - windowRect.left()) / windowRect.width();
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.left() + p._windowRect.width() * (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			unscaledValue = (unscaledValue * p._viewportRect.width()) + p._viewportRect.left();
			unscaledValue = this.getUnscaledValue3(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, this.categoryMode());
			return unscaledValue;
		}
		return this.getUnscaledValue3(scaledValue, p._windowRect, p._viewportRect, this.categoryMode());
	}
	,
	getUnscaledValue1: function (scaledValue, p, categoryMode) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.left() + p._windowRect.width() * (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			unscaledValue = (unscaledValue * p._viewportRect.width()) + p._viewportRect.left();
			unscaledValue = this.getUnscaledValue3(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, categoryMode);
			return unscaledValue;
		}
		return this.getUnscaledValue3(scaledValue, p._windowRect, p._viewportRect, categoryMode);
	}
	,
	getUnscaledValue3: function (scaledValue, windowRect, viewportRect, categoryMode) {
		var unscaledValue = windowRect.left() + (scaledValue - viewportRect.left()) * windowRect.width() / viewportRect.width();
		if (this.isInvertedCached()) {
			unscaledValue = 1 - unscaledValue;
		}
		var itemCount = categoryMode == $.ig.CategoryMode.prototype.mode0 ? this._cachedItemsCount - 1 : this._cachedItemsCount;
		if (itemCount < 0) {
			itemCount = 0;
		}
		return unscaledValue * itemCount;
	}
	,
	scrollRangeIntoView: function (minimum, maximum) {
		if (minimum == NaN || maximum == NaN || this.fastItemsSource() == null || this.fastItemsSource().count() == 0) {
			return;
		}
		var proportionMin = minimum / this.fastItemsSource().count();
		var proportionMax = (maximum + 1) / this.fastItemsSource().count();
		this.seriesViewer().windowRect(new $.ig.Rect(0, proportionMin, this.seriesViewer().windowRect().y(), proportionMax - proportionMin, this.seriesViewer().windowRect().height()));
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.CategoryAxisBase.prototype.renderAxisOverride.call(this, animate);
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.viewportRect();
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var resolvedViewportRect = this.getContentViewport();
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var axisGeometry = this.view().getAxisLinesGeometry();
		var stripsGeometry = this.view().getStripsGeometry();
		var majorGeometry = this.view().getMajorLinesGeometry();
		var minorGeometry = this.view().getMinorLinesGeometry();
		var axisLinesPathInfo = this.view().getAxisLinesPathInfo();
		var majorLinesPathInfo = this.view().getMajorLinesPathInfo();
		var minorLinesPathInfo = this.view().getMinorLinesPathInfo();
		var fastItemsSource = this.fastItemsSource();
		this.updateLineVisibility();
		this.clearMarks(axisGeometry);
		this.clearMarks(stripsGeometry);
		this.clearMarks(majorGeometry);
		this.clearMarks(minorGeometry);
		this.labelDataContext().clear();
		this.labelPositions().clear();
		this.majorLinePositions().clear();
		this.view().updateLabelPanel(this, windowRect, viewportRect);
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			this.textBlocks().count(0);
		}
		if (this.textBlocks().count() == 0) {
			this.view().clearLabelPanel();
		}
		if (this.labelSettings() != null) {
			this.labelSettings().registerAxis(this);
		}
		if (this.itemsSource() == null || fastItemsSource == null || fastItemsSource.count() == 0) {
			this.textBlocks().count(0);
			this.view().clearLabelPanel();
			return;
		}
		if (!windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var visibleMinimum = this.getUnscaledValue(resolvedViewportRect.left(), xParams);
			var visibleMaximum = this.getUnscaledValue(resolvedViewportRect.right(), xParams);
			if (this.isInverted()) {
				visibleMinimum = Math.ceil(visibleMinimum);
				visibleMaximum = Math.floor(visibleMaximum);
			} else {
				visibleMinimum = Math.floor(visibleMinimum);
				visibleMaximum = Math.ceil(visibleMaximum);
			}
			var crossingValue = viewportRect.bottom();
			var relativeCrossingValue = crossingValue - viewportRect.top();
			if (this.crossingAxis() != null) {
				var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.crossingAxis());
				if (yAxis != null) {
					var $ret = this.scaleCrossingValue(crossingValue, relativeCrossingValue, windowRect, viewportRect, effectiveViewportRect, viewportRect.top(), viewportRect.bottom());
					crossingValue = $ret.p0;
					relativeCrossingValue = $ret.p1;
				}
			}
			this.horizontalLine(axisGeometry, crossingValue, viewportRect, axisLinesPathInfo, true);
			this.view().setLabelPanelCrossingValue(relativeCrossingValue);
			var trueVisibleMinimum = Math.min(visibleMinimum, visibleMaximum);
			var trueVisibleMaximum = Math.max(visibleMinimum, visibleMaximum);
			var snapper = new $.ig.LinearCategorySnapper(1, trueVisibleMinimum, trueVisibleMaximum, resolvedViewportRect.width(), this.interval(), this.categoryMode(), this.resolveHeuristicResolution());
			var firstValue;
			var lastValue;
			firstValue = Math.floor((trueVisibleMinimum - 0) / snapper.interval());
			lastValue = Math.ceil((trueVisibleMaximum - 0) / snapper.interval());
			this.actualInterval(snapper.interval());
			if (!$.ig.util.isNaN(firstValue) && !$.ig.util.isNaN(lastValue)) {
				var first = $.ig.truncate(firstValue);
				var last = $.ig.truncate(lastValue);
				var majorValue = this.getScaledValue(0 + first * snapper.interval(), xParams);
				var majorSize = Math.abs(this.getScaledValue(snapper.interval(), xParams) - this.getScaledValue(0, xParams));
				this.view().setLabelPanelInterval(majorSize);
				var viewportPixelRight = $.ig.truncate(Math.ceil(resolvedViewportRect.right()));
				var viewportPixelLeft = $.ig.truncate(Math.floor(resolvedViewportRect.left()));
				for (var i = first; i <= last; ++i) {
					var nextMajorValue = this.getScaledValue(0 + (i + 1) * snapper.interval(), xParams);
					if (majorValue <= viewportRect.right()) {
						if (i % 2 == 0) {
							this.verticalStrip(stripsGeometry, majorValue, nextMajorValue, viewportRect);
						}
						this.verticalLine(majorGeometry, majorValue, viewportRect, majorLinesPathInfo, false);
						this.majorLinePositions().add(majorValue);
					}
					if (this.categoryMode() != $.ig.CategoryMode.prototype.mode0 && this.mode2GroupCount() != 0 && this.shouldRenderMinorLines()) {
						if (this.minorInterval() > 0 && this.minorInterval() < snapper.interval()) {
							var minIntervalValue = majorSize * this.minorInterval();
							if (this.isInverted()) {
								var curValue = majorValue;
								while (curValue - minIntervalValue > nextMajorValue) {
									curValue -= minIntervalValue;
									if (Math.abs(curValue - nextMajorValue) < 0.0001) {
										break;
									}
									this.verticalLine(minorGeometry, curValue, viewportRect, minorLinesPathInfo, false);
								}
							} else {
								var curValue1 = majorValue;
								while (curValue1 + minIntervalValue < nextMajorValue) {
									curValue1 += minIntervalValue;
									if (Math.abs(curValue1 - nextMajorValue) < 0.0001) {
										break;
									}
									this.verticalLine(minorGeometry, curValue1, viewportRect, minorLinesPathInfo, false);
								}
							}
							this.actualMinorInterval(this.minorInterval());
						} else {
							for (var categoryNumber = 0; categoryNumber < $.ig.truncate(snapper.interval()); categoryNumber++) {
								for (var groupNumber = 0; groupNumber < this.mode2GroupCount(); groupNumber++) {
									var center = this.getGroupCenter(groupNumber, windowRect, viewportRect, effectiveViewportRect);
									if (this.isInverted()) {
										center = -center;
									}
									var minorValue = this.getScaledValue(categoryNumber + i * snapper.interval(), xParams) + center;
									this.verticalLine(minorGeometry, minorValue, viewportRect, minorLinesPathInfo, false);
								}
							}
							this.actualMinorInterval(0.5);
						}
					}
					var categoryValue = majorValue;
					if (this.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
						var nextCategoryValue = this.getScaledValue(i * snapper.interval() + 1, xParams);
						categoryValue = (majorValue + nextCategoryValue) / 2;
					}
					var categoryPixelValue = $.ig.truncate(Math.round(categoryValue));
					if (categoryPixelValue >= viewportPixelLeft && categoryPixelValue <= viewportPixelRight) {
						var itemIndex = 0;
						if (snapper.interval() >= 1) {
							itemIndex = i * $.ig.truncate(Math.floor(snapper.interval()));
						} else {
							if ((i * snapper.interval()) * 2 % 2 == 0) {
								itemIndex = $.ig.truncate(Math.floor(i * snapper.interval()));
							} else {
								itemIndex = -1;
							}
						}
						if (fastItemsSource != null && itemIndex < fastItemsSource.count() && itemIndex >= 0) {
							var dataItem = fastItemsSource.item(itemIndex);
							var labelText = this.getLabel(dataItem);
							if (!$.ig.util.isNaN(categoryValue) && !Number.isInfinity(categoryValue) && labelText != null) {
								if ((typeof labelText === 'string') && (labelText).equals("")) {
								} else {
									this.labelDataContext().add1(labelText);
									this.labelPositions().add(new $.ig.LabelPosition(categoryValue));
								}
							}
						}
					}
					majorValue = nextMajorValue;
				}
			}
			if ((this.labelSettings() == null || this.labelSettings().visibility() == $.ig.Visibility.prototype.visible) && this.crossingAxis() != null) {
				if (this.labelSettings() != null && (this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideTop || this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideBottom)) {
					this.seriesViewer().invalidatePanels();
				}
			}
			this.view().updateLabelPanelContent(this.labelDataContext(), this.labelPositions());
			this.renderLabels();
		}
	}
	,
	updateRangeOverride: function () {
		if (this.mustInvalidateLabels() && this.useEnhancedIntervalManagement()) {
			this.labelFontHeuristics(this.gatherLabelFontHeuristics());
		}
		if (this.fastItemsSource() == null) {
			return false;
		}
		var max = this.fastItemsSource().count();
		if (max != this.actualMaximum()) {
			var ea = new $.ig.AxisRangeChangedEventArgs(1, 1, this.actualMaximum(), max);
			this.actualMaximum(max);
			this.raiseRangeChanged(ea);
			return true;
		}
		return false;
	}
	,
	interval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryXAxis.prototype.intervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryXAxis.prototype.intervalProperty);
		}
	}
	,
	_actualInterval: 0,
	actualInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualInterval() != value) {
				var oldValue = this._actualInterval;
				this._actualInterval = value;
				this.raisePropertyChanged($.ig.CategoryXAxis.prototype.actualIntervalPropertyName, oldValue, this.actualInterval());
			}
			return value;
		} else {
			return this._actualInterval;
		}
	}
	,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryXAxis.prototype.minorIntervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryXAxis.prototype.minorIntervalProperty);
		}
	}
	,
	_actualMinorInterval: 0,
	actualMinorInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualMinorInterval() != value) {
				var oldValue = this._actualMinorInterval;
				this._actualMinorInterval = value;
				this.raisePropertyChanged($.ig.CategoryXAxis.prototype.actualMinorIntervalPropertyName, oldValue, this.actualMinorInterval());
			}
			return value;
		} else {
			return this._actualMinorInterval;
		}
	}
	,
	shouldShareMode: function (chart) {
		if (chart == null) {
			return false;
		}
		var settings = this.getSyncSettings();
		if (settings == null) {
			return false;
		}
		return settings.synchronizeHorizontally();
	}
	,
	orientation: function () {
		return $.ig.AxisOrientation.prototype.horizontal;
	}
	,
	$type: new $.ig.Type('CategoryXAxis', $.ig.CategoryAxisBase.prototype.$type)
}, true);

$.ig.util.defType('CategoryYAxis', 'CategoryAxisBase', {
	createView: function () {
		return new $.ig.CategoryYAxisView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.CategoryAxisBase.prototype.onViewCreated.call(this, view);
		this.yView(view);
	}
	,
	_yView: null,
	yView: function (value) {
		if (arguments.length === 1) {
			this._yView = value;
			return value;
		} else {
			return this._yView;
		}
	}
	,
	isVertical: function () {
		return true;
	}
	,
	getCategoryBoundingBox: function (point, useInterpolation, singularWidth) {
		return this.getCategoryBoundingBoxHelper(point, useInterpolation, singularWidth, true);
	}
	,
	init: function () {
		this.__actualMinimum = 1;
		this.__actualMaximum = 1;
		$.ig.CategoryAxisBase.prototype.init.call(this);
		this.majorLinePositions(new $.ig.List$1(Number, 0));
		this.defaultStyleKey($.ig.CategoryYAxis.prototype.$type);
	},
	interval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryYAxis.prototype.intervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryYAxis.prototype.intervalProperty);
		}
	}
	,
	_actualInterval: 0,
	actualInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualInterval() != value) {
				var oldValue = this._actualInterval;
				this._actualInterval = value;
				this.raisePropertyChanged($.ig.CategoryYAxis.prototype.actualIntervalPropertyName, oldValue, this.actualInterval());
			}
			return value;
		} else {
			return this._actualInterval;
		}
	}
	,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategoryYAxis.prototype.minorIntervalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategoryYAxis.prototype.minorIntervalProperty);
		}
	}
	,
	_actualMinorInterval: 0,
	actualMinorInterval: function (value) {
		if (arguments.length === 1) {
			if (this.actualMinorInterval() != value) {
				var oldValue = this._actualMinorInterval;
				this._actualMinorInterval = value;
				this.raisePropertyChanged($.ig.CategoryYAxis.prototype.actualMinorIntervalPropertyName, oldValue, this.actualMinorInterval());
			}
			return value;
		} else {
			return this._actualMinorInterval;
		}
	}
	,
	__actualMinimum: 0,
	actualMinimum: function (value) {
		if (arguments.length === 1) {
			this.__actualMinimum = value;
			return value;
		} else {
			return this.__actualMinimum;
		}
	}
	,
	__actualMaximum: 0,
	actualMaximum: function (value) {
		if (arguments.length === 1) {
			this.__actualMaximum = value;
			return value;
		} else {
			return this.__actualMaximum;
		}
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValueHelper(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect);
			scaledValue = (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			scaledValue = p._viewportRect.top() + p._viewportRect.height() * (scaledValue - p._windowRect.top()) / p._windowRect.height();
			return scaledValue;
		}
		return this.getScaledValueHelper(unscaledValue, p._windowRect, p._viewportRect);
	}
	,
	getScaledValueHelper: function (unscaledValue, windowRect, viewportRect) {
		var itemCount = this.categoryMode() == $.ig.CategoryMode.prototype.mode0 ? this._cachedItemsCount - 1 : this._cachedItemsCount;
		if (itemCount < 0) {
			itemCount = 0;
		}
		var scaledValue = itemCount >= 1 ? (unscaledValue) / (itemCount) : itemCount == 0 ? 0.5 : NaN;
		if (!this.isInvertedCached()) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.top() + viewportRect.height() * (scaledValue - windowRect.top()) / windowRect.height();
	}
	,
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.top() + p._windowRect.height() * (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			unscaledValue = (unscaledValue * p._viewportRect.height()) + p._viewportRect.top();
			unscaledValue = this.getUnscaledValue3(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, this.categoryMode());
			return unscaledValue;
		}
		return this.getUnscaledValue3(scaledValue, p._windowRect, p._viewportRect, this.categoryMode());
	}
	,
	getUnscaledValue1: function (scaledValue, p, categoryMode) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.top() + p._windowRect.height() * (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			unscaledValue = (unscaledValue * p._viewportRect.height()) + p._viewportRect.top();
			unscaledValue = this.getUnscaledValue3(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, categoryMode);
			return unscaledValue;
		}
		return this.getUnscaledValue3(scaledValue, p._windowRect, p._viewportRect, categoryMode);
	}
	,
	getUnscaledValue3: function (scaledValue, windowRect, viewportRect, categoryMode) {
		var unscaledValue = windowRect.top() + (scaledValue - viewportRect.top()) * windowRect.height() / viewportRect.height();
		if (!this.isInvertedCached()) {
			unscaledValue = 1 - unscaledValue;
		}
		var itemCount = categoryMode == $.ig.CategoryMode.prototype.mode0 ? this._cachedItemsCount - 1 : this._cachedItemsCount;
		if (itemCount < 0) {
			itemCount = 0;
		}
		return unscaledValue * itemCount;
	}
	,
	scrollRangeIntoView: function (minimum, maximum) {
		if (minimum == NaN || maximum == NaN || this.fastItemsSource() == null || this.fastItemsSource().count() == 0) {
			return;
		}
		var proportionMin = minimum / this.fastItemsSource().count();
		var proportionMax = maximum / this.fastItemsSource().count();
		this.seriesViewer().windowRect(new $.ig.Rect(0, this.seriesViewer().windowRect().x(), 1 - proportionMax, this.seriesViewer().windowRect().width(), proportionMax - proportionMin));
	}
	,
	createLabelPanel: function () {
		return new $.ig.VerticalAxisLabelPanel();
	}
	,
	getAxisInterval: function () {
		return this.interval();
	}
	,
	getCategorySize: function (windowRect, viewportRect, effectiveViewportRect) {
		var effectiveViewport = this.getInitialSafeViewport(viewportRect, effectiveViewportRect);
		return effectiveViewport.height() / (this._cachedItemsCount * windowRect.height());
	}
	,
	getGroupSize: function (windowRect, viewportRect, effectiveViewportRect) {
		var gap = 0;
		if (!$.ig.util.isNaN(this.gap())) {
			gap = $.ig.MathUtil.prototype.clamp(this.gap(), 0, 1);
		}
		var overlap = 0;
		if (!$.ig.util.isNaN(this.overlap())) {
			overlap = Math.min(this.overlap(), 1);
		}
		var categorySpace = 1 - 0.5 * gap;
		var ret = this.getCategorySize(windowRect, viewportRect, effectiveViewportRect) * categorySpace / (this.mode2GroupCount() - (this.mode2GroupCount() - 1) * overlap);
		return ret;
	}
	,
	getGroupCenter: function (groupIndex, windowRect, viewportRect, effectiveViewportRect) {
		var groupCenter = 0.5;
		if (this.mode2GroupCount() > 1) {
			var gap = 0;
			if (!$.ig.util.isNaN(this.gap())) {
				gap = $.ig.MathUtil.prototype.clamp(this.gap(), 0, 1);
			}
			var overlap = 0;
			if (!$.ig.util.isNaN(this.overlap())) {
				overlap = Math.min(this.overlap(), 1);
			}
			var categorySpace = 1 - 0.5 * gap;
			var groupWidth = categorySpace / (this.mode2GroupCount() - (this.mode2GroupCount() - 1) * overlap);
			var groupSep = (categorySpace - groupWidth) / (this.mode2GroupCount() - 1);
			groupCenter = 0.25 * gap + 0.5 * groupWidth + groupIndex * groupSep;
		}
		return this.getCategorySize(windowRect, viewportRect, effectiveViewportRect) * groupCenter;
	}
	,
	scrollIntoView: function (item) {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.viewportRect();
		var unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
		var effectiveViewportRect = this.getEffectiveViewportForUnitViewport();
		var yParams = new $.ig.ScalerParams(0, unitRect, unitRect, this.isInverted(), effectiveViewportRect);
		var index = !windowRect.isEmpty() && !viewportRect.isEmpty() && this.fastItemsSource() != null ? this.fastItemsSource().indexOf(item) : -1;
		var cy = index > -1 ? this.getScaledValue(index, yParams) : NaN;
		if (!$.ig.util.isNaN(cy) && this.seriesViewer().isSyncReady()) {
			if (!$.ig.util.isNaN(cy)) {
				if (cy < windowRect.top() + 0.1 * windowRect.height()) {
					cy = cy + 0.4 * windowRect.height();
					windowRect.y(cy - 0.5 * windowRect.height());
				}
				if (cy > windowRect.bottom() - 0.1 * windowRect.height()) {
					cy = cy - 0.4 * windowRect.height();
					windowRect.y(cy - 0.5 * windowRect.height());
				}
			}
			this.seriesViewer().windowNotify(windowRect, false);
		}
	}
	,
	updateRangeOverride: function () {
		if (this.mustInvalidateLabels() && this.useEnhancedIntervalManagement()) {
			this.labelFontHeuristics(this.gatherLabelFontHeuristics());
		}
		if (this.fastItemsSource() == null) {
			return false;
		}
		var max = this.fastItemsSource().count();
		if (max != this.actualMaximum()) {
			var ea = new $.ig.AxisRangeChangedEventArgs(1, 1, this.actualMaximum(), max);
			this.actualMaximum(max);
			this.raiseRangeChanged(ea);
			return true;
		}
		return false;
	}
	,
	shouldShareMode: function (chart) {
		if (chart == null) {
			return false;
		}
		var settings = this.getSyncSettings();
		if (settings == null) {
			return false;
		}
		return settings.synchronizeVertically();
	}
	,
	renderAxisOverride: function (animate) {
		$.ig.CategoryAxisBase.prototype.renderAxisOverride.call(this, animate);
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.viewportRect();
		var effectiveViewportRect = this.getCurrentEffectiveViewport();
		var resolvedViewportRect = this.getContentViewport();
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.isInverted(), effectiveViewportRect);
		var axisGeometry = this.view().getAxisLinesGeometry();
		var stripsGeometry = this.view().getStripsGeometry();
		var majorGeometry = this.view().getMajorLinesGeometry();
		var minorGeometry = this.view().getMinorLinesGeometry();
		var axisLinesPathInfo = this.view().getAxisLinesPathInfo();
		var majorLinesPathInfo = this.view().getMajorLinesPathInfo();
		var minorLinesPathInfo = this.view().getMinorLinesPathInfo();
		this.updateLineVisibility();
		this.clearMarks(axisGeometry);
		this.clearMarks(stripsGeometry);
		this.clearMarks(majorGeometry);
		this.clearMarks(minorGeometry);
		this.labelDataContext().clear();
		this.labelPositions().clear();
		this.majorLinePositions().clear();
		this.view().updateLabelPanel(this, windowRect, viewportRect);
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			this.textBlocks().count(0);
		}
		if (this.textBlocks().count() == 0) {
			this.view().clearLabelPanel();
		}
		if (this.labelSettings() != null) {
			this.labelSettings().registerAxis(this);
		}
		if (this.itemsSource() == null || this.fastItemsSource() == null || this.fastItemsSource().count() == 0) {
			this.textBlocks().count(0);
			this.view().clearLabelPanel();
			return;
		}
		if (!windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var visibleMinimum = this.getUnscaledValue(resolvedViewportRect.top(), yParams);
			var visibleMaximum = this.getUnscaledValue(resolvedViewportRect.bottom(), yParams);
			if (!this.isInverted()) {
				visibleMinimum = Math.ceil(visibleMinimum);
				visibleMaximum = Math.floor(visibleMaximum);
			} else {
				visibleMinimum = Math.floor(visibleMinimum);
				visibleMaximum = Math.ceil(visibleMaximum);
			}
			var crossingValue = viewportRect.left();
			var relativeCrossingValue = 0;
			if (this.crossingAxis() != null) {
				var xAxis = $.ig.util.cast($.ig.NumericXAxis.prototype.$type, this.crossingAxis());
				if (xAxis != null) {
					var $ret = this.scaleCrossingValue(crossingValue, relativeCrossingValue, windowRect, viewportRect, effectiveViewportRect, viewportRect.left(), viewportRect.right());
					crossingValue = $ret.p0;
					relativeCrossingValue = $ret.p1;
				}
			}
			this.verticalLine(axisGeometry, crossingValue, viewportRect, axisLinesPathInfo, true);
			this.view().setLabelPanelCrossingValue(relativeCrossingValue);
			var trueVisibleMinimum = Math.min(visibleMinimum, visibleMaximum);
			var trueVisibleMaximum = Math.max(visibleMinimum, visibleMaximum);
			var snapper = new $.ig.LinearCategorySnapper(1, trueVisibleMinimum, trueVisibleMaximum, resolvedViewportRect.height(), this.interval(), this.categoryMode(), this.resolveHeuristicResolution());
			var firstValue = Math.floor((trueVisibleMinimum - 0) / snapper.interval());
			var lastValue = Math.ceil((trueVisibleMaximum - 0) / snapper.interval());
			if (!$.ig.util.isNaN(firstValue) && !$.ig.util.isNaN(lastValue)) {
				var first = $.ig.truncate(firstValue);
				var last = $.ig.truncate(lastValue);
				var majorValue = this.getScaledValue(0 + first * snapper.interval(), yParams);
				this.labelPanel().interval(this.getScaledValue(snapper.interval(), yParams));
				for (var i = first; i <= last; ++i) {
					var nextMajorValue = this.getScaledValue(0 + (i + 1) * snapper.interval(), yParams);
					if (majorValue <= resolvedViewportRect.bottom()) {
						if (i % 2 == 0) {
							this.horizontalStrip(stripsGeometry, majorValue, nextMajorValue, viewportRect);
						}
						this.horizontalLine(majorGeometry, majorValue, viewportRect, majorLinesPathInfo, false);
						this.majorLinePositions().add(majorValue);
						if (this.categoryMode() != $.ig.CategoryMode.prototype.mode0 && this.mode2GroupCount() != 0 && this.shouldRenderMinorLines()) {
							if (this.minorInterval() > 0 && this.minorInterval() < snapper.interval()) {
								var size = this.getScaledValue(snapper.interval(), yParams);
								var minIntervalValue = size * this.minorInterval();
								var curValue = this.getScaledValue(i * snapper.interval(), yParams);
								var endValue = curValue + size;
								while (curValue + minIntervalValue < endValue) {
									curValue += minIntervalValue;
									this.horizontalLine(minorGeometry, curValue, viewportRect, minorLinesPathInfo, false);
								}
								this.actualMinorInterval(this.minorInterval());
							} else {
								for (var categoryNumber = 0; categoryNumber < $.ig.truncate(snapper.interval()); categoryNumber++) {
									for (var groupNumber = 0; groupNumber < this.mode2GroupCount(); groupNumber++) {
										var center = this.getGroupCenter(groupNumber, windowRect, viewportRect, effectiveViewportRect);
										if (!this.isInverted()) {
											center = -center;
										}
										var minorValue = this.getScaledValue(categoryNumber + i * snapper.interval(), yParams) + center;
										this.horizontalLine(minorGeometry, minorValue, viewportRect, minorLinesPathInfo, false);
									}
								}
								this.actualMinorInterval(0.5);
							}
						}
					}
					var categoryValue = majorValue;
					if (this.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
						var nextCategoryValue = this.getScaledValue(i * snapper.interval() + 1, yParams);
						categoryValue = (majorValue + nextCategoryValue) / 2;
					}
					if (categoryValue <= resolvedViewportRect.bottom() && categoryValue >= resolvedViewportRect.top()) {
						var itemIndex = 0;
						if (snapper.interval() >= 1) {
							itemIndex = i * $.ig.truncate(Math.floor(snapper.interval()));
						} else {
							if ((i * snapper.interval()) * 2 % 2 == 0) {
								itemIndex = $.ig.truncate(Math.floor(i * snapper.interval()));
							} else {
								itemIndex = -1;
							}
						}
						if (this.fastItemsSource() != null && itemIndex < this.fastItemsSource().count() && itemIndex >= 0) {
							var dataItem = this.fastItemsSource().item(itemIndex);
							var labelText = this.getLabel(dataItem);
							if (!$.ig.util.isNaN(categoryValue) && !Number.isInfinity(categoryValue) && labelText != null) {
								if ((typeof labelText === 'string') && (labelText).equals("")) {
								} else {
									this.labelDataContext().add1(labelText);
									this.labelPositions().add(new $.ig.LabelPosition(categoryValue));
								}
							}
						}
					}
					majorValue = nextMajorValue;
				}
			}
			this.actualInterval(snapper.interval());
			if ((this.labelSettings() == null || this.labelSettings().visibility() == $.ig.Visibility.prototype.visible) && this.crossingAxis() != null) {
				if (this.labelSettings() != null && (this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideLeft || this.labelSettings().location() == $.ig.AxisLabelsLocation.prototype.insideRight)) {
					this.seriesViewer().invalidatePanels();
				}
			}
			this.view().updateLabelPanelContent(this.labelDataContext(), this.labelPositions());
			this.renderLabels();
		}
	}
	,
	orientation: function () {
		return $.ig.AxisOrientation.prototype.vertical;
	}
	,
	$type: new $.ig.Type('CategoryYAxis', $.ig.CategoryAxisBase.prototype.$type)
}, true);

$.ig.util.defType('HorizontalAxisLabelPanel', 'HorizontalAxisLabelPanelBase', {
	init: function () {
		$.ig.HorizontalAxisLabelPanelBase.prototype.init.call(this);
	},
	getDefaultLabelsLocation: function () {
		return $.ig.AxisLabelsLocation.prototype.outsideBottom;
	}
	,
	validLocation: function (location) {
		return location == $.ig.AxisLabelsLocation.prototype.insideBottom || location == $.ig.AxisLabelsLocation.prototype.insideTop || location == $.ig.AxisLabelsLocation.prototype.outsideBottom || location == $.ig.AxisLabelsLocation.prototype.outsideTop;
	}
	,
	$type: new $.ig.Type('HorizontalAxisLabelPanel', $.ig.HorizontalAxisLabelPanelBase.prototype.$type)
}, true);

$.ig.util.defType('TickmarkValues', 'DependencyObject', {
	init: function () {
		$.ig.DependencyObject.prototype.init.call(this);
	},
	initialize: function (initializationParameters) {
		this.visibleMaximum(initializationParameters.visibleMaximum());
	}
	,
	_visibleMaximum: 0,
	visibleMaximum: function (value) {
		if (arguments.length === 1) {
			this._visibleMaximum = value;
			return value;
		} else {
			return this._visibleMaximum;
		}
	}
	,
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_minorInterval: 0,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this._minorInterval = value;
			return value;
		} else {
			return this._minorInterval;
		}
	}
	,
	_actualMinorInterval: 0,
	actualMinorInterval: function (value) {
		if (arguments.length === 1) {
			this._actualMinorInterval = value;
			return value;
		} else {
			return this._actualMinorInterval;
		}
	}
	,
	_firstIndex: 0,
	firstIndex: function (value) {
		if (arguments.length === 1) {
			this._firstIndex = value;
			return value;
		} else {
			return this._firstIndex;
		}
	}
	,
	_lastIndex: 0,
	lastIndex: function (value) {
		if (arguments.length === 1) {
			this._lastIndex = value;
			return value;
		} else {
			return this._lastIndex;
		}
	}
	,
	majorValuesArray: function () {
	}
	,
	minorValuesArray: function () {
	}
	,
	_minorCount: 0,
	minorCount: function (value) {
		if (arguments.length === 1) {
			this._minorCount = value;
			return value;
		} else {
			return this._minorCount;
		}
	}
	,
	$type: new $.ig.Type('TickmarkValues', $.ig.DependencyObject.prototype.$type)
}, true);

$.ig.util.defType('NumericScaler', 'DependencyObject', {
	init: function () {
		$.ig.DependencyObject.prototype.init.call(this);
	},
	calculateRange: function (target, minimumValue, maximumValue, actualMinimumValue, actualMaximumValue) {
	}
	,
	actualMinimumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericScaler.prototype.actualMinimumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericScaler.prototype.actualMinimumValueProperty);
		}
	}
	,
	actualMaximumValue: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.NumericScaler.prototype.actualMaximumValueProperty, value);
			return value;
		} else {
			return this.getValue($.ig.NumericScaler.prototype.actualMaximumValueProperty);
		}
	}
	,
	_cachedActualMinimumValue: 0,
	_cachedActualMaximumValue: 0,
	setActualMinimumValue: function (value) {
		this.actualMinimumValue(value);
	}
	,
	setActualMaximumValue: function (value) {
		this.actualMaximumValue(value);
	}
	,
	onPropertyChanged: function (propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.NumericScaler.prototype.actualMinimumValuePropertyName:
				this._cachedActualMinimumValue = this.actualMinimumValue();
				this.updateActualRange();
				break;
			case $.ig.NumericScaler.prototype.actualMaximumValuePropertyName:
				this._cachedActualMaximumValue = this.actualMaximumValue();
				this.updateActualRange();
				break;
		}
	}
	,
	updateActualRange: function () {
		if ($.ig.util.isNaN(this.actualMinimumValue()) || $.ig.util.isNaN(this.actualMaximumValue()) || Number.isInfinity(this.actualMinimumValue()) || Number.isInfinity(this.actualMaximumValue()) || this.actualMinimumValue() < (-7.9228162514264338E+28) || this.actualMaximumValue() > (7.9228162514264338E+28)) {
			this.actualRange(this.actualMaximumValue() - this.actualMinimumValue());
		} else {
			this.actualRange(this.actualMaximumValue() - this.actualMinimumValue());
		}
	}
	,
	_actualRange: 0,
	actualRange: function (value) {
		if (arguments.length === 1) {
			this._actualRange = value;
			return value;
		} else {
			return this._actualRange;
		}
	}
	,
	getUnscaledValue: function (scaledValue, p) {
	}
	,
	getScaledValue: function (unscaledValue, p) {
	}
	,
	getUnscaledValueList: function (scaledValues, startIndex, count, p) {
		var result = new $.ig.List$1(Number, 2, scaledValues.count());
		for (var i = startIndex; i < count; i++) {
			result.add(this.getUnscaledValue(scaledValues.item(i), p));
		}
		return result;
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
		for (var i = startIndex; i < count; i++) {
			unscaledValues.item(i, this.getScaledValue(unscaledValues.item(i), p));
		}
	}
	,
	$type: new $.ig.Type('NumericScaler', $.ig.DependencyObject.prototype.$type)
}, true);

$.ig.util.defType('PathRenderingInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_strokeThickness: 0,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this._strokeThickness = value;
			return value;
		} else {
			return this._strokeThickness;
		}
	}
	,
	_stroke: null,
	stroke: function (value) {
		if (arguments.length === 1) {
			this._stroke = value;
			return value;
		} else {
			return this._stroke;
		}
	}
	,
	_fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this._fill = value;
			return value;
		} else {
			return this._fill;
		}
	}
	,
	_dashArray: null,
	dashArray: function (value) {
		if (arguments.length === 1) {
			this._dashArray = value;
			return value;
		} else {
			return this._dashArray;
		}
	}
	,
	_alignToPixels: false,
	alignToPixels: function (value) {
		if (arguments.length === 1) {
			this._alignToPixels = value;
			return value;
		} else {
			return this._alignToPixels;
		}
	}
	,
	$type: new $.ig.Type('PathRenderingInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('NumericAxisRenderer', 'AxisRendererBase', {
	init: function (labelManager) {
		$.ig.AxisRendererBase.prototype.init.call(this, labelManager);
	},
	getLabel: function (renderingParams, unscaledValue, index, interval) {
		var label;
		if (renderingParams.label() != null) {
			label = this.getLabelForItem()(unscaledValue);
		} else {
			unscaledValue = Math.round(unscaledValue * 1000000) / 1000000;
			label = unscaledValue.toString();
		}
		return label;
	}
	,
	$type: new $.ig.Type('NumericAxisRenderer', $.ig.AxisRendererBase.prototype.$type)
}, true);

$.ig.util.defType('RangeInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.intervalOverride(-1);
		this.minorCountOverride(-1);
	},
	_visibleMinimum: 0,
	visibleMinimum: function (value) {
		if (arguments.length === 1) {
			this._visibleMinimum = value;
			return value;
		} else {
			return this._visibleMinimum;
		}
	}
	,
	_visibleMaximum: 0,
	visibleMaximum: function (value) {
		if (arguments.length === 1) {
			this._visibleMaximum = value;
			return value;
		} else {
			return this._visibleMaximum;
		}
	}
	,
	_intervalOverride: 0,
	intervalOverride: function (value) {
		if (arguments.length === 1) {
			this._intervalOverride = value;
			return value;
		} else {
			return this._intervalOverride;
		}
	}
	,
	_resolution: 0,
	resolution: function (value) {
		if (arguments.length === 1) {
			this._resolution = value;
			return value;
		} else {
			return this._resolution;
		}
	}
	,
	_minorCountOverride: 0,
	minorCountOverride: function (value) {
		if (arguments.length === 1) {
			this._minorCountOverride = value;
			return value;
		} else {
			return this._minorCountOverride;
		}
	}
	,
	$type: new $.ig.Type('RangeInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LinearScaler', 'NumericScaler', {
	init: function () {
		$.ig.NumericScaler.prototype.init.call(this);
	},
	calculateRange: function (target, minimumValue, maximumValue, actualMinimumValue, actualMaximumValue) {
		var innerMin;
		var innerMax;
		var $ret = $.ig.AutoRangeCalculator.prototype.calculateRange(target, minimumValue, maximumValue, false, -1, innerMin, innerMax);
		innerMin = $ret.p5;
		innerMax = $ret.p6;
		actualMinimumValue = innerMin;
		actualMaximumValue = innerMax;
		return {
			p3: actualMinimumValue,
			p4: actualMaximumValue
		};
	}
	,
	$type: new $.ig.Type('LinearScaler', $.ig.NumericScaler.prototype.$type)
}, true);

$.ig.util.defType('HorizontalLinearScaler', 'LinearScaler', {
	init: function () {
		$.ig.LinearScaler.prototype.init.call(this);
	},
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.left() + p._windowRect.width() * (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			unscaledValue = (unscaledValue * p._viewportRect.width()) + p._viewportRect.left();
			unscaledValue = this.getUnscaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			return unscaledValue;
		}
		return this.getUnscaledValue1(scaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			scaledValue = (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			scaledValue = p._viewportRect.left() + p._viewportRect.width() * (scaledValue - p._windowRect.left()) / p._windowRect.width();
			return scaledValue;
		}
		return this.getScaledValue1(unscaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	asArray: function (values_) {
		var arr = $.isArray(values_) ? values_ : null;;
		return arr;
		return null;
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
		var unscaledValue;
		var windowRect = p._windowRect;
		var viewportRect = p._viewportRect;
		var effectiveViewportRect = p._effectiveViewportRect;
		var isInverted = p._isInverted;
		var useEffectiveRect = !effectiveViewportRect.isEmpty();
		var actualRange = this.actualRange();
		var minimumValue = this._cachedActualMinimumValue;
		var effectiveLeft = effectiveViewportRect.left();
		var effectiveWidth = effectiveViewportRect.width();
		var windowLeft = windowRect.left();
		var windowWidth = windowRect.width();
		var viewportLeft = viewportRect.left();
		var viewportWidth = viewportRect.width();
		var unitLeft = 0;
		var unitWidth = 1;
		var input = this.asArray(unscaledValues);
		var useArray = false;
		if (input != null) {
			useArray = true;
		}
		for (var i = startIndex; i < count; i++) {
			if (useArray) {
				unscaledValue = input[i];
			} else {
				unscaledValue = unscaledValues.item(i);
			}
			if (useEffectiveRect) {
				var u = (unscaledValue - minimumValue) / (actualRange);
				if (isInverted) {
					u = 1 - u;
				}
				u = effectiveLeft + effectiveWidth * (u - unitLeft) / unitWidth;
				var scaledValue = (u - (windowLeft * viewportWidth)) / windowWidth;
				if (useArray) {
					input[i] = scaledValue;
				} else {
					unscaledValues.item(i, scaledValue);
				}
			} else {
				var scaledValue1 = (unscaledValue - minimumValue) / (actualRange);
				if (isInverted) {
					scaledValue1 = 1 - scaledValue1;
				}
				scaledValue1 = viewportLeft + viewportWidth * (scaledValue1 - windowLeft) / windowWidth;
				if (useArray) {
					input[i] = scaledValue1;
				} else {
					unscaledValues.item(i, scaledValue1);
				}
			}
		}
	}
	,
	getUnscaledValue1: function (scaledValue, windowRect, viewportRect, isInverted) {
		var unscaledValue = windowRect.left() + windowRect.width() * (scaledValue - viewportRect.left()) / viewportRect.width();
		if (isInverted) {
			unscaledValue = 1 - unscaledValue;
		}
		return this._cachedActualMinimumValue + unscaledValue * (this.actualRange());
	}
	,
	getScaledValue1: function (unscaledValue, windowRect, viewportRect, isInverted) {
		var scaledValue = (unscaledValue - this._cachedActualMinimumValue) / (this.actualRange());
		if (isInverted) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.left() + viewportRect.width() * (scaledValue - windowRect.left()) / windowRect.width();
	}
	,
	$type: new $.ig.Type('HorizontalLinearScaler', $.ig.LinearScaler.prototype.$type)
}, true);

$.ig.util.defType('LogarithmicScaler', 'NumericScaler', {
	init: function () {
		$.ig.NumericScaler.prototype.init.call(this);
	},
	_logActualMinimumValue: 0,
	logActualMinimumValue: function (value) {
		if (arguments.length === 1) {
			this._logActualMinimumValue = value;
			return value;
		} else {
			return this._logActualMinimumValue;
		}
	}
	,
	_logActualMaximumValue: 0,
	logActualMaximumValue: function (value) {
		if (arguments.length === 1) {
			this._logActualMaximumValue = value;
			return value;
		} else {
			return this._logActualMaximumValue;
		}
	}
	,
	onPropertyChanged: function (propertyName, oldValue, newValue) {
		$.ig.NumericScaler.prototype.onPropertyChanged.call(this, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.NumericScaler.prototype.actualMinimumValuePropertyName:
				this.logActualMinimumValue(Math.log(this.actualMinimumValue()));
				break;
			case $.ig.NumericScaler.prototype.actualMaximumValuePropertyName:
				this.logActualMaximumValue(Math.log(this.actualMaximumValue()));
				break;
		}
	}
	,
	calculateRange: function (target, minimumValue, maximumValue, actualMinimumValue, actualMaximumValue) {
		var innerMin;
		var innerMax;
		var $ret = $.ig.AutoRangeCalculator.prototype.calculateRange(target, minimumValue, maximumValue, true, target.logarithmBase(), innerMin, innerMax);
		innerMin = $ret.p5;
		innerMax = $ret.p6;
		actualMinimumValue = innerMin;
		actualMaximumValue = innerMax;
		return {
			p3: actualMinimumValue,
			p4: actualMaximumValue
		};
	}
	,
	$type: new $.ig.Type('LogarithmicScaler', $.ig.NumericScaler.prototype.$type)
}, true);

$.ig.util.defType('HorizontalLogarithmicScaler', 'LogarithmicScaler', {
	init: function () {
		$.ig.LogarithmicScaler.prototype.init.call(this);
	},
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.left() + p._windowRect.width() * (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			unscaledValue = (unscaledValue * p._viewportRect.width()) + p._viewportRect.left();
			unscaledValue = this.getUnscaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			return unscaledValue;
		}
		return this.getUnscaledValue1(scaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			scaledValue = (scaledValue - p._viewportRect.left()) / p._viewportRect.width();
			scaledValue = p._viewportRect.left() + p._viewportRect.width() * (scaledValue - p._windowRect.left()) / p._windowRect.width();
			return scaledValue;
		}
		return this.getScaledValue1(unscaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getUnscaledValue1: function (scaledValue, windowRect, viewportRect, isInverted) {
		var unscaledValue = windowRect.left() + windowRect.width() * (scaledValue - viewportRect.left()) / viewportRect.width();
		if (isInverted) {
			unscaledValue = 1 - unscaledValue;
		}
		return Math.exp(unscaledValue * (this.logActualMaximumValue() - this.logActualMinimumValue()) + this.logActualMinimumValue());
	}
	,
	getScaledValue1: function (unscaledValue, windowRect, viewportRect, isInverted) {
		if ($.ig.util.isNaN(unscaledValue)) {
			return NaN;
		}
		var scaledValue = 0;
		if (unscaledValue <= 0) {
			scaledValue = (Math.log(this._cachedActualMinimumValue) - this.logActualMinimumValue()) / (this.logActualMaximumValue() - this.logActualMinimumValue());
		} else {
			scaledValue = (Math.log(unscaledValue) - this.logActualMinimumValue()) / (this.logActualMaximumValue() - this.logActualMinimumValue());
		}
		if (isInverted) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.left() + viewportRect.width() * (scaledValue - windowRect.left()) / windowRect.width();
	}
	,
	$type: new $.ig.Type('HorizontalLogarithmicScaler', $.ig.LogarithmicScaler.prototype.$type)
}, true);

$.ig.util.defType('ScalerParams', 'Object', {
	init: function (initNumber, window, viewport, inverted, effectiveViewport) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Object.prototype.init.call(this);
		this._windowRect = window;
		this._viewportRect = viewport;
		this._effectiveViewportRect = effectiveViewport;
		this._isInverted = inverted;
	},
	init1: function (initNumber, window, viewport, inverted) {
		$.ig.Object.prototype.init.call(this);
		this._windowRect = window;
		this._viewportRect = viewport;
		this._effectiveViewportRect = $.ig.Rect.prototype.empty();
		this._isInverted = inverted;
	},
	_windowRect: null,
	_viewportRect: null,
	_effectiveViewportRect: null,
	_isInverted: false,
	$type: new $.ig.Type('ScalerParams', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('VerticalLinearScaler', 'LinearScaler', {
	init: function () {
		$.ig.LinearScaler.prototype.init.call(this);
	},
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.top() + p._windowRect.height() * (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			unscaledValue = (unscaledValue * p._viewportRect.height()) + p._viewportRect.top();
			unscaledValue = this.getUnscaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			return unscaledValue;
		}
		return this.getUnscaledValue1(scaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			scaledValue = (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			scaledValue = p._viewportRect.top() + p._viewportRect.height() * (scaledValue - p._windowRect.top()) / p._windowRect.height();
			return scaledValue;
		}
		return this.getScaledValue1(unscaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	asArray: function (values_) {
		var arr = $.isArray(values_) ? values_ : null;;
		return arr;
		return null;
	}
	,
	getScaledValueList: function (unscaledValues, startIndex, count, p) {
		var unscaledValue;
		var windowRect = p._windowRect;
		var viewportRect = p._viewportRect;
		var effectiveViewportRect = p._effectiveViewportRect;
		var isInverted = p._isInverted;
		var useEffectiveRect = !effectiveViewportRect.isEmpty();
		var actualRange = this.actualRange();
		var minimumValue = this._cachedActualMinimumValue;
		var effectiveTop = effectiveViewportRect.top();
		var effectiveHeight = effectiveViewportRect.height();
		var windowTop = windowRect.top();
		var windowHeight = windowRect.height();
		var viewportTop = viewportRect.top();
		var viewportHeight = viewportRect.height();
		var unitTop = 0;
		var unitHeight = 1;
		var input = this.asArray(unscaledValues);
		var useArray = false;
		if (input != null) {
			useArray = true;
		}
		for (var i = startIndex; i < count; i++) {
			if (useArray) {
				unscaledValue = input[i];
			} else {
				unscaledValue = unscaledValues.item(i);
			}
			if (useEffectiveRect) {
				var u = (unscaledValue - minimumValue) / (actualRange);
				if (!isInverted) {
					u = 1 - u;
				}
				u = effectiveTop + effectiveHeight * (u - unitTop) / unitHeight;
				var scaledValue = (u - (windowTop * viewportHeight)) / windowHeight;
				if (useArray) {
					input[i] = scaledValue;
				} else {
					unscaledValues.item(i, scaledValue);
				}
			} else {
				var scaledValue1 = (unscaledValue - minimumValue) / (actualRange);
				if (!isInverted) {
					scaledValue1 = 1 - scaledValue1;
				}
				scaledValue1 = viewportTop + viewportHeight * (scaledValue1 - windowTop) / windowHeight;
				if (useArray) {
					input[i] = scaledValue1;
				} else {
					unscaledValues.item(i, scaledValue1);
				}
			}
		}
	}
	,
	getScaledValue1: function (unscaledValue, windowRect, viewportRect, isInverted) {
		var scaledValue = (unscaledValue - this._cachedActualMinimumValue) / (this.actualRange());
		if (!isInverted) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.top() + viewportRect.height() * (scaledValue - windowRect.top()) / windowRect.height();
	}
	,
	getUnscaledValue1: function (scaledValue, windowRect, viewportRect, isInverted) {
		var unscaledValue = windowRect.top() + windowRect.height() * (scaledValue - viewportRect.top()) / viewportRect.height();
		if (!isInverted) {
			unscaledValue = 1 - unscaledValue;
		}
		return this._cachedActualMinimumValue + unscaledValue * (this.actualRange());
	}
	,
	$type: new $.ig.Type('VerticalLinearScaler', $.ig.LinearScaler.prototype.$type)
}, true);

$.ig.util.defType('VerticalLogarithmicScaler', 'LogarithmicScaler', {
	init: function () {
		$.ig.LogarithmicScaler.prototype.init.call(this);
	},
	getUnscaledValue: function (scaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var unscaledValue = p._windowRect.top() + p._windowRect.height() * (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			unscaledValue = (unscaledValue * p._viewportRect.height()) + p._viewportRect.top();
			unscaledValue = this.getUnscaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			return unscaledValue;
		}
		return this.getUnscaledValue1(scaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getScaledValue: function (unscaledValue, p) {
		if (!p._effectiveViewportRect.isEmpty()) {
			var scaledValue = this.getScaledValue1(unscaledValue, $.ig.NumericScaler.prototype.unitRect, p._effectiveViewportRect, p._isInverted);
			scaledValue = (scaledValue - p._viewportRect.top()) / p._viewportRect.height();
			scaledValue = p._viewportRect.top() + p._viewportRect.height() * (scaledValue - p._windowRect.top()) / p._windowRect.height();
			return scaledValue;
		}
		return this.getScaledValue1(unscaledValue, p._windowRect, p._viewportRect, p._isInverted);
	}
	,
	getScaledValue1: function (unscaledValue, windowRect, viewportRect, isInverted) {
		if ($.ig.util.isNaN(unscaledValue)) {
			return NaN;
		}
		var scaledValue;
		if (unscaledValue <= 0) {
			scaledValue = (Math.log(this._cachedActualMinimumValue) - this.logActualMinimumValue()) / (this.logActualMaximumValue() - this.logActualMinimumValue());
		} else {
			scaledValue = (Math.log(unscaledValue) - this.logActualMinimumValue()) / (this.logActualMaximumValue() - this.logActualMinimumValue());
		}
		if (!isInverted) {
			scaledValue = 1 - scaledValue;
		}
		return viewportRect.top() + viewportRect.height() * (scaledValue - windowRect.top()) / windowRect.height();
	}
	,
	getUnscaledValue1: function (scaledValue, windowRect, viewportRect, isInverted) {
		var unscaledValue = windowRect.top() + windowRect.height() * (scaledValue - viewportRect.top()) / viewportRect.height();
		if (!isInverted) {
			unscaledValue = 1 - unscaledValue;
		}
		return Math.exp(unscaledValue * (this.logActualMaximumValue() - this.logActualMinimumValue()) + this.logActualMinimumValue());
	}
	,
	$type: new $.ig.Type('VerticalLogarithmicScaler', $.ig.LogarithmicScaler.prototype.$type)
}, true);

$.ig.util.defType('LinearTickmarkValues', 'TickmarkValues', {
	init: function () {
		this.__majorValues = null;
		this.__minorValues = null;
		$.ig.TickmarkValues.prototype.init.call(this);
		this.minTicks(0);
	},
	_minTicks: 0,
	minTicks: function (value) {
		if (arguments.length === 1) {
			this._minTicks = value;
			return value;
		} else {
			return this._minTicks;
		}
	}
	,
	initialize: function (initializationParameters) {
		$.ig.TickmarkValues.prototype.initialize.call(this, initializationParameters);
		var snapper;
		if (this.minTicks() != 0) {
			snapper = new $.ig.LinearNumericSnapper(1, initializationParameters.visibleMinimum(), initializationParameters.visibleMaximum(), initializationParameters.resolution(), this.minTicks(), initializationParameters.heuristicResolution());
		} else {
			snapper = new $.ig.LinearNumericSnapper(0, initializationParameters.visibleMinimum(), initializationParameters.visibleMaximum(), initializationParameters.resolution(), initializationParameters.heuristicResolution());
		}
		this.interval(snapper.interval());
		if ((initializationParameters.hasUserInterval()) && initializationParameters.userInterval() > 0 && (initializationParameters.visibleMaximum() - initializationParameters.visibleMinimum()) / initializationParameters.userInterval() < 1000) {
			this.interval(initializationParameters.userInterval());
		}
		if (initializationParameters.intervalOverride() != -1) {
			this.interval(initializationParameters.intervalOverride());
		}
		if (this.interval() == 0) {
			this.firstIndex(0);
			this.lastIndex(0);
		} else {
			this.firstIndex($.ig.truncate(Math.floor((initializationParameters.visibleMinimum() - initializationParameters.actualMinimum()) / this.interval())));
			this.lastIndex($.ig.truncate(Math.ceil((initializationParameters.visibleMaximum() - initializationParameters.actualMinimum()) / this.interval())));
		}
		this.minorCount(snapper.minorCount());
		if (initializationParameters.minorCountOverride() != -1) {
			this.minorCount(initializationParameters.minorCountOverride());
		}
		this.minorInterval(initializationParameters.minorInterval());
		this.actualMinimum(initializationParameters.actualMinimum());
	}
	,
	_actualMinimum: 0,
	actualMinimum: function (value) {
		if (arguments.length === 1) {
			this._actualMinimum = value;
			return value;
		} else {
			return this._actualMinimum;
		}
	}
	,
	__majorValues: null,
	majorValuesArray: function () {
		var count = 0;
		var firstIndex = this.firstIndex();
		if (!$.ig.util.isNaN(this.interval())) {
			count = this.lastIndex() - firstIndex + 1;
			if (count < 0) {
				count = 0;
			}
		}
		if (this.__majorValues == null || this.__majorValues.length != count) {
			this.__majorValues = new Array(count);
		}
		var array = this.__majorValues;
		for (var i = 0; i < count; ++i) {
			var major = this.actualMinimum() + (i + firstIndex) * this.interval();
			array[i] = major;
		}
		return array;
	}
	,
	__minorValues: null,
	minorValuesArray: function () {
		if (this.minorInterval() > 0) {
			return this.getMinorValuesWithCustomInterval();
		}
		return this.getMinorValues();
	}
	,
	getMinorValues: function () {
		var firstIndex = this.firstIndex();
		var lastIndex = this.lastIndex();
		var minorCount = this.minorCount();
		var interval = this.interval();
		var actualMinimum = this.actualMinimum();
		var visibleMaximum = this.visibleMaximum();
		var minorSpan = interval / minorCount;
		var count = 0;
		for (var i = firstIndex; i < lastIndex; ++i) {
			for (var j = 1; j < minorCount; ++j) {
				var minor = actualMinimum + i * interval + (j * minorSpan);
				if (minor <= visibleMaximum) {
					count++;
				}
			}
		}
		if (this.__minorValues == null || this.__minorValues.length != count) {
			this.__minorValues = new Array(count);
		}
		var array = this.__minorValues;
		var pos = 0;
		for (var i1 = firstIndex; i1 < lastIndex; ++i1) {
			for (var j1 = 1; j1 < minorCount; ++j1) {
				var minor1 = actualMinimum + i1 * interval + (j1 * minorSpan);
				if (minor1 <= this.visibleMaximum()) {
					array[pos] = minor1;
					pos++;
				}
			}
		}
		return array;
	}
	,
	getMinorValuesWithCustomInterval: function () {
		var firstIndex = this.firstIndex();
		var lastIndex = this.lastIndex();
		var minorCount = this.minorCount();
		var interval = this.interval();
		var actualMinimum = this.actualMinimum();
		var visibleMaximum = this.visibleMaximum();
		var minorSpan = interval / minorCount;
		var count = 0;
		for (var i = firstIndex; i < lastIndex; ++i) {
			var curValue = actualMinimum + i * this.interval();
			var nextMajor = this.visibleMaximum();
			if (i + 1 <= this.lastIndex()) {
				nextMajor = this.actualMinimum() + ((i + 1) * this.interval());
			}
			if (nextMajor > this.visibleMaximum()) {
				nextMajor = this.visibleMaximum();
			}
			while (curValue < nextMajor) {
				curValue += this.minorInterval();
				if (curValue < nextMajor) {
					count++;
				}
			}
		}
		if (this.__minorValues == null || this.__minorValues.length != count) {
			this.__minorValues = new Array(count);
		}
		var array = this.__minorValues;
		var pos = 0;
		for (var i1 = firstIndex; i1 < lastIndex; ++i1) {
			var curValue1 = actualMinimum + i1 * this.interval();
			var nextMajor1 = this.visibleMaximum();
			if (i1 + 1 <= this.lastIndex()) {
				nextMajor1 = this.actualMinimum() + ((i1 + 1) * this.interval());
			}
			if (nextMajor1 > this.visibleMaximum()) {
				nextMajor1 = this.visibleMaximum();
			}
			while (curValue1 < nextMajor1) {
				curValue1 += this.minorInterval();
				if (curValue1 < nextMajor1) {
					array[pos] = curValue1;
					pos++;
				}
			}
		}
		return array;
	}
	,
	$type: new $.ig.Type('LinearTickmarkValues', $.ig.TickmarkValues.prototype.$type)
}, true);

$.ig.util.defType('LogarithmicTickmarkValues', 'TickmarkValues', {
	init: function () {
		this.__majorValues = null;
		this.__minorValues = null;
		$.ig.TickmarkValues.prototype.init.call(this);
	},
	initialize: function (initializationParameters) {
		$.ig.TickmarkValues.prototype.initialize.call(this, initializationParameters);
		var snapper = new $.ig.LogarithmicNumericSnapper(initializationParameters.visibleMinimum(), initializationParameters.visibleMaximum(), this.logarithmBase(), initializationParameters.resolution());
		this.interval(1);
		this.minorCount($.ig.truncate(snapper.minorCount()));
		this.firstIndex($.ig.truncate(Math.floor(Math.logBase(Math.max($.ig.LogarithmicTickmarkValues.prototype._mINIMUM_VALUE_GREATER_THAN_ZERO, initializationParameters.visibleMinimum()), this.logarithmBase()))));
		this.lastIndex($.ig.truncate(Math.ceil(Math.logBase(Math.max($.ig.LogarithmicTickmarkValues.prototype._mINIMUM_VALUE_GREATER_THAN_ZERO, initializationParameters.visibleMaximum()), this.logarithmBase()))));
	}
	,
	logarithmBase: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.LogarithmicTickmarkValues.prototype.logarithmBaseProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.LogarithmicTickmarkValues.prototype.logarithmBaseProperty));
		}
	}
	,
	majorValueAt: function (tickIndex) {
		var majorLog = tickIndex * this.interval();
		return Math.pow(this.logarithmBase(), majorLog);
	}
	,
	__majorValues: null,
	majorValuesArray: function () {
		var firstIndex = this.firstIndex();
		var lastIndex = this.lastIndex();
		var visibleMaximum = this.visibleMaximum();
		var count = 0;
		for (var i = firstIndex; i <= lastIndex; ++i) {
			var major = this.majorValueAt(i);
			if (major <= visibleMaximum) {
				count++;
			}
		}
		if (this.__majorValues == null || this.__majorValues.length != count) {
			this.__majorValues = new Array(count);
		}
		var array = this.__majorValues;
		var pos = 0;
		for (var i1 = firstIndex; i1 <= lastIndex; ++i1) {
			var major1 = this.majorValueAt(i1);
			if (major1 <= visibleMaximum) {
				array[pos] = major1;
				pos++;
			}
		}
		return array;
	}
	,
	__minorValues: null,
	minorValuesArray: function () {
		var firstIndex = this.firstIndex();
		var lastIndex = this.lastIndex();
		var logarithmBase = this.logarithmBase();
		var minorCount = this.minorCount();
		var visibleMaximum = this.visibleMaximum();
		var count = 0;
		for (var i = firstIndex; i <= lastIndex; ++i) {
			var majorValue = this.majorValueAt(i);
			var minorInterval = Math.pow(logarithmBase, i);
			for (var j = 1; j < this.minorCount() - 1; ++j) {
				var minor = majorValue + j * minorInterval;
				if (minor <= visibleMaximum) {
					count++;
				}
			}
		}
		if (this.__minorValues == null || this.__minorValues.length != count) {
			this.__minorValues = new Array(count);
		}
		var array = this.__minorValues;
		var pos = 0;
		for (var i1 = firstIndex; i1 <= lastIndex; ++i1) {
			var majorValue1 = this.majorValueAt(i1);
			var minorInterval1 = Math.pow(logarithmBase, i1);
			for (var j1 = 1; j1 < this.minorCount() - 1; ++j1) {
				var minor1 = majorValue1 + j1 * minorInterval1;
				if (minor1 <= visibleMaximum) {
					array[pos] = minor1;
					pos++;
				}
			}
		}
		return array;
	}
	,
	$type: new $.ig.Type('LogarithmicTickmarkValues', $.ig.TickmarkValues.prototype.$type)
}, true);

$.ig.util.defType('TickmarkValuesInitializationParameters', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_visibleMinimum: 0,
	visibleMinimum: function (value) {
		if (arguments.length === 1) {
			this._visibleMinimum = value;
			return value;
		} else {
			return this._visibleMinimum;
		}
	}
	,
	_visibleMaximum: 0,
	visibleMaximum: function (value) {
		if (arguments.length === 1) {
			this._visibleMaximum = value;
			return value;
		} else {
			return this._visibleMaximum;
		}
	}
	,
	_actualMinimum: 0,
	actualMinimum: function (value) {
		if (arguments.length === 1) {
			this._actualMinimum = value;
			return value;
		} else {
			return this._actualMinimum;
		}
	}
	,
	_actualMaximum: 0,
	actualMaximum: function (value) {
		if (arguments.length === 1) {
			this._actualMaximum = value;
			return value;
		} else {
			return this._actualMaximum;
		}
	}
	,
	_resolution: 0,
	resolution: function (value) {
		if (arguments.length === 1) {
			this._resolution = value;
			return value;
		} else {
			return this._resolution;
		}
	}
	,
	_hasUserInterval: false,
	hasUserInterval: function (value) {
		if (arguments.length === 1) {
			this._hasUserInterval = value;
			return value;
		} else {
			return this._hasUserInterval;
		}
	}
	,
	_userInterval: 0,
	userInterval: function (value) {
		if (arguments.length === 1) {
			this._userInterval = value;
			return value;
		} else {
			return this._userInterval;
		}
	}
	,
	_intervalOverride: 0,
	intervalOverride: function (value) {
		if (arguments.length === 1) {
			this._intervalOverride = value;
			return value;
		} else {
			return this._intervalOverride;
		}
	}
	,
	_minorCountOverride: 0,
	minorCountOverride: function (value) {
		if (arguments.length === 1) {
			this._minorCountOverride = value;
			return value;
		} else {
			return this._minorCountOverride;
		}
	}
	,
	_mode: 0,
	mode: function (value) {
		if (arguments.length === 1) {
			this._mode = value;
			return value;
		} else {
			return this._mode;
		}
	}
	,
	_mode2GroupCount: 0,
	mode2GroupCount: function (value) {
		if (arguments.length === 1) {
			this._mode2GroupCount = value;
			return value;
		} else {
			return this._mode2GroupCount;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_window: null,
	window: function (value) {
		if (arguments.length === 1) {
			this._window = value;
			return value;
		} else {
			return this._window;
		}
	}
	,
	_isInverted: false,
	isInverted: function (value) {
		if (arguments.length === 1) {
			this._isInverted = value;
			return value;
		} else {
			return this._isInverted;
		}
	}
	,
	_getScaledValue: null,
	getScaledValue: function (value) {
		if (arguments.length === 1) {
			this._getScaledValue = value;
			return value;
		} else {
			return this._getScaledValue;
		}
	}
	,
	_getGroupCenter: null,
	getGroupCenter: function (value) {
		if (arguments.length === 1) {
			this._getGroupCenter = value;
			return value;
		} else {
			return this._getGroupCenter;
		}
	}
	,
	_getUnscaledGroupCenter: null,
	getUnscaledGroupCenter: function (value) {
		if (arguments.length === 1) {
			this._getUnscaledGroupCenter = value;
			return value;
		} else {
			return this._getUnscaledGroupCenter;
		}
	}
	,
	_minorInterval: 0,
	minorInterval: function (value) {
		if (arguments.length === 1) {
			this._minorInterval = value;
			return value;
		} else {
			return this._minorInterval;
		}
	}
	,
	_heuristicResolution: 0,
	heuristicResolution: function (value) {
		if (arguments.length === 1) {
			this._heuristicResolution = value;
			return value;
		} else {
			return this._heuristicResolution;
		}
	}
	,
	$type: new $.ig.Type('TickmarkValuesInitializationParameters', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('VerticalAxisLabelPanel', 'AxisLabelPanelBase', {
	init: function () {
		$.ig.AxisLabelPanelBase.prototype.init.call(this);
	},
	createView: function () {
		return new $.ig.VerticalAxisLabelPanelView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.AxisLabelPanelBase.prototype.onViewCreated.call(this, view);
		this.verticalView(view);
	}
	,
	_verticalView: null,
	verticalView: function (value) {
		if (arguments.length === 1) {
			this._verticalView = value;
			return value;
		} else {
			return this._verticalView;
		}
	}
	,
	_largestWidth: 0,
	largestWidth: function (value) {
		if (arguments.length === 1) {
			this._largestWidth = value;
			return value;
		} else {
			return this._largestWidth;
		}
	}
	,
	_largestHeight: 0,
	largestHeight: function (value) {
		if (arguments.length === 1) {
			this._largestHeight = value;
			return value;
		} else {
			return this._largestHeight;
		}
	}
	,
	_largestRenderWidth: 0,
	largestRenderWidth: function (value) {
		if (arguments.length === 1) {
			this._largestRenderWidth = value;
			return value;
		} else {
			return this._largestRenderWidth;
		}
	}
	,
	_largestRenderHeight: 0,
	largestRenderHeight: function (value) {
		if (arguments.length === 1) {
			this._largestRenderHeight = value;
			return value;
		} else {
			return this._largestRenderHeight;
		}
	}
	,
	bindExtent: function () {
		this.verticalView().bindExtent();
	}
	,
	getTitleEffectiveAngle: function () {
		return this.axis().titleSettings() != null ? this.axis().titleSettings().angle() : -90;
	}
	,
	getLabelLeftOffset: function () {
		var offset = 0;
		var posistion = this.getTitlePosition(this.axis().titleSettings());
		if (posistion == $.ig.AxisTitlePosition.prototype.left) {
			offset += this.getTitleWidthBounds();
		}
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideRight || actualLocation == $.ig.AxisLabelsLocation.prototype.insideRight) {
			offset += this.axis().actualTickLength();
		}
		return offset;
	}
	,
	getLabelRightOffset: function () {
		var offset = 0;
		var posistion = this.getTitlePosition(this.axis().titleSettings());
		if (posistion == $.ig.AxisTitlePosition.prototype.right) {
			offset += this.getTitleWidthBounds();
		}
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideLeft || actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft) {
			offset += this.axis().actualTickLength();
		}
		return offset;
	}
	,
	getLabelSpan: function () {
		var span = (this._actualExtent - this.getLabelLeftOffset()) - this.getLabelRightOffset();
		if (span < 0) {
			span = 0;
		}
		return span;
	}
	,
	getLabelRenderSpan: function () {
		var span = ((this.getLabelSpan() - this.view().getLabelLeftMargin()) - this.view().getLabelRightMargin());
		if (span < 0) {
			span = 0;
		}
		return span;
	}
	,
	createBoundsRectangles: function () {
		var rectangles = new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		this.useStaggering(false);
		this.useRotation(false);
		if (this.labelSettings() != null && this.labelSettings().hasUserAngle() && this.getEffectiveAngle() % 360 != 0) {
			this.useRotation(true);
		}
		this.largestWidth(-1.7976931348623157E+308);
		this.largestHeight(-1.7976931348623157E+308);
		this.largestRenderWidth(-1.7976931348623157E+308);
		this.largestRenderHeight(-1.7976931348623157E+308);
		var marginLeft = this.view().getLabelLeftMargin();
		var marginTop = this.view().getLabelTopMargin();
		var marginRight = this.view().getLabelRightMargin();
		var marginBottom = this.view().getLabelBottomMargin();
		var labelLeftOffset = this.getLabelLeftOffset();
		for (var i = 0; i < this.textBlocks().count(); i++) {
			var currentTextBlock = this.textBlocks().__inner[i];
			var textHeight = this.getDesiredHeight(currentTextBlock);
			var textWidth = this.getDesiredWidth(currentTextBlock);
			var rectHeight = textHeight + marginTop + marginBottom;
			var rectWidth = textWidth + marginLeft + marginRight;
			var x = this.labelViewport().left() + labelLeftOffset;
			var y = this.labelPositions().__inner[i].value() - rectHeight / 2;
			this.largestWidth(Math.max(rectWidth, this.largestWidth()));
			this.largestHeight(Math.max(rectHeight, this.largestHeight()));
			this.largestRenderWidth(Math.max(textWidth, this.largestRenderWidth()));
			this.largestRenderHeight(Math.max(textHeight, this.largestRenderHeight()));
			var rect = new $.ig.Rect(0, x, y, rectWidth, rectHeight);
			rectangles.add(rect);
		}
		var angleDegrees = 0;
		if (this.useRotation()) {
			angleDegrees = this.getEffectiveAngle() % 360;
			if (angleDegrees < 0) {
				angleDegrees += 360;
			}
		}
		if (!this.axis().hasUserExtent()) {
			this.calculateExtent(angleDegrees, marginLeft, marginRight);
		} else {
			this.view().bindExtentToSettings();
		}
		if (this.useRotation()) {
			for (var i1 = 0; i1 < rectangles.count(); i1++) {
				var currentRect = rectangles.__inner[i1];
				currentRect.y(this.labelPositions().__inner[i1].value() - this.largestHeight() / 2);
				rectangles.__inner[i1] = currentRect;
			}
		}
		var skipClipping = false;
		if (!this.useRotation() && this.largestWidth() <= this._actualExtent) {
			skipClipping = true;
		}
		if (!skipClipping) {
			var actualHeight = this.labelViewport().height();
			var labelSpan = this.getLabelSpan();
			var clipWidth = labelSpan;
			var span = this.labelPositions().count() > 1 ? Math.abs(this.labelPositions().__inner[1].value() - this.labelPositions().__inner[0].value()) : actualHeight;
			var startClippingAngle = Math.abs(Math.asin(span / this.largestWidth()) * (180 / Math.PI));
			var optimize = (angleDegrees >= startClippingAngle && angleDegrees <= 180 - startClippingAngle) || (angleDegrees - 180 >= startClippingAngle && angleDegrees - 180 <= 180 - startClippingAngle);
			for (var i2 = 0; i2 < rectangles.count(); i2++) {
				if (this.useRotation()) {
					var angleRadians = angleDegrees * (Math.PI / 180);
					var textwidth = this.getWidthBounds(this.textBlocks().__inner[i2]);
					clipWidth = Math.min(labelSpan / Math.abs(Math.cos(angleRadians)), textwidth);
					if (optimize) {
						var rad;
						if (angleDegrees > 0 && angleDegrees < 90) {
							rad = (Math.PI / 180) * (90 - angleDegrees);
						} else if (angleDegrees > 270 && angleDegrees < 360) {
							rad = (Math.PI / 180) * (angleDegrees - 270);
						} else {
							rad = 0;
						}
						clipWidth = span / Math.cos(rad);
					}
				}
				var currentRect1 = rectangles.__inner[i2];
				currentRect1.width(Math.min(currentRect1.width(), clipWidth));
				rectangles.__inner[i2] = currentRect1;
				if (!($.ig.util.cast($.ig.TextBlock.prototype.$type, this.textBlocks().__inner[i2]) !== null)) {
					this.textBlocks().__inner[i2].width(clipWidth);
				}
				var textBlock = $.ig.util.cast($.ig.TextBlock.prototype.$type, this.textBlocks().__inner[i2]);
				if (textBlock != null) {
					var newText = this.trimTextBlock(i2, textBlock, clipWidth);
					if (!textBlock.text().equals(newText)) {
						textBlock.text(newText);
						this.textBlocks().__inner[i2].width(clipWidth);
					}
				}
			}
			this.calculateExtent(angleDegrees, marginLeft, marginRight);
		}
		if (this.shouldHorizontalAlign()) {
			this.doHorizontalAlignment(rectangles);
		}
		return rectangles;
	}
	,
	calculateExtent: function (angleDegrees, marginLeft, marginRight) {
		var rad = angleDegrees * (Math.PI / 180);
		var rotatedLabelWidth = Math.abs(this.largestRenderWidth() * Math.cos(rad)) + Math.abs(this.largestRenderHeight() * Math.sin(rad));
		var widthBounds = this.getTitleWidthBounds();
		this.extent((rotatedLabelWidth + marginLeft + marginRight) + (widthBounds) + this.axis().actualTickLength());
	}
	,
	doHorizontalAlignment: function (rectangles) {
		this.verticalView().handleHorizontalAlignment(rectangles, this.largestWidth());
	}
	,
	setLabelRotationTransform: function (label, angle) {
		var centerX = 0;
		var centerY = this.largestRenderHeight() / 2;
		var group = new $.ig.TransformGroup();
		var effectiveAngle = $.ig.GeometryUtil.prototype.simplifyAngle(this.getEffectiveAngle());
		var transform = (function () {
			var $ret = new $.ig.RotateTransform();
			$ret.angle(effectiveAngle);
			$ret.centerX(centerX);
			$ret.centerY(centerY);
			return $ret;
		}());
		var xShift = 0;
		var yShift = 0;
		if (effectiveAngle != 0 && effectiveAngle != 360) {
			effectiveAngle -= 90;
			if (effectiveAngle > 0 && effectiveAngle < 180) {
				transform.centerX(this.largestRenderWidth());
				xShift = -this.largestRenderWidth() + this.largestRenderHeight() / 2;
				xShift = xShift + Math.sin($.ig.MathUtil.prototype.radians(effectiveAngle - 180)) * (this.largestRenderHeight() / 2);
			} else {
				if (effectiveAngle >= 180) {
					xShift = xShift - Math.cos($.ig.MathUtil.prototype.radians(effectiveAngle)) * (this.largestRenderHeight() / 2);
				} else {
					xShift = xShift + Math.cos($.ig.MathUtil.prototype.radians(effectiveAngle)) * (this.largestRenderHeight() / 2);
				}
			}
		}
		var translate = (function () {
			var $ret = new $.ig.TranslateTransform();
			$ret.x(xShift);
			$ret.y(yShift);
			return $ret;
		}());
		group.children().add(transform);
		group.children().add(translate);
		label.renderTransform(group);
	}
	,
	shouldHorizontalAlign: function () {
		return !this.useStaggering() && !this.useRotation();
	}
	,
	getTitleBounds: function () {
		var position = this.getTitlePosition(this.axis().titleSettings());
		var titleWidth = this.getTitleWidthBounds();
		var actualLocation = this.actualLabelLocation();
		var left = 0;
		if (position == $.ig.AxisTitlePosition.prototype.left) {
			left += this.labelViewport().left();
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideRight || actualLocation == $.ig.AxisLabelsLocation.prototype.insideRight) {
				left += this.axis().actualTickLength();
			}
		} else {
			left = this.labelViewport().right() - titleWidth;
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft || actualLocation == $.ig.AxisLabelsLocation.prototype.outsideLeft) {
				left -= this.axis().actualTickLength();
			}
		}
		var titleHeight = this.getTitleHeightBounds();
		var top = 0;
		var vert = this.axis().titleSettings() == null ? $.ig.VerticalAlignment.prototype.center : this.axis().titleSettings().verticalAlignment();
		if (vert == $.ig.VerticalAlignment.prototype.top) {
			top = this.labelViewport().top();
		} else if (vert == $.ig.VerticalAlignment.prototype.bottom) {
			top = this.labelViewport().bottom() - titleHeight;
		} else {
			top = (this.labelViewport().top() + (this.labelViewport().height() / 2)) - (titleHeight / 2);
		}
		return new $.ig.Rect(0, left, top, titleWidth, titleHeight);
	}
	,
	getTitlePosition: function (titleSettings) {
		if (titleSettings == null) {
			return this.axis().seriesViewer().getDefaultVerticalAxisTitlePosition(this.axis());
		}
		if (titleSettings.position() == $.ig.AxisTitlePosition.prototype.auto) {
			if (this.axis() != null && this.axis().seriesViewer() != null) {
				return this.axis().seriesViewer().getDefaultVerticalAxisTitlePosition(this.axis());
			}
			return $.ig.AxisTitlePosition.prototype.left;
		}
		return titleSettings.position();
	}
	,
	getDefaultLabelsLocation: function () {
		return $.ig.AxisLabelsLocation.prototype.outsideLeft;
	}
	,
	validLocation: function (location) {
		return location == $.ig.AxisLabelsLocation.prototype.outsideLeft || location == $.ig.AxisLabelsLocation.prototype.outsideRight || location == $.ig.AxisLabelsLocation.prototype.insideLeft || location == $.ig.AxisLabelsLocation.prototype.insideRight;
	}
	,
	measureLabels: function (availableSize) {
		if ((this.children().contains(this.axis().titleTextBlock()) == false) && this.axis().titleTextBlock() != null) {
			this.children().add(this.axis().titleTextBlock());
		}
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var element = en.current();
			if (element != this.axis().titleTextBlock() && element != this.view().ticks()) {
				this.view().handleMeasureLabel(element);
			}
		}
		var extent = (this.axis() == null || this._actualExtent <= 0 || $.ig.util.isNaN(this._actualExtent)) ? 50 : this._actualExtent;
		if (extent > availableSize.width()) {
			extent = availableSize.width();
		}
		var size = new $.ig.Size(1, extent, 50);
		if (Number.isInfinity(size.width())) {
			size.width(50);
		}
		if (Number.isInfinity(size.height())) {
			size.height(50);
		}
		return size;
	}
	,
	createTicks: function () {
		var ticksGeometry = this.view().getTicksGeometry();
		this.axis().clearMarks(ticksGeometry);
		if (this.labelSettings() != null && this.labelSettings().visibility() != $.ig.Visibility.prototype.visible) {
			return;
		}
		var tickLength = this.axis().actualTickLength();
		if (tickLength == 0) {
			return;
		}
		var positions = this.getTickValues();
		if (positions == null) {
			return;
		}
		var x1 = this.labelViewport().left();
		var x2;
		var actualLocation = this.actualLabelLocation();
		if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideLeft || actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft) {
			x1 = this.labelViewport().right();
			x2 = x1 - tickLength;
		} else {
			x2 = x1 + tickLength;
		}
		var tickRenderingInfo = this.view().getThicksRenderingInfo();
		var en = positions.getEnumerator();
		while (en.moveNext()) {
			var y = en.current();
			this.horizontalTick(ticksGeometry, y, x1, x2, this.viewportRect(), tickRenderingInfo);
		}
		if (!this.children().contains(this.view().ticks())) {
			this.children().add(this.view().ticks());
		}
	}
	,
	$type: new $.ig.Type('VerticalAxisLabelPanel', $.ig.AxisLabelPanelBase.prototype.$type)
}, true);

$.ig.util.defType('FramePreparer', 'Object', {
	init: function (initNumber, host) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.FramePreparer.prototype.init1.call(this, 1, $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, host), $.ig.util.cast($.ig.IProvidesViewport.prototype.$type, host), $.ig.util.cast($.ig.ISupportsErrorBars.prototype.$type, host));
	},
	init1: function (initNumber, markersHost, viewportHost, errorBarsHost) {
		$.ig.Object.prototype.init.call(this);
		this.markersHost(new $.ig.DefaultSupportsMarkers());
		this.viewportHost(new $.ig.DefaultProvidesViewport());
		this.errorBarsHost(new $.ig.DefaultSupportsErrorBars());
		if (markersHost != null) {
			this.markersHost(markersHost);
		}
		if (viewportHost != null) {
			this.viewportHost(viewportHost);
		}
		if (errorBarsHost != null) {
			this.errorBarsHost(errorBarsHost);
		}
	},
	_errorBarsHost: null,
	errorBarsHost: function (value) {
		if (arguments.length === 1) {
			this._errorBarsHost = value;
			return value;
		} else {
			return this._errorBarsHost;
		}
	}
	,
	_markersHost: null,
	markersHost: function (value) {
		if (arguments.length === 1) {
			this._markersHost = value;
			return value;
		} else {
			return this._markersHost;
		}
	}
	,
	_viewportHost: null,
	viewportHost: function (value) {
		if (arguments.length === 1) {
			this._viewportHost = value;
			return value;
		} else {
			return this._viewportHost;
		}
	}
	,
	prepareFrame: function (frame, view) {
	}
	,
	$type: new $.ig.Type('FramePreparer', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CategoryFramePreparerBase', 'FramePreparer', {
	init: function (initNumber, host) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CategoryFramePreparerBase.prototype.init1.call(this, 1, host, $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, host), $.ig.util.cast($.ig.IProvidesViewport.prototype.$type, host), $.ig.util.cast($.ig.ISupportsErrorBars.prototype.$type, host), $.ig.util.cast($.ig.IBucketizer.prototype.$type, host));
	},
	init1: function (initNumber, host, markersHost, viewportHost, errorBarsHost, bucketizingHost) {
		$.ig.FramePreparer.prototype.init1.call(this, 1, markersHost, viewportHost, errorBarsHost);
		this.categoryBasedHost(host);
		this.bucketizingHost(bucketizingHost);
	},
	_bucketizingHost: null,
	bucketizingHost: function (value) {
		if (arguments.length === 1) {
			this._bucketizingHost = value;
			return value;
		} else {
			return this._bucketizingHost;
		}
	}
	,
	_categoryBasedHost: null,
	categoryBasedHost: function (value) {
		if (arguments.length === 1) {
			this._categoryBasedHost = value;
			return value;
		} else {
			return this._categoryBasedHost;
		}
	}
	,
	prepareMarker: function (frame, bucket, collisionAvoider, itemIndex, markerCount, markerBucket) {
	}
	,
	_skipUnknowns: false,
	skipUnknowns: function (value) {
		if (arguments.length === 1) {
			this._skipUnknowns = value;
			return value;
		} else {
			return this._skipUnknowns;
		}
	}
	,
	getParams: function (inputFrame) {
		var p = new $.ig.PreparationParams();
		p.useHighMarkerFidelity(this.categoryBasedHost().useHighMarkerFidelity());
		p.scaler(this.categoryBasedHost().scaler());
		p.yScaler(this.categoryBasedHost().yScaler());
		p.sortingScaler($.ig.util.cast($.ig.ISortingAxis.prototype.$type, p.scaler()));
		p.frame($.ig.util.cast($.ig.CategoryFrame.prototype.$type, inputFrame));
		if (p.frame() == null || p.scaler() == null || p.yScaler() == null) {
			return null;
		}
		var firstBucket;
		var lastBucket;
		var bucketSize;
		var resolution;
		var $ret = this.bucketizingHost().getBucketInfo(firstBucket, lastBucket, bucketSize, resolution);
		firstBucket = $ret.p0;
		lastBucket = $ret.p1;
		bucketSize = $ret.p2;
		resolution = $ret.p3;
		p.firstBucket(firstBucket);
		p.lastBucket(lastBucket);
		p.bucketSize(bucketSize);
		p.resolution(resolution);
		if (p.lastBucket() < p.firstBucket()) {
			return null;
		}
		var windowRect;
		var viewportRect;
		var effectiveViewportRect;
		var $ret1 = this.viewportHost().getViewInfo(viewportRect, windowRect);
		viewportRect = $ret1.p0;
		windowRect = $ret1.p1;
		effectiveViewportRect = this.viewportHost().getEffectiveViewport();
		p.windowRect(windowRect);
		p.viewportRect(viewportRect);
		p.effectiveViewportRect(effectiveViewportRect);
		if ($.ig.Rect.prototype.l_op_Equality(p.windowRect(), $.ig.Rect.prototype.empty()) || $.ig.Rect.prototype.l_op_Equality(p.viewportRect(), $.ig.Rect.prototype.empty())) {
			return null;
		}
		if (this.categoryBasedHost() != null && $.ig.util.cast($.ig.FragmentBase.prototype.$type, this.categoryBasedHost()) !== null && this.bucketizingHost() != null) {
			p.isFragment(true);
		}
		return p;
	}
	,
	getOffset: function (scaler, windowRect, viewportRect, effectiveViewportRect) {
		var categoryMode = this.categoryBasedHost().currentCategoryMode();
		var offset = 0;
		if (categoryMode == $.ig.CategoryMode.prototype.mode0 && scaler.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
			categoryMode = $.ig.CategoryMode.prototype.mode1;
		}
		switch (categoryMode) {
			case $.ig.CategoryMode.prototype.mode0:
				offset = 0;
				break;
			case $.ig.CategoryMode.prototype.mode1:
				offset = 0.5 * scaler.getCategorySize(windowRect, viewportRect, effectiveViewportRect);
				break;
			case $.ig.CategoryMode.prototype.mode2:
				offset = scaler.getGroupCenter(this.categoryBasedHost().currentMode2Index(), windowRect, viewportRect, effectiveViewportRect);
				break;
		}
		if ($.ig.util.cast($.ig.CategoryYAxis.prototype.$type, scaler) !== null) {
			if (!scaler.isInverted()) {
				offset = -offset;
			}
		} else if (scaler.isInverted()) {
			offset = -offset;
		}
		return offset;
	}
	,
	getOffset1: function (p) {
		return this.getOffset(p.scaler(), p.windowRect(), p.viewportRect(), p.effectiveViewportRect());
	}
	,
	prepareFrame: function (inputFrame, view) {
		var p = this.getParams(inputFrame);
		if (p == null || this.bucketizingHost() == null) {
			return;
		}
		p.frame()._buckets.clear();
		p.frame()._errorBuckets.clear();
		p.frame()._markers.clear();
		p.frame()._trend.clear();
		p.frame()._errorBars.clear();
		p.frame()._errorBarPositiveSizes.clear();
		p.frame()._errorBarNegativeSizes.clear();
		var markers = this.markersHost().shouldDisplayMarkers();
		var errorBars = false;
		var offset = this.getOffset1(p);
		var h = this.getValues(p);
		if (p.sortingScaler() != null && p.sortingScaler().sortedIndices().count() != h.count()) {
			return;
		}
		if (p.sortingScaler() != null && $.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, p.sortingScaler()) !== null) {
			(p.sortingScaler()).initializeActualMinimumAndMaximum();
		}
		this.bucketizingHost().cacheValues();
		if (this.skipUnknowns() && p.sortingScaler() != null && p.sortingScaler().sortedIndices().count() > 0) {
			var firstIndex = p.sortingScaler().sortedIndices().__inner[p.firstBucket()];
			this.storeYValues(h, firstIndex, true, p.isFragment());
			while (($.ig.util.isNaN(h.tempY0()) || $.ig.util.isNaN(h.tempY1())) && p.firstBucket() > 0) {
				p.firstBucket(p.firstBucket() - 1);
				firstIndex = p.sortingScaler().sortedIndices().__inner[p.firstBucket()];
				this.storeYValues(h, firstIndex, true, p.isFragment());
			}
			var lastIndex = p.sortingScaler().sortedIndices().__inner[p.lastBucket()];
			this.storeYValues(h, lastIndex, true, p.isFragment());
			while (($.ig.util.isNaN(h.tempY0()) || $.ig.util.isNaN(h.tempY1())) && p.lastBucket() < h.count() - 1) {
				p.lastBucket(p.lastBucket() + 1);
				lastIndex = p.sortingScaler().sortedIndices().__inner[p.lastBucket()];
				this.storeYValues(h, lastIndex, true, p.isFragment());
			}
		}
		if (this.skipUnknowns() && p.sortingScaler() == null) {
			var firstIndex1 = p.firstBucket();
			var bucket = this.bucketizingHost().getBucket(firstIndex1);
			while (($.ig.util.isNaN(bucket[1]) || $.ig.util.isNaN(bucket[2])) && p.firstBucket() > 0) {
				p.firstBucket(p.firstBucket() - 1);
				firstIndex1 = p.firstBucket();
				bucket = this.bucketizingHost().getBucket(firstIndex1);
			}
			var lastIndex1 = p.lastBucket();
			bucket = this.bucketizingHost().getBucket(lastIndex1);
			while (($.ig.util.isNaN(bucket[1]) || $.ig.util.isNaN(bucket[2])) && p.lastBucket() < ($.ig.intDivide(h.count(), p.bucketSize()))) {
				p.lastBucket(p.lastBucket() + 1);
				lastIndex1 = p.lastBucket();
				bucket = this.bucketizingHost().getBucket(lastIndex1);
			}
		}
		this.prepareTrendline(p, h, offset);
		var markerCount = this.prepareData(p, h, offset, markers, errorBars);
		this.markersHost().updateMarkerCount(markerCount);
		this.prepareErrorBars($.ig.util.cast($.ig.CategoryFrame.prototype.$type, inputFrame), view);
		this.bucketizingHost().unCacheValues();
		return;
	}
	,
	convertToBucket: function (value) {
		return value;
	}
	,
	prepareErrorBars: function (frame, view) {
	}
	,
	prepareData: function (p, h, offset, markers, errorBars) {
		var $self = this;
		var markerCount = 0;
		var isCluster = false;
		var endBucket = null;
		var isAreaOrLineBasedSeries = false;
		var isSortingScaler = p.sortingScaler() != null;
		var windowRect = p.windowRect();
		var viewportRect = p.viewportRect();
		var isLogarithmicYScaler = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, p.yScaler()) !== null && (p.yScaler()).isReallyLogarithmic();
		var highMarkerFidelity = p.useHighMarkerFidelity();
		var collisionAvoider = this.categoryBasedHost().provideCollisionDetector();
		var singlePixelSpan = 0;
		var effectiveViewportRect = p.effectiveViewportRect();
		var sParams = new $.ig.ScalerParams(0, windowRect, viewportRect, p.scaler().isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, p.yScaler().isInverted(), effectiveViewportRect);
		if (isSortingScaler) {
			singlePixelSpan = this.convertToBucket(p.scaler().getUnscaledValue(2, sParams) - p.scaler().getUnscaledValue(1, sParams));
			isAreaOrLineBasedSeries = this.isAreaOrLine();
		}
		for (var i = p.firstBucket(); i <= p.lastBucket(); ++i) {
			var bucket;
			if (!isSortingScaler) {
				bucket = this.bucketizingHost().getBucket(i);
			} else {
				bucket = (function () { var $ret = $self.sortingBucketize(p, i, h, singlePixelSpan, isCluster, endBucket, offset); i = $ret.p1; isCluster = $ret.p4; endBucket = $ret.p5; return $ret.ret; }());
			}
			var isValidBucket = !isLogarithmicYScaler || (isLogarithmicYScaler && bucket[1] > 0);
			var bucketX = bucket[0];
			if (!isNaN(bucket[0])) {
				this.scaleBucketValues(p, bucket, offset, isSortingScaler, sParams, yParams);
				p.frame()._buckets.add(bucket);
				if (isCluster && isAreaOrLineBasedSeries) {
					if (endBucket != null) {
						this.scaleBucketValues(p, endBucket, offset, isSortingScaler, sParams, yParams);
						p.frame()._buckets.add(endBucket);
					}
				}
				if (markers && isValidBucket) {
					var itemIndex = i * p.bucketSize();
					var unsortedIndex = itemIndex;
					if (isSortingScaler && p.sortingScaler().sortedIndices() != null && itemIndex >= 0 && itemIndex < p.sortingScaler().sortedIndices().count()) {
						itemIndex = p.sortingScaler().sortedIndices().__inner[itemIndex];
					}
					var markerBucket = bucket;
					if (highMarkerFidelity && itemIndex < h.count()) {
						markerBucket = new Array(bucket.length);
						markerBucket[0] = bucketX;
						this.storeYValues(h, itemIndex, true, p.isFragment());
						markerBucket[1] = h.tempY0();
						markerBucket[2] = h.tempY1();
						this.scaleBucketValues(p, markerBucket, offset, isSortingScaler, sParams, yParams);
					}
					if (this.prepareMarker(p.frame(), markerBucket, collisionAvoider, Math.min(itemIndex, h.count() - 1), markerCount, p.frame()._buckets.count() - 1)) {
						++markerCount;
					}
				}
			}
		}
		return markerCount;
	}
	,
	isAreaOrLine: function () {
		var isAreaOrLineBasedSeries = $.ig.util.cast($.ig.LineSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.SplineSeriesBase.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.AreaSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.StepLineSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.StepAreaSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.RangeAreaSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.LineFragment.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.AreaFragment.prototype.$type, this.categoryBasedHost()) !== null;
		return isAreaOrLineBasedSeries;
	}
	,
	storeYValues: function (h, index, useTemp, isFragment) {
	}
	,
	minMaxYValues: function (h, index, isFragment) {
	}
	,
	getBucketSorting: function (xVAl, h) {
	}
	,
	sortingBucketize: function (p, currentIndex, h, singlePixelSpan, isCluster, endBucket, offset) {
		var bucket;
		endBucket = null;
		isCluster = false;
		var series = $.ig.util.cast($.ig.CategorySeries.prototype.$type, this.categoryBasedHost());
		var rangeSeries = $.ig.util.cast($.ig.RangeCategorySeries.prototype.$type, this.categoryBasedHost());
		var anchoredSeries = $.ig.util.cast($.ig.AnchoredCategorySeries.prototype.$type, this.categoryBasedHost());
		var viewportRect = p.viewportRect();
		var windowRect = p.windowRect();
		var effectiveViewportRect = p.effectiveViewportRect();
		var sParams = new $.ig.ScalerParams(0, windowRect, viewportRect, p.scaler().isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, p.yScaler().isInverted(), effectiveViewportRect);
		var isFragment = p.isFragment();
		if (p.sortingScaler() == null || p.sortingScaler().sortedIndices() == null || p.sortingScaler().sortedIndices().count() == 0) {
			return {
				ret: [ NaN, NaN, NaN ],
				p1: currentIndex,
				p4: isCluster,
				p5: endBucket
			};
		}
		if (series != null && series.fastItemsSource() != null && series.fastItemsSource().count() < p.sortingScaler().sortedIndices().count()) {
			return {
				ret: [ NaN, NaN, NaN ],
				p1: currentIndex,
				p4: isCluster,
				p5: endBucket
			};
		}
		var index = p.sortingScaler().sortedIndices().__inner[currentIndex];
		var bucketX = p.sortingScaler().getUnscaledValueAt(index);
		var currentX = bucketX;
		this.storeYValues(h, index, false, isFragment);
		while (currentIndex < p.lastBucket()) {
			index = p.sortingScaler().sortedIndices().__inner[currentIndex + 1];
			currentX = p.sortingScaler().getUnscaledValueAt(index);
			this.storeYValues(h, index, true, isFragment);
			if (currentX - bucketX >= singlePixelSpan || $.ig.util.isNaN(h.tempY0()) || $.ig.util.isNaN(h.tempY1())) {
				if (isCluster) {
					var previousIndex = p.sortingScaler().sortedIndices().__inner[currentIndex];
					this.storeYValues(h, previousIndex, true, isFragment);
					endBucket = [ p.scaler().getScaledValue(bucketX, sParams), h.tempY0(), h.tempY1() ];
				}
				break;
			}
			if (!isCluster && this.isAreaOrLine()) {
				var previousIndex1 = p.sortingScaler().sortedIndices().__inner[currentIndex];
				this.storeYValues(h, previousIndex1, true, isFragment);
				var startBucket = [ p.scaler().getScaledValue(bucketX, sParams), h.tempY0(), h.tempY1() ];
				if (!$.ig.util.isNaN(startBucket[0])) {
					if (!$.ig.util.isNaN(startBucket[1]) && !$.ig.util.isNaN(startBucket[2])) {
						this.scaleBucketValues(p, startBucket, offset, p.sortingScaler() != null, sParams, yParams);
						p.frame()._buckets.add(startBucket);
						isCluster = true;
					} else {
						break;
					}
				}
			}
			currentIndex++;
			this.minMaxYValues(h, index, isFragment);
		}
		var xVal = NaN;
		if (!$.ig.util.isNaN(bucketX)) {
			xVal = p.scaler().getScaledValue(bucketX, sParams);
		}
		bucket = this.getBucketSorting(xVal, h);
		return {
			ret: bucket,
			p1: currentIndex,
			p4: isCluster,
			p5: endBucket
		};
	}
	,
	scaleBucketValues: function (pp, bucket, offset, isSortingScaler, xParams, yParams) {
	}
	,
	prepareTrendline: function (pp, h, offset) {
	}
	,
	getValues: function (p) {
	}
	,
	$type: new $.ig.Type('CategoryFramePreparerBase', $.ig.FramePreparer.prototype.$type)
}, true);

$.ig.util.defType('CategoryFramePreparer', 'CategoryFramePreparerBase', {
	init: function (initNumber, host) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CategoryFramePreparer.prototype.init1.call(this, 1, host, $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, host), $.ig.util.cast($.ig.IProvidesViewport.prototype.$type, host), $.ig.util.cast($.ig.ISupportsErrorBars.prototype.$type, host), $.ig.util.cast($.ig.IBucketizer.prototype.$type, host));
	},
	init1: function (initNumber, host, markersHost, viewportHost, errorBarsHost, bucketizingHost) {
		$.ig.CategoryFramePreparerBase.prototype.init1.call(this, 1, host, markersHost, viewportHost, errorBarsHost, bucketizingHost);
		this.trendlineHost(new $.ig.DefaultCategoryTrendlineHost());
		if ($.ig.util.cast($.ig.IHasCategoryTrendline.prototype.$type, host) !== null) {
			this.trendlineHost($.ig.util.cast($.ig.IHasCategoryTrendline.prototype.$type, host));
		}
		this.valuesProvider(new $.ig.DefaultSingleValueProvider());
		if ($.ig.util.cast($.ig.IHasSingleValueCategory.prototype.$type, host) !== null) {
			this.valuesProvider($.ig.util.cast($.ig.IHasSingleValueCategory.prototype.$type, host));
		}
	},
	_trendlineHost: null,
	trendlineHost: function (value) {
		if (arguments.length === 1) {
			this._trendlineHost = value;
			return value;
		} else {
			return this._trendlineHost;
		}
	}
	,
	_valuesProvider: null,
	valuesProvider: function (value) {
		if (arguments.length === 1) {
			this._valuesProvider = value;
			return value;
		} else {
			return this._valuesProvider;
		}
	}
	,
	prepareMarker: function (frame, bucket, collisionAvoider, itemIndex, markerCount, markerBucket) {
		var x = bucket[0];
		var y = bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			this.markersHost().updateMarkerTemplate(markerCount, itemIndex, markerBucket);
			return true;
		}
		return false;
	}
	,
	getValues: function (p) {
		var h = new $.ig.SingleValuesHolder();
		var values = this.valuesProvider().valueColumn();
		h.values(values);
		return h;
	}
	,
	scaleBucketValues: function (p, bucket, offset, isSortingScaler, xParams, yParams) {
		if (isSortingScaler) {
			bucket[0] = (bucket[0] + offset);
		} else {
			bucket[0] = (p.scaler().getScaledValue(bucket[0], xParams) + offset);
		}
		bucket[1] = p.yScaler().getScaledValue(bucket[1], yParams);
		if (p.bucketSize() > 1 || isSortingScaler) {
			bucket[2] = p.yScaler().getScaledValue(bucket[2], yParams);
		} else {
			bucket[2] = bucket[1];
		}
	}
	,
	prepareTrendline: function (p, h, offset) {
		if (this.trendlineHost().trendLineType() == $.ig.TrendLineType.prototype.none || this.trendlineHost().trendlinePreparer() == null || this.trendlineHost().trendLinePeriod() < 1) {
			return;
		}
		var effectiveViewportRect = p.effectiveViewportRect();
		var xParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), p.scaler().isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), p.yScaler().isInverted(), effectiveViewportRect);
		var values = (h).values();
		if (p.sortingScaler() != null && p.sortingScaler().sortedIndices() != null) {
			values = new $.ig.SafeSortedReadOnlyDoubleCollection(0, values, p.sortingScaler().sortedIndices());
		}
		var trendResolutionParams = (function () {
			var $ret = new $.ig.TrendResolutionParams();
			$ret.bucketSize(p.bucketSize());
			$ret.firstBucket(p.firstBucket());
			$ret.lastBucket(p.lastBucket());
			$ret.offset(offset);
			$ret.resolution(p.resolution());
			$ret.viewport(p.viewportRect());
			return $ret;
		}());
		if (this.trendlineHost().trendLineType() != $.ig.TrendLineType.prototype.none) {
			if ($.ig.util.cast($.ig.IBarSeries.prototype.$type, this.trendlineHost()) !== null) {
				this.trendlineHost().trendlinePreparer().prepareLine(p.frame()._trend, this.trendlineHost().trendLineType(), values, this.trendlineHost().trendLinePeriod(), function (y) { return p.yScaler().getScaledValue(y, yParams); }, function (x) { return p.scaler().getScaledValue(x, xParams); }, trendResolutionParams);
			} else {
				this.trendlineHost().trendlinePreparer().prepareLine(p.frame()._trend, this.trendlineHost().trendLineType(), values, this.trendlineHost().trendLinePeriod(), function (x) { return p.scaler().getScaledValue(x, xParams); }, function (y) { return p.yScaler().getScaledValue(y, yParams); }, trendResolutionParams);
			}
		}
	}
	,
	storeYValues: function (h, index, useTemp, isFragment) {
		var s = h;
		var values = s.values();
		var bucketY0 = this.convertToBucket(values.item(index));
		var bucketY1 = bucketY0;
		if (isFragment) {
			var bucket = this.bucketizingHost().getBucket(index);
			bucketY0 = bucket[1];
			bucketY1 = bucket[1];
		}
		if (useTemp) {
			s.tempY0(bucketY0);
			s.tempY1(bucketY1);
		} else {
			s.bucketY0(bucketY0);
			s.bucketY1(bucketY1);
		}
	}
	,
	minMaxYValues: function (h, index, isFragment) {
		var s = h;
		var values = s.values();
		if (index < values.count()) {
			var y;
			if (isFragment) {
				var bucket = this.bucketizingHost().getBucket(index);
				y = bucket[1];
			} else {
				y = this.convertToBucket(values.item(index));
			}
			s.bucketY0(Math.min(s.bucketY0(), y));
			s.bucketY1(Math.max(s.bucketY1(), y));
		}
	}
	,
	getBucketSorting: function (xVal, h) {
		var s = h;
		return [ this.convertToBucket(xVal), s.bucketY0(), s.bucketY1() ];
	}
	,
	$type: new $.ig.Type('CategoryFramePreparer', $.ig.CategoryFramePreparerBase.prototype.$type)
}, true);

$.ig.util.defType('TrendLineManagerBase$1', 'Object', {
	$tTrendColumn: null,
	_trendColumn: null,
	trendColumn: function (value) {
		if (arguments.length === 1) {
			this._trendColumn = value;
			return value;
		} else {
			return this._trendColumn;
		}
	}
	,
	_trendCoefficients: null,
	trendCoefficients: function (value) {
		if (arguments.length === 1) {
			this._trendCoefficients = value;
			return value;
		} else {
			return this._trendCoefficients;
		}
	}
	,
	init: function ($tTrendColumn) {
		this.$tTrendColumn = $tTrendColumn;
		this.$type = this.$type.specialize(this.$tTrendColumn);
		this._trendPolyline = (function () {
			var $ret = new $.ig.Polyline();
			$ret.isHitTestVisible(false);
			return $ret;
		}());
		$.ig.Object.prototype.init.call(this);
		this.trendColumn(new $.ig.List$1(this.$tTrendColumn, 0));
	},
	trendPolyline: function () {
		return this._trendPolyline;
	}
	,
	_trendPolyline: null,
	rasterizeTrendLine: function (trendPoints) {
		this.rasterizeTrendLine1(trendPoints, null);
	}
	,
	isFit: function (type) {
		return type == $.ig.TrendLineType.prototype.linearFit || type == $.ig.TrendLineType.prototype.quadraticFit || type == $.ig.TrendLineType.prototype.cubicFit || type == $.ig.TrendLineType.prototype.quarticFit || type == $.ig.TrendLineType.prototype.quinticFit || type == $.ig.TrendLineType.prototype.logarithmicFit || type == $.ig.TrendLineType.prototype.exponentialFit || type == $.ig.TrendLineType.prototype.powerLawFit;
	}
	,
	isAverage: function (type) {
		return type == $.ig.TrendLineType.prototype.simpleAverage || type == $.ig.TrendLineType.prototype.exponentialAverage || type == $.ig.TrendLineType.prototype.modifiedAverage || type == $.ig.TrendLineType.prototype.cumulativeAverage || type == $.ig.TrendLineType.prototype.weightedAverage;
	}
	,
	rasterizeTrendLine1: function (trendPoints, clipper) {
		this.trendPolyline().points().clear();
		if (clipper != null) {
			clipper.target(this.trendPolyline().points());
		}
		if (trendPoints != null) {
			var en = trendPoints.getEnumerator();
			while (en.moveNext()) {
				var point = en.current();
				if (!$.ig.util.isNaN(point.__x) && !$.ig.util.isNaN(point.__y)) {
					if (clipper != null) {
						clipper.add(point);
					} else {
						this.trendPolyline().points().add(point);
					}
				}
			}
		}
		this.trendPolyline().isHitTestVisible(this.trendPolyline().points().count() > 0);
	}
	,
	flattenTrendLine: function (trend, trendResolutionParams, flattenedPoints) {
		this.flattenTrendLine1(trend, trendResolutionParams, flattenedPoints, null);
	}
	,
	flattenTrendLine1: function (trend, trendResolutionParams, flattenedPoints, clipper) {
		if (clipper != null) {
			clipper.target(flattenedPoints);
		}
		var en = $.ig.Flattener.prototype.flatten3(trend.count(), function (i) { return trend.item(i).__x; }, function (i) { return trend.item(i).__y; }, trendResolutionParams.resolution()).getEnumerator();
		while (en.moveNext()) {
			var i = en.current();
			if (clipper != null) {
				clipper.add(trend.item(i));
			} else {
				flattenedPoints.add(trend.item(i));
			}
		}
	}
	,
	attachPolyLine: function (rootCanvas, owner) {
		if (rootCanvas == null || owner == null) {
			return;
		}
		if (this.trendPolyline().parent() != null) {
			this.detach();
		}
		rootCanvas.children().add(this.trendPolyline());
	}
	,
	detach: function () {
		if (this.trendPolyline() == null) {
			return;
		}
		var parent = $.ig.util.cast($.ig.Panel.prototype.$type, this.trendPolyline().parent());
		if (parent != null) {
			parent.children().remove(this.trendPolyline());
		}
	}
	,
	clearPoints: function () {
		this.trendPolyline().points().clear();
	}
	,
	reset: function () {
		this.trendCoefficients(null);
		this.trendColumn().clear();
	}
	,
	dataUpdated: function (action, position, count, propertyName) {
		switch (action) {
			case $.ig.FastItemsSourceEventAction.prototype.change:
			case $.ig.FastItemsSourceEventAction.prototype.replace:
			case $.ig.FastItemsSourceEventAction.prototype.insert:
			case $.ig.FastItemsSourceEventAction.prototype.remove:
			case $.ig.FastItemsSourceEventAction.prototype.reset:
				this.reset();
				break;
		}
	}
	,
	propertyUpdated: function (sender, propertyName, oldValue, newValue) {
		var requiresRender = false;
		switch (propertyName) {
			case $.ig.TrendLineManagerBase$1.prototype.trendLineTypePropertyName:
			case $.ig.TrendLineManagerBase$1.prototype.trendLinePeriodPropertyName:
				this.reset();
				requiresRender = true;
				break;
			case $.ig.TrendLineManagerBase$1.prototype.trendLineThicknessPropertyName:
				requiresRender = true;
				break;
			case $.ig.Series.prototype.fastItemsSourcePropertyName:
				requiresRender = true;
				this.reset();
				break;
		}
		return requiresRender;
	}
	,
	$type: new $.ig.Type('TrendLineManagerBase$1', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('IPreparesCategoryTrendline', 'Object', {
	$type: new $.ig.Type('IPreparesCategoryTrendline', null)
}, true);

$.ig.util.defType('CategoryTrendLineManagerBase', 'TrendLineManagerBase$1', {
	init: function () {
		$.ig.TrendLineManagerBase$1.prototype.init.call(this, Number);
	},
	prepareLine: function (flattenedPoints, trendLineType, valueColumn, period, GetScaledXValue, GetScaledYValue, trendResolutionParams) {
	}
	,
	selectManager: function (trendLineManager, xAxis, rootCanvas, series) {
		if (xAxis != null && $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xAxis) !== null) {
			if (trendLineManager != null) {
				trendLineManager.detach();
			}
			var newManager = new $.ig.SortingTrendLineManager(function (x) {
				var sortedIndex = x;
				var axis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xAxis);
				if (axis != null) {
					x = Math.min(x, axis.sortedIndices().count() - 1);
					sortedIndex = axis.sortedIndices().__inner[x];
				}
				return axis.getUnscaledValueAt(sortedIndex);
			}, function (x, viewport, window) {
				var effectiveViewportRect = series.getEffectiveViewport1(series.view());
				var xParams = new $.ig.ScalerParams(0, window, viewport, xAxis.isInverted(), effectiveViewportRect);
				return xAxis.getUnscaledValue(x, xParams);
			});
			newManager.attachPolyLine(rootCanvas, series);
			return newManager;
		} else if (!($.ig.util.cast($.ig.CategoryTrendLineManager.prototype.$type, trendLineManager) !== null)) {
			if (trendLineManager != null) {
				trendLineManager.detach();
			}
			var newManager1 = new $.ig.CategoryTrendLineManager();
			newManager1.attachPolyLine(rootCanvas, series);
			return newManager1;
		}
		return trendLineManager;
	}
	,
	$type: new $.ig.Type('CategoryTrendLineManagerBase', $.ig.TrendLineManagerBase$1.prototype.$type.specialize(Number), [$.ig.IPreparesCategoryTrendline.prototype.$type])
}, true);

$.ig.util.defType('CategoryTrendLineManager', 'CategoryTrendLineManagerBase', {
	init: function () {
		$.ig.CategoryTrendLineManagerBase.prototype.init.call(this);
	},
	prepareLine: function (flattenedPoints, trendLineType, valueColumn, period, GetScaledXValue, GetScaledYValue, trendResolutionParams) {
		var xmin = trendResolutionParams.firstBucket() * trendResolutionParams.bucketSize();
		var xmax = trendResolutionParams.lastBucket() * trendResolutionParams.bucketSize();
		var trend = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		if (trendLineType == $.ig.TrendLineType.prototype.none) {
			this.trendCoefficients(null);
			this.trendColumn().clear();
			return;
		}
		if (this.isFit(trendLineType)) {
			this.trendColumn().clear();
			this.trendCoefficients($.ig.TrendFitCalculator.prototype.calculateFit(trend, trendLineType, trendResolutionParams, this.trendCoefficients(), valueColumn.count(), function (i) { return (i + 1); }, function (i) { return valueColumn.item(i); }, function (x) { return GetScaledXValue(x - 1); }, GetScaledYValue, xmin + 1, xmax + 1));
		}
		if (this.isAverage(trendLineType)) {
			this.trendCoefficients(null);
			$.ig.TrendAverageCalculator.prototype.calculateSingleValueAverage(trendLineType, this.trendColumn(), valueColumn, period);
			for (var i = trendResolutionParams.firstBucket(); i <= trendResolutionParams.lastBucket(); i += 1) {
				var itemIndex = i * trendResolutionParams.bucketSize();
				if (itemIndex >= 0 && itemIndex < this.trendColumn().count()) {
					var xi = GetScaledXValue(itemIndex);
					var yi = GetScaledYValue(this.trendColumn().__inner[itemIndex]);
					trend.add({ __x: xi + trendResolutionParams.offset(), __y: yi, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				}
			}
		}
		this.flattenTrendLine(trend, trendResolutionParams, flattenedPoints);
	}
	,
	$type: new $.ig.Type('CategoryTrendLineManager', $.ig.CategoryTrendLineManagerBase.prototype.$type)
}, true);

$.ig.util.defType('MarkerSeries', 'Series', {
	_markerView: null,
	markerView: function (value) {
		if (arguments.length === 1) {
			this._markerView = value;
			return value;
		} else {
			return this._markerView;
		}
	}
	,
	init: function () {
		$.ig.Series.prototype.init.call(this);
	},
	onViewCreated: function (view) {
		$.ig.Series.prototype.onViewCreated.call(this, view);
		this.markerView(view);
	}
	,
	hasMarkers: function () {
		return true;
	}
	,
	getActualMarkerBrush: function () {
		return this.actualMarkerBrush();
	}
	,
	getActualMarkerOutlineBrush: function () {
		return this.actualMarkerOutline();
	}
	,
	getActualMarkerTemplate: function () {
		return this._cachedActualMarkerTemplate;
	}
	,
	markerType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.markerTypeProperty, $.ig.MarkerType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.MarkerSeries.prototype.markerTypeProperty));
		}
	}
	,
	markerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.markerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.markerTemplateProperty);
		}
	}
	,
	actualMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.actualMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.actualMarkerTemplateProperty);
		}
	}
	,
	_cachedActualMarkerTemplate: null,
	nullMarkerTemplate: function () {
		if ($.ig.MarkerSeries.prototype.__nullMarkerTemplate == null) {
			$.ig.MarkerSeries.prototype.__nullMarkerTemplate = new $.ig.DataTemplate();
		}
		return $.ig.MarkerSeries.prototype.__nullMarkerTemplate;
	}
	,
	markerBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.markerBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.markerBrushProperty);
		}
	}
	,
	actualMarkerBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.actualMarkerBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.actualMarkerBrushProperty);
		}
	}
	,
	markerOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.markerOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.markerOutlineProperty);
		}
	}
	,
	actualMarkerOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.actualMarkerOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.actualMarkerOutlineProperty);
		}
	}
	,
	markerStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.markerStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.markerStyleProperty);
		}
	}
	,
	useLightweightMarkers: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.MarkerSeries.prototype.useLightweightMarkersProperty, value);
			return value;
		} else {
			return this.getValue($.ig.MarkerSeries.prototype.useLightweightMarkersProperty);
		}
	}
	,
	shouldDisplayMarkers: function () {
		return this._cachedActualMarkerTemplate != null && ((this.markerType() != $.ig.MarkerType.prototype.none && this.markerType() != $.ig.MarkerType.prototype.unset) || this.markerTemplate() != null);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.Series.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.MarkerSeries.prototype.markerBrushPropertyName:
			case $.ig.MarkerSeries.prototype.markerTypePropertyName:
			case $.ig.MarkerSeries.prototype.markerOutlinePropertyName:
			case $.ig.MarkerSeries.prototype.markerTemplatePropertyName:
				this.updateIndexedProperties();
				this.onVisualPropertiesChanged();
				break;
			case $.ig.MarkerSeries.prototype.actualMarkerTemplatePropertyName:
				this._cachedActualMarkerTemplate = newValue;
				if (oldValue == $.ig.MarkerSeries.prototype.nullMarkerTemplate() || newValue == $.ig.MarkerSeries.prototype.nullMarkerTemplate() || (oldValue == null || newValue != null)) {
					this.markerView().doUpdateMarkerTemplates();
					var thumbnailView = $.ig.util.cast($.ig.MarkerSeriesView.prototype.$type, this.thumbnailView());
					if (thumbnailView != null) {
						thumbnailView.doUpdateMarkerTemplates();
					}
					this.renderSeries(false);
				}
				this.view().updateLegendItemVisual();
				if (this.toolTip() != null) {
					this.view().updateToolTipValue(this.toolTip());
				}
				this.notifyThumbnailAppearanceChanged();
				break;
			case $.ig.MarkerSeries.prototype.useLightweightMarkersPropertyName:
				this.markerView().setUseLightweightMode(this.useLightweightMarkers());
				this.renderSeries(false);
				break;
		}
	}
	,
	getMarkerTemplatePropertyName: function (markerType) {
		switch (markerType) {
			case $.ig.MarkerType.prototype.circle: return $.ig.XamDataChart.prototype.circleMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.triangle: return $.ig.XamDataChart.prototype.triangleMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.pyramid: return $.ig.XamDataChart.prototype.pyramidMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.square: return $.ig.XamDataChart.prototype.squareMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.diamond: return $.ig.XamDataChart.prototype.diamondMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.pentagon: return $.ig.XamDataChart.prototype.pentagonMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.hexagon: return $.ig.XamDataChart.prototype.hexagonMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.tetragram: return $.ig.XamDataChart.prototype.tetragramMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.pentagram: return $.ig.XamDataChart.prototype.pentagramMarkerTemplatePropertyName;
			case $.ig.MarkerType.prototype.hexagram: return $.ig.XamDataChart.prototype.hexagramMarkerTemplatePropertyName;
			default:
			case $.ig.MarkerType.prototype.unset:
			case $.ig.MarkerType.prototype.none:
				return null;
		}
	}
	,
	resolveMarkerType: function (series, seriesMarkerType) {
		var markerType = series.seriesViewer() != null ? seriesMarkerType : $.ig.MarkerType.prototype.none;
		if (markerType == $.ig.MarkerType.prototype.automatic) {
			var markerTypes = [ $.ig.MarkerType.prototype.circle, $.ig.MarkerType.prototype.triangle, $.ig.MarkerType.prototype.pentagon, $.ig.MarkerType.prototype.tetragram, $.ig.MarkerType.prototype.diamond, $.ig.MarkerType.prototype.square, $.ig.MarkerType.prototype.hexagon, $.ig.MarkerType.prototype.pentagram, $.ig.MarkerType.prototype.pyramid, $.ig.MarkerType.prototype.hexagram ];
			markerType = series.index() >= 0 ? markerTypes[series.index() % markerTypes.length] : $.ig.MarkerType.prototype.none;
		}
		return markerType;
	}
	,
	updateIndexedProperties: function () {
		$.ig.Series.prototype.updateIndexedProperties.call(this);
		if (this.index() < 0) {
			return;
		}
		if (this.markerView().hasCustomMarkerTemplate()) {
			this.markerView().clearActualMarkerTemplate();
			this.markerView().bindActualToCustomMarkerTemplate();
		} else {
			var markerType = $.ig.MarkerSeries.prototype.resolveMarkerType(this, this.markerType());
			var markerTemplatePropertyName = $.ig.MarkerSeries.prototype.getMarkerTemplatePropertyName(markerType);
			if (markerTemplatePropertyName == null) {
				this.actualMarkerTemplate($.ig.MarkerSeries.prototype.nullMarkerTemplate());
			} else {
				this.markerView().bindActualToMarkerTemplate(markerTemplatePropertyName);
			}
		}
		if (this.markerBrush() != null) {
			this.markerView().clearActualMarkerBrush();
			this.markerView().bindActualToMarkerBrush();
		} else {
			this.actualMarkerBrush(this.seriesViewer() == null ? null : this.seriesViewer().getMarkerBrushByIndex(this.index()));
		}
		if (this.markerOutline() != null) {
			this.markerView().clearActualMarkerOutline();
			this.markerView().bindActualToMarkerOutline();
		} else {
			this.actualMarkerOutline(this.seriesViewer() == null ? null : this.seriesViewer().getMarkerOutlineByIndex(this.index()));
		}
	}
	,
	exportVisualDataOverride: function (svd) {
		var $self = this;
		$.ig.Series.prototype.exportVisualDataOverride.call(this, svd);
		this.markerView().doToAllMarkers(function (m) {
			var mvd = new $.ig.MarkerVisualData();
			var appearance = new $.ig.PrimitiveAppearanceData();
			mvd.x(m.canvasLeft());
			mvd.y(m.canvasTop());
			mvd.bounds(new $.ig.Rect(0, m.canvasLeft() - (m.actualWidth() / 2), m.canvasTop() - (m.actualHeight() / 2), m.actualWidth(), m.actualHeight()));
			appearance.fill($.ig.Color.prototype.fromArgb(0, 0, 0, 0));
			appearance.stroke($.ig.Color.prototype.fromArgb(0, 0, 0, 0));
			mvd.index(-1);
			mvd.contentTemplate(m.contentTemplate());
			if (m.content() != null && $.ig.util.cast($.ig.DataContext.prototype.$type, m.content()) !== null && m.__visibility == $.ig.Visibility.prototype.visible) {
				var dataContext = m.content();
				appearance.fill($.ig.AppearanceHelper.prototype.fromBrush(dataContext.actualItemBrush()));
				appearance.fillExtended($.ig.AppearanceHelper.prototype.fromBrushExtended(dataContext.actualItemBrush()));
				appearance.stroke($.ig.AppearanceHelper.prototype.fromBrush(dataContext.outline()));
				appearance.strokeExtended($.ig.AppearanceHelper.prototype.fromBrushExtended(dataContext.outline()));
				appearance.strokeThickness($self.thickness());
				if (dataContext.item() != null) {
					mvd.index($self.fastItemsSource().indexOf(dataContext.item()));
				}
			}
			mvd.visibility(m.__visibility);
			appearance.visibility(m.__visibility);
			mvd.markerAppearance(appearance);
			if ($self._cachedActualMarkerTemplate == $self.seriesViewer().circleMarkerTemplate()) {
				mvd.markerType("Circle");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().diamondMarkerTemplate()) {
				mvd.markerType("Diamond");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().hexagonMarkerTemplate()) {
				mvd.markerType("Hexagon");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().hexagramMarkerTemplate()) {
				mvd.markerType("Hexagram");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().pentagonMarkerTemplate()) {
				mvd.markerType("Pentagon");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().pentagramMarkerTemplate()) {
				mvd.markerType("Pentagram");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().pyramidMarkerTemplate()) {
				mvd.markerType("Pyramid");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().squareMarkerTemplate()) {
				mvd.markerType("Square");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().tetragramMarkerTemplate()) {
				mvd.markerType("Tetragram");
			} else if ($self._cachedActualMarkerTemplate == $self.seriesViewer().triangleMarkerTemplate()) {
				mvd.markerType("Triangle");
			} else {
				mvd.markerType("None");
			}
			svd.markerShapes().add(mvd);
		});
	}
	,
	testMarkersOver: function (position, isFinger) {
		if (this.hasMarkers() && this.shouldDisplayMarkers()) {
			var box = this.getSeriesValueMarkerBoundingBoxFromSeriesPixel(position);
			if (box.isEmpty()) {
				return false;
			}
			var inflated = $.ig.RectUtil.prototype.inflate(box, this.getHitTestAllowance(isFinger));
			if (inflated.containsPoint(position)) {
				return true;
			}
		}
		return false;
	}
	,
	getHitDataContext: function (position) {
		var marker = this.markerView().getHitMarker(position);
		var ret = null;
		if (marker != null) {
			ret = marker.content();
		}
		return ret;
	}
	,
	$type: new $.ig.Type('MarkerSeries', $.ig.Series.prototype.$type)
}, true);

$.ig.util.defType('ISupportsErrorBars', 'Object', {
	$type: new $.ig.Type('ISupportsErrorBars', null)
}, true);

$.ig.util.defType('IHasCategoryAxis', 'Object', {
	$type: new $.ig.Type('IHasCategoryAxis', null)
}, true);

$.ig.util.defType('IHasCategoryModePreference', 'Object', {
	$type: new $.ig.Type('IHasCategoryModePreference', null, [$.ig.IHasCategoryAxis.prototype.$type])
}, true);

$.ig.util.defType('CategorySeries', 'MarkerSeries', {
	_framePreparer: null,
	framePreparer: function (value) {
		if (arguments.length === 1) {
			this._framePreparer = value;
			return value;
		} else {
			return this._framePreparer;
		}
	}
	,
	createView: function () {
		var view = new $.ig.CategorySeriesView(this);
		return view;
	}
	,
	_categoryView: null,
	categoryView: function (value) {
		if (arguments.length === 1) {
			this._categoryView = value;
			return value;
		} else {
			return this._categoryView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.MarkerSeries.prototype.onViewCreated.call(this, view);
		this.categoryView(view);
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	categoryAxis: function () {
		return this.getCategoryAxis();
	}
	,
	getCategoryAxis: function () {
		return this.getXAxis();
	}
	,
	getValueAxis: function () {
		return this.getYAxis();
	}
	,
	isCategory: function () {
		return true;
	}
	,
	init: function () {
		this._previousFrame = new $.ig.CategoryFrame(3);
		this._transitionFrame = new $.ig.CategoryFrame(3);
		this._currentFrame = new $.ig.CategoryFrame(3);
		this._thumbnailFrame = new $.ig.CategoryFrame(3);
		$.ig.MarkerSeries.prototype.init.call(this);
		this._renderManager = new $.ig.CategorySeriesRenderManager();
		this.sourceFramePreparer(new $.ig.CategoryTransitionSourceFramePreparer());
		this.__fullClip = new $.ig.Rect(0, 0, 0, 1, 1);
		this.actualIsCustomCategoryStyleAllowed(false);
		this.actualIsCustomCategoryMarkerStyleAllowed(false);
		this.defaultStyleKey($.ig.CategorySeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.MarkerSeries.prototype.onApplyTemplate.call(this);
		this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
	}
	,
	isCustomCategoryStyleAllowed: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedProperty);
		}
	}
	,
	isCustomCategoryMarkerStyleAllowed: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedProperty);
		}
	}
	,
	_actualIsCustomCategoryStyleAllowed: false,
	actualIsCustomCategoryStyleAllowed: function (value) {
		if (arguments.length === 1) {
			this._actualIsCustomCategoryStyleAllowed = value;
			return value;
		} else {
			return this._actualIsCustomCategoryStyleAllowed;
		}
	}
	,
	_actualIsCustomCategoryMarkerStyleAllowed: false,
	actualIsCustomCategoryMarkerStyleAllowed: function (value) {
		if (arguments.length === 1) {
			this._actualIsCustomCategoryMarkerStyleAllowed = value;
			return value;
		} else {
			return this._actualIsCustomCategoryMarkerStyleAllowed;
		}
	}
	,
	assigningCategoryStyle: null,
	assigningCategoryMarkerStyle: null,
	shouldOverrideCategoryStyle: function () {
		return (this.assigningCategoryStyle != null && this.actualIsCustomCategoryStyleAllowed()) || this.isHighlightingEnabled();
	}
	,
	shouldOverrideMarkerStyle: function () {
		return (this.assigningCategoryMarkerStyle != null && this.actualIsCustomCategoryMarkerStyleAllowed()) || this.isHighlightingEnabled();
	}
	,
	raiseAssigningCategoryStyles: function (args) {
		if (this.assigningCategoryStyle != null && this.actualIsCustomCategoryStyleAllowed()) {
			this.assigningCategoryStyle(this, args);
		}
	}
	,
	raiseAssigningCategoryMarkerStyles: function (args) {
		if (this.assigningCategoryMarkerStyle != null && this.actualIsCustomCategoryMarkerStyleAllowed()) {
			this.assigningCategoryMarkerStyle(this, args);
		}
	}
	,
	getCategoryItems: function (startIndex, endIndex) {
		return null;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.MarkerSeries.prototype.clearRendering.call(this, wipeClean, view);
		if (wipeClean) {
			this.clearMarkers(view);
		}
	}
	,
	getSeriesComponentsForView: function () {
		var ret = $.ig.MarkerSeries.prototype.getSeriesComponentsForView.call(this);
		return ret;
	}
	,
	invalidateAxes: function () {
		$.ig.MarkerSeries.prototype.invalidateAxes.call(this);
		var xAxis = this.getXAxis();
		if (xAxis != null) {
			xAxis.renderAxis1(false);
		}
		var yAxis = this.getYAxis();
		if (yAxis != null) {
			yAxis.renderAxis1(false);
		}
	}
	,
	useHighMarkerFidelity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategorySeries.prototype.useHighMarkerFidelityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategorySeries.prototype.useHighMarkerFidelityProperty);
		}
	}
	,
	windowRectChangedOverride: function (oldWindowRect, newWindowRect) {
		$.ig.MarkerSeries.prototype.windowRectChangedOverride.call(this, oldWindowRect, newWindowRect);
		this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
		this.renderSeries(false);
	}
	,
	transitionInMode: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategorySeries.prototype.transitionInModeProperty, $.ig.CategoryTransitionInMode.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.CategorySeries.prototype.transitionInModeProperty));
		}
	}
	,
	isTransitionInEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.CategorySeries.prototype.isTransitionInEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.CategorySeries.prototype.isTransitionInEnabledProperty);
		}
	}
	,
	viewportRectChangedOverride: function (oldViewportRect, newViewportRect) {
		if (this.transitionInIsInProgress() && this.transitionProgress() < 0.05 && (this.seriesViewer() == null || !this.seriesViewer().justZoomed())) {
			this.transitionInViable(true);
		}
		$.ig.MarkerSeries.prototype.viewportRectChangedOverride.call(this, oldViewportRect, newViewportRect);
		this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
		this.renderSeries(false);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.MarkerSeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.Series.prototype.seriesViewerPropertyName:
				var yAxis = this.getYAxis();
				var xAxis = this.getXAxis();
				if (oldValue != null && newValue == null) {
					this.deregisterForAxis(xAxis);
					this.deregisterForAxis(yAxis);
				}
				if (oldValue == null && newValue != null) {
					this.registerForAxis(xAxis);
					this.registerForAxis(yAxis);
				}
				this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.syncLinkPropertyName:
				if (this.syncLink() != null && this.seriesViewer() != null) {
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
				}
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.transitionProgressPropertyName:
				this._transitionFrame.interpolate3(this.transitionProgress(), this._previousFrame, this._currentFrame);
				if (this.clearAndAbortIfInvalid1(this.view())) {
					return;
				}
				if (this.transitionProgress() == 1) {
					this._currentFrame.clearSpeedModifiers();
					this.renderFrame(this._currentFrame, this.categoryView());
					if (this.transitionInIsInProgress()) {
						this.transitionInIsInProgress(false);
						this.clearSpeedModifiers();
						this.animator().intervalMilliseconds($.ig.truncate(this.getTotalMilliseconds()));
						this.animator().easingFunction(this.transitionEasingFunction());
					}
				} else {
					this.renderFrame(this._transitionFrame, this.categoryView());
				}
				break;
			case $.ig.CategorySeries.prototype.errorBarSettingsPropertyName:
				this.notifyThumbnailAppearanceChanged();
				break;
			case $.ig.CategorySeries.prototype.useHighMarkerFidelityPropertyName:
				this.renderSeries(false);
				break;
			case $.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedPropertyName:
				this.actualIsCustomCategoryStyleAllowed(this.getIsCustomCategoryStyleAllowed());
				this.renderSeries(false);
				break;
			case $.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedPropertyName:
				this.actualIsCustomCategoryMarkerStyleAllowed(this.getIsCustomCategoryMarkerStyleAllowed());
				this.renderSeries(false);
				break;
		}
	}
	,
	getIsCustomCategoryStyleAllowed: function () {
		return this.isCustomCategoryStyleAllowed();
	}
	,
	getIsCustomCategoryMarkerStyleAllowed: function () {
		return this.isCustomCategoryMarkerStyleAllowed();
	}
	,
	getExactUnsortedItemIndex: function (world) {
		return this.getExactUnsortedItemIndexHelper(world, this.getXAxis());
	}
	,
	getItemIndexSorted: function (world) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			return -1;
		}
		if ($.ig.util.isNaN(world.__x)) {
			return -1;
		}
		var xAxis = this.getXAxis();
		if (xAxis == null) {
			return -1;
		}
		var sorting = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xAxis);
		var contentViewport = this.getContentViewport(this.view());
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, xAxis.isInverted(), effectiveViewportRect);
		var left = xAxis.getUnscaledValue(contentViewport.left(), p);
		var right = xAxis.getUnscaledValue(contentViewport.right(), p);
		var windowX = (world.__x - windowRect.left()) / windowRect.width();
		var axisValue = left + ((right - left) * windowX);
		var itemIndex = sorting.getIndexClosestToUnscaledValue(axisValue);
		return itemIndex;
	}
	,
	getOffsetValue: function () {
	}
	,
	getCategoryWidth: function () {
	}
	,
	getItem: function (world) {
		var index = 0;
		var xAxis = this.getXAxis();
		if ($.ig.util.cast($.ig.ISortingAxis.prototype.$type, xAxis) !== null) {
			index = this.getItemIndexSorted(world);
			if (index == -1) {
				return null;
			}
		} else if (world.__x == 1 && this.fastItemsSource() != null) {
			index = this.fastItemsSource().count() - 1;
		} else {
			index = this.getItemIndex(world);
		}
		return index >= 0 && this.fastItemsSource() != null && index < this.fastItemsSource().count() ? this.fastItemsSource().item(index) : null;
	}
	,
	getItemIndex: function (world) {
		var rowIndex = $.ig.truncate(Math.round(this.getExactItemIndex(world)));
		return rowIndex;
	}
	,
	getExactItemIndex: function (world) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var xAxis = this.getCategoryAxis();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var contentViewport = this.getContentViewport(this.view());
		var rowIndex = -1;
		if (xAxis != null && !windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var p = new $.ig.ScalerParams(0, windowRect, viewportRect, xAxis.isInverted(), effectiveViewportRect);
			var left = xAxis.getUnscaledValue(contentViewport.left(), p);
			var right = xAxis.getUnscaledValue(contentViewport.right(), p);
			var windowX = (world.__x - windowRect.left()) / windowRect.width();
			var bucket = left + (windowX * (right - left));
			if (xAxis.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
				bucket -= 0.5;
			}
			rowIndex = bucket;
		}
		return rowIndex;
	}
	,
	_prevHighlightingInfo: null,
	prevHighlightingInfo: function (value) {
		if (arguments.length === 1) {
			this._prevHighlightingInfo = value;
			return value;
		} else {
			return this._prevHighlightingInfo;
		}
	}
	,
	_prevMarkerHighlightingInfo: null,
	prevMarkerHighlightingInfo: function (value) {
		if (arguments.length === 1) {
			this._prevMarkerHighlightingInfo = value;
			return value;
		} else {
			return this._prevMarkerHighlightingInfo;
		}
	}
	,
	hasIndividualElements: function () {
		return false;
	}
	,
	getSortingCategoryBucketIndex: function (world) {
		var current = this._currentFrame;
		if (this.animationActive()) {
			current = this._transitionFrame;
		}
		var viewportRect = this.view().viewport();
		var windowRect = this.view().windowRect();
		var indexAxis = this.getCategoryAxis();
		var screenPos = 0;
		if (indexAxis.isVertical()) {
			var windowY = (world.__y - windowRect.top()) / windowRect.height();
			screenPos = windowY * viewportRect.height() + viewportRect.top();
		} else {
			var windowX = (world.__x - windowRect.left()) / windowRect.width();
			screenPos = windowX * viewportRect.width() + viewportRect.left();
		}
		if (indexAxis.isInverted()) {
			var count = current._buckets.count();
			var i = 0;
			for (i = count - 1; i >= 0; i--) {
				var bucket = current._buckets.__inner[i];
				var nextBucket = null;
				if (i > 0) {
					nextBucket = current._buckets.__inner[i - 1];
				}
				if (bucket[0] <= screenPos && nextBucket == null || nextBucket[0] >= screenPos) {
					if (nextBucket != null) {
						if (Math.abs(bucket[0] - screenPos) < Math.abs(nextBucket[0] - screenPos)) {
							return i;
						} else {
							return i - 1;
						}
					} else {
						return i;
					}
				}
			}
			return i;
		} else {
			var count1 = current._buckets.count();
			var i1 = 0;
			for (i1 = 0; i1 < count1; i1++) {
				var bucket1 = current._buckets.__inner[i1];
				var nextBucket1 = null;
				if (i1 < count1 - 1) {
					nextBucket1 = current._buckets.__inner[i1 + 1];
				}
				if (bucket1[0] <= screenPos && nextBucket1 == null || nextBucket1[0] >= screenPos) {
					if (nextBucket1 != null) {
						if (Math.abs(bucket1[0] - screenPos) < Math.abs(nextBucket1[0] - screenPos)) {
							return i1;
						} else {
							return i1 + 1;
						}
					} else {
						return i1;
					}
				}
			}
			return i1;
		}
	}
	,
	getMarkerHighlightingInfo: function (item, world) {
		var info = this.getSpecificMarkerHighlightingInfo(item, world, this.prevMarkerHighlightingInfo());
		this.prevMarkerHighlightingInfo(info);
		return info;
	}
	,
	isHighlightingSupported: function () {
		return true;
	}
	,
	getHighlightingInfo: function (item, world) {
		if (this.hasIndividualElements()) {
			var info = this.getSpecificHighlightingInfo(item, world, this.prevHighlightingInfo());
			this.prevHighlightingInfo(info);
			return info;
		} else {
			var info1 = this.getFullSeriesInfo(item, world, this.prevHighlightingInfo());
			this.prevHighlightingInfo(info1);
			return info1;
		}
	}
	,
	getActiveMarkers: function () {
		return this.categoryView().markers().active();
	}
	,
	getSpecificMarkerHighlightingInfo: function (item, world, prevValue) {
		if (!this.shouldDisplayMarkers()) {
			return null;
		}
		var current = this._currentFrame;
		if (this.animationActive()) {
			current = this._transitionFrame;
		}
		var seriesPos = this.fromWorldPosition(world);
		var activeMarkers = this.getActiveMarkers();
		if (activeMarkers == null) {
			return null;
		}
		var markerCount = activeMarkers.count();
		if (markerCount == 0) {
			return null;
		}
		var bucket = activeMarkers.__inner[0].markerBucket();
		if (this.isVertical()) {
			var currY = current._buckets.__inner[activeMarkers.__inner[0].markerBucket()][0];
			var minDistance = (seriesPos.__y - currY) * (seriesPos.__y - currY);
			var dist;
			for (var i = 0; i < markerCount; i++) {
				currY = current._buckets.__inner[activeMarkers.__inner[i].markerBucket()][0];
				dist = (seriesPos.__y - currY) * (seriesPos.__y - currY);
				if (dist <= minDistance) {
					minDistance = dist;
					bucket = activeMarkers.__inner[i].markerBucket();
				}
			}
		} else {
			var currX = current._buckets.__inner[activeMarkers.__inner[0].markerBucket()][0];
			var minDistance1 = (seriesPos.__x - currX) * (seriesPos.__x - currX);
			var dist1;
			for (var i1 = 0; i1 < markerCount; i1++) {
				currX = current._buckets.__inner[activeMarkers.__inner[i1].markerBucket()][0];
				dist1 = (seriesPos.__x - currX) * (seriesPos.__x - currX);
				if (dist1 <= minDistance1) {
					minDistance1 = dist1;
					bucket = activeMarkers.__inner[i1].markerBucket();
				}
			}
		}
		var info = new $.ig.HighlightingInfo();
		info.series(this);
		info.isMarker(true);
		info.startIndex(bucket);
		info.endIndex(info.startIndex());
		if (prevValue != null && prevValue.startIndex() == info.startIndex() && prevValue.endIndex() == info.endIndex()) {
			return prevValue;
		}
		return info;
	}
	,
	getSpecificHighlightingInfo: function (item, world, prevValue) {
		var count = this.fastItemsSource().count();
		var firstBucket = this.categoryView().bucketCalculator()._firstBucket;
		var lastBucket = this.categoryView().bucketCalculator()._lastBucket;
		var bucketSize = this.categoryView().bucketCalculator()._bucketSize;
		var axis = this.getCategoryAxis();
		var bucketStart = -1;
		var bucketEnd = -1;
		if (axis.isSorting()) {
			var current = this._currentFrame;
			if (this.animationActive()) {
				current = this._transitionFrame;
			}
			var bucket = this.getSortingCategoryBucketIndex(world);
			bucketStart = bucket;
			bucketEnd = bucket;
		} else {
			var index = this.getItemIndex(world);
			bucketStart = $.ig.truncate(Math.floor(($.ig.intDivide(index, bucketSize)))) * bucketSize;
			bucketEnd = bucketStart + (bucketSize - 1);
		}
		if (prevValue != null && prevValue.startIndex() == bucketStart && prevValue.endIndex() == bucketEnd) {
			return prevValue;
		}
		var info = new $.ig.HighlightingInfo();
		info.series(this);
		info.startIndex(bucketStart);
		info.endIndex(bucketEnd);
		return info;
	}
	,
	getFullSeriesInfo: function (item, world, prevValue) {
		var info = new $.ig.HighlightingInfo();
		info.series(this);
		info.startIndex(0);
		info.endIndex(this.fastItemsSource().count() - 1);
		if (prevValue != null && prevValue.startIndex() == info.startIndex() && prevValue.endIndex() == info.endIndex()) {
			return prevValue;
		}
		return info;
	}
	,
	_previousFrame: null,
	_transitionFrame: null,
	_currentFrame: null,
	_thumbnailFrame: null,
	_renderManager: null,
	performCategoryMarkerStyleOverride: function (buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail) {
		var isHighlightingEnabled = this.actualIsHighlightingEnabled();
		this._renderManager.prePerformCategoryMarkerStyleOverride(buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, isHighlightingEnabled);
		var args = this._renderManager.categoryMarkerOverrideArgs();
		var info = null;
		var itemsSource = this.fastItemsSource();
		if (isHighlightingEnabled && this.seriesViewer() != null) {
			info = this.seriesViewer().highlightingManager().getHighlightingInfo(this, itemsSource, categoryAxis, args.startIndex(), args.endIndex(), true);
			args.highlightingInfo(info);
		}
		args.isThumbnail(isThumbnail);
		this.raiseAssigningCategoryMarkerStyles(args);
		this._renderManager.postPerformCategoryMarkerStyleOverride(info, isThumbnail, isHighlightingEnabled);
	}
	,
	performCategoryStyleOverride: function (buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail) {
		var isHighlightingEnabled = this.actualIsHighlightingEnabled();
		this._renderManager.prePerformCategoryStyleOverride(buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, isHighlightingEnabled);
		var args = this._renderManager.categoryOverrideArgs();
		var info = null;
		var itemsSource = this.fastItemsSource();
		if (isHighlightingEnabled && this.seriesViewer() != null) {
			info = this.seriesViewer().highlightingManager().getHighlightingInfo(this, itemsSource, categoryAxis, args.startIndex(), args.endIndex(), false);
			args.highlightingInfo(info);
		}
		args.isThumbnail(isThumbnail);
		this.raiseAssigningCategoryStyles(args);
		this._renderManager.postPerformCategoryStyleOverride(info, isThumbnail, isHighlightingEnabled);
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		var isValid = $.ig.MarkerSeries.prototype.validateSeries.call(this, viewportRect, windowRect, view);
		isValid &= this.validateAxis(this.getXAxis());
		isValid &= this.validateAxis(this.getYAxis());
		var categoryView = view;
		if (!view.hasSurface() || windowRect.isEmpty() || viewportRect.isEmpty() || this.fastItemsSource() == null) {
			isValid = false;
		}
		if (!isValid) {
			categoryView.bucketCalculator()._bucketSize = 0;
		}
		return isValid;
	}
	,
	validateAxis: function (axis) {
		if (axis == null || axis.seriesViewer() == null) {
			return false;
		}
		var categoryAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, axis);
		if (categoryAxis != null) {
			if (categoryAxis.itemsSource() == null) {
				return false;
			}
			if (categoryAxis._cachedItemsCount < 1) {
				return false;
			}
		} else {
			var numericAxis = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, axis);
			if (numericAxis != null) {
				return numericAxis.actualMinimumValue() != numericAxis.actualMaximumValue();
			}
		}
		return true;
	}
	,
	shouldTransitionIn: function () {
		return this.isTransitionInEnabled();
	}
	,
	getDefaultTransitionInMode: function () {
		return $.ig.CategoryTransitionInMode.prototype.sweepFromCategoryAxisMinimum;
	}
	,
	_sourceFramePreparer: null,
	sourceFramePreparer: function (value) {
		if (arguments.length === 1) {
			this._sourceFramePreparer = value;
			return value;
		} else {
			return this._sourceFramePreparer;
		}
	}
	,
	clearSpeedModifiers: function () {
		$.ig.MarkerSeries.prototype.clearSpeedModifiers.call(this);
		this._previousFrame.clearSpeedModifiers();
		this._currentFrame.clearSpeedModifiers();
		this._transitionFrame.clearSpeedModifiers();
	}
	,
	renderSeriesOverride: function (animate) {
		$.ig.MarkerSeries.prototype.renderSeriesOverride.call(this, animate);
		this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
		if (this.clearAndAbortIfInvalid1(this.view())) {
			this._currentFrame.resetFrame();
			this._transitionFrame.resetFrame();
			this._previousFrame.resetFrame();
			return;
		}
		if (this.skipPrepare()) {
			if (this.animationActive()) {
				if (this.animator().needsFlush()) {
					this.animator().flush();
				}
				this.renderFrame(this._transitionFrame, this.categoryView());
			} else {
				this.renderFrame(this._currentFrame, this.categoryView());
			}
			return;
		}
		if (this.shouldAnimate(animate)) {
			var previous = this._previousFrame;
			if (this.animationActive()) {
				if (this.animator().needsFlush()) {
					this.animator().flush();
				}
				this._previousFrame = this._transitionFrame;
				this._transitionFrame = previous;
			} else {
				this._previousFrame = this._currentFrame;
				this._currentFrame = previous;
			}
			this.prepareFrame(this._currentFrame, this.categoryView());
			if (this.transitionInViable()) {
				this.animator().stop();
				this.animator().intervalMilliseconds($.ig.truncate(this.getTotalTransitionInMilliseconds()));
				this.animator().easingFunction(this.transitionInEasingFunction() != null ? this.transitionInEasingFunction() : this.transitionEasingFunction());
				this.sourceFramePreparer().prepareSourceFrame(this._previousFrame, this._currentFrame, this.isVertical(), this.getXAxis(), this.getYAxis(), this.transitionInMode(), this.getDefaultTransitionInMode(), this.transitionInSpeedType(), this.getDefaultTransitionInSpeedType(), this.getTransitionFromZeroValue.runOn(this), this.categoryView().viewport());
			}
			this.checkTransitionInterrupted();
			this.startAnimation();
			if (this.transitionInViable()) {
				this.transitionInViable(false);
				this.transitionInIsInProgress(true);
			}
		} else {
			this.prepareFrame(this._currentFrame, this.categoryView());
			this.renderFrame(this._currentFrame, this.categoryView());
		}
	}
	,
	getDefaultTransitionInSpeedType: function () {
		return $.ig.TransitionInSpeedType.prototype.indexScaled;
	}
	,
	getTransitionFromZeroValue: function () {
		if (this.isVertical()) {
			return this.viewport().left();
		}
		return this.viewport().bottom();
	}
	,
	getMode2Index: function () {
		var result = 0;
		var xAxis = this.getXAxis();
		var en = this.seriesViewer().series().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			if (currentSeries == this) {
				return result;
			}
			var currentCategorySeries = $.ig.util.cast($.ig.CategorySeries.prototype.$type, currentSeries);
			if (currentCategorySeries != null) {
				var currentXAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, currentCategorySeries.getXAxis());
				if (currentXAxis == xAxis && currentCategorySeries.preferredCategoryMode(currentXAxis) == $.ig.CategoryMode.prototype.mode2) {
					result++;
				}
			}
		}
		return -1;
	}
	,
	xAxis: function () {
		return this.getXAxis();
	}
	,
	yAxis: function () {
		return this.getYAxis();
	}
	,
	colorizeMarkers: function (view, frame) {
		this._renderManager.initCategoryMarkerRenderSettings(this, this.shouldOverrideMarkerStyle(), this.getCategoryItems.runOn(this), this.getBucketSize(view), this.getFirstBucket(view));
		var markerOverrideArgs = this._renderManager.categoryMarkerOverrideArgs();
		var areMarkerStylesOverriden = markerOverrideArgs != null;
		var xAxis = this.getCategoryAxis();
		if (xAxis == null) {
			return;
		}
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var xParams = new $.ig.ScalerParams(0, view.windowRect(), view.viewport(), xAxis.isInverted(), effectiveViewportRect);
		var valueCount = this.fastItemsSource().count();
		var categoryView = view;
		var buckets = frame._buckets;
		var firstBucket = categoryView.bucketCalculator()._firstBucket;
		var lastBucket = categoryView.bucketCalculator()._lastBucket;
		var bucketSize = categoryView.bucketCalculator()._bucketSize;
		var firstIndex = firstBucket * bucketSize;
		for (var i = 0; i < view.markers().count(); i++) {
			var marker = view.markers().item(i);
			var context = marker.content();
			if (areMarkerStylesOverriden) {
				var bucket = marker.markerBucket();
				this.performCategoryMarkerStyleOverride(buckets, bucket, valueCount, xAxis, xParams, view.isThumbnailView());
			}
			this._renderManager.setCategoryMarkerAppearance(marker, context);
		}
	}
	,
	renderFrame: function (frame, view) {
		this.customClipRect(frame.customClip());
		view.onRenderFrame();
	}
	,
	__fullClip: null,
	fullClip: function () {
		return this.__fullClip;
	}
	,
	prepareFrame: function (frame, view) {
		frame.clearFrame();
	}
	,
	getBucketSize: function (view) {
		return (view).bucketCalculator()._bucketSize;
	}
	,
	getFirstBucket: function (view) {
		return (view).bucketCalculator()._firstBucket;
	}
	,
	clearMarkers: function (view) {
		var catView = view;
		catView.markers().count(0);
	}
	,
	renderThumbnail: function (viewportRect, surface) {
		$.ig.MarkerSeries.prototype.renderThumbnail.call(this, viewportRect, surface);
		if (!this.thumbnailDirty()) {
			this.view().prepSurface(surface);
			return;
		}
		var categorySeriesView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, this.thumbnailView());
		categorySeriesView.bucketCalculator().calculateBuckets(this.resolution());
		this.view().prepSurface(surface);
		if (this.clearAndAbortIfInvalid1(this.thumbnailView())) {
			return;
		}
		this.renderThumbnailFrame();
		this.thumbnailDirty(false);
	}
	,
	renderThumbnailFrame: function () {
		var thumbnailView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, this.thumbnailView());
		if (!this.skipThumbnailPrepare()) {
			this.prepareFrame(this._thumbnailFrame, thumbnailView);
		}
		this.skipThumbnailPrepare(false);
		this.renderFrame(this._thumbnailFrame, thumbnailView);
	}
	,
	getXAxis: function () {
	}
	,
	getYAxis: function () {
	}
	,
	updateNumericAxisRange: function () {
	}
	,
	getFramePreparer: function (view) {
		var categoryView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, view);
		if (categoryView != null && categoryView.isThumbnailView()) {
			if (categoryView.isAlternateView()) {
				return new $.ig.CategoryFramePreparer(1, $.ig.util.cast($.ig.IIsCategoryBased.prototype.$type, this), $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, categoryView), categoryView, this, categoryView.bucketCalculator());
			} else {
				return new $.ig.CategoryFramePreparer(1, $.ig.util.cast($.ig.IIsCategoryBased.prototype.$type, this), $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, categoryView), this.seriesViewer().view().overviewPlusDetailViewportHost(), this, categoryView.bucketCalculator());
			}
		} else {
			return this.framePreparer();
		}
	}
	,
	getMatchingAxis: function (axis) {
		if (this.getXAxis() == axis) {
			return this.getYAxis();
		}
		if (this.getYAxis() == axis) {
			return this.getXAxis();
		}
		return null;
	}
	,
	$type: new $.ig.Type('CategorySeries', $.ig.MarkerSeries.prototype.$type, [$.ig.IHasCategoryModePreference.prototype.$type, $.ig.ISupportsErrorBars.prototype.$type])
}, true);

$.ig.util.defType('IIsCategoryBased', 'Object', {
	$type: new $.ig.Type('IIsCategoryBased', null)
}, true);

$.ig.util.defType('IHasSingleValueCategory', 'Object', {
	$type: new $.ig.Type('IHasSingleValueCategory', null)
}, true);

$.ig.util.defType('IHasTrendline', 'Object', {
	$type: new $.ig.Type('IHasTrendline', null)
}, true);

$.ig.util.defType('IHasCategoryTrendline', 'Object', {
	$type: new $.ig.Type('IHasCategoryTrendline', null, [$.ig.IHasTrendline.prototype.$type])
}, true);

$.ig.util.defType('AnchoredCategorySeries', 'CategorySeries', {
	_anchoredView: null,
	anchoredView: function (value) {
		if (arguments.length === 1) {
			this._anchoredView = value;
			return value;
		} else {
			return this._anchoredView;
		}
	}
	,
	createView: function () {
		var view = new $.ig.AnchoredCategorySeriesView(this);
		return view;
	}
	,
	onViewCreated: function (view) {
		$.ig.CategorySeries.prototype.onViewCreated.call(this, view);
		this.anchoredView(view);
	}
	,
	_shouldSuspendChangedNotification: false,
	shouldSuspendChangedNotification: function (value) {
		if (arguments.length === 1) {
			this._shouldSuspendChangedNotification = value;
			return value;
		} else {
			return this._shouldSuspendChangedNotification;
		}
	}
	,
	init: function () {
		$.ig.CategorySeries.prototype.init.call(this);
		this.lineRasterizer(new $.ig.CategoryLineRasterizer());
		this.framePreparer(new $.ig.CategoryFramePreparer(1, this, this.categoryView(), this, this, this.categoryView().bucketCalculator()));
	},
	_lineRasterizer: null,
	lineRasterizer: function (value) {
		if (arguments.length === 1) {
			this._lineRasterizer = value;
			return value;
		} else {
			return this._lineRasterizer;
		}
	}
	,
	valueMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.valueMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AnchoredCategorySeries.prototype.valueMemberPathProperty);
		}
	}
	,
	valueColumn: function (value) {
		if (arguments.length === 1) {
			if (this._valueColumn != value) {
				var oldValueColumn = this._valueColumn;
				this._valueColumn = value;
				if (!this.shouldSuspendChangedNotification()) {
					this.raisePropertyChanged($.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName, oldValueColumn, this._valueColumn);
				}
			}
			return value;
		} else {
			return this._valueColumn;
		}
	}
	,
	_valueColumn: null,
	trendLineType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineTypeProperty, $.ig.TrendLineType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineTypeProperty));
		}
	}
	,
	trendLineBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineBrushProperty);
		}
	}
	,
	actualTrendLineBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.actualTrendLineBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AnchoredCategorySeries.prototype.actualTrendLineBrushProperty);
		}
	}
	,
	trendLineThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineThicknessProperty);
		}
	}
	,
	trendLineDashCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineDashCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineDashCapProperty));
		}
	}
	,
	trendLineDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineDashArrayProperty);
		}
	}
	,
	trendLinePeriod: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLinePeriodProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.AnchoredCategorySeries.prototype.trendLinePeriodProperty));
		}
	}
	,
	trendLineZIndex: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.trendLineZIndexProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.AnchoredCategorySeries.prototype.trendLineZIndexProperty));
		}
	}
	,
	scrollIntoView: function (item) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
		var index = !windowRect.isEmpty() && !viewportRect.isEmpty() && this.fastItemsSource() != null ? this.fastItemsSource().indexOf(item) : -1;
		var xAxis = this.getXAxis();
		var yAxis = this.getYAxis();
		var effectiveViewportRect = this.getEffectiveViewportForUnitViewport(this.view());
		var xParams = new $.ig.ScalerParams(0, unitRect, unitRect, xAxis.isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, unitRect, unitRect, yAxis.isInverted(), effectiveViewportRect);
		var cx = xAxis != null ? xAxis.getScaledValue(index, xParams) : NaN;
		var offset = xAxis != null ? this.framePreparer().getOffset($.ig.util.cast($.ig.ICategoryScaler.prototype.$type, xAxis), xParams._windowRect, xParams._viewportRect, effectiveViewportRect) : 0;
		cx += offset;
		var cy = yAxis != null && this.valueColumn() != null && index < this.valueColumn().count() ? yAxis.getScaledValue(this.valueColumn().item(index), yParams) : NaN;
		if (!$.ig.util.isNaN(cx)) {
			if (cx < windowRect.left() + 0.1 * windowRect.width()) {
				cx = cx + 0.4 * windowRect.width();
				windowRect.x(cx - 0.5 * windowRect.width());
			}
			if (cx > windowRect.right() - 0.1 * windowRect.width()) {
				cx = cx - 0.4 * windowRect.width();
				windowRect.x(cx - 0.5 * windowRect.width());
			}
		}
		if (!$.ig.util.isNaN(cy)) {
			if (cy < windowRect.top() + 0.1 * windowRect.height()) {
				cy = cy + 0.4 * windowRect.height();
				windowRect.y(cy - 0.5 * windowRect.height());
			}
			if (cy > windowRect.bottom() - 0.1 * windowRect.height()) {
				cy = cy - 0.4 * windowRect.height();
				windowRect.y(cy - 0.5 * windowRect.height());
			}
		}
		if (this.syncLink() != null) {
			this.syncLink().windowNotify(this.seriesViewer(), windowRect);
		}
		return index >= 0;
	}
	,
	getCategoryItemsHelper: function (orderedStartIndex, orderedEndIndex, axis) {
		if (orderedEndIndex < orderedStartIndex || orderedStartIndex < 0 || orderedStartIndex > this.valueColumn().count() || orderedEndIndex < 0 || orderedEndIndex > this.valueColumn().count() || axis == null) {
			return null;
		}
		var ret = new Array((orderedEndIndex - orderedStartIndex) + 1);
		var isSorting = axis.isSorting();
		var sortedIndices = null;
		if (isSorting) {
			sortedIndices = (axis).sortedIndices();
		}
		for (var i = orderedStartIndex; i <= orderedEndIndex; i++) {
			var ind = i;
			if (isSorting) {
				ind = sortedIndices.__inner[ind];
			}
			ret[i - orderedStartIndex] = this.fastItemsSource().item(i);
		}
		return ret;
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.CategorySeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		if (this.anchoredView().trendLineManager().propertyUpdated(sender, propertyName, oldValue, newValue)) {
			this.renderSeries(false);
			this.notifyThumbnailAppearanceChanged();
		}
		switch (propertyName) {
			case $.ig.Series.prototype.fastItemsSourcePropertyName:
				if ($.ig.util.cast($.ig.IFastItemsSource.prototype.$type, oldValue) != null) {
					(oldValue).deregisterColumn(this.valueColumn());
					this.valueColumn(null);
				}
				if ($.ig.util.cast($.ig.IFastItemsSource.prototype.$type, newValue) != null) {
					this.valueColumn(this.registerDoubleColumn(this.valueMemberPath()));
				}
				var yaxis = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, this.getYAxis());
				if (yaxis != null && !yaxis.updateRange()) {
					this.anchoredView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
				}
				break;
			case $.ig.AnchoredCategorySeries.prototype.valueMemberPathPropertyName:
				if (this.fastItemsSource() != null) {
					this.fastItemsSource().deregisterColumn(this.valueColumn());
					this.valueColumn(this.registerDoubleColumn(this.valueMemberPath()));
				}
				this.cachedValueMemberPath(this.valueMemberPath());
				break;
			case $.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName:
				this.anchoredView().trendLineManager().reset();
				var yaxis2 = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, this.getYAxis());
				if (yaxis2 != null && !yaxis2.updateRange()) {
					this.anchoredView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
				}
				break;
			case $.ig.Series.prototype.trendLineBrushPropertyName:
				this.updateIndexedProperties();
				break;
			case $.ig.AnchoredCategorySeries.prototype.errorBarSettingsPropertyName:
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.trendLineTypePropertyName:
				this.notifyThumbnailAppearanceChanged();
				break;
			case $.ig.AnchoredCategorySeries.prototype._markerCollisionAvoidancePropertyName:
				this.renderSeries(false);
				break;
		}
	}
	,
	getRange: function (axis) {
		if (this.valueColumn() == null || this.valueColumn().count() == 0) {
			return null;
		}
		if (axis == this.getXAxis()) {
			return new $.ig.AxisRange(0, this.valueColumn().count() - 1);
		}
		if (axis == this.getYAxis()) {
			return new $.ig.AxisRange(this.valueColumn().minimum(), this.valueColumn().maximum());
		}
		return null;
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		switch (action) {
			case $.ig.FastItemsSourceEventAction.prototype.reset:
			case $.ig.FastItemsSourceEventAction.prototype.insert:
			case $.ig.FastItemsSourceEventAction.prototype.remove:
				this.anchoredView().bucketCalculator().calculateBuckets(this.resolution());
				break;
		}
		this.anchoredView().trendLineManager().dataUpdated(action, position, count, propertyName);
	}
	,
	getTransitionFromZeroValue: function () {
		return this.getWorldZeroValue(this.categoryView());
	}
	,
	getWorldZeroValue: function (view) {
		var value = 0;
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.getYAxis());
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && yAxis != null) {
			var p = new $.ig.ScalerParams(0, windowRect, viewportRect, yAxis.isInverted(), effectiveViewportRect);
			value = yAxis.getScaledValue(yAxis.referenceValue(), p);
		}
		return value;
	}
	,
	terminatePolygon: function (polygon, count, view) {
		var worldZeroValue = this.getWorldZeroValue(view);
		if (polygon.count() > 0) {
			var zero = worldZeroValue;
			polygon.add({ __x: $.ig.Enumerable.prototype.last$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			polygon.add({ __x: $.ig.Enumerable.prototype.first$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		}
	}
	,
	getLineClipper: function (buckets, endIndex, viewportRect, windowRect) {
		return this.getLineClipper1(buckets, endIndex, viewportRect, windowRect, false);
	}
	,
	getLineClipper1: function (buckets, endIndex, viewportRect, windowRect, closed) {
		var clipper = null;
		if (endIndex > -1 && !windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var left = buckets.__inner[0][0] < viewportRect.left() - 2000 ? viewportRect.left() - 10 : NaN;
			var bottom = viewportRect.bottom() + 10;
			var right = buckets.__inner[endIndex][0] > viewportRect.right() + 2000 ? viewportRect.right() + 10 : NaN;
			var top = viewportRect.top() - 10;
			clipper = new $.ig.Clipper(1, left, bottom, right, top, closed);
		}
		return clipper;
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		var isValid = $.ig.CategorySeries.prototype.validateSeries.call(this, viewportRect, windowRect, view);
		var anchoredView = view;
		if (this.valueColumn() == null || this.valueColumn().count() == 0 || anchoredView.bucketCalculator()._bucketSize < 1) {
			isValid = false;
		}
		return isValid;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.CategorySeries.prototype.clearRendering.call(this, wipeClean, view);
		var catView = view;
		catView.hideErrorBars();
		catView.trendLineManager().clearPoints();
	}
	,
	prepareFrame: function (frame, view) {
		$.ig.CategorySeries.prototype.prepareFrame.call(this, frame, view);
		this.getFramePreparer(view).prepareFrame(frame, view);
	}
	,
	renderFrame: function (frame, view) {
		$.ig.CategorySeries.prototype.renderFrame.call(this, frame, view);
		var anchoredView = $.ig.util.cast($.ig.AnchoredCategorySeriesView.prototype.$type, view);
		anchoredView.markerAppearanceHandled(true);
		anchoredView.trendLineManager().rasterizeTrendLine(frame._trend);
		if (this.shouldDisplayMarkers()) {
			$.ig.CategoryMarkerManager.prototype.rasterizeMarkers(this, frame._markers, view.markers(), this.useLightweightMarkers());
			this.colorizeMarkers(view, frame);
			view.renderMarkers();
		}
		this.renderErrorBars(frame, view);
	}
	,
	_alternateFrame: null,
	alternateFrame: function (value) {
		if (arguments.length === 1) {
			this._alternateFrame = value;
			return value;
		} else {
			return this._alternateFrame;
		}
	}
	,
	renderAlternateView: function (viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio) {
		$.ig.CategorySeries.prototype.renderAlternateView.call(this, viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio);
		var view = this.alternateViews().item(viewIdentifier);
		var categorySeriesView = view;
		categorySeriesView.bucketCalculator().calculateBuckets(this.resolution());
		view.prepAltSurface(surface);
		if (this.clearAndAbortIfInvalid1(categorySeriesView)) {
			return;
		}
		if (this.alternateFrame() == null) {
			this.alternateFrame(new $.ig.CategoryFrame(3));
		}
		this.alternateFrame().clearFrame();
		this.prepareFrame(this.alternateFrame(), categorySeriesView);
		this.renderFrame(this.alternateFrame(), categorySeriesView);
	}
	,
	renderErrorBars: function (frame, view) {
	}
	,
	updateIndexedProperties: function () {
		$.ig.CategorySeries.prototype.updateIndexedProperties.call(this);
		if (this.index() < 0) {
			return;
		}
		this.anchoredView().resetTrendlineBrush();
		if (this.trendLineBrush() != null) {
			this.anchoredView().bindTrendlineBrushToActualTrendlineBrush();
		} else {
			this.anchoredView().bindTrendlineBrushToActualBrush();
		}
	}
	,
	item: function (sender, point) {
		if (sender == this.anchoredView().trendLineManager().trendPolyline()) {
			return null;
		}
		return $.ig.CategorySeries.prototype.item.call(this, sender, point);
	}
	,
	currentCategoryMode: function () {
		return this.preferredCategoryMode($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.getXAxis()));
	}
	,
	scaler: function () {
		return $.ig.util.cast($.ig.ICategoryScaler.prototype.$type, this.getXAxis());
	}
	,
	yScaler: function () {
		return $.ig.util.cast($.ig.IScaler.prototype.$type, this.getYAxis());
	}
	,
	bucketizer: function () {
		return this.anchoredView().bucketCalculator();
	}
	,
	currentMode2Index: function () {
		return this.getMode2Index();
	}
	,
	provideCollisionDetector: function () {
		if (this.markerCollisionAvoidance() == $.ig.CategorySeriesMarkerCollisionAvoidance.prototype.omit) {
			return new $.ig.CollisionAvoider();
		}
		return $.ig.NonCollisionAvoider.prototype.instance();
	}
	,
	trendlinePreparer: function () {
		return this.anchoredView().trendLineManager();
	}
	,
	_cachedValueMemberPath: null,
	cachedValueMemberPath: function (value) {
		if (arguments.length === 1) {
			this._cachedValueMemberPath = value;
			return value;
		} else {
			return this._cachedValueMemberPath;
		}
	}
	,
	setXAxis: function (xAxis) {
	}
	,
	setYAxis: function (yAxis) {
	}
	,
	exportVisualDataOverride: function (svd) {
		$.ig.CategorySeries.prototype.exportVisualDataOverride.call(this, svd);
		var trendShape = new $.ig.PolyLineVisualData(1, "trendLine", this.anchoredView().trendLineManager().trendPolyline());
		trendShape.tags().add("Trend");
		svd.shapes().add(trendShape);
	}
	,
	markerCollisionAvoidance: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.AnchoredCategorySeries.prototype.markerCollisionAvoidanceProperty, $.ig.CategorySeriesMarkerCollisionAvoidance.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.AnchoredCategorySeries.prototype.markerCollisionAvoidanceProperty));
		}
	}
	,
	$type: new $.ig.Type('AnchoredCategorySeries', $.ig.CategorySeries.prototype.$type, [$.ig.IIsCategoryBased.prototype.$type, $.ig.IHasSingleValueCategory.prototype.$type, $.ig.IHasCategoryTrendline.prototype.$type])
}, true);

$.ig.util.defType('IBarSeries', 'Object', {
	$type: new $.ig.Type('IBarSeries', null)
}, true);

$.ig.util.defType('IBucketizer', 'Object', {
	$type: new $.ig.Type('IBucketizer', null)
}, true);

$.ig.util.defType('CategoryBucketCalculator', 'Object', {
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	init: function (view) {
		$.ig.Object.prototype.init.call(this);
		if (view == null) {
			throw new $.ig.ArgumentNullException(0, "view");
		}
		this.view(view);
		this._firstBucket = -1;
		this._lastBucket = this._lastBucket;
		this._bucketSize = 0;
	},
	_firstBucket: 0,
	_lastBucket: 0,
	_bucketSize: 0,
	getBucket: function (bucket) {
		return null;
	}
	,
	getErrorBucket: function (bucket, column) {
		return NaN;
	}
	,
	calculateBuckets: function (resolution) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var categorySeries = this.view().categoryModel();
		var xAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, categorySeries.getXAxis());
		var fastItemsSource = categorySeries.fastItemsSource();
		if (windowRect.isEmpty() || viewportRect.isEmpty() || xAxis == null || fastItemsSource == null || fastItemsSource.count() == 0) {
			this._bucketSize = 0;
			return;
		}
		var effectiveViewportRect = categorySeries.getEffectiveViewport1(this.view());
		var contentViewport = categorySeries.getContentViewport(this.view());
		var sortingXAxis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xAxis);
		if (sortingXAxis == null || sortingXAxis.sortedIndices() == null) {
			var p = new $.ig.ScalerParams(0, windowRect, viewportRect, xAxis.isInverted(), effectiveViewportRect);
			var x0 = Math.floor(xAxis.getUnscaledValue1(contentViewport.left(), p, $.ig.CategoryMode.prototype.mode0));
			var x1 = Math.ceil(xAxis.getUnscaledValue1(contentViewport.right(), p, $.ig.CategoryMode.prototype.mode0));
			if (xAxis.isInverted()) {
				x1 = Math.ceil(xAxis.getUnscaledValue1(contentViewport.left(), p, $.ig.CategoryMode.prototype.mode0));
				x0 = Math.floor(xAxis.getUnscaledValue1(contentViewport.right(), p, $.ig.CategoryMode.prototype.mode0));
			}
			var c = Math.floor((x1 - x0 + 1) * resolution / contentViewport.width());
			this._bucketSize = $.ig.truncate(Math.max(1, c));
			this._firstBucket = $.ig.truncate(Math.max(0, Math.floor(x0 / this._bucketSize) - 1));
			this._lastBucket = $.ig.truncate(Math.ceil(x1 / this._bucketSize));
		} else {
			this._firstBucket = sortingXAxis.getFirstVisibleIndex(windowRect, viewportRect, effectiveViewportRect, contentViewport);
			this._lastBucket = sortingXAxis.getLastVisibleIndex(windowRect, viewportRect, effectiveViewportRect, contentViewport);
			this._bucketSize = 1;
		}
	}
	,
	getBucketInfo: function (firstBucket, lastBucket, bucketSize, resolution) {
		firstBucket = this._firstBucket;
		lastBucket = this._lastBucket;
		bucketSize = this._bucketSize;
		resolution = this.view().categoryModel().resolution();
		return {
			p0: firstBucket,
			p1: lastBucket,
			p2: bucketSize,
			p3: resolution
		};
	}
	,
	cacheValues: function () {
	}
	,
	unCacheValues: function () {
	}
	,
	$type: new $.ig.Type('CategoryBucketCalculator', $.ig.Object.prototype.$type, [$.ig.IBucketizer.prototype.$type])
}, true);

$.ig.util.defType('AnchoredCategoryBucketCalculator', 'CategoryBucketCalculator', {
	init: function (view) {
		$.ig.CategoryBucketCalculator.prototype.init.call(this, view);
		this.anchoredView(view);
	},
	_anchoredView: null,
	anchoredView: function (value) {
		if (arguments.length === 1) {
			this._anchoredView = value;
			return value;
		} else {
			return this._anchoredView;
		}
	}
	,
	getBucket: function (bucket) {
		var column = this.__values;
		var count = this.__count;
		var i0 = Math.min(bucket * this._bucketSize, count - 1);
		var i1 = Math.min(i0 + this._bucketSize - 1, count - 1);
		var min = NaN;
		var max = NaN;
		var first = true;
		for (var i = i0; i <= i1; ++i) {
			var y = column[i];
			if (!first) {
				if (!$.ig.util.isNaN(y)) {
					min = min < y ? min : y;
					max = max > y ? max : y;
				}
			} else {
				if (!$.ig.util.isNaN(y)) {
					min = y;
					max = y;
					first = false;
				}
			}
		}
		if (!first) {
			return [ (0.5 * (i0 + i1)), min, max ];
		}
		return [ (0.5 * (i0 + i1)), NaN, NaN ];
	}
	,
	__values: null,
	__count: 0,
	cacheValues: function () {
		this.__count = this.anchoredView().anchoredModel().valueColumn().count();
		this.__values = this.anchoredView().anchoredModel().valueColumn().asArray();
	}
	,
	unCacheValues: function () {
		this.__values = null;
	}
	,
	$type: new $.ig.Type('AnchoredCategoryBucketCalculator', $.ig.CategoryBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('ValuesHolder', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	count: function () {
	}
	,
	_bucketY0: 0,
	bucketY0: function (value) {
		if (arguments.length === 1) {
			this._bucketY0 = value;
			return value;
		} else {
			return this._bucketY0;
		}
	}
	,
	_bucketY1: 0,
	bucketY1: function (value) {
		if (arguments.length === 1) {
			this._bucketY1 = value;
			return value;
		} else {
			return this._bucketY1;
		}
	}
	,
	_tempY0: 0,
	tempY0: function (value) {
		if (arguments.length === 1) {
			this._tempY0 = value;
			return value;
		} else {
			return this._tempY0;
		}
	}
	,
	_tempY1: 0,
	tempY1: function (value) {
		if (arguments.length === 1) {
			this._tempY1 = value;
			return value;
		} else {
			return this._tempY1;
		}
	}
	,
	$type: new $.ig.Type('ValuesHolder', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SingleValuesHolder', 'ValuesHolder', {
	init: function () {
		$.ig.ValuesHolder.prototype.init.call(this);
	},
	_values: null,
	values: function (value) {
		if (arguments.length === 1) {
			this._values = value;
			return value;
		} else {
			return this._values;
		}
	}
	,
	count: function () {
		if (this.values() != null) {
			return this.values().count();
		}
		return 0;
	}
	,
	$type: new $.ig.Type('SingleValuesHolder', $.ig.ValuesHolder.prototype.$type)
}, true);

$.ig.util.defType('DefaultSingleValueProvider', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	valueColumn: function () {
		return new $.ig.List$1(Number, 0);
	}
	,
	$type: new $.ig.Type('DefaultSingleValueProvider', $.ig.Object.prototype.$type, [$.ig.IHasSingleValueCategory.prototype.$type])
}, true);

$.ig.util.defType('PreparationParams', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_firstBucket: 0,
	firstBucket: function (value) {
		if (arguments.length === 1) {
			this._firstBucket = value;
			return value;
		} else {
			return this._firstBucket;
		}
	}
	,
	_lastBucket: 0,
	lastBucket: function (value) {
		if (arguments.length === 1) {
			this._lastBucket = value;
			return value;
		} else {
			return this._lastBucket;
		}
	}
	,
	_bucketSize: 0,
	bucketSize: function (value) {
		if (arguments.length === 1) {
			this._bucketSize = value;
			return value;
		} else {
			return this._bucketSize;
		}
	}
	,
	_resolution: 0,
	resolution: function (value) {
		if (arguments.length === 1) {
			this._resolution = value;
			return value;
		} else {
			return this._resolution;
		}
	}
	,
	_windowRect: null,
	windowRect: function (value) {
		if (arguments.length === 1) {
			this._windowRect = value;
			return value;
		} else {
			return this._windowRect;
		}
	}
	,
	_viewportRect: null,
	viewportRect: function (value) {
		if (arguments.length === 1) {
			this._viewportRect = value;
			return value;
		} else {
			return this._viewportRect;
		}
	}
	,
	_effectiveViewportRect: null,
	effectiveViewportRect: function (value) {
		if (arguments.length === 1) {
			this._effectiveViewportRect = value;
			return value;
		} else {
			return this._effectiveViewportRect;
		}
	}
	,
	_scaler: null,
	scaler: function (value) {
		if (arguments.length === 1) {
			this._scaler = value;
			return value;
		} else {
			return this._scaler;
		}
	}
	,
	_sortingScaler: null,
	sortingScaler: function (value) {
		if (arguments.length === 1) {
			this._sortingScaler = value;
			return value;
		} else {
			return this._sortingScaler;
		}
	}
	,
	_yScaler: null,
	yScaler: function (value) {
		if (arguments.length === 1) {
			this._yScaler = value;
			return value;
		} else {
			return this._yScaler;
		}
	}
	,
	_frame: null,
	frame: function (value) {
		if (arguments.length === 1) {
			this._frame = value;
			return value;
		} else {
			return this._frame;
		}
	}
	,
	_isFragment: false,
	isFragment: function (value) {
		if (arguments.length === 1) {
			this._isFragment = value;
			return value;
		} else {
			return this._isFragment;
		}
	}
	,
	_useHighMarkerFidelity: false,
	useHighMarkerFidelity: function (value) {
		if (arguments.length === 1) {
			this._useHighMarkerFidelity = value;
			return value;
		} else {
			return this._useHighMarkerFidelity;
		}
	}
	,
	$type: new $.ig.Type('PreparationParams', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CategoryLineRasterizer', 'Object', {
	init: function () {
		this.__flattenedLinePoints = new $.ig.PointCollection(0);
		$.ig.Object.prototype.init.call(this);
	},
	_isSortingAxis: false,
	isSortingAxis: function (value) {
		if (arguments.length === 1) {
			this._isSortingAxis = value;
			return value;
		} else {
			return this._isSortingAxis;
		}
	}
	,
	__flattenedLinePoints: null,
	flattenedLinePoints: function (value) {
		if (arguments.length === 1) {
			this.__flattenedLinePoints = value;
			return value;
		} else {
			return this.__flattenedLinePoints;
		}
	}
	,
	rasterizePolylinePaths: function (polylines0, polygons01, polylines1, count, buckets, useX0AsX1, unknownValuePlotting, clipper, bucketSize, resolution) {
		var polylineData0 = new $.ig.PathGeometry();
		var polygonData01 = new $.ig.PathGeometry();
		var polylineData1 = new $.ig.PathGeometry();
		polylines0.data(polylineData0);
		polygons01.data(polygonData01);
		polylines1.data(polylineData1);
		polylineData0.figures(new $.ig.PathFigureCollection());
		polygonData01.figures(new $.ig.PathFigureCollection());
		polylineData1.figures(new $.ig.PathFigureCollection());
		var polylineSegments0 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polylineSegments1 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polygonSegments0 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polygonSegments1 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.linearInterpolate || unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot) {
			var incrementalClipper = unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot ? clipper : null;
			var currentLineStartIndex = 0;
			for (var i = 0; i < count; i++) {
				if ($.ig.util.isNaN(buckets.__inner[i][1])) {
					var pointsInCurrentLine = i - currentLineStartIndex;
					var addPoints = (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.linearInterpolate && pointsInCurrentLine > 0) || (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot && pointsInCurrentLine > 1);
					if (addPoints) {
						if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot || polylineSegments0.count() == 0) {
							var currentPolylineSegment0 = new $.ig.PolyLineSegment();
							var currentPolylineSegment1 = new $.ig.PolyLineSegment();
							var currentPolygonSegment0 = new $.ig.PolyLineSegment();
							var currentPolygonSegment1 = new $.ig.PolyLineSegment();
							polylineSegments0.add(currentPolylineSegment0);
							polylineSegments1.add(currentPolylineSegment1);
							polygonSegments0.add(currentPolygonSegment0);
							polygonSegments1.add(currentPolygonSegment1);
						}
						this.rasterizePolyline1(polylineSegments0.__inner[polylineSegments0.count() - 1].__points, polylineSegments1.__inner[polylineSegments1.count() - 1].__points, polygonSegments0.__inner[polygonSegments0.count() - 1].__points, polygonSegments1.__inner[polygonSegments1.count() - 1].__points, currentLineStartIndex, i - 1, buckets, useX0AsX1, incrementalClipper, bucketSize, resolution);
					}
					currentLineStartIndex = i + 1;
				}
			}
			if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot || polylineSegments0.count() == 0) {
				var lastPolylineSegment0 = new $.ig.PolyLineSegment();
				var lastPolygonSegment0 = new $.ig.PolyLineSegment();
				var lastPolygonSegment1 = new $.ig.PolyLineSegment();
				var lastPolylineSegment1 = new $.ig.PolyLineSegment();
				polylineSegments0.add(lastPolylineSegment0);
				polylineSegments1.add(lastPolylineSegment1);
				polygonSegments0.add(lastPolygonSegment0);
				polygonSegments1.add(lastPolygonSegment1);
			}
			this.rasterizePolyline1(polylineSegments0.__inner[polylineSegments0.count() - 1].__points, polylineSegments1.__inner[polylineSegments1.count() - 1].__points, polygonSegments0.__inner[polygonSegments0.count() - 1].__points, polygonSegments1.__inner[polygonSegments1.count() - 1].__points, currentLineStartIndex, count - 1, buckets, useX0AsX1, incrementalClipper, bucketSize, resolution);
			if (incrementalClipper == null && polylineSegments0.count() == 1 && clipper != null) {
				this.clipSegment(polylineSegments0.__inner[0], clipper);
				if (polylineSegments1.count() == 1) {
					this.clipSegment(polylineSegments1.__inner[0], clipper);
				}
			}
		} else {
			polylineSegments0.add(new $.ig.PolyLineSegment());
			polylineSegments1.add(new $.ig.PolyLineSegment());
			polygonSegments0.add(new $.ig.PolyLineSegment());
			polygonSegments1.add(new $.ig.PolyLineSegment());
			this.rasterizePolyline(polylineSegments0.__inner[0].__points, polylineSegments1.__inner[0].__points, polygonSegments0.__inner[0].__points, polygonSegments1.__inner[0].__points, count, buckets, useX0AsX1, clipper, bucketSize, resolution);
		}
		for (var current = 0; current < polylineSegments0.count(); current++) {
			var polylineSegment0 = polylineSegments0.__inner[current];
			var polylineSegment1 = polylineSegments1.__inner[current];
			var polygonSegment0 = polygonSegments0.__inner[current];
			var polygonSegment1 = polygonSegments1.__inner[current];
			if (polylineSegment0.__points.count() > 0) {
				var polylineFigure0 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polylineSegment0.__points.__inner[0]);
					return $ret;
				}());
				polylineFigure0.__segments.add(polylineSegment0);
				polylineData0.figures().add(polylineFigure0);
			}
			if (polylineSegment1.__points.count() > 0) {
				var polylineFigure1 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polylineSegment1.__points.__inner[0]);
					return $ret;
				}());
				polylineFigure1.__segments.add(polylineSegment1);
				polylineData1.figures().add(polylineFigure1);
			}
			if (polygonSegment0.__points.count() > 0 && polygonSegment1.__points.count() > 0) {
				var polygonSegment01 = new $.ig.PolyLineSegment();
				if (clipper != null) {
					var temp = clipper.isClosed();
					clipper.isClosed(true);
					clipper.target(polygonSegment01.__points);
					var en = polygonSegment0.__points.getEnumerator();
					while (en.moveNext()) {
						var p = en.current();
						clipper.add(p);
					}
					for (var i1 = polygonSegment1.__points.count() - 1; i1 >= 0; i1--) {
						clipper.add(polygonSegment1.__points.__inner[i1]);
					}
					clipper.target(null);
					clipper.isClosed(temp);
				} else {
					var en1 = polygonSegment0.__points.getEnumerator();
					while (en1.moveNext()) {
						var p1 = en1.current();
						polygonSegment01.__points.add(p1);
					}
					for (var i2 = polygonSegment1.__points.count() - 1; i2 >= 0; i2--) {
						polygonSegment01.__points.add(polygonSegment1.__points.__inner[i2]);
					}
				}
				if (polygonSegment01.__points.count() > 0) {
					var polygonFigure01 = (function () {
						var $ret = new $.ig.PathFigure();
						$ret.startPoint(polygonSegment01.__points.__inner[0]);
						return $ret;
					}());
					polygonFigure01.__segments.add(polygonSegment01);
					polygonData01.figures().add(polygonFigure01);
				}
			}
		}
	}
	,
	clipSegment: function (segment, clipper) {
		var points = segment.__points;
		clipper.target(segment.__points = new $.ig.PointCollection(0));
		var en = points.getEnumerator();
		while (en.moveNext()) {
			var p = en.current();
			clipper.add(p);
		}
		clipper.target(null);
	}
	,
	rasterizePolyline2: function (polyline0, polyline1, polygon0, polygon1, count, buckets, useX0AsX1, clipper, bucketSize, resolution) {
		polyline0.points().clear();
		polygon0.points().clear();
		polygon1.points().clear();
		polyline1.points().clear();
		this.rasterizePolyline(polyline0.points(), polyline1.points(), polygon0.points(), polygon1.points(), count, buckets, useX0AsX1, clipper, bucketSize, resolution);
		polyline0.isHitTestVisible(polyline0.points().count() > 0);
		polygon0.isHitTestVisible(polygon0.points().count() > 0);
		polygon1.isHitTestVisible(polygon1.points().count() > 0);
		polyline1.isHitTestVisible(polyline1.points().count() > 0);
	}
	,
	rasterizePolyline: function (polylinePoints0, polylinePoints1, polygonPoints0, polygonPoints1, count, buckets, useX0AsX1, clipper, bucketSize, resolution) {
		this.rasterizePolyline1(polylinePoints0, polylinePoints1, polygonPoints0, polygonPoints1, 0, count - 1, buckets, useX0AsX1, clipper, bucketSize, resolution);
	}
	,
	flattenPoints: function (points, startIndex, endIndex, buckets, point0, useX0AsX1, resolution) {
		var flattened = $.ig.Flattener.prototype.chunkedFastFlatten(new $.ig.List$1($.ig.Number.prototype.$type, 0), buckets, point0, useX0AsX1, startIndex, endIndex, resolution);
		var j = 0;
		var flattenedCount = flattened.count();
		var bucket;
		var x;
		var y;
		if (point0) {
			for (var i = 0; i < flattenedCount; i++) {
				j = flattened.item(i);
				bucket = buckets.__inner[j];
				x = bucket[0];
				y = bucket[1];
				var pointToAdd = { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				points.add(pointToAdd);
			}
		} else if (useX0AsX1) {
			for (var i1 = 0; i1 < flattenedCount; i1++) {
				j = flattened.item(i1);
				bucket = buckets.__inner[j];
				x = bucket[0];
				y = bucket[2];
				var pointToAdd1 = { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				points.add(pointToAdd1);
			}
		} else {
			for (var i2 = 0; i2 < flattenedCount; i2++) {
				j = flattened.item(i2);
				bucket = buckets.__inner[j];
				x = bucket[2];
				y = bucket[3];
				var pointToAdd2 = { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				points.add(pointToAdd2);
			}
		}
	}
	,
	clipPoints: function (points, pointsToClip, clipper, resolution) {
		clipper.target(points);
		for (var i = 0; i < pointsToClip.count(); i++) {
			clipper.add(pointsToClip.__inner[i]);
		}
		clipper.target(null);
	}
	,
	clipPoints1: function (points, pointsToClip, clipper, resolution, closed) {
		var isClosedStored = clipper.isClosed();
		clipper.isClosed(closed);
		this.clipPoints(points, pointsToClip, clipper, resolution);
		clipper.isClosed(isClosedStored);
	}
	,
	rasterizePolyline1: function (polylinePoints0, polylinePoints1, polygonPoints0, polygonPoints1, startIndex, endIndex, buckets, useX0AsX1, clipper, bucketSize, resolution) {
		if (endIndex > -1) {
			if (bucketSize == 1 && !this.isSortingAxis()) {
				var polylinePoints0_new = new $.ig.PointCollection(0);
				this.flattenPoints(polylinePoints0_new, startIndex, endIndex, buckets, true, useX0AsX1, resolution);
				if (clipper != null) {
					this.clipPoints(polylinePoints0, polylinePoints0_new, clipper, resolution);
				} else {
					this.populatePointCollectionFrom(polylinePoints0, polylinePoints0_new);
				}
			} else {
				var polylinePoints0_new1 = new $.ig.PointCollection(0);
				var polylinePoints1_new = new $.ig.PointCollection(0);
				this.flattenPoints(polylinePoints0_new1, startIndex, endIndex, buckets, true, useX0AsX1, resolution);
				this.flattenPoints(polylinePoints1_new, startIndex, endIndex, buckets, false, useX0AsX1, resolution);
				this.populatePointCollectionFrom(polygonPoints0, polylinePoints0_new1);
				this.populatePointCollectionFrom(polygonPoints1, polylinePoints1_new);
				if (clipper != null) {
					this.clipPoints(polylinePoints0, polylinePoints0_new1, clipper, resolution);
					this.clipPoints(polylinePoints1, polylinePoints1_new, clipper, resolution);
				} else {
					this.populatePointCollectionFrom(polylinePoints0, polylinePoints0_new1);
					this.populatePointCollectionFrom(polylinePoints1, polylinePoints1_new);
				}
			}
		}
	}
	,
	rasterizePolygonPaths: function (polygons0, polylines0, polygons01, polylines1, count, buckets, useX0AsX1, bucketSize, resolution, terminatePolygon, unknownValuePlotting) {
		this.rasterizePolygonPaths1(polygons0, polylines0, polygons01, polylines1, count, buckets, useX0AsX1, bucketSize, resolution, terminatePolygon, unknownValuePlotting, null);
	}
	,
	rasterizePolygonPaths1: function (polygons0, polylines0, polygons01, polylines1, count, buckets, useX0AsX1, bucketSize, resolution, terminatePolygon, unknownValuePlotting, clipper) {
		var polygonData0 = new $.ig.PathGeometry();
		var polylineData0 = new $.ig.PathGeometry();
		var polygonData01 = new $.ig.PathGeometry();
		var polylineData1 = new $.ig.PathGeometry();
		polygons0.data(polygonData0);
		polylines0.data(polylineData0);
		polygons01.data(polygonData01);
		polylines1.data(polylineData1);
		polygonData0.figures(new $.ig.PathFigureCollection());
		polylineData0.figures(new $.ig.PathFigureCollection());
		polygonData01.figures(new $.ig.PathFigureCollection());
		polylineData1.figures(new $.ig.PathFigureCollection());
		var polygonSegments0 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polylineSegments0 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polygonSegments01 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		var polylineSegments1 = new $.ig.List$1($.ig.PolyLineSegment.prototype.$type, 0);
		if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.linearInterpolate || unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot) {
			var incrementalClipper = unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot ? clipper : null;
			var currentLineStartIndex = 0;
			for (var i = 0; i < count; i++) {
				if ($.ig.util.isNaN(buckets.__inner[i][1])) {
					var pointsInCurrentLine = i - currentLineStartIndex;
					var addPoints = (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.linearInterpolate && pointsInCurrentLine > 0) || (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot && pointsInCurrentLine > 1);
					if (addPoints) {
						if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot || polylineSegments0.count() == 0) {
							var currentPolygonSegment0 = new $.ig.PolyLineSegment();
							var currentPolylineSegment0 = new $.ig.PolyLineSegment();
							var currentPolygonSegment01 = new $.ig.PolyLineSegment();
							var currentPolylineSegment1 = new $.ig.PolyLineSegment();
							polygonSegments0.add(currentPolygonSegment0);
							polylineSegments0.add(currentPolylineSegment0);
							polygonSegments01.add(currentPolygonSegment01);
							polylineSegments1.add(currentPolylineSegment1);
						}
						var polygonSegmentPoints0;
						var polylineSegmentPoints0;
						var polygonSegmentPoints01;
						var polylineSegmentPoints1;
						if (clipper != null && unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot) {
							polygonSegmentPoints0 = new $.ig.PointCollection(0);
							polylineSegmentPoints0 = new $.ig.PointCollection(0);
							polygonSegmentPoints01 = new $.ig.PointCollection(0);
							polylineSegmentPoints1 = new $.ig.PointCollection(0);
						} else {
							polygonSegmentPoints0 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points;
							polylineSegmentPoints0 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points;
							polygonSegmentPoints01 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points;
							polylineSegmentPoints1 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points;
						}
						this.rasterizePolygon(polygonSegmentPoints0, polylineSegmentPoints0, polygonSegmentPoints01, polylineSegmentPoints1, currentLineStartIndex, i - 1, buckets, useX0AsX1, null, bucketSize, resolution);
						if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot) {
							terminatePolygon(polygonSegmentPoints0, polylineSegmentPoints0, polygonSegmentPoints01, polylineSegmentPoints1, false);
							if (clipper != null) {
								this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points, polygonSegmentPoints0, clipper, resolution, true);
								this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points, polylineSegmentPoints0, clipper, resolution, false);
								this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points, polygonSegmentPoints01, clipper, resolution, true);
								this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points, polylineSegmentPoints1, clipper, resolution, false);
							}
						}
					}
					currentLineStartIndex = i + 1;
				}
			}
			if (unknownValuePlotting == $.ig.UnknownValuePlotting.prototype.dontPlot || polylineSegments0.count() == 0) {
				var lastPolygonSegment0 = new $.ig.PolyLineSegment();
				var lastPolylineSegment0 = new $.ig.PolyLineSegment();
				var lastPolygonSegment01 = new $.ig.PolyLineSegment();
				var lastPolylineSegment1 = new $.ig.PolyLineSegment();
				polygonSegments0.add(lastPolygonSegment0);
				polylineSegments0.add(lastPolylineSegment0);
				polygonSegments01.add(lastPolygonSegment01);
				polylineSegments1.add(lastPolylineSegment1);
			}
			var lastPolygonSegmentPoints0;
			var lastPolylineSegmentPoints0;
			var lastPolygonSegmentPoints01;
			var lastPolylineSegmentPoints1;
			if (clipper != null) {
				lastPolygonSegmentPoints0 = new $.ig.PointCollection(0);
				this.populatePointCollectionFrom(lastPolygonSegmentPoints0, $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points);
				lastPolylineSegmentPoints0 = new $.ig.PointCollection(0);
				this.populatePointCollectionFrom(lastPolylineSegmentPoints0, $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points);
				lastPolygonSegmentPoints01 = new $.ig.PointCollection(0);
				this.populatePointCollectionFrom(lastPolygonSegmentPoints01, $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points);
				lastPolylineSegmentPoints1 = new $.ig.PointCollection(0);
				this.populatePointCollectionFrom(lastPolylineSegmentPoints1, $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points);
				$.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points.clear();
				$.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points.clear();
				$.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points.clear();
				$.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points.clear();
			} else {
				lastPolygonSegmentPoints0 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points;
				lastPolylineSegmentPoints0 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points;
				lastPolygonSegmentPoints01 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points;
				lastPolylineSegmentPoints1 = $.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points;
			}
			this.rasterizePolygon(lastPolygonSegmentPoints0, lastPolylineSegmentPoints0, lastPolygonSegmentPoints01, lastPolylineSegmentPoints1, currentLineStartIndex, count - 1, buckets, useX0AsX1, null, bucketSize, resolution);
			terminatePolygon(lastPolygonSegmentPoints0, lastPolylineSegmentPoints0, lastPolygonSegmentPoints01, lastPolylineSegmentPoints1, true);
			if (clipper != null) {
				this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments0).__points, lastPolygonSegmentPoints0, clipper, resolution, true);
				this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments0).__points, lastPolylineSegmentPoints0, clipper, resolution, false);
				this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polygonSegments01).__points, lastPolygonSegmentPoints01, clipper, resolution, true);
				this.clipPoints1($.ig.Enumerable.prototype.last$1($.ig.PolyLineSegment.prototype.$type, polylineSegments1).__points, lastPolylineSegmentPoints1, clipper, resolution, false);
			}
		} else {
			polygonSegments0.add(new $.ig.PolyLineSegment());
			polylineSegments0.add(new $.ig.PolyLineSegment());
			polygonSegments01.add(new $.ig.PolyLineSegment());
			polylineSegments1.add(new $.ig.PolyLineSegment());
			this.rasterizePolygon1(polygonSegments0.__inner[0].__points, polylineSegments0.__inner[0].__points, polygonSegments01.__inner[0].__points, polylineSegments1.__inner[0].__points, 0, count - 1, buckets, useX0AsX1, bucketSize, resolution);
			terminatePolygon(polygonSegments0.__inner[0].__points, polylineSegments0.__inner[0].__points, polygonSegments01.__inner[0].__points, polylineSegments1.__inner[0].__points, true);
		}
		for (var current = 0; current < polylineSegments0.count(); current++) {
			var polygonSegment0 = polygonSegments0.__inner[current];
			var polylineSegment0 = polylineSegments0.__inner[current];
			var polygonSegment01 = polygonSegments01.__inner[current];
			var polylineSegment1 = polylineSegments1.__inner[current];
			if (polygonSegment0.__points.count() > 0) {
				var polygonFigure0 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polygonSegment0.__points.__inner[0]);
					return $ret;
				}());
				polygonFigure0.__segments.add(polygonSegment0);
				polygonData0.figures().add(polygonFigure0);
			}
			if (polylineSegment0.__points.count() > 0) {
				var polylineFigure0 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polylineSegment0.__points.__inner[0]);
					return $ret;
				}());
				polylineFigure0.__segments.add(polylineSegment0);
				polylineData0.figures().add(polylineFigure0);
			}
			if (polygonSegment01.__points.count() > 0) {
				var polygonFigure01 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polygonSegment01.__points.__inner[0]);
					return $ret;
				}());
				polygonFigure01.__segments.add(polygonSegment01);
				polygonData01.figures().add(polygonFigure01);
			}
			if (polylineSegment1.__points.count() > 0) {
				var polylineFigure1 = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(polylineSegment1.__points.__inner[0]);
					return $ret;
				}());
				polylineFigure1.__segments.add(polylineSegment1);
				polylineData1.figures().add(polylineFigure1);
			}
		}
	}
	,
	rasterizePolygon1: function (polygonPoints0, polylinePoints0, polygonPoints01, polylinePoints1, startIndex, endIndex, buckets, useX0AsX1, bucketSize, resolution) {
		this.rasterizePolygon(polygonPoints0, polylinePoints0, polygonPoints01, polylinePoints1, startIndex, endIndex, buckets, useX0AsX1, null, bucketSize, resolution);
	}
	,
	rasterizePolygon: function (polygonPoints0, polylinePoints0, polygonPoints01, polylinePoints1, startIndex, endIndex, buckets, useX0AsX1, clipper, bucketSize, resolution) {
		this.flattenedLinePoints().clear();
		if (bucketSize == 1 && !this.isSortingAxis()) {
			var indexes = $.ig.Flattener.prototype.chunkedFastFlatten(new $.ig.List$1($.ig.Number.prototype.$type, 0), buckets, true, useX0AsX1, startIndex, endIndex, resolution);
			var indexCount = indexes.count();
			var index = 0;
			var bucket;
			var x0;
			var y0;
			var flattenedPoints = new $.ig.PointCollection(0);
			for (var i = 0; i < indexCount; i++) {
				index = indexes.item(i);
				bucket = buckets.__inner[index];
				x0 = bucket[0];
				y0 = bucket[1];
				flattenedPoints.add({ __x: x0, __y: y0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (clipper != null) {
				this.clipPoints1(polygonPoints0, flattenedPoints, clipper, resolution, true);
				this.clipPoints1(polylinePoints1, flattenedPoints, clipper, resolution, false);
				this.clipPoints1(this.flattenedLinePoints(), flattenedPoints, clipper, resolution, false);
			} else {
				this.populatePointCollectionFrom(polygonPoints0, flattenedPoints);
				this.populatePointCollectionFrom(polylinePoints1, flattenedPoints);
				this.populatePointCollectionFrom(this.flattenedLinePoints(), flattenedPoints);
			}
		} else {
			var indexes1 = $.ig.Flattener.prototype.chunkedFastFlatten(new $.ig.List$1($.ig.Number.prototype.$type, 0), buckets, true, useX0AsX1, startIndex, endIndex, resolution);
			var indexes2 = $.ig.Flattener.prototype.chunkedFastFlatten(new $.ig.List$1($.ig.Number.prototype.$type, 0), buckets, false, useX0AsX1, startIndex, endIndex, resolution);
			var indexCount1 = indexes1.count();
			var index2Count = indexes2.count();
			var index1 = 0;
			var bucket1;
			var x01;
			var y01;
			var flattenedPoints0 = new $.ig.PointCollection(0);
			var flattenedPoints01 = new $.ig.PointCollection(0);
			for (var i1 = 0; i1 < indexCount1; i1++) {
				index1 = indexes1.item(i1);
				bucket1 = buckets.__inner[index1];
				x01 = bucket1[0];
				y01 = bucket1[1];
				flattenedPoints0.add({ __x: x01, __y: y01, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				flattenedPoints01.add({ __x: x01, __y: y01, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			var flattenedPoints1 = new $.ig.PointCollection(0);
			var x1;
			var y1;
			for (var i2 = index2Count - 1; i2 >= 0; i2--) {
				index1 = indexes2.item(i2);
				bucket1 = buckets.__inner[index1];
				if (useX0AsX1) {
					x1 = bucket1[0];
					y1 = bucket1[2];
				} else {
					x1 = bucket1[2];
					y1 = bucket1[3];
				}
				flattenedPoints1.add({ __x: x1, __y: y1, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				flattenedPoints01.add({ __x: x1, __y: y1, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
			if (clipper != null) {
				this.clipPoints1(polygonPoints0, flattenedPoints0, clipper, resolution, true);
				this.clipPoints1(polylinePoints0, flattenedPoints0, clipper, resolution, false);
				this.clipPoints1(polylinePoints1, flattenedPoints1, clipper, resolution, false);
				this.clipPoints1(polygonPoints01, flattenedPoints01, clipper, resolution, true);
			} else {
				this.populatePointCollectionFrom(polygonPoints0, flattenedPoints0);
				this.populatePointCollectionFrom(polylinePoints0, flattenedPoints0);
				this.populatePointCollectionFrom(polylinePoints1, flattenedPoints1);
				this.populatePointCollectionFrom(polygonPoints01, flattenedPoints01);
			}
		}
	}
	,
	populatePointCollectionFrom: function (target, source) {
		var en = source.getEnumerator();
		while (en.moveNext()) {
			var pp = en.current();
			target.add(pp);
		}
	}
	,
	$type: new $.ig.Type('CategoryLineRasterizer', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ISupportsMarkers', 'Object', {
	$type: new $.ig.Type('ISupportsMarkers', null)
}, true);

$.ig.util.defType('DefaultSupportsMarkers', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	shouldDisplayMarkers: function () {
		return false;
	}
	,
	updateMarkerCount: function (markerCount) {
	}
	,
	updateMarkerTemplate: function (markerCount, itemIndex, markerBucket) {
	}
	,
	$type: new $.ig.Type('DefaultSupportsMarkers', $.ig.Object.prototype.$type, [$.ig.ISupportsMarkers.prototype.$type])
}, true);

$.ig.util.defType('DefaultProvidesViewport', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getViewInfo: function (viewportRect, windowRect) {
		viewportRect = $.ig.Rect.prototype.empty();
		windowRect = $.ig.Rect.prototype.empty();
		return {
			p0: viewportRect,
			p1: windowRect
		};
	}
	,
	getEffectiveViewport: function () {
		return $.ig.Rect.prototype.empty();
	}
	,
	$type: new $.ig.Type('DefaultProvidesViewport', $.ig.Object.prototype.$type, [$.ig.IProvidesViewport.prototype.$type])
}, true);

$.ig.util.defType('DefaultSupportsErrorBars', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	xAxis: function () {
		return null;
	}
	,
	yAxis: function () {
		return null;
	}
	,
	$type: new $.ig.Type('DefaultSupportsErrorBars', $.ig.Object.prototype.$type, [$.ig.ISupportsErrorBars.prototype.$type])
}, true);

$.ig.util.defType('HorizontalAnchoredCategorySeries', 'AnchoredCategorySeries', {
	init: function () {
		$.ig.AnchoredCategorySeries.prototype.init.call(this);
	},
	xAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.HorizontalAnchoredCategorySeries.prototype.xAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.HorizontalAnchoredCategorySeries.prototype.xAxisProperty);
		}
	}
	,
	yAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.HorizontalAnchoredCategorySeries.prototype.yAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.HorizontalAnchoredCategorySeries.prototype.yAxisProperty);
		}
	}
	,
	getResolvedHitTestMode: function () {
		if (this.hitTestMode() == $.ig.SeriesHitTestMode.prototype.auto) {
			return $.ig.SeriesHitTestMode.prototype.computational;
		} else {
			return $.ig.AnchoredCategorySeries.prototype.getResolvedHitTestMode.call(this);
		}
	}
	,
	getCategoryAxis: function () {
		return this.cachedXAxis();
	}
	,
	getValueAxis: function () {
		return this.cachedYAxis();
	}
	,
	getSeriesValueMarkerBoundingBox: function (world) {
		if (!this.hasMarkers() || !this.shouldDisplayMarkers()) {
			return $.ig.Rect.prototype.empty();
		}
		var markers = this._currentFrame._markers;
		var pos = this.fromWorldPosition(world);
		var index = -1;
		var categoryAxis = this.getCategoryAxis();
		var isInverted = categoryAxis.isInverted();
		var maxPosition = this.viewport().right() * 2;
		if (isInverted) {
			index = $.ig.ArrayUtil.prototype.binarySearch$11($.ig.Point.prototype.$type, markers, function (item) {
				return (maxPosition - pos.__x) < (maxPosition - item.__x) ? -1 : ((maxPosition - pos.__x) > (maxPosition - item.__x) ? 1 : 0);
			});
		} else {
			index = $.ig.ArrayUtil.prototype.binarySearch$11($.ig.Point.prototype.$type, markers, function (item) {
				return pos.__x < item.__x ? -1 : (pos.__x > item.__x ? 1 : 0);
			});
		}
		if (index < 0) {
			index = ~index;
		}
		if (index < 0) {
			index = 0;
		}
		if (index > markers.count() - 1) {
			index = markers.count() - 1;
		}
		var prevIndex = index;
		var nextIndex = index;
		if (prevIndex > 0) {
			prevIndex--;
		}
		if (nextIndex < markers.count() - 1) {
			nextIndex++;
		}
		var prevX = markers.__inner[prevIndex].__x;
		var currX = markers.__inner[index].__x;
		var nextX = markers.__inner[nextIndex].__x;
		var distPrev = Math.abs(prevX - pos.__x);
		var distCurr = Math.abs(currX - pos.__x);
		var distNext = Math.abs(nextX - pos.__x);
		var prevBox = this.getMarkerBoundingBox(prevIndex);
		var currBox = this.getMarkerBoundingBox(index);
		var nextBox = this.getMarkerBoundingBox(nextIndex);
		var prevContains = prevBox.containsPoint(pos);
		var currContains = currBox.containsPoint(pos);
		var nextContains = nextBox.containsPoint(pos);
		if (distCurr <= distPrev && distCurr <= distNext) {
			if (!isInverted && nextContains) {
				return nextBox;
			}
			if (isInverted && prevContains) {
				return prevBox;
			}
			return currBox;
		}
		if (distPrev <= distCurr && distPrev <= distNext) {
			if (!isInverted && currContains) {
				return currBox;
			}
			return this.getMarkerBoundingBox(prevIndex);
		}
		if (distNext <= distCurr && distNext <= distPrev) {
			if (isInverted && currContains) {
				return currBox;
			}
			return this.getMarkerBoundingBox(nextIndex);
		}
		return $.ig.Rect.prototype.empty();
	}
	,
	getMarkerBoundingBox: function (index) {
		return this.anchoredView().getMarkerBoundingBox(index);
	}
	,
	testAreaOver: function (position, snapPosition, isFinger) {
		if ($.ig.util.isNaN(snapPosition.__x) || $.ig.util.isNaN(snapPosition.__y)) {
			return false;
		}
		var valueAxis = this.getValueAxis();
		var referencePosition = 0;
		if (valueAxis != null) {
			referencePosition = valueAxis.scaleValue(valueAxis.referenceValue());
		}
		if ((position.__y >= referencePosition && position.__y <= snapPosition.__y) || (position.__y <= referencePosition && position.__y >= snapPosition.__y)) {
			return true;
		}
		return false;
	}
	,
	getHighStrokeSegments: function (position) {
		var matching = this.getMatchingBuckets(this.getCategoryAxis(), this._currentFrame._buckets, this.getBucketSize(this.view()), this.getFirstBucket(this.view()), this.toWorldPosition(position), true);
		if (matching == null) {
			return null;
		}
		var prevBucketValue = matching[0];
		var nextBucketValue = matching[1];
		var ret = new Array(1);
		var seg = new Array(2);
		seg[0] = { __x: prevBucketValue[0], __y: prevBucketValue[2], $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		seg[1] = { __x: nextBucketValue[0], __y: nextBucketValue[2], $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		ret[0] = seg;
		return ret;
	}
	,
	getLowStrokeSegments: function (position) {
		var matching = this.getMatchingBuckets(this.getCategoryAxis(), this._currentFrame._buckets, this.getBucketSize(this.view()), this.getFirstBucket(this.view()), this.toWorldPosition(position), true);
		if (matching == null) {
			return null;
		}
		var prevBucketValue = matching[0];
		var nextBucketValue = matching[1];
		var ret = new Array(1);
		var seg = new Array(2);
		seg[0] = { __x: prevBucketValue[0], __y: prevBucketValue[1], $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		seg[1] = { __x: nextBucketValue[0], __y: nextBucketValue[1], $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		ret[0] = seg;
		return ret;
	}
	,
	testHit: function (position, isFinger) {
		if (this.testHighLowStrokeOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	getOffsetValue: function () {
		return this.framePreparer().getOffset(this.getCategoryAxis(), this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	getCategoryWidth: function () {
		var effectiveViewport = this.getEffectiveViewport1(this.view());
		return this.getCategoryAxis().getCategorySize(this.view().windowRect(), this.view().viewport(), effectiveViewport);
	}
	,
	getSeriesValue: function (world, useInterpolation, skipUnknowns) {
		if (this.seriesViewer() == null) {
			return NaN;
		}
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var categoryAxis = this.getCategoryAxis();
		var xParams = new $.ig.ScalerParams(0, this.seriesViewer().actualWindowRect(), this.view().viewport(), categoryAxis.isInverted(), effectiveViewportRect);
		var offset = this.framePreparer().getOffset(categoryAxis, this.seriesViewer().actualWindowRect(), this.view().viewport(), effectiveViewportRect);
		return this.getSeriesValueHelper(this.valueColumn(), world, categoryAxis, xParams, offset, this.getExactUnsortedItemIndex.runOn(this), useInterpolation, skipUnknowns);
	}
	,
	getPreviousOrExactIndex: function (world, skipUnknowns) {
		return this.getPreviousOrExactIndexHelper(world, skipUnknowns, this.getCategoryAxis(), this.getExactUnsortedItemIndex.runOn(this), this.valueColumn());
	}
	,
	getNextOrExactIndex: function (world, skipUnknowns) {
		return this.getNextOrExactIndexHelper(world, skipUnknowns, this.getCategoryAxis(), this.getExactUnsortedItemIndex.runOn(this), this.valueColumn());
	}
	,
	getDistanceToIndex: function (world, index, axis, p, offset) {
		if (this.valueColumn() == null) {
			return Number.POSITIVE_INFINITY;
		}
		return this.getDistanceToIndexHelper(world, index, this.getCategoryAxis(), p, offset, this.valueColumn().count(), this.getExactUnsortedItemIndex.runOn(this));
	}
	,
	getSeriesValuePosition: function (world, useInterpolation, skipUnknowns) {
		return this.getSeriesValuePositionHelper(world, useInterpolation, skipUnknowns, this.framePreparer().getOffset(this.getCategoryAxis(), this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view())), this.getValueAxis(), this.getCategoryAxis(), null, null, null);
	}
	,
	getXAxis: function () {
		return this.cachedXAxis();
	}
	,
	getYAxis: function () {
		return this.cachedYAxis();
	}
	,
	setXAxis: function (xAxis) {
		this.xAxis($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, xAxis));
	}
	,
	setYAxis: function (yAxis) {
		this.yAxis($.ig.util.cast($.ig.NumericYAxis.prototype.$type, yAxis));
	}
	,
	updateNumericAxisRange: function () {
		return this.cachedYAxis() != null && this.cachedYAxis().updateRange();
	}
	,
	_cachedXAxis: null,
	cachedXAxis: function (value) {
		if (arguments.length === 1) {
			this._cachedXAxis = value;
			return value;
		} else {
			return this._cachedXAxis;
		}
	}
	,
	_cachedYAxis: null,
	cachedYAxis: function (value) {
		if (arguments.length === 1) {
			this._cachedYAxis = value;
			return value;
		} else {
			return this._cachedYAxis;
		}
	}
	,
	cacheXAxis: function (xAxis) {
		this.cachedXAxis(xAxis);
	}
	,
	cacheYAxis: function (yAxis) {
		this.cachedYAxis(yAxis);
	}
	,
	getCategoryItems: function (orderedStartIndex, orderedEndIndex) {
		return this.getCategoryItemsHelper(orderedStartIndex, orderedEndIndex, this.cachedXAxis());
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.HorizontalAnchoredCategorySeries.prototype.xAxisPropertyName:
				this.cacheXAxis(this.xAxis());
				this.anchoredView().trendLineManager($.ig.CategoryTrendLineManagerBase.prototype.selectManager(this.anchoredView().trendLineManager(), this.cachedXAxis(), this.rootCanvas(), this));
				break;
		}
		$.ig.AnchoredCategorySeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.HorizontalAnchoredCategorySeries.prototype.xAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.cacheXAxis(this.xAxis());
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
			case $.ig.HorizontalAnchoredCategorySeries.prototype.yAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.cacheYAxis(this.yAxis());
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.updateNumericAxisRange();
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
		}
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		$.ig.AnchoredCategorySeries.prototype.dataUpdatedOverride.call(this, action, position, count, propertyName);
		if (this.cachedXAxis() != null && $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.cachedXAxis()) !== null) {
			(this.cachedXAxis()).notifyDataChanged();
		}
		switch (action) {
			case $.ig.FastItemsSourceEventAction.prototype.reset:
				if (this.cachedXAxis() != null) {
					this.cachedXAxis().updateRange();
				}
				if (this.cachedYAxis() != null && !this.cachedYAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.insert:
				if (this.cachedXAxis() != null) {
					this.cachedXAxis().updateRange();
				}
				if (this.cachedYAxis() != null && !this.cachedYAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.remove:
				if (this.cachedXAxis() != null) {
					this.cachedXAxis().updateRange();
				}
				if (this.cachedYAxis() != null && !this.cachedYAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.replace:
				if (this.cachedValueMemberPath() != null && this.anchoredView().bucketCalculator()._bucketSize > 0 && this.cachedYAxis() != null && !this.cachedYAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.change:
				if (propertyName == this.cachedValueMemberPath()) {
					if (this.cachedXAxis() != null) {
						this.cachedXAxis().updateRange();
					}
					if (this.cachedYAxis() != null && !this.cachedYAxis().updateRange()) {
						this.renderSeries(true);
					}
				}
				break;
		}
	}
	,
	canUseAsXAxis: function (axis) {
		if ($.ig.util.cast($.ig.CategoryXAxis.prototype.$type, axis) !== null || $.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	canUseAsYAxis: function (axis) {
		if ($.ig.util.cast($.ig.NumericYAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	$type: new $.ig.Type('HorizontalAnchoredCategorySeries', $.ig.AnchoredCategorySeries.prototype.$type)
}, true);

$.ig.util.defType('AssigningCategoryStyleEventArgsBase', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_startIndex: 0,
	startIndex: function (value) {
		if (arguments.length === 1) {
			this._startIndex = value;
			return value;
		} else {
			return this._startIndex;
		}
	}
	,
	_endIndex: 0,
	endIndex: function (value) {
		if (arguments.length === 1) {
			this._endIndex = value;
			return value;
		} else {
			return this._endIndex;
		}
	}
	,
	_startDate: new Date(),
	startDate: function (value) {
		if (arguments.length === 1) {
			this._startDate = value;
			return value;
		} else {
			return this._startDate;
		}
	}
	,
	_endDate: new Date(),
	endDate: function (value) {
		if (arguments.length === 1) {
			this._endDate = value;
			return value;
		} else {
			return this._endDate;
		}
	}
	,
	_getItems: null,
	getItems: function (value) {
		if (arguments.length === 1) {
			this._getItems = value;
			return value;
		} else {
			return this._getItems;
		}
	}
	,
	_fill: null,
	fill: function (value) {
		if (arguments.length === 1) {
			this._fill = value;
			return value;
		} else {
			return this._fill;
		}
	}
	,
	_stroke: null,
	stroke: function (value) {
		if (arguments.length === 1) {
			this._stroke = value;
			return value;
		} else {
			return this._stroke;
		}
	}
	,
	_opacity: 0,
	opacity: function (value) {
		if (arguments.length === 1) {
			this._opacity = value;
			return value;
		} else {
			return this._opacity;
		}
	}
	,
	_highlightingInfo: null,
	highlightingInfo: function (value) {
		if (arguments.length === 1) {
			this._highlightingInfo = value;
			return value;
		} else {
			return this._highlightingInfo;
		}
	}
	,
	_maxAllSeriesHighlightingProgress: 0,
	maxAllSeriesHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._maxAllSeriesHighlightingProgress = value;
			return value;
		} else {
			return this._maxAllSeriesHighlightingProgress;
		}
	}
	,
	_sumAllSeriesHighlightingProgress: 0,
	sumAllSeriesHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._sumAllSeriesHighlightingProgress = value;
			return value;
		} else {
			return this._sumAllSeriesHighlightingProgress;
		}
	}
	,
	_highlightingHandled: false,
	highlightingHandled: function (value) {
		if (arguments.length === 1) {
			this._highlightingHandled = value;
			return value;
		} else {
			return this._highlightingHandled;
		}
	}
	,
	_hasDateRange: false,
	hasDateRange: function (value) {
		if (arguments.length === 1) {
			this._hasDateRange = value;
			return value;
		} else {
			return this._hasDateRange;
		}
	}
	,
	_isNegativeShape: false,
	isNegativeShape: function (value) {
		if (arguments.length === 1) {
			this._isNegativeShape = value;
			return value;
		} else {
			return this._isNegativeShape;
		}
	}
	,
	_isThumbnail: false,
	isThumbnail: function (value) {
		if (arguments.length === 1) {
			this._isThumbnail = value;
			return value;
		} else {
			return this._isThumbnail;
		}
	}
	,
	$type: new $.ig.Type('AssigningCategoryStyleEventArgsBase', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AssigningCategoryStyleEventArgs', 'AssigningCategoryStyleEventArgsBase', {
	init: function () {
		$.ig.AssigningCategoryStyleEventArgsBase.prototype.init.call(this);
	},
	_strokeThickness: 0,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this._strokeThickness = value;
			return value;
		} else {
			return this._strokeThickness;
		}
	}
	,
	_strokeDashArray: null,
	strokeDashArray: function (value) {
		if (arguments.length === 1) {
			this._strokeDashArray = value;
			return value;
		} else {
			return this._strokeDashArray;
		}
	}
	,
	_strokeDashCap: 0,
	strokeDashCap: function (value) {
		if (arguments.length === 1) {
			this._strokeDashCap = value;
			return value;
		} else {
			return this._strokeDashCap;
		}
	}
	,
	_radiusX: 0,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this._radiusX = value;
			return value;
		} else {
			return this._radiusX;
		}
	}
	,
	_radiusY: 0,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this._radiusY = value;
			return value;
		} else {
			return this._radiusY;
		}
	}
	,
	$type: new $.ig.Type('AssigningCategoryStyleEventArgs', $.ig.AssigningCategoryStyleEventArgsBase.prototype.$type)
}, true);

$.ig.util.defType('AssigningCategoryMarkerStyleEventArgs', 'AssigningCategoryStyleEventArgsBase', {
	init: function () {
		$.ig.AssigningCategoryStyleEventArgsBase.prototype.init.call(this);
	},
	$type: new $.ig.Type('AssigningCategoryMarkerStyleEventArgs', $.ig.AssigningCategoryStyleEventArgsBase.prototype.$type)
}, true);

$.ig.util.defType('LabelClickEventArgs', 'EventArgs', {
	init: function (slice, originalEvent) {
		this.__allowSliceClick = true;
		$.ig.EventArgs.prototype.init.call(this);
		this.slice(slice);
	},
	_slice: null,
	slice: function (value) {
		if (arguments.length === 1) {
			this._slice = value;
			return value;
		} else {
			return this._slice;
		}
	}
	,
	item: function () {
		if (this.slice() != null) {
			return this.slice().dataContext();
		} else {
			return null;
		}
	}
	,
	allowSliceClick: function (value) {
		if (arguments.length === 1) {
			this.__allowSliceClick = value;
			return value;
		} else {
			return this.__allowSliceClick;
		}
	}
	,
	__allowSliceClick: false,
	$type: new $.ig.Type('LabelClickEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('SeriesViewer', 'Control', {
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	staticInit: function () {
		$.ig.SeriesViewer.prototype.standardRect = new $.ig.Rect(0, 0, 0, 1, 1);
	},
	init: function () {
		var $self = this;
		this._series = new $.ig.SeriesCollection();
		this.__viewport = $.ig.Rect.prototype.empty();
		this.__effectiveViewport = $.ig.Rect.prototype.empty();
		this.__contentViewportDirty = true;
		this.__actualZoomTileCacheSize = $.ig.SeriesViewer.prototype.defaultZoomCacheSize;
		this.__componentsForView = new $.ig.SeriesViewerComponentsForView();
		this.__contentHitTestMode = $.ig.ChartHitTestMode.prototype.auto;
		this.__actualContentHitTestMode = $.ig.ChartHitTestMode.prototype.computational;
		this.__interactionHide = false;
		this._state = $.ig.InteractionState.prototype.none;
		this.__pinching = false;
		this.__crossHairActivated = false;
		this.__tileManager = null;
		this.__ignoreContactUp = false;
		this.__suppressCrosshairChange = false;
		this.__windowEventDepth = 0;
		this.__useOPD = false;
		this._previewRect = $.ig.Rect.prototype.empty();
		this.__titleTextColor = null;
		this.__subtitleTextColor = null;
		this.__titleTopMargin = NaN;
		this.__titleLeftMargin = NaN;
		this.__titleRightMargin = NaN;
		this.__titleBottomMargin = NaN;
		this.__subtitleTopMargin = NaN;
		this.__subtitleLeftMargin = NaN;
		this.__subtitleRightMargin = NaN;
		this.__subtitleBottomMargin = NaN;
		this.__surfaceUsage = $.ig.ViewerSurfaceUsage.prototype.normal;
		this.__mobileMode = false;
		this.__actualMobileMode = false;
		this.__widgetLevelSource = null;
		this.__specificSources = new $.ig.Dictionary$2(String, $.ig.Object.prototype.$type, 0);
		this.__topMargin = NaN;
		this.__leftMargin = NaN;
		this.__rightMargin = NaN;
		this.__bottomMargin = NaN;
		this.__autoMarginWidth = 20;
		this.__autoMarginHeight = NaN;
		this.__pixelScalingRatio = NaN;
		this.__actualPixelScalingRatio = 1;
		this.__actualWindowPositionHorizontal = 0;
		this.__actualWindowPositionVertical = 0;
		this.__isThumbnailRequired = false;
		this.__uniqueIndex = 0;
		$.ig.Control.prototype.init.call(this);
		this.__actualWindowRect = $.ig.Rect.prototype.empty();
		this._crosshairPoint = { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		this.lastZoomTime($.ig.Date.prototype.now());
		this.isDefaultCrosshairDisabled(false);
		this.isDefaultTooltipDisabled(false);
		this.canvasRenderScheduler(new $.ig.CanvasRenderScheduler());
		this.thumbnailCanvasRenderScheduler(new $.ig.CanvasRenderScheduler());
		this.alternateViewRenderScheduler(new $.ig.CanvasRenderScheduler());
		$.ig.SeriesViewer.prototype.standardRect = new $.ig.Rect(0, 0, 0, 1, 1);
		this.syncSettings((function () {
			var $ret = new $.ig.SyncSettings();
			$ret.synchronizeHorizontally(true);
			$ret.synchronizeVertically(true);
			return $ret;
		}()));
		this.anchor($.ig.Rect.prototype.empty());
		this.dragStartPoint($.ig.Rect.prototype.empty());
		this.view(this.createView());
		this.onViewCreated(this.view());
		this.view().onInit();
		this.updateCrosshairVisibility();
		var $t = this.overviewPlusDetailPane();
		$t.thumbnailSizeChanged = $.ig.Delegate.prototype.combine($t.thumbnailSizeChanged, function (o, e) {
			($self.overviewPlusDetailPane().surfaceViewer()).isDirty(true);
			var en = $self.series().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				series.thumbnailDirty(true);
			}
		});
		this.actualSyncLink(new $.ig.SyncLink());
		this.updateSyncLink(null, this.actualSyncLink());
		this.chartContentManager(new $.ig.ChartContentManager(this));
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		});
		var $t1 = this.series();
		$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, this.series_CollectionChanged.runOn(this));
		var $t2 = this.series();
		$t2.collectionResetting = $.ig.Delegate.prototype.combine($t2.collectionResetting, this.series_CollectionResetting.runOn(this));
		this.highlightingManager(new $.ig.HighlightingManager());
		this.highlightingAnimator(new $.ig.DoubleAnimator(0, 1, this.highlightingTransitionDuration()));
		var $t3 = this.highlightingAnimator();
		$t3.propertyChanged = $.ig.Delegate.prototype.combine($t3.propertyChanged, this.highlightingAnimator_PropertyChanged.runOn(this));
		this.view().createLayout();
		this.invalidateActualWindowRect();
	},
	series: function () {
		return this._series;
	}
	,
	_series: null,
	series_CollectionChanged: function (sender, e) {
		this.cachedEffectiveIsSquare(this.effectiveIsSquare());
		if (e.oldItems() != null) {
			var en = e.oldItems().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				series.syncLink(null);
				series.seriesViewer(null);
				this.removeDataSource(series);
				this.view().removeSeries(series);
			}
		}
		if (e.newItems() != null) {
			var en1 = e.newItems().getEnumerator();
			while (en1.moveNext()) {
				var series1 = en1.current();
				if (!this.view().seriesAttached(series1)) {
					this.updateDataSourceFor(series1);
					this.view().attachSeries(series1);
					series1.syncLink(this.actualSyncLink());
					series1.seriesViewer(this);
					series1.updateSeriesIndexedPropertiesInternal();
				}
			}
		}
		this.notifyThumbnailAppearanceChanged();
		this.onHoverBehaviorOverridesChanged();
	}
	,
	removeDataSource: function (item) {
		if ($.ig.util.cast($.ig.Series.prototype.$type, item) !== null) {
			(item).itemsSource(null);
		} else if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, item) !== null) {
			(item).itemsSource(null);
		}
		this.removeSpecificDataSource((item).name(), true);
	}
	,
	series_CollectionResetting: function (sender, e) {
		this.cachedEffectiveIsSquare(this.effectiveIsSquare());
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.syncLink(null);
			series.seriesViewer(null);
			this.removeDataSource(series);
			this.view().removeSeries(series);
		}
	}
	,
	matchRatio: function (width, height, widthChanging, heightChanging) {
		var viewport = this.viewportRect();
		var viewportWidth = viewport.width();
		var viewportHeight = viewport.height();
		var viewportRatio = viewportWidth / viewportHeight;
		var matchRatio = width / height;
		if ($.ig.util.isNaN(viewportRatio)) {
			return {
				p0: width,
				p1: height
			};
		}
		if ($.ig.util.isNaN(matchRatio) || widthChanging || heightChanging || Math.abs(viewportRatio - matchRatio) > 0.0001) {
			if (widthChanging && heightChanging) {
				if (width > height) {
					height = width / viewportRatio;
				} else {
					width = height * viewportRatio;
				}
			} else if (widthChanging) {
				height = width / viewportRatio;
			} else {
				width = height * viewportRatio;
			}
		}
		if (height > 1) {
			var scale = 1 / height;
			height = 1;
			width = width * scale;
		}
		if (width > 1) {
			var scale1 = 1 / width;
			width = 1;
			height = height * scale1;
		}
		return {
			p0: width,
			p1: height
		};
	}
	,
	effectiveIsSquare: function () {
		return false;
	}
	,
	_highlightingManager: null,
	highlightingManager: function (value) {
		if (arguments.length === 1) {
			this._highlightingManager = value;
			return value;
		} else {
			return this._highlightingManager;
		}
	}
	,
	_highlightingAnimator: null,
	highlightingAnimator: function (value) {
		if (arguments.length === 1) {
			this._highlightingAnimator = value;
			return value;
		} else {
			return this._highlightingAnimator;
		}
	}
	,
	highlightingAnimator_PropertyChanged: function (sender, e) {
		this.updateHighlights(this.highlightingAnimator().transitionProgress());
	}
	,
	updateHighlights: function (transitionProgress) {
		var stillRunning = this.highlightingManager().tick(transitionProgress);
		if (transitionProgress == 1 && stillRunning && this.highlightingAnimator().intervalMilliseconds() > 0) {
			this.highlightingAnimator().start();
		}
		var dirtySeries = this.highlightingManager().dirtySeries();
		for (var i = 0; i < dirtySeries.count(); i++) {
			var series = dirtySeries.__inner[i];
			series.onVisualPropertiesChangedImmediate();
		}
		if (!stillRunning) {
			this.highlightingAnimator().stop();
		}
	}
	,
	hideToolTip: function () {
		this.view().hideTooltip();
	}
	,
	getBrushByIndex: function (index) {
		return null;
	}
	,
	getOutlineByIndex: function (index) {
		return null;
	}
	,
	getMarkerBrushByIndex: function (index) {
		return null;
	}
	,
	getMarkerOutlineByIndex: function (index) {
		return null;
	}
	,
	_chartContentManager: null,
	chartContentManager: function (value) {
		if (arguments.length === 1) {
			this._chartContentManager = value;
			return value;
		} else {
			return this._chartContentManager;
		}
	}
	,
	crosshairPoint: function (value) {
		if (arguments.length === 1) {
			if ($.ig.Point.prototype.l_op_Inequality(this._crosshairPoint, value)) {
				var oldCrosshairPoint = this._crosshairPoint;
				this._crosshairPoint = value;
				this.raisePropertyChanged($.ig.SeriesViewer.prototype.crosshairPointPropertyName, oldCrosshairPoint, this._crosshairPoint);
			}
			return value;
		} else {
			return this._crosshairPoint;
		}
	}
	,
	_crosshairPoint: null,
	isInDragOperation: function () {
		return this.state() == $.ig.InteractionState.prototype.dragZoom || this.state() == $.ig.InteractionState.prototype.dragPan;
	}
	,
	legend: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.legendProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.legendProperty);
		}
	}
	,
	animateSeriesWhenAxisRangeChanges: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesProperty);
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	onLegendSortChanged: function () {
		this.onLegendSortChanged1(this.series());
	}
	,
	onLegendSortChanged1: function (seriesCollection) {
		var en = seriesCollection.getEnumerator();
		while (en.moveNext()) {
			var currSeries = en.current();
			var legend = currSeries.actualLegend();
			if (legend == null) {
				continue;
			}
			var item = currSeries.legendItem();
			if (item == null) {
				continue;
			}
			if (legend.children().contains(item)) {
				legend.children().remove(item);
			}
			if (!legend.children().contains(item) && currSeries.legendItemVisibility() != $.ig.Visibility.prototype.collapsed) {
				legend.addChildInOrder(item, currSeries);
			}
		}
	}
	,
	onSeriesMouseEnter: function (series, item, data) {
		this.raiseSeriesMouseEnter(series, item, $.ig.util.cast($.ig.MouseEventArgs.prototype.$type, data));
	}
	,
	onSeriesMouseMove: function (series, item, data) {
		this.raiseSeriesMouseMove(series, item, $.ig.util.cast($.ig.MouseEventArgs.prototype.$type, data));
	}
	,
	onSeriesMouseLeave: function (series, item, data) {
		this.raiseSeriesMouseLeave(series, item, $.ig.util.cast($.ig.MouseEventArgs.prototype.$type, data));
	}
	,
	onSeriesMouseLeftButtonDown: function (series, item, data) {
		this.raiseSeriesMouseLeftButtonDown(series, item, $.ig.util.cast($.ig.MouseButtonEventArgs.prototype.$type, data));
	}
	,
	onSeriesMouseLeftButtonUp: function (series, item, data) {
		var args = $.ig.util.cast($.ig.MouseButtonEventArgs.prototype.$type, data);
		if (args != null) {
			this.raiseSeriesMouseLeftButtonUp(series, item, $.ig.util.cast($.ig.MouseButtonEventArgs.prototype.$type, data));
		}
	}
	,
	onSeriesMouseRightButtonDown: function (series, item, data) {
	}
	,
	onSeriesMouseRightButtonUp: function (series, item, data) {
	}
	,
	seriesCursorMouseMove: null,
	raiseSeriesCursorMouseMove: function (series, item) {
		if (this.seriesCursorMouseMove != null && this.crosshairsVisible()) {
			this.seriesCursorMouseMove(this, new $.ig.ChartCursorEventArgs(this, series, item));
		}
	}
	,
	seriesMouseLeftButtonDown: null,
	raiseSeriesMouseLeftButtonDown: function (series, item, e) {
		if (this.seriesMouseLeftButtonDown != null) {
			this.seriesMouseLeftButtonDown(this, new $.ig.DataChartMouseButtonEventArgs(this, series, item, e));
		}
	}
	,
	seriesMouseLeftButtonUp: null,
	raiseSeriesMouseLeftButtonUp: function (series, item, e) {
		if (this.seriesMouseLeftButtonUp != null) {
			this.seriesMouseLeftButtonUp(this, new $.ig.DataChartMouseButtonEventArgs(this, series, item, e));
		}
	}
	,
	seriesMouseMove: null,
	raiseSeriesMouseMove: function (series, item, e) {
		if (this.seriesMouseMove != null) {
			this.seriesMouseMove(this, new $.ig.ChartMouseEventArgs(this, series, item, e));
		}
	}
	,
	seriesMouseEnter: null,
	raiseSeriesMouseEnter: function (series, item, e) {
		if (this.seriesMouseEnter != null) {
			this.seriesMouseEnter(this, new $.ig.ChartMouseEventArgs(this, series, item, e));
		}
	}
	,
	seriesMouseLeave: null,
	raiseSeriesMouseLeave: function (series, item, e) {
		if (this.seriesMouseLeave != null) {
			this.seriesMouseLeave(this, new $.ig.ChartMouseEventArgs(this, series, item, e));
		}
	}
	,
	__viewport: null,
	viewportRect: function () {
		return this.__viewport;
	}
	,
	__effectiveViewport: null,
	effectiveViewport: function (value) {
		if (arguments.length === 1) {
			this.__effectiveViewport = value;
			return value;
		} else {
			return this.__effectiveViewport;
		}
	}
	,
	getScaledEffectiveViewport: function (otherViewport, mainViewport, mainEffectiveViewport) {
		var effective = mainEffectiveViewport;
		var viewport = mainViewport;
		var left = (effective.left() - viewport.left()) / viewport.width();
		var top = (effective.top() - viewport.top()) / viewport.height();
		var right = (effective.right() - viewport.left()) / viewport.width();
		var bottom = (effective.bottom() - viewport.top()) / viewport.height();
		left = otherViewport.left() + left * otherViewport.width();
		top = otherViewport.top() + top * otherViewport.height();
		right = otherViewport.left() + right * otherViewport.width();
		bottom = otherViewport.top() + bottom * otherViewport.height();
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	__contentViewportDirty: false,
	__contentViewport: null,
	contentViewport: function () {
		if (this.__contentViewportDirty) {
			this.__contentViewportDirty = false;
			var contentViewport = this.getCurrentContentViewport(this.viewportRect(), this.effectiveViewport(), this.actualWindowRect());
			this.__contentViewport = contentViewport;
		}
		return this.__contentViewport;
	}
	,
	getCurrentContentViewport: function (viewportRect, effectiveViewportRect, windowRect) {
		var effective = effectiveViewportRect;
		var window = windowRect;
		var viewport = viewportRect;
		if (viewport.isEmpty()) {
			return $.ig.Rect.prototype.empty();
		}
		if (effective.isEmpty()) {
			return viewportRect;
		}
		var l = (effective.left() - viewport.left()) / viewport.width();
		var r = (effective.right() - viewport.left()) / viewport.width();
		var t = (effective.top() - viewport.top()) / viewport.height();
		var b = (effective.bottom() - viewport.top()) / viewport.height();
		l = viewport.left() + (l - window.left()) / window.width() * viewport.width();
		r = viewport.left() + (r - window.left()) / window.width() * viewport.width();
		t = viewport.top() + (t - window.top()) / window.height() * viewport.height();
		b = viewport.top() + (b - window.top()) / window.height() * viewport.height();
		var contentViewport = new $.ig.Rect(0, l, t, r - l, b - t);
		contentViewport.intersect(viewport);
		return contentViewport;
	}
	,
	computeEffectiveViewport: function (viewportRect) {
		this.__contentViewportDirty = true;
		return $.ig.Rect.prototype.empty();
	}
	,
	getSafeViewportForInitialZoom: function () {
		return this.viewportRect();
	}
	,
	updateAxisViewport: function (axis) {
		axis.viewportRect(this.viewportRect());
	}
	,
	windowRect: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.windowRectProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.windowRectProperty);
		}
	}
	,
	useTiledZooming: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.useTiledZoomingProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.useTiledZoomingProperty);
		}
	}
	,
	_actualUseTiledZooming: false,
	actualUseTiledZooming: function (value) {
		if (arguments.length === 1) {
			this._actualUseTiledZooming = value;
			return value;
		} else {
			return this._actualUseTiledZooming;
		}
	}
	,
	preferHigherResolutionTiles: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.preferHigherResolutionTilesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.preferHigherResolutionTilesProperty);
		}
	}
	,
	zoomTileCacheSize: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.zoomTileCacheSizeProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.SeriesViewer.prototype.zoomTileCacheSizeProperty));
		}
	}
	,
	__actualZoomTileCacheSize: 0,
	actualZoomTileCacheSize: function (value) {
		if (arguments.length === 1) {
			this.__actualZoomTileCacheSize = value;
			return value;
		} else {
			return this.__actualZoomTileCacheSize;
		}
	}
	,
	_isTileZoomRunning: false,
	isTileZoomRunning: function (value) {
		if (arguments.length === 1) {
			this._isTileZoomRunning = value;
			return value;
		} else {
			return this._isTileZoomRunning;
		}
	}
	,
	highlightingTransitionDuration: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.highlightingTransitionDurationProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.SeriesViewer.prototype.highlightingTransitionDurationProperty));
		}
	}
	,
	processPlotAreaSizeChanged: function (oldGridAreaRect, newGridAreaRect) {
		if (!newGridAreaRect.isEmpty()) {
			this.__viewport = newGridAreaRect;
			this.__effectiveViewport = this.computeEffectiveViewport(this.__viewport);
			this.view().viewportChanged(this.__viewport);
		}
		if (this.effectiveIsSquare()) {
			if (this.actualSyncLink() != null) {
				this.windowNotify(this.actualWindowRect(), false);
			}
		}
		this.onPlotAreaSizeChanged(oldGridAreaRect, newGridAreaRect);
	}
	,
	__componentsForView: null,
	getComponentsForView: function () {
		return this.__componentsForView;
	}
	,
	isPagePanningAllowed: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.isPagePanningAllowedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.isPagePanningAllowedProperty);
		}
	}
	,
	__contentHitTestMode: 0,
	contentHitTestMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__contentHitTestMode;
			this.__contentHitTestMode = value;
			if (oldValue != this.__contentHitTestMode) {
				this.raisePropertyChanged($.ig.SeriesViewer.prototype.contentHitTestModePropertyName, $.ig.ChartHitTestMode.prototype.getBox(oldValue), $.ig.ChartHitTestMode.prototype.getBox(this.__contentHitTestMode));
			}
			return value;
		} else {
			return this.__contentHitTestMode;
		}
	}
	,
	recalculateResolvedHitTestMode: function () {
		this.actualContentHitTestMode(this.getResolvedHitTestMode());
	}
	,
	getResolvedHitTestMode: function () {
		if (this.contentHitTestMode() != $.ig.ChartHitTestMode.prototype.auto) {
			return this.contentHitTestMode();
		}
		var actualHitTestMode = $.ig.ChartHitTestMode.prototype.computational;
		var hasColorEncoded = false;
		var hasComputational = false;
		for (var i = 0; i < this.series().count(); i++) {
			var currSeries = this.series().__inner[i];
			if ($.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, currSeries) !== null) {
				for (var j = 0; j < (currSeries).series().count(); j++) {
					var currFragment = (currSeries).series().__inner[j];
					if (currFragment.visualSeriesLink().actualHitTestMode() == $.ig.SeriesHitTestMode.prototype.colorEncoded) {
						hasColorEncoded = true;
					}
					if (currFragment.visualSeriesLink().actualHitTestMode() == $.ig.SeriesHitTestMode.prototype.computational) {
						hasComputational = true;
					}
				}
			} else {
				if (currSeries.actualHitTestMode() == $.ig.SeriesHitTestMode.prototype.colorEncoded) {
					hasColorEncoded = true;
				}
				if (currSeries.actualHitTestMode() == $.ig.SeriesHitTestMode.prototype.computational) {
					hasComputational = true;
				}
			}
		}
		if (hasComputational) {
			actualHitTestMode = $.ig.ChartHitTestMode.prototype.computational;
		}
		if (hasColorEncoded) {
			actualHitTestMode = $.ig.ChartHitTestMode.prototype.colorEncoded;
		}
		if (hasColorEncoded && hasComputational) {
			actualHitTestMode = $.ig.ChartHitTestMode.prototype.mixed;
		}
		return actualHitTestMode;
	}
	,
	__actualContentHitTestMode: 0,
	actualContentHitTestMode: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualContentHitTestMode;
			this.__actualContentHitTestMode = value;
			if (oldValue != this.__actualContentHitTestMode) {
				this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualContentHitTestModePropertyName, $.ig.ChartHitTestMode.prototype.getBox(oldValue), $.ig.ChartHitTestMode.prototype.getBox(this.__actualContentHitTestMode));
			}
			return value;
		} else {
			return this.__actualContentHitTestMode;
		}
	}
	,
	isSurfaceInteractionDisabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledProperty);
		}
	}
	,
	isZoomingHorizontallyEnabled: function () {
	}
	,
	isZoomingVerticallyEnabled: function () {
	}
	,
	isZoomingEnabled: function () {
		return this.isZoomingHorizontallyEnabled() || this.isZoomingVerticallyEnabled();
	}
	,
	onDetachedFromUI: function () {
		$.ig.SyncManager.prototype.suspendSyncChannel(this);
	}
	,
	onAttachedToUI: function () {
		$.ig.SyncManager.prototype.ensureSyncChannel(this);
	}
	,
	state: function (value) {
		if (arguments.length === 1) {
			if (this.state() != value) {
				this._state = value;
				switch (this._state) {
					case $.ig.InteractionState.prototype.none:
						this.view().setDefaultCursor();
						this.renderCrosshairs();
						this.view().goToIdleState();
						break;
					case $.ig.InteractionState.prototype.dragZoom:
						this.view().setHandCursor();
						this.view().hideTooltip();
						this.renderCrosshairs();
						this.view().goToDraggingVisualState();
						break;
					case $.ig.InteractionState.prototype.dragPan:
						this.view().setHandCursor();
						this.view().hideTooltip();
						this.renderCrosshairs();
						this.view().goToPanningVisualState();
						break;
				}
			}
			return value;
		} else {
			return this._state;
		}
	}
	,
	__interactionHide: false,
	_state: 0,
	_anchor: null,
	anchor: function (value) {
		if (arguments.length === 1) {
			this._anchor = value;
			return value;
		} else {
			return this._anchor;
		}
	}
	,
	_dragState: null,
	dragState: function (value) {
		if (arguments.length === 1) {
			this._dragState = value;
			return value;
		} else {
			return this._dragState;
		}
	}
	,
	onMouseEnter: function (pt) {
		this.crosshairNotify(this.toWorld(pt));
	}
	,
	onMouseLeave: function (pt) {
		this.crosshairNotify({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	}
	,
	onMouseWheel: function (pt, delta) {
		var cx = this.actualWindowRect().left() + this.actualWindowRect().width() * pt.__x / this.viewportRect().width();
		var cy = this.actualWindowRect().top() + this.actualWindowRect().height() * pt.__y / this.viewportRect().height();
		var scale = 1 - $.ig.MathUtil.prototype.clamp(delta, -0.5, 0.5);
		var left = Math.max(0, cx - scale * (cx - this.actualWindowRect().left()));
		var bottom = Math.min(1, cy + scale * (this.actualWindowRect().bottom() - cy));
		var right = Math.min(1, cx + scale * (this.actualWindowRect().right() - cx));
		var top = Math.max(0, cy - scale * (cy - this.actualWindowRect().top()));
		this.startTiledZoomingIfNecessary();
		this.deferEndToTiledZoom(1000);
		this.windowNotify(new $.ig.Rect(0, left, top, right - left, bottom - top), true);
		return this.isZoomingEnabled();
	}
	,
	deferEndToTiledZoom: function (delay) {
		this.view().deferEndToTiledZoom(delay);
	}
	,
	onDoubleTap: function (pt) {
		var cx = this.actualWindowRect().left() + this.actualWindowRect().width() * pt.__x / this.viewportRect().width();
		var cy = this.actualWindowRect().top() + this.actualWindowRect().height() * pt.__y / this.viewportRect().height();
		var scale = 0.7;
		var left = Math.max(0, cx - scale * (cx - this.actualWindowRect().left()));
		var bottom = Math.min(1, cy + scale * (this.actualWindowRect().bottom() - cy));
		var right = Math.min(1, cx + scale * (this.actualWindowRect().right() - cx));
		var top = Math.max(0, cy - scale * (cy - this.actualWindowRect().top()));
		this.windowNotify(new $.ig.Rect(0, left, top, right - left, bottom - top), true);
	}
	,
	_windowRectAtStartOfWindowOperation: null,
	windowRectAtStartOfWindowOperation: function (value) {
		if (arguments.length === 1) {
			this._windowRectAtStartOfWindowOperation = value;
			return value;
		} else {
			return this._windowRectAtStartOfWindowOperation;
		}
	}
	,
	onKeyDown: function (key) {
		if (this.state() == $.ig.InteractionState.prototype.dragPan && key == $.ig.Key.prototype.escape) {
			this.view().cancelMouseInteractions();
			this.state($.ig.InteractionState.prototype.none);
			this.endTiledZoomingIfRunning();
			this.previewNotify($.ig.Rect.prototype.empty(), true);
			if (this.windowResponse() == $.ig.WindowResponse.prototype.immediate) {
				this.windowNotify(this.windowRectAtStartOfWindowOperation(), true);
			}
			return true;
		}
		if (this.state() == $.ig.InteractionState.prototype.dragZoom && key == $.ig.Key.prototype.escape) {
			this.view().cancelMouseInteractions();
			this.state($.ig.InteractionState.prototype.none);
			this.endTiledZoomingIfRunning();
			this.view().hideDragPath();
			this.previewNotify($.ig.Rect.prototype.empty(), true);
			return true;
		}
		var windowRect = $.ig.Rect.prototype.empty();
		var handled = false;
		switch (key) {
			case $.ig.Key.prototype.home:
				handled = true;
				windowRect = new $.ig.Rect(0, 0, 0, 1, 1);
				break;
			case $.ig.Key.prototype.pageDown:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left() - 0.1 * this.actualWindowRect().width(), this.actualWindowRect().top() - 0.1 * this.actualWindowRect().height(), 1.2 * this.actualWindowRect().width(), 1.2 * this.actualWindowRect().height());
				break;
			case $.ig.Key.prototype.pageUp:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left() + 0.1 * this.actualWindowRect().width(), this.actualWindowRect().top() + 0.1 * this.actualWindowRect().height(), 0.8 * this.actualWindowRect().width(), 0.8 * this.actualWindowRect().height());
				break;
			case $.ig.Key.prototype.left:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left() - 0.1 * this.actualWindowRect().width(), this.actualWindowRect().top(), this.actualWindowRect().width(), this.actualWindowRect().height());
				windowRect.x(windowRect.x() - Math.min(windowRect.left(), 0));
				break;
			case $.ig.Key.prototype.right:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left() + 0.1 * this.actualWindowRect().width(), this.actualWindowRect().top(), this.actualWindowRect().width(), this.actualWindowRect().height());
				windowRect.x(windowRect.x() - Math.max(windowRect.right() - 1, 0));
				break;
			case $.ig.Key.prototype.up:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left(), this.actualWindowRect().top() - 0.1 * this.actualWindowRect().height(), this.actualWindowRect().width(), this.actualWindowRect().height());
				windowRect.y(windowRect.y() - Math.min(windowRect.top(), 0));
				break;
			case $.ig.Key.prototype.down:
				handled = true;
				windowRect = new $.ig.Rect(0, this.actualWindowRect().left(), this.actualWindowRect().top() + 0.1 * this.actualWindowRect().height(), this.actualWindowRect().width(), this.actualWindowRect().height());
				windowRect.y(windowRect.y() - Math.max(windowRect.bottom() - 1, 0));
				break;
		}
		if (!windowRect.isEmpty() && $.ig.Rect.prototype.l_op_Inequality(windowRect, this.actualWindowRect())) {
			this.windowNotify(windowRect, true);
		}
		return handled;
	}
	,
	__pinching: false,
	_crosshairsVisible: false,
	crosshairsVisible: function (value) {
		if (arguments.length === 1) {
			this._crosshairsVisible = value;
			return value;
		} else {
			return this._crosshairsVisible;
		}
	}
	,
	__crossHairActivated: false,
	areCrossHairsActivated: function () {
		return this.__crossHairActivated;
	}
	,
	isIsoScaled: function () {
		return this.cachedEffectiveIsSquare() || this.useFixedAspectZoom();
	}
	,
	__lastDistanceRatio: 0,
	onDragDelta: function (point) {
		if (point.__x >= 0 && point.__y >= 0 && point.__x <= this.viewportRect().width() && point.__y <= this.viewportRect().height()) {
			this.showDragTooltip(point);
		} else {
			this.hideDragCrosshairAndTooltip();
		}
	}
	,
	showDragTooltip: function (pt) {
		if (this.isDefaultTooltipDisabled() || this.isDefaultCrosshairDisabled()) {
			return;
		}
		if (this.__crossHairActivated && this.crosshairsVisible()) {
			var isVertical = this.viewportRect().height() > this.viewportRect().width();
			this.view().clearInfoBox(isVertical);
			var en = this.series().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				if (series.isStacked()) {
					var stackedFragments = (series).series();
					var en1 = stackedFragments.getEnumerator();
					while (en1.moveNext()) {
						var fragment = en1.current();
						if (fragment.visibility() == $.ig.Visibility.prototype.visible) {
							fragment.visualSeriesLink().showTooltip(pt, this.view().addToInfoBox.runOn(this.view()));
						}
					}
				} else {
					if (series.__visibility == $.ig.Visibility.prototype.visible) {
						series.showTooltip(pt, this.view().addToInfoBox.runOn(this.view()));
					}
				}
			}
			this.view().showInfoBox();
		}
	}
	,
	dragCrosshairActivated: function () {
		return this.__crossHairActivated;
	}
	,
	_tooltipStyle: null,
	tooltipStyle: function (value) {
		if (arguments.length === 1) {
			this._tooltipStyle = value;
			return value;
		} else {
			return this._tooltipStyle;
		}
	}
	,
	showDragCrosshair: function (pt) {
		if (this.crosshairsVisible() || this.isDragCrosshairEnabled() || this.isAnnotationLayerPresent()) {
			this.__crossHairActivated = true;
			this.anchor(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
			this.dragState(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
			this.state($.ig.InteractionState.prototype.none);
			this.crosshairNotify(this.toWorld(pt));
		}
	}
	,
	onPlotAreaHold: function (pt) {
		this.showDragCrosshair(pt);
		this.showDragTooltip(pt);
		this.renderCrosshairs();
	}
	,
	onDragStarted: function (pt, isFinger) {
		if (!this.__crossHairActivated) {
			this.startWindowOperation(pt, isFinger);
		}
	}
	,
	onDragCompleted: function (point) {
		this.dragStartPoint($.ig.Rect.prototype.empty());
		this.hideDragCrosshairAndTooltip();
	}
	,
	pinching: function () {
		return this.__pinching;
	}
	,
	onZoomStart: function () {
		this.__lastDistanceRatio = 1;
		this.__crossHairActivated = false;
		this.view().hidePreviewPath();
		this.view().hideDragPath();
		this.view().hideInfoBox();
		this.crosshairNotify({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.view().hideHorizontalCrosshair();
		this.view().hideVerticalCrosshair();
		this.view().hideTooltip();
		this.state($.ig.InteractionState.prototype.none);
		this.__ignoreContactUp = true;
		this.__pinching = true;
		this.startTiledZoomingIfNecessary();
	}
	,
	onPinchStarted: function (point) {
		this.onZoomStart();
	}
	,
	__previousZoomPosX: 0,
	__previousZoomPosY: 0,
	__zoomStartWindow: null,
	__currZoomScaleX: 0,
	__currZoomScaleY: 0,
	__currIsoZoomScale: 0,
	onZoomStarted: function (point, deltaScaleX, deltaScaleY, isoDeltaScale) {
		this.__previousZoomPosX = point.__x;
		this.__previousZoomPosY = point.__y;
		this.__currZoomScaleX = deltaScaleX;
		this.__currZoomScaleY = deltaScaleY;
		this.__currIsoZoomScale = isoDeltaScale;
		this.__zoomStartWindow = this.actualWindowRect();
		this.onZoomStart();
	}
	,
	onPinchDelta: function (p) {
		this.view().hideHorizontalCrosshair();
		this.view().hideVerticalCrosshair();
		if (this.view().useDeltaZoom()) {
			this.doDeltaZoom(p);
		} else {
			this.doZoom(p);
			this.__lastDistanceRatio = p;
		}
	}
	,
	onZoomDelta: function (p, deltaScaleX, deltaScaleY, isoDeltaScale) {
		this.view().hideHorizontalCrosshair();
		this.view().hideVerticalCrosshair();
		this.__currZoomScaleX = this.__currZoomScaleX * deltaScaleX;
		this.__currZoomScaleY = this.__currZoomScaleY * deltaScaleY;
		this.__currIsoZoomScale = this.__currIsoZoomScale * isoDeltaScale;
		if (this.isIsoScaled()) {
			this.__currZoomScaleX = this.__currIsoZoomScale;
			this.__currZoomScaleY = this.__currIsoZoomScale;
		}
		var currentWindow = this.actualWindowRect();
		var viewport = this.viewportRect();
		var transX = p.__x - this.__previousZoomPosX;
		var transY = p.__y - this.__previousZoomPosY;
		this.__previousZoomPosX = p.__x;
		this.__previousZoomPosY = p.__y;
		var prevWidth = currentWindow.width();
		var prevHeight = currentWindow.height();
		var newWindowWidth = this.__zoomStartWindow.width() / this.__currZoomScaleX;
		var newWindowHeight = this.__zoomStartWindow.height() / this.__currZoomScaleY;
		if (newWindowWidth > 1) {
			newWindowWidth = 1;
		}
		if (newWindowHeight > 1) {
			newWindowHeight = 1;
		}
		var origin = { __x: p.__x, __y: p.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var originAsWorld = { __x: (origin.__x - viewport.left()) / viewport.width() * currentWindow.width() + currentWindow.left(), __y: (origin.__y - viewport.top()) / viewport.height() * currentWindow.height() + currentWindow.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var newRect = new $.ig.Rect(0, currentWindow.left(), currentWindow.top(), newWindowWidth, newWindowHeight);
		var newOrigin = { __x: (originAsWorld.__x - newRect.left()) / newRect.width() * viewport.width() + viewport.left(), __y: (originAsWorld.__y - newRect.top()) / newRect.height() * viewport.height() + viewport.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var translateX = (newOrigin.__x - origin.__x) - transX;
		var translateY = (newOrigin.__y - origin.__y) - transY;
		var worldTranslateX = translateX / viewport.width() * newRect.width();
		var worldTranslateY = translateY / viewport.height() * newRect.height();
		newRect = new $.ig.Rect(0, newRect.left() + worldTranslateX, newRect.top() + worldTranslateY, newRect.width(), newRect.height());
		currentWindow = newRect;
		this.windowNotify(currentWindow, true);
	}
	,
	onManipulationStarted: function (point) {
		this.anchor(new $.ig.Rect(0, point.__x, point.__y, 0, 0));
		this.dragState(new $.ig.Rect(0, point.__x, point.__y, 0, 0));
	}
	,
	doScale: function (scaleDelta, anchor) {
		var width = this.actualWindowRect().width();
		var height = this.actualWindowRect().height();
		var cx = this.actualWindowRect().left() + width / 2;
		var cy = this.actualWindowRect().top() + height / 2;
		width = width / scaleDelta;
		height = height / scaleDelta;
		var left = cx - width / 2;
		var top = cy - height / 2;
		this.windowNotify(new $.ig.Rect(0, left, top, width, height), true);
	}
	,
	onPinchCompleted: function (p) {
		if (this.view().useDeltaZoom()) {
			this.doDeltaZoom(p);
		} else {
			this.doZoom(p);
		}
		this.anchor($.ig.Rect.prototype.empty());
		this.__pinching = false;
	}
	,
	onGestureCompleted: function (pt) {
		this.__pinching = false;
		this.anchor($.ig.Rect.prototype.empty());
		this.hideDragCrosshairAndTooltip();
	}
	,
	onZoomCompleted: function (pt, scaleDeltaX, scaleDeltaY, isoScaleDelta) {
		this.__pinching = false;
		this.anchor($.ig.Rect.prototype.empty());
		this.hideDragCrosshairAndTooltip();
	}
	,
	onInfoBoxSizeChanged: function (size) {
		this.view().updateInfoBoxYTranslation(size.height());
	}
	,
	hideDragCrosshairAndTooltip: function () {
		if (this.__crossHairActivated) {
			this.crosshairNotify({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			this.view().hideInfoBox();
		}
		this.__crossHairActivated = false;
	}
	,
	doDeltaZoom: function (deltaZoom) {
		var f = 1 / deltaZoom;
		var wRectCenter = { __x: this.windowRect().x() + this.windowRect().width() / 2, __y: this.windowRect().y() + this.windowRect().height() / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var wRectOrigin = { __x: this.windowRect().x() - wRectCenter.__x, __y: this.windowRect().y() - wRectCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var scaledWindowRect = new $.ig.Rect(0, wRectOrigin.__x * f + wRectCenter.__x, wRectOrigin.__y * f + wRectCenter.__y, this.windowRect().width() * f, this.windowRect().height() * f);
		this.windowNotify(scaledWindowRect, true);
	}
	,
	doZoom: function (distanceRatio) {
		var distanceRatioDiff = distanceRatio - this.__lastDistanceRatio;
		if (distanceRatioDiff != 0) {
			var p = 0.03;
			var f = distanceRatioDiff < 0 ? 1 + p : 1 - p;
			var wRectCenter = { __x: this.windowRect().x() + this.windowRect().width() / 2, __y: this.windowRect().y() + this.windowRect().height() / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var wRectOrigin = { __x: this.windowRect().x() - wRectCenter.__x, __y: this.windowRect().y() - wRectCenter.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var scaledWindowRect = new $.ig.Rect(0, wRectOrigin.__x * f + wRectCenter.__x, wRectOrigin.__y * f + wRectCenter.__y, this.windowRect().width() * f, this.windowRect().height() * f);
			this.windowNotify(scaledWindowRect, true);
		}
	}
	,
	onZoomChanged: function (rc) {
		this.previewNotify($.ig.Rect.prototype.empty(), true);
		this.windowNotify(rc, true);
	}
	,
	onContactStarted: function (pt, isFinger) {
		if (!this.__pinching) {
			this.__ignoreContactUp = false;
		}
		this.startWindowOperation(pt, isFinger);
	}
	,
	resolveDefaultInteraction: function (isFinger) {
		if (this.defaultInteraction() != $.ig.InteractionState.prototype.auto) {
			return this.defaultInteraction();
		}
		return this.view().resolveDefaultInteraction(isFinger);
	}
	,
	startWindowOperation: function (pt, isFinger) {
		var newState;
		var defaultInteraction = this.resolveDefaultInteraction(isFinger);
		if (this.view().currentModifiers() == $.ig.ModifierKeys.prototype.none) {
			switch (defaultInteraction) {
				case $.ig.InteractionState.prototype.dragZoom:
					newState = this.isZoomingEnabled() ? defaultInteraction : $.ig.InteractionState.prototype.none;
					break;
				default:
					newState = defaultInteraction;
					break;
			}
		} else {
			if (this.view().currentModifiers() == this.dragModifier()) {
				newState = $.ig.InteractionState.prototype.dragZoom;
			} else if (this.view().currentModifiers() == this.panModifier()) {
				newState = $.ig.InteractionState.prototype.dragPan;
			} else {
				newState = $.ig.InteractionState.prototype.none;
			}
		}
		switch (newState) {
			case $.ig.InteractionState.prototype.dragZoom:
			case $.ig.InteractionState.prototype.dragPan:
				this.view().focusChart();
				this.view().plotAreaCaptureMouse();
				break;
		}
		this.state(newState);
		switch (this.state()) {
			case $.ig.InteractionState.prototype.dragZoom:
				this.crosshairNotify({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				this.anchor(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
				this.dragState(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
				this.dragStartPoint(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
				this.view().showDragPath();
				this.view().updateDragPath(this.anchor());
				this.previewNotify($.ig.Rect.prototype.empty(), true);
				break;
			case $.ig.InteractionState.prototype.dragPan:
				this.anchor(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
				this.dragStartPoint(new $.ig.Rect(0, pt.__x, pt.__y, 0, 0));
				this.startTiledZoomingIfNecessary();
				break;
		}
		this.windowRectAtStartOfWindowOperation(this.actualWindowRect());
	}
	,
	startTiledZoomingIfNecessary: function () {
		if (this.actualUseTiledZooming() && !this.isTileZoomRunning()) {
			this.isTileZoomRunning(true);
			this.startTileZoom();
		}
	}
	,
	endTiledZoomingIfRunning: function () {
		if (this.isTileZoomRunning()) {
			this.endTileZoom();
			this.isTileZoomRunning(false);
		}
	}
	,
	clearTileZoomCacheDueToVisualsChange: function () {
		this.clearTileZoomCache();
	}
	,
	clearTileZoomCache: function () {
		if (this.__tileManager == null) {
			return;
		}
		this.tileManager().clearTileCache();
	}
	,
	tileManager: function () {
		return this.__tileManager;
	}
	,
	__tileManager: null,
	startTileZoom: function () {
		if (this.__tileManager == null) {
			this.__tileManager = new $.ig.TileZoomManager(this, true, this.actualZoomTileCacheSize());
			this.__tileManager.roundDown(!this.preferHigherResolutionTiles());
		}
		this.ignoreWindowChanges(true);
		this.prepareAxesForTiledZoom();
		this.__tileManager.start();
		this.view().cancelDeferredCacheClear();
		this.view().cancelEndToTiledZoom();
	}
	,
	prepareAxesForTiledZoom: function () {
	}
	,
	endTileZoom: function () {
		if (this.__tileManager == null) {
			return;
		}
		this.ignoreWindowChanges(false);
		this.view().onTileZoomEnding();
		this.__tileManager.end();
		this.refreshAllContentAfterTiledZoom();
		this.view().deferCacheClear();
	}
	,
	deferredClearOfTileZoomCache: function () {
		this.clearTileZoomCache();
		this.releaseAxesFromTiledZoom();
	}
	,
	releaseAxesFromTiledZoom: function () {
	}
	,
	refreshAllContentAfterTiledZoom: function () {
		for (var i = 0; i < this.series().count(); i++) {
			this.series().__inner[i].renderSeries(false);
		}
		this.flushInternal(false, false);
	}
	,
	_dragStartPoint: null,
	dragStartPoint: function (value) {
		if (arguments.length === 1) {
			this._dragStartPoint = value;
			return value;
		} else {
			return this._dragStartPoint;
		}
	}
	,
	shouldAllowPan: function () {
		return this.state() == $.ig.InteractionState.prototype.dragPan;
	}
	,
	shouldImmediatePan: function (isFinger) {
		return this.windowResponse() == $.ig.WindowResponse.prototype.immediate || isFinger || this.actualUseTiledZooming();
	}
	,
	shouldAllowDragZoom: function () {
		return this.state() == $.ig.InteractionState.prototype.dragZoom;
	}
	,
	onContactMoved: function (pt, isFinger) {
		if (this.anchor().isEmpty() && isFinger) {
			this.startWindowOperation(pt, isFinger);
		}
		var distance = $.ig.SeriesViewer.prototype.dRAG_DISTANCE_NEAR;
		if (isFinger) {
			distance = $.ig.SeriesViewer.prototype.dRAG_DISTANCE;
		}
		var farFromAnchor = false;
		var rect = new $.ig.Rect(2, { __x: this.anchor().x(), __y: this.anchor().y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, pt);
		var dist = new $.ig.Rect(0, 0, 0, 0, 0);
		if (!this.dragStartPoint().isEmpty()) {
			dist = new $.ig.Rect(2, { __x: this.dragStartPoint().x(), __y: this.dragStartPoint().y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, pt);
		}
		if (dist.width() > distance && dist.height() > distance) {
			farFromAnchor = true;
		}
		if (!this.__pinching) {
			if (farFromAnchor) {
				this.__ignoreContactUp = false;
			}
		}
		if (!this.__pinching && (this.__crossHairActivated || !isFinger)) {
			this.crosshairNotify(this.toWorld(pt));
		}
		if (this.shouldAllowDragZoom()) {
			if (farFromAnchor) {
				var rc = this.toWorld1(rect);
				this.previewNotify(rc, true);
			} else {
				this.previewNotify($.ig.Rect.prototype.empty(), true);
			}
			this.view().updateDragPath(rect);
		}
		if (this.shouldAllowPan()) {
			var gridAreaRect = this.viewportRect();
			var left = this.actualWindowRect().left() + this.actualWindowRect().width() * (this.anchor().x() - pt.__x) / gridAreaRect.width();
			var top = this.actualWindowRect().top() + this.actualWindowRect().height() * (this.anchor().y() - pt.__y) / gridAreaRect.height();
			var rc1 = new $.ig.Rect(0, left, top, this.actualWindowRect().width(), this.actualWindowRect().height());
			if (this.shouldImmediatePan(isFinger)) {
				this.startTiledZoomingIfNecessary();
				this.previewNotify($.ig.Rect.prototype.empty(), true);
				this.windowNotify(rc1, true);
				this.anchor(new $.ig.Rect(3, pt, new $.ig.Size(1, 0, 0)));
				this.dragState(new $.ig.Rect(3, pt, new $.ig.Size(1, 0, 0)));
			} else {
				this.previewNotify(rc1, true);
			}
		}
		this.dragState(new $.ig.Rect(3, pt, new $.ig.Size(1, 0, 0)));
		this.view().checkInteractionCompleted(pt);
	}
	,
	__ignoreContactUp: false,
	__suppressCrosshairChange: false,
	onContactCompleted: function (pt, isFinger) {
		var distance = $.ig.SeriesViewer.prototype.dRAG_DISTANCE_NEAR;
		if (isFinger) {
			distance = $.ig.SeriesViewer.prototype.dRAG_DISTANCE;
		}
		if (!this.__ignoreContactUp) {
			var farFromAnchor = false;
			var rect = new $.ig.Rect(2, { __x: this.anchor().x(), __y: this.anchor().y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, pt);
			if (rect.width() > distance && rect.height() > distance) {
				farFromAnchor = true;
			}
			if (this.state() == $.ig.InteractionState.prototype.dragZoom) {
				this.view().hideDragPath();
				if (farFromAnchor) {
					this.windowNotify(this.toWorld1(rect), true);
				}
			}
			if (this.state() == $.ig.InteractionState.prototype.dragPan) {
				var gridAreaRect = this.viewportRect();
				var left = this.actualWindowRect().left() + this.actualWindowRect().width() * (this.anchor().x() - pt.__x) / gridAreaRect.width();
				var top = this.actualWindowRect().top() + this.actualWindowRect().height() * (this.anchor().y() - pt.__y) / gridAreaRect.height();
				this.windowNotify(new $.ig.Rect(0, left, top, this.actualWindowRect().width(), this.actualWindowRect().height()), true);
			}
		}
		var farDrag = false;
		var dragRect = new $.ig.Rect(2, { __x: this.dragStartPoint().x(), __y: this.dragStartPoint().y(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, pt);
		if (dragRect.width() > distance || dragRect.height() > distance) {
			farDrag = true;
		}
		if (farDrag) {
			this.__suppressCrosshairChange = true;
		}
		this.state($.ig.InteractionState.prototype.none);
		this.previewNotify($.ig.Rect.prototype.empty(), true);
		this.view().completeMouseCapture();
		this.__suppressCrosshairChange = false;
		this.view().hideHorizontalCrosshair();
		this.view().hideVerticalCrosshair();
		if (isFinger) {
			this.view().hideTooltip();
			this.view().hideHorizontalCrosshair();
			this.view().hideVerticalCrosshair();
			this.view().hideInfoBox();
		}
		this.endTiledZoomingIfRunning();
	}
	,
	updateSyncSettings: function (sender, e) {
		if (e.propertyName() == $.ig.SyncSettings.prototype.syncChannelPropertyName) {
			$.ig.SyncManager.prototype.changeSyncChannel(this, e.oldValue(), e.newValue());
		}
	}
	,
	updateSyncLink: function (oldLink, newLink) {
		if (oldLink != null) {
			oldLink.chartsInternal().remove(this);
			oldLink.propertyUpdated = $.ig.Delegate.prototype.remove(oldLink.propertyUpdated, this.propertyUpdated);
		}
		if (newLink != null) {
			newLink.chartsInternal().add(this);
			newLink.propertyUpdated = $.ig.Delegate.prototype.combine(newLink.propertyUpdated, this.propertyUpdated);
		}
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.syncLink(this.actualSyncLink());
			series.seriesViewer(this);
		}
	}
	,
	crosshairNotify: function (notificationPoint) {
		this.actualSyncLink().crosshairNotify(this, notificationPoint);
	}
	,
	windowNotify: function (windowRect, userInteraction) {
		if (!userInteraction) {
			this.actualSyncLink().windowNotify(this, windowRect);
		} else {
			if (!this.isZoomingHorizontallyEnabled() && !this.isZoomingVerticallyEnabled()) {
				return;
			}
			var isValid = !windowRect.isEmpty() && !$.ig.util.isNaN(windowRect.x()) && !$.ig.util.isNaN(windowRect.y()) && !$.ig.util.isNaN(windowRect.width()) && !$.ig.util.isNaN(windowRect.height());
			var newRect = windowRect;
			if (isValid && !this.isZoomingHorizontallyEnabled()) {
				newRect = new $.ig.Rect(0, 0, windowRect.y(), 1, windowRect.height());
			}
			if (isValid && !this.isZoomingVerticallyEnabled()) {
				newRect = new $.ig.Rect(0, windowRect.x(), 0, windowRect.width(), 1);
			}
			this.actualSyncLink().windowNotify(this, newRect);
		}
	}
	,
	previewNotify: function (windowRect, userInteraction) {
		if (!userInteraction) {
			this.actualSyncLink().previewNotify(this, windowRect);
		} else {
			if (!this.isZoomingHorizontallyEnabled() && !this.isZoomingVerticallyEnabled()) {
				return;
			}
			var isValid = !windowRect.isEmpty() && !$.ig.util.isNaN(windowRect.x()) && !$.ig.util.isNaN(windowRect.y()) && !$.ig.util.isNaN(windowRect.width()) && !$.ig.util.isNaN(windowRect.height());
			var newRect = windowRect;
			if (isValid && !this.isZoomingHorizontallyEnabled()) {
				newRect = new $.ig.Rect(0, 0, windowRect.y(), 1, windowRect.height());
			}
			if (isValid && !this.isZoomingVerticallyEnabled()) {
				newRect = new $.ig.Rect(0, windowRect.x(), 0, windowRect.width(), 1);
			}
			this.actualSyncLink().previewNotify(this, newRect);
		}
	}
	,
	onZoomChanging: function (rc) {
		if (this.windowResponse() == $.ig.WindowResponse.prototype.immediate || this.actualUseTiledZooming()) {
			this.previewNotify($.ig.Rect.prototype.empty(), true);
			this.windowNotify(rc, true);
		} else {
			this.previewNotify(rc, true);
		}
	}
	,
	isSyncReady: function () {
		return this.actualSyncLink() != null;
	}
	,
	synchronizedCharts: function () {
		var d__ = new $.ig.SeriesViewer___SynchronizedCharts__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	toWorld: function (pt) {
		var gridAreaRect = this.viewportRect();
		var x = this.actualWindowRect().left() + this.actualWindowRect().width() * pt.__x / gridAreaRect.width();
		var y = this.actualWindowRect().top() + this.actualWindowRect().height() * pt.__y / gridAreaRect.height();
		return { __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	toWorld1: function (rect) {
		var gridAreaRect = this.viewportRect();
		var left = this.actualWindowRect().left() + this.actualWindowRect().width() * rect.left() / gridAreaRect.width();
		var top = this.actualWindowRect().top() + this.actualWindowRect().height() * rect.top() / gridAreaRect.height();
		var right = this.actualWindowRect().left() + this.actualWindowRect().width() * rect.right() / gridAreaRect.width();
		var bottom = this.actualWindowRect().top() + this.actualWindowRect().height() * rect.bottom() / gridAreaRect.height();
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	windowRectChanged: null,
	raiseWindowRectChanged: function (oldWindowRect, newWindowRect) {
		if (this.windowRectChanged != null && $.ig.Rect.prototype.l_op_Inequality(oldWindowRect, newWindowRect)) {
			this.windowRectChanged(this, new $.ig.RectChangedEventArgs(oldWindowRect, newWindowRect));
		}
	}
	,
	onWindowRectChanged: function (oldRect, newRect) {
		this.raiseWindowRectChanged(oldRect, newRect);
	}
	,
	sizeChanged: null,
	onSizeChanged: function (oldSize, newSize) {
		if (this.sizeChanged != null && $.ig.Size.prototype.l_op_Inequality(oldSize, newSize)) {
			this.sizeChanged(this, new $.ig.RectChangedEventArgs(new $.ig.Rect(1, 0, 0, oldSize), new $.ig.Rect(1, 0, 0, newSize)));
		}
	}
	,
	_ignoreWindowChanges: false,
	ignoreWindowChanges: function (value) {
		if (arguments.length === 1) {
			this._ignoreWindowChanges = value;
			return value;
		} else {
			return this._ignoreWindowChanges;
		}
	}
	,
	rectChanged: function (oldRect, newRect) {
		if (oldRect.width() != newRect.width() || oldRect.height() != newRect.height() || oldRect.x() != newRect.x() || oldRect.y() != newRect.y()) {
			return true;
		}
		return false;
	}
	,
	actualWindowRectChanged: null,
	raiseActualWindowRectChanged: function (oldRect, newRect) {
		if (this.actualWindowRectChanged != null && this.rectChanged(oldRect, newRect)) {
			this.actualWindowRectChanged(this, new $.ig.RectChangedEventArgs(oldRect, newRect));
		}
	}
	,
	resetZoom: function () {
		this.view().resetWindowRect();
	}
	,
	gridAreaRectChanged: null,
	raiseGridAreaRectChanged: function (oldGridAreaRect, newGridAreaRect) {
		if (this.gridAreaRectChanged != null && $.ig.Rect.prototype.l_op_Inequality(oldGridAreaRect, newGridAreaRect)) {
			this.gridAreaRectChanged(this, new $.ig.RectChangedEventArgs(oldGridAreaRect, newGridAreaRect));
		}
	}
	,
	isMap: function () {
		return false;
	}
	,
	onPlotAreaSizeChanged: function (oldGridAreaRect, newGridAreaRect) {
		this.raiseGridAreaRectChanged(oldGridAreaRect, newGridAreaRect);
		if (this.isMap() && ($.ig.Rect.prototype.l_op_Equality(oldGridAreaRect, null) || oldGridAreaRect.isEmpty() || oldGridAreaRect.width() == 0 || oldGridAreaRect.height() == 0)) {
			this.windowNotify(this.windowRect(), false);
		} else {
			this.invalidateActualWindowRect();
		}
	}
	,
	windowResponse: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.windowResponseProperty, $.ig.WindowResponse.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.windowResponseProperty));
		}
	}
	,
	_dontNotify: false,
	dontNotify: function (value) {
		if (arguments.length === 1) {
			this._dontNotify = value;
			return value;
		} else {
			return this._dontNotify;
		}
	}
	,
	windowRectMinWidth: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.windowRectMinWidthProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.windowRectMinWidthProperty);
		}
	}
	,
	_syncChannel: null,
	syncChannel: function (value) {
		if (arguments.length === 1) {
			this._syncChannel = value;
			return value;
		} else {
			return this._syncChannel;
		}
	}
	,
	__actualSyncLink: null,
	actualSyncLink: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualSyncLink;
			this.__actualSyncLink = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualSyncLinkPropertyName, oldValue, this.__actualSyncLink);
			return value;
		} else {
			return this.__actualSyncLink;
		}
	}
	,
	invalidatePanels: function () {
		this.view().resize();
	}
	,
	overviewPlusDetailPaneVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityProperty));
		}
	}
	,
	overviewPlusDetailPane: function () {
		return this.view().getComponentsFromView().overviewPlusDetailPane();
	}
	,
	updateOPDMobileMode: function (mobileMode) {
		if (this.overviewPlusDetailPane() != null) {
			this.overviewPlusDetailPane().mobileMode(mobileMode);
		}
	}
	,
	crosshairVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.crosshairVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.crosshairVisibilityProperty));
		}
	}
	,
	_ignoreCrosshairVisibilityChange: false,
	ignoreCrosshairVisibilityChange: function (value) {
		if (arguments.length === 1) {
			this._ignoreCrosshairVisibilityChange = value;
			return value;
		} else {
			return this._ignoreCrosshairVisibilityChange;
		}
	}
	,
	_userSetCrosshairVisibility: false,
	userSetCrosshairVisibility: function (value) {
		if (arguments.length === 1) {
			this._userSetCrosshairVisibility = value;
			return value;
		} else {
			return this._userSetCrosshairVisibility;
		}
	}
	,
	isDragCrosshairEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.isDragCrosshairEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.isDragCrosshairEnabledProperty);
		}
	}
	,
	plotAreaBorderBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.plotAreaBorderBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.plotAreaBorderBrushProperty);
		}
	}
	,
	actualPlotAreaBorderBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushProperty);
		}
	}
	,
	plotAreaBackground: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.plotAreaBackgroundProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.plotAreaBackgroundProperty);
		}
	}
	,
	plotAreaMinWidth: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.plotAreaMinWidthProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.plotAreaMinWidthProperty);
		}
	}
	,
	plotAreaMinHeight: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.plotAreaMinHeightProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.plotAreaMinHeightProperty);
		}
	}
	,
	canDisplayAnnotations: function () {
		return this.state() == $.ig.InteractionState.prototype.none && !this.__pinching && !this.__suppressCrosshairChange;
	}
	,
	allCanDisplayAnnotations: function () {
		if (this.actualSyncLink() != null && this.actualSyncLink().charts().count() > 0) {
			var canDisplay = true;
			canDisplay = this.canDisplayAnnotations();
			if (!canDisplay) {
				return false;
			}
			for (var i = 0; i < this.actualSyncLink().charts().count(); i++) {
				if (!this.actualSyncLink().charts().item(i).canDisplayAnnotations()) {
					return false;
				}
			}
			return true;
		} else {
			return this.canDisplayAnnotations();
		}
	}
	,
	renderCrosshairs: function () {
		var crosshairPoint = this.crosshairPoint();
		var annotationPoint = crosshairPoint;
		var annotationsVisible = this.allCanDisplayAnnotations();
		if (!annotationsVisible) {
			annotationPoint = { __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		for (var i = 0; i < this.series().count(); i++) {
			var series = this.series().__inner[i];
			if (series.isAnnotationLayer()) {
				(series).moveCursorPoint(annotationPoint);
			}
		}
		var visible = this.state() == $.ig.InteractionState.prototype.none && !this.isDefaultCrosshairDisabled() && (this.crosshairsVisible() || this.__crossHairActivated) && !this.__pinching && !this.__suppressCrosshairChange;
		var viewportRect = this.viewportRect();
		if (visible && !$.ig.util.isNaN(crosshairPoint.__x) && !viewportRect.isEmpty()) {
			var x = viewportRect.width() * (crosshairPoint.__x - this.actualWindowRect().left()) / this.actualWindowRect().width();
			this.view().updateVerticalCrosshair(viewportRect.left() + x, viewportRect.top(), viewportRect.left() + x, viewportRect.bottom());
			this.view().showVerticalCrosshair();
			this.view().updateInfoBoxXTranslation(x);
		} else {
			this.view().hideVerticalCrosshair();
		}
		if (visible && !$.ig.util.isNaN(crosshairPoint.__y) && !viewportRect.isEmpty()) {
			var y = viewportRect.height() * (crosshairPoint.__y - this.actualWindowRect().top()) / this.actualWindowRect().height();
			this.view().updateHorizontalCrosshair(viewportRect.left(), viewportRect.top() + y, viewportRect.right(), viewportRect.top() + y);
			this.view().showHorizontalCrosshair();
		} else {
			this.view().hideHorizontalCrosshair();
		}
	}
	,
	__windowEventDepth: 0,
	notifyCrosshairUpdate: function () {
	}
	,
	updateWindowRect: function (desiredWindowWidth, desiredWindowHeight) {
		var minWidth = this.windowRectMinWidth();
		this.windowRect(new $.ig.Rect(0, this.actualWindowPositionHorizontal(), this.actualWindowPositionVertical(), $.ig.MathUtil.prototype.clamp(desiredWindowWidth, minWidth, 1), $.ig.MathUtil.prototype.clamp(desiredWindowHeight, minWidth, 1)));
	}
	,
	getActualWindowScaleHorizontal: function () {
		return 1;
	}
	,
	getActualWindowScaleVertical: function () {
		return 1;
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.SeriesViewer.prototype.titlePropertyName:
				this.view().onTitlesChanged();
				break;
			case $.ig.SeriesViewer.prototype.subtitlePropertyName:
				this.view().onTitlesChanged();
				break;
			case $.ig.SeriesViewer.prototype.actualContentHitTestModePropertyName:
				this.onActualHitTestModeChanged();
				break;
			case $.ig.SeriesViewer.prototype.contentHitTestModePropertyName:
				this.recalculateResolvedHitTestMode();
				break;
			case $.ig.SeriesViewer.prototype.titleHorizontalAlignmentPropertyName:
				this.view().onTitleAlignmentChanged(oldValue, newValue);
				this.view().onTitlesChanged();
				break;
			case $.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentPropertyName:
				this.view().onSubtitleAlignmentChanged(oldValue, newValue);
				this.view().onTitlesChanged();
				break;
			case $.ig.SeriesViewer.prototype.titleTextStylePropertyName:
			case $.ig.SeriesViewer.prototype.titleTextColorPropertyName:
			case $.ig.SeriesViewer.prototype.subtitleTextStylePropertyName:
			case $.ig.SeriesViewer.prototype.subtitleTextColorPropertyName:
			case $.ig.SeriesViewer.prototype.titleTopMarginPropertyName:
			case $.ig.SeriesViewer.prototype.titleLeftMarginPropertyName:
			case $.ig.SeriesViewer.prototype.titleRightMarginPropertyName:
			case $.ig.SeriesViewer.prototype.titleBottomMarginPropertyName:
			case $.ig.SeriesViewer.prototype.subtitleTopMarginPropertyName:
			case $.ig.SeriesViewer.prototype.subtitleLeftMarginPropertyName:
			case $.ig.SeriesViewer.prototype.subtitleRightMarginPropertyName:
			case $.ig.SeriesViewer.prototype.subtitleBottomMarginPropertyName:
				this.view().onTitlesChanged();
				break;
			case $.ig.SeriesViewer.prototype.pixelScalingRatioPropertyName:
				if ($.ig.util.isNaN(this.pixelScalingRatio()) || this.pixelScalingRatio() <= 0) {
					this.actualPixelScalingRatio(1);
				} else {
					this.actualPixelScalingRatio(this.pixelScalingRatio());
				}
				break;
			case $.ig.SeriesViewer.prototype.actualPixelScalingRatioPropertyName:
				this.view().pixelScalingRatioChanged();
				break;
			case $.ig.SeriesViewer.prototype.isPagePanningAllowedPropertyName:
				this.view().isPagePanningAllowedChanged();
				break;
			case $.ig.SeriesViewer.prototype.actualSyncLinkPropertyName:
				this.updateSyncLink($.ig.util.cast($.ig.SyncLink.prototype.$type, oldValue), $.ig.util.cast($.ig.SyncLink.prototype.$type, newValue));
				break;
			case $.ig.SeriesViewer.prototype.crosshairVisibilityPropertyName:
				if (!this.ignoreCrosshairVisibilityChange()) {
					this.userSetCrosshairVisibility(true);
				}
				if (this.crosshairVisibility() != $.ig.Visibility.prototype.collapsed) {
					this.crosshairsVisible(true);
				} else {
					this.crosshairsVisible(this.actualMobileMode());
				}
				this.renderCrosshairs();
				break;
			case $.ig.SeriesViewer.prototype.crosshairPointPropertyName:
				this.renderCrosshairs();
				this.notifyCrosshairUpdate();
				break;
			case $.ig.SeriesViewer.prototype.windowRectPropertyName:
				if (this.actualSyncLink() != null) {
					this.__windowEventDepth++;
					this.windowNotify(newValue, false);
					this.__windowEventDepth--;
				}
				if (!this.windowRect().equals1(oldValue) && this.__windowEventDepth == 0) {
					this.onWindowRectChanged(oldValue, this.windowRect());
				}
				this.invalidateActualWindowRect();
				break;
			case $.ig.SeriesViewer.prototype.windowPositionHorizontalPropertyName:
				this.actualWindowPositionHorizontal(this.windowPositionHorizontal());
				break;
			case $.ig.SeriesViewer.prototype.windowPositionVerticalPropertyName:
				this.actualWindowPositionVertical(this.windowPositionVertical());
				break;
			case $.ig.SeriesViewer.prototype.actualWindowPositionVerticalPropertyName:
			case $.ig.SeriesViewer.prototype.actualWindowPositionHorizontalPropertyName:
				if (!this.suspendWindowRect()) {
					this.updateWindowRect(this.getActualWindowScaleHorizontal(), this.getActualWindowScaleVertical());
				}
				break;
			case $.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledPropertyName:
				this.view().onIsInteractionDisabledChanged();
				break;
			case $.ig.SeriesViewer.prototype.highlightingTransitionDurationPropertyName:
				this.highlightingAnimator().intervalMilliseconds(this.highlightingTransitionDuration());
				break;
			case $.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityPropertyName:
				this.updateOverviewPlusDetailPaneVisibility();
				break;
			case $.ig.SeriesViewer.prototype.actualWindowRectPropertyName:
				this.__contentViewportDirty = true;
				if (!newValue.equals(oldValue)) {
					this.actualWindowRectUpdated();
				}
				if ((newValue).width() == 1 && (newValue).height() == 1 && (oldValue).isEmpty()) {
					this.zoomLongAgo(true);
				}
				this.raiseActualWindowRectChanged(oldValue, newValue);
				break;
			case $.ig.SeriesViewer.prototype.plotAreaBackgroundPropertyName:
				this.view().onPlotAreaBackgroundChanged(newValue);
				break;
			case $.ig.SeriesViewer.prototype.useTiledZoomingPropertyName:
				this.actualUseTiledZooming(this.useTiledZooming());
				break;
			case $.ig.SeriesViewer.prototype.zoomTileCacheSizePropertyName:
				this.actualZoomTileCacheSize(this.zoomTileCacheSize());
				if (this.tileManager() != null) {
					this.tileManager().clearVisible();
					this.tileManager().clearTileCache();
					this.__tileManager = null;
				}
				break;
			case $.ig.SeriesViewer.prototype.preferHigherResolutionTilesPropertyName:
				if (this.tileManager() != null) {
					this.tileManager().roundDown(!this.preferHigherResolutionTiles());
				}
				break;
		}
	}
	,
	updateOverviewPlusDetailPaneVisibility: function () {
		this.__useOPD = this.overviewPlusDetailPaneVisibility() == $.ig.Visibility.prototype.visible;
		this.view().overviewPlusDetailPaneVisibilityChanged();
		this.updateOverviewPlusDetailPaneControlPanelVisibility();
		this.view().updateOverviewPlusDetailRects();
		this.invalidatePanels();
	}
	,
	onActualHitTestModeChanged: function () {
		this.view().onActualHitTestModeChanged();
	}
	,
	updateOverviewPlusDetailPaneControlPanelVisibility: function () {
		if (this.overviewPlusDetailPane() == null) {
			return;
		}
		this.overviewPlusDetailPane().isZoomable(this.isZoomingEnabled());
	}
	,
	__useOPD: false,
	_suspendWindowRect: false,
	suspendWindowRect: function (value) {
		if (arguments.length === 1) {
			this._suspendWindowRect = value;
			return value;
		} else {
			return this._suspendWindowRect;
		}
	}
	,
	defaultInteraction: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.defaultInteractionProperty, $.ig.InteractionState.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.defaultInteractionProperty));
		}
	}
	,
	dragModifier: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.dragModifierProperty, $.ig.ModifierKeys.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.dragModifierProperty));
		}
	}
	,
	panModifier: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.panModifierProperty, $.ig.ModifierKeys.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.panModifierProperty));
		}
	}
	,
	_previewRect: null,
	previewRect: function (value) {
		if (arguments.length === 1) {
			var oldPreviewRect = this._previewRect;
			this._previewRect = value;
			if (this._previewRect.isEmpty()) {
				this.view().hidePreviewPath();
			} else {
				this.view().updatePreviewPath(this.viewportRect(), this.toGridArea(this.previewRect()));
				this.view().showPreviewPath();
				this.raisePropertyChanged("PreviewRect", oldPreviewRect, this._previewRect);
			}
			return value;
		} else {
			return this._previewRect;
		}
	}
	,
	_lastZoomTime: new Date(),
	lastZoomTime: function (value) {
		if (arguments.length === 1) {
			this._lastZoomTime = value;
			return value;
		} else {
			return this._lastZoomTime;
		}
	}
	,
	_zoomLongAgo: false,
	zoomLongAgo: function (value) {
		if (arguments.length === 1) {
			this._zoomLongAgo = value;
			return value;
		} else {
			return this._zoomLongAgo;
		}
	}
	,
	updateAcutalWindowProperties: function () {
		this.actualWindowPositionHorizontal(this.actualWindowRect().x());
		this.actualWindowPositionVertical(this.actualWindowRect().y());
	}
	,
	actualWindowRectUpdated: function () {
		this.zoomLongAgo(false);
		this.lastZoomTime($.ig.Date.prototype.now());
		this.highlightingManager().clear();
		if (this.highlightingAnimator().animationActive()) {
			this.highlightingAnimator().stop();
		}
		var suspendWindowRectStored = this.suspendWindowRect();
		this.suspendWindowRect(true);
		this.updateAcutalWindowProperties();
		this.suspendWindowRect(suspendWindowRectStored);
		this.view().hideTooltip();
		this.view().updateZoombars(this.actualWindowRect());
	}
	,
	windowPositionHorizontal: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.windowPositionHorizontalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.windowPositionHorizontalProperty);
		}
	}
	,
	windowPositionVertical: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.windowPositionVerticalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.windowPositionVerticalProperty);
		}
	}
	,
	toGridArea: function (rect) {
		if (this.viewportRect().isEmpty()) {
			return $.ig.Rect.prototype.empty();
		}
		var gridAreaRect = this.viewportRect();
		var left = gridAreaRect.left() + (gridAreaRect.width() * (rect.left() - this.actualWindowRect().left()) / this.actualWindowRect().width());
		var top = gridAreaRect.top() + (gridAreaRect.height() * (rect.top() - this.actualWindowRect().top()) / this.actualWindowRect().height());
		var right = gridAreaRect.left() + (gridAreaRect.width() * (rect.right() - this.actualWindowRect().left()) / this.actualWindowRect().width());
		var bottom = gridAreaRect.top() + (gridAreaRect.height() * (rect.bottom() - this.actualWindowRect().top()) / this.actualWindowRect().height());
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	refreshCompleted: null,
	raiseRefreshCompleted: function () {
		if (this.refreshCompleted != null) {
			this.refreshCompleted(this, new $.ig.EventArgs());
		}
	}
	,
	createView: function () {
	}
	,
	onViewCreated: function (view) {
		this.updateOverviewPlusDetailPaneControlPanelVisibility();
	}
	,
	crosshairLineStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.crosshairLineStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.crosshairLineStyleProperty);
		}
	}
	,
	previewPathStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.previewPathStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.previewPathStyleProperty);
		}
	}
	,
	zoombarStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.zoombarStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.zoombarStyleProperty);
		}
	}
	,
	circleMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.circleMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.circleMarkerTemplateProperty);
		}
	}
	,
	triangleMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.triangleMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.triangleMarkerTemplateProperty);
		}
	}
	,
	pyramidMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.pyramidMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.pyramidMarkerTemplateProperty);
		}
	}
	,
	squareMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.squareMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.squareMarkerTemplateProperty);
		}
	}
	,
	diamondMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.diamondMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.diamondMarkerTemplateProperty);
		}
	}
	,
	pentagonMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.pentagonMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.pentagonMarkerTemplateProperty);
		}
	}
	,
	hexagonMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.hexagonMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.hexagonMarkerTemplateProperty);
		}
	}
	,
	tetragramMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.tetragramMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.tetragramMarkerTemplateProperty);
		}
	}
	,
	pentagramMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.pentagramMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.pentagramMarkerTemplateProperty);
		}
	}
	,
	hexagramMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.hexagramMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.hexagramMarkerTemplateProperty);
		}
	}
	,
	title: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.titleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.titleProperty);
		}
	}
	,
	titleHorizontalAlignment: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.titleHorizontalAlignmentProperty, $.ig.HorizontalAlignment.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.titleHorizontalAlignmentProperty));
		}
	}
	,
	subtitleHorizontalAlignment: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentProperty, $.ig.HorizontalAlignment.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentProperty));
		}
	}
	,
	__titleTextStyle: null,
	titleTextStyle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleTextStyle;
			this.__titleTextStyle = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleTextStylePropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleTextStyle;
		}
	}
	,
	__subtitleTextStyle: null,
	subtitleTextStyle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleTextStyle;
			this.__subtitleTextStyle = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleTextStylePropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleTextStyle;
		}
	}
	,
	__titleTextColor: null,
	titleTextColor: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleTextColor;
			this.__titleTextColor = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleTextColorPropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleTextColor;
		}
	}
	,
	__subtitleTextColor: null,
	subtitleTextColor: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleTextColor;
			this.__subtitleTextColor = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleTextColorPropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleTextColor;
		}
	}
	,
	__titleTopMargin: 0,
	titleTopMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleTopMargin;
			this.__titleTopMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleTopMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleTopMargin;
		}
	}
	,
	__titleLeftMargin: 0,
	titleLeftMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleLeftMargin;
			this.__titleLeftMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleLeftMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleLeftMargin;
		}
	}
	,
	__titleRightMargin: 0,
	titleRightMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleRightMargin;
			this.__titleRightMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleRightMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleRightMargin;
		}
	}
	,
	__titleBottomMargin: 0,
	titleBottomMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__titleBottomMargin;
			this.__titleBottomMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.titleBottomMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__titleBottomMargin;
		}
	}
	,
	__subtitleTopMargin: 0,
	subtitleTopMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleTopMargin;
			this.__subtitleTopMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleTopMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleTopMargin;
		}
	}
	,
	__subtitleLeftMargin: 0,
	subtitleLeftMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleLeftMargin;
			this.__subtitleLeftMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleLeftMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleLeftMargin;
		}
	}
	,
	__subtitleRightMargin: 0,
	subtitleRightMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleRightMargin;
			this.__subtitleRightMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleRightMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleRightMargin;
		}
	}
	,
	__subtitleBottomMargin: 0,
	subtitleBottomMargin: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__subtitleBottomMargin;
			this.__subtitleBottomMargin = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleBottomMarginPropertyName, oldValue, value);
			return value;
		} else {
			return this.__subtitleBottomMargin;
		}
	}
	,
	subtitle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SeriesViewer.prototype.subtitleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SeriesViewer.prototype.subtitleProperty);
		}
	}
	,
	getDefaultHorizontalAxisTitleMargin: function () {
		return this.view().getDefaultHorizontalAxisTitleMargin();
	}
	,
	getDefaultVerticalAxisTitleMargin: function () {
		return this.view().getDefaultVerticalAxisTitleMargin();
	}
	,
	getDefaultHorizontalAxisTitlePosition: function (axis) {
		return this.view().getDefaultHorizontalAxisTitlePosition(axis);
	}
	,
	getDefaultVerticalAxisTitlePosition: function (axis) {
		return this.view().getDefaultVerticalAxisTitlePosition(axis);
	}
	,
	getFontInfo: function () {
	}
	,
	getFontBrush: function () {
	}
	,
	getAxisLineBrush: function () {
	}
	,
	_tooltipTemplate: null,
	tooltipTemplate: function (value) {
		if (arguments.length === 1) {
			this._tooltipTemplate = value;
			return value;
		} else {
			return this._tooltipTemplate;
		}
	}
	,
	provideContainer: function (container) {
		this.view().onContainerProvided(container);
	}
	,
	__surfaceUsage: 0,
	surfaceUsage: function (value) {
		if (arguments.length === 1) {
			this.__surfaceUsage = value;
			if (this.__surfaceUsage == $.ig.ViewerSurfaceUsage.prototype.minimal) {
				this.view().shouldMergeOverlayContext(true);
			} else {
				this.view().shouldMergeOverlayContext(false);
			}
			return value;
		} else {
			return this.__surfaceUsage;
		}
	}
	,
	onContainerResized: function (width, height) {
		this.view().onContainerResized(width, height);
	}
	,
	notifyContainerResized: function () {
		this.view().notifyContainerResized();
	}
	,
	getContainerRect: function () {
		return this.view().getContainerRect();
	}
	,
	ensureCorrectSize: function () {
		this.view().ensureCorrectSize();
	}
	,
	getContainerOffsets: function () {
		return this.view().getContainerOffsets();
	}
	,
	getDefaultVerticalAxisFont: function () {
		return this.view().getDefaultVerticalAxisFont();
	}
	,
	getDefaultHorizontalAxisFont: function () {
		return this.view().getDefaultHorizontalAxisFont();
	}
	,
	getDefaultHorizontalAxisColor: function () {
		return this.view().getDefaultHorizontalAxisColor();
	}
	,
	getDefaultverticalAxisColor: function () {
		return this.view().getDefaultVerticalAxisColor();
	}
	,
	attachSeries: function (s) {
		this.view().attachSeries(s);
	}
	,
	removeSeries: function (s) {
		this.view().removeSeries(s);
	}
	,
	_canvasRenderScheduler: null,
	canvasRenderScheduler: function (value) {
		if (arguments.length === 1) {
			this._canvasRenderScheduler = value;
			return value;
		} else {
			return this._canvasRenderScheduler;
		}
	}
	,
	_thumbnailCanvasRenderScheduler: null,
	thumbnailCanvasRenderScheduler: function (value) {
		if (arguments.length === 1) {
			this._thumbnailCanvasRenderScheduler = value;
			return value;
		} else {
			return this._thumbnailCanvasRenderScheduler;
		}
	}
	,
	_alternateViewRenderScheduler: null,
	alternateViewRenderScheduler: function (value) {
		if (arguments.length === 1) {
			this._alternateViewRenderScheduler = value;
			return value;
		} else {
			return this._alternateViewRenderScheduler;
		}
	}
	,
	__mobileMode: false,
	mobileMode: function (value) {
		if (arguments.length === 1) {
			var oldMode = this.__mobileMode;
			this.__mobileMode = value;
			if (oldMode != this.__mobileMode) {
				this.view().mobileModeChanged(this.__mobileMode);
			}
			return value;
		} else {
			return this.__mobileMode;
		}
	}
	,
	__actualMobileMode: false,
	actualMobileMode: function (value) {
		if (arguments.length === 1) {
			var oldMode = this.__actualMobileMode;
			this.__actualMobileMode = value;
			if (oldMode != this.__actualMobileMode) {
				this.view().actualMobileModeChanged(this.__actualMobileMode);
			}
			return value;
		} else {
			return this.__actualMobileMode;
		}
	}
	,
	_syncSettings: null,
	syncSettings: function (value) {
		if (arguments.length === 1) {
			this._syncSettings = value;
			return value;
		} else {
			return this._syncSettings;
		}
	}
	,
	addTooltipToView: function (control) {
		this.view().addTooltipToView(control);
	}
	,
	removeTooltipFromView: function (control) {
		this.view().removeTooltipFromView(control);
	}
	,
	notifySetItem: function (source_, index, oldItem, newItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		var itemsSource = this.actualSyncLink().peekItemsSource(source_);
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, newItem, oldItem, index));
	}
	,
	notifyClearItems: function (source_) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		var itemsSource = this.actualSyncLink().peekItemsSource(source_);
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset));
	}
	,
	notifyInsertItem: function (source_, index, newItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		var itemsSource = this.actualSyncLink().peekItemsSource(source_);
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, newItem, index));
	}
	,
	notifyRemoveItem: function (source_, index, oldItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		var itemsSource = this.actualSyncLink().peekItemsSource(source_);
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.remove, oldItem, index));
	}
	,
	__widgetLevelSource: null,
	__specificSources: null,
	_manageDataSources: false,
	manageDataSources: function (value) {
		if (arguments.length === 1) {
			this._manageDataSources = value;
			return value;
		} else {
			return this._manageDataSources;
		}
	}
	,
	destroy: function () {
		var toDestroy = new $.ig.List$1($.ig.Series.prototype.$type, 0);
		for (var i = 0; i < this.series().count(); i++) {
			toDestroy.add(this.series().__inner[i]);
		}
		for (var i1 = 0; i1 < toDestroy.count(); i1++) {
			if (toDestroy.__inner[i1].view() != null) {
				toDestroy.__inner[i1].view().destroy();
			}
			this.series().remove(toDestroy.__inner[i1]);
			this.removeSpecificDataSource(toDestroy.__inner[i1].name(), true);
			toDestroy.__inner[i1].itemsSource(null);
			toDestroy.__inner[i1].provideContext(null, null);
		}
		this.destroyOverride();
		this.removeWidgetLevelDataSource();
		this.onDetachedFromUI();
		this.view().onContainerProvided(null);
	}
	,
	destroyOverride: function () {
	}
	,
	setWidgetLevelDataSource: function (source_) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		this.__widgetLevelSource = source_;
		this.updateDataSources();
	}
	,
	removeWidgetLevelDataSource: function () {
		this.__widgetLevelSource = null;
		this.updateDataSources();
	}
	,
	setSpecificDataSource: function (targetName, source_) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		if (!this.__specificSources.containsKey(targetName)) {
			this.__specificSources.add(targetName, source_);
		} else {
			this.__specificSources.item(targetName, source_);
		}
		this.updateDataSources();
	}
	,
	removeSpecificDataSource: function (targetName, dontUpdate) {
		if (this.__specificSources.containsKey(targetName)) {
			this.__specificSources.remove(targetName);
		}
		if (!dontUpdate) {
			this.updateDataSources();
		}
	}
	,
	setDataSourceForSeries: function (target, source) {
		if (target.itemsSource() != source) {
			target.itemsSource(source);
		}
	}
	,
	updateDataSourceFor: function (target) {
		if (!this.manageDataSources()) {
			return;
		}
		if ($.ig.util.cast($.ig.Series.prototype.$type, target) !== null) {
			var series = target;
			if (this.__specificSources.containsKey(series.name())) {
				var specific = this.__specificSources.item(series.name());
				this.setDataSourceForSeries(series, specific);
			} else {
				this.setDataSourceForSeries(series, this.__widgetLevelSource);
			}
		}
		if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, target) !== null) {
			var cat = target;
			if (this.__specificSources.containsKey(cat.name())) {
				var specific1 = this.__specificSources.item(cat.name());
				if (cat.itemsSource() != specific1) {
					cat.itemsSource(specific1);
				}
			} else {
				if (cat.itemsSource() != this.__widgetLevelSource) {
					cat.itemsSource(this.__widgetLevelSource);
				}
			}
		}
	}
	,
	updateDataSources: function () {
		if (!this.manageDataSources()) {
			return;
		}
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			this.updateDataSourceFor(series);
		}
	}
	,
	__topMargin: 0,
	topMargin: function (value) {
		if (arguments.length === 1) {
			this.__topMargin = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__topMargin;
		}
	}
	,
	__leftMargin: 0,
	leftMargin: function (value) {
		if (arguments.length === 1) {
			this.__leftMargin = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__leftMargin;
		}
	}
	,
	__rightMargin: 0,
	rightMargin: function (value) {
		if (arguments.length === 1) {
			this.__rightMargin = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__rightMargin;
		}
	}
	,
	__bottomMargin: 0,
	bottomMargin: function (value) {
		if (arguments.length === 1) {
			this.__bottomMargin = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__bottomMargin;
		}
	}
	,
	__autoMarginWidth: 0,
	autoMarginWidth: function (value) {
		if (arguments.length === 1) {
			this.__autoMarginWidth = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__autoMarginWidth;
		}
	}
	,
	__autoMarginHeight: 0,
	autoMarginHeight: function (value) {
		if (arguments.length === 1) {
			this.__autoMarginHeight = value;
			this.invalidatePanels();
			return value;
		} else {
			return this.__autoMarginHeight;
		}
	}
	,
	shouldAddAutoMargins: function () {
		return false;
	}
	,
	__pixelScalingRatio: 0,
	pixelScalingRatio: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__pixelScalingRatio;
			this.__pixelScalingRatio = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.pixelScalingRatioPropertyName, oldValue, this.__pixelScalingRatio);
			return value;
		} else {
			return this.__pixelScalingRatio;
		}
	}
	,
	__actualPixelScalingRatio: 0,
	actualPixelScalingRatio: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualPixelScalingRatio;
			this.__actualPixelScalingRatio = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualPixelScalingRatioPropertyName, oldValue, this.__actualPixelScalingRatio);
			return value;
		} else {
			return this.__actualPixelScalingRatio;
		}
	}
	,
	getCoercionMethod: function (memberPath, coercionMethods) {
		var info = new $.ig.CoercionInfo();
		info.memberPath(memberPath);
		info.coercionMethod(null);
		var parsed = $.ig.SeriesViewer.prototype.parseMemberPath(memberPath);
		if (parsed.item2() == null) {
			return info;
		}
		if (coercionMethods != null) {
			var methods_ = coercionMethods;
			var key_ = parsed.item2();
			var val_ = null;
			if (typeof methods_[key_] != 'undefined') { val_ = methods_[key_]; };
			info.memberPath(parsed.item1());
			info.coercionMethod(val_);
		} else if (parsed.item2() == "defaultDateParse") {
			var func = $.ig.util.defaultDVDateParse;
			info.memberPath(parsed.item1());
			info.coercionMethod(func);
		}
		return info;
	}
	,
	parseMemberPath: function (memberPath) {
		var vals = memberPath.split('!');
		if (vals.length == 2) {
			return new $.ig.Tuple$2(String, String, vals[0], vals[1]);
		} else {
			return new $.ig.Tuple$2(String, String, memberPath, null);
		}
	}
	,
	overviewPlusDetailPaneBackgroundImageUri: function (value) {
		if (arguments.length === 1) {
			this.overviewPlusDetailPane().view().backgroundImageUri(value);
			return value;
		} else {
			return this.overviewPlusDetailPane().view().backgroundImageUri();
		}
	}
	,
	__actualWindowRect: null,
	actualWindowRect: function (value) {
		if (arguments.length === 1) {
			var changed = $.ig.Rect.prototype.l_op_Inequality(this.__actualWindowRect, value);
			if (changed) {
				var oldValue = this.__actualWindowRect;
				this.__actualWindowRect = value;
				this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualWindowRectPropertyName, oldValue, value);
			}
			return value;
		} else {
			return this.__actualWindowRect;
		}
	}
	,
	invalidateActualWindowRect: function () {
		this.actualWindowRect(this.calculateActualWindowRect());
	}
	,
	calculateActualWindowRect: function () {
		return new $.ig.Rect(0, Math.min(1, Math.max(0, this.windowRect().left())), Math.min(1, Math.max(0, this.windowRect().top())), Math.min(1, Math.max(0, this.windowRect().width())), Math.min(1, Math.max(0, this.windowRect().height())));
	}
	,
	__actualWindowPositionHorizontal: 0,
	actualWindowPositionHorizontal: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualWindowPositionHorizontal;
			this.__actualWindowPositionHorizontal = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualWindowPositionHorizontalPropertyName, oldValue, this.__actualWindowPositionHorizontal);
			return value;
		} else {
			return this.__actualWindowPositionHorizontal;
		}
	}
	,
	__actualWindowPositionVertical: 0,
	actualWindowPositionVertical: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualWindowPositionVertical;
			this.__actualWindowPositionVertical = value;
			this.raisePropertyChanged($.ig.SeriesViewer.prototype.actualWindowPositionVerticalPropertyName, oldValue, this.__actualWindowPositionVertical);
			return value;
		} else {
			return this.__actualWindowPositionVertical;
		}
	}
	,
	notifyThumbnailDataChanged: function () {
		if (this.__useOPD) {
			(this.overviewPlusDetailPane().surfaceViewer()).isDirty(true);
			this.overviewPlusDetailPane().refresh(false);
		}
		this.clearTileZoomCacheDueToVisualsChange();
	}
	,
	notifyThumbnailAppearanceChanged: function () {
		if (this.__useOPD) {
			(this.overviewPlusDetailPane().surfaceViewer()).isDirty(true);
			this.overviewPlusDetailPane().refresh(false);
		}
		this.clearTileZoomCacheDueToVisualsChange();
	}
	,
	flush: function () {
		this.flushInternal(true, true);
	}
	,
	flushInternal: function (forceLayout, forceOverlay) {
		this.chartContentManager().force();
		if (forceLayout) {
			this.view().ensurePanelsArranged();
			this.chartContentManager().force();
		}
		this.canvasRenderScheduler().flush();
		if (forceOverlay) {
			this.view().overlayScheduler().flush();
		}
		this.zoomLongAgo(true);
	}
	,
	useFixedAspectZoom: function () {
		return false;
	}
	,
	__background: null,
	__backgroundContentInfo: null,
	registerBackgroundContent: function (content, refresh) {
		if (this.__background != null) {
			this.unRegisterBackgroundContent(this.__background);
			this.__background = null;
			this.__backgroundContentInfo = null;
		}
		this.__background = content;
		this.__backgroundContentInfo = this.chartContentManager().subscribe($.ig.ChartContentType.prototype.background, content, refresh);
	}
	,
	unRegisterBackgroundContent: function (content) {
		this.chartContentManager().unsubscribe($.ig.ChartContentType.prototype.background, content);
		this.__background = null;
		this.__backgroundContentInfo = null;
	}
	,
	deferBackgroundRefresh: function () {
		this.chartContentManager().refresh($.ig.ChartContentType.prototype.background, this.__background, this.__backgroundContentInfo, false);
	}
	,
	_isDefaultCrosshairDisabled: false,
	isDefaultCrosshairDisabled: function (value) {
		if (arguments.length === 1) {
			this._isDefaultCrosshairDisabled = value;
			return value;
		} else {
			return this._isDefaultCrosshairDisabled;
		}
	}
	,
	_isDefaultTooltipDisabled: false,
	isDefaultTooltipDisabled: function (value) {
		if (arguments.length === 1) {
			this._isDefaultTooltipDisabled = value;
			return value;
		} else {
			return this._isDefaultTooltipDisabled;
		}
	}
	,
	_isAnnotationLayerPresent: false,
	isAnnotationLayerPresent: function (value) {
		if (arguments.length === 1) {
			this._isAnnotationLayerPresent = value;
			return value;
		} else {
			return this._isAnnotationLayerPresent;
		}
	}
	,
	onHoverBehaviorOverridesChanged: function () {
		var crosshairDisabled = false;
		var tooltipDisabled = false;
		var containsAnnotationLayer = false;
		for (var i = 0; i < this.series().count(); i++) {
			var series = this.series().__inner[i];
			if (series.isDefaultCrosshairBehaviorDisabled()) {
				crosshairDisabled = true;
			}
			if (series.isDefaultTooltipBehaviorDisabled()) {
				tooltipDisabled = true;
			}
			if (series.isAnnotationLayer()) {
				containsAnnotationLayer = true;
			}
		}
		this.isDefaultCrosshairDisabled(crosshairDisabled);
		this.isDefaultTooltipDisabled(tooltipDisabled);
		this.isAnnotationLayerPresent(containsAnnotationLayer);
	}
	,
	exportTitleData: function (visualData) {
		this.view().exportTitleData(visualData);
	}
	,
	__isThumbnailRequired: false,
	isThumbnailRequired: function () {
		return this.__useOPD;
	}
	,
	beforeContentRefresh: function () {
		this.view().beforeContentRefresh();
	}
	,
	justZoomed: function () {
		return this.view().justZoomed();
	}
	,
	__uniqueIndex: 0,
	getNextUniqueIndex: function () {
		var toUse = this.__uniqueIndex;
		this.__uniqueIndex++;
		return toUse;
	}
	,
	getTitleFontInfo: function () {
		if (this.titleTextStyle() == null) {
			return null;
		}
		return $.ig.FontUtil.prototype.toFontInfo(this.titleTextStyle());
	}
	,
	getSubtitleFontInfo: function () {
		if (this.subtitleTextStyle() == null) {
			return null;
		}
		return $.ig.FontUtil.prototype.toFontInfo(this.subtitleTextStyle());
	}
	,
	updateCrosshairVisibility: function () {
		var mobileMode = false;
		mobileMode = this.actualMobileMode();
		this.ignoreCrosshairVisibilityChange(true);
		this.crosshairsVisible((mobileMode && !this.userSetCrosshairVisibility()) || this.crosshairVisibility() == $.ig.Visibility.prototype.visible);
		this.ignoreCrosshairVisibilityChange(false);
	}
	,
	_cachedEffectiveIsSquare: false,
	cachedEffectiveIsSquare: function (value) {
		if (arguments.length === 1) {
			this._cachedEffectiveIsSquare = value;
			return value;
		} else {
			return this._cachedEffectiveIsSquare;
		}
	}
	,
	$type: new $.ig.Type('SeriesViewer', $.ig.Control.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('XamDataChart', 'SeriesViewer', {
	staticInit: function () {
		$.ig.XamDataChart.prototype.decimalMinimumValueAsDouble = -1.7976931348623157E+308;
		$.ig.XamDataChart.prototype.decimalMaximumValueAsDouble = 1.7976931348623157E+308;
	},
	findSeriesIndex: function (series) {
		if (series.seriesViewer() == null) {
			return -1;
		}
		if (!series.isIndexed()) {
			return -1;
		}
		var allSeries = $.ig.XamDataChartView.prototype.getAllSeries(series);
		if ($.ig.Enumerable.prototype.count$1($.ig.Series.prototype.$type, allSeries) == 0) {
			return -1;
		}
		var index = $.ig.Enumerable.prototype.max$1($.ig.Series.prototype.$type, allSeries, function (s) { return s.index(); }) + 1;
		if ($.ig.util.cast($.ig.FragmentBase.prototype.$type, series) !== null || $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, series) !== null) {
			var parentSeries = $.ig.util.cast($.ig.FragmentBase.prototype.$type, series) !== null ? (series).parentSeries() : (series).parentSeries();
			var anchoredSeries = $.ig.util.cast($.ig.AnchoredCategorySeries.prototype.$type, series);
			if (parentSeries.index() == -1 || parentSeries.stackedSeriesManager() == null || anchoredSeries == null || parentSeries.stackedSeriesManager().seriesVisual().indexOf(anchoredSeries) == -1) {
				return -1;
			}
			index = parentSeries.index() + parentSeries.stackedSeriesManager().seriesVisual().indexOf(anchoredSeries);
		}
		return index;
	}
	,
	init: function () {
		this.__actualWindowScaleHorizontal = 1;
		this.__actualWindowScaleVertical = 1;
		this._axes = new $.ig.AxisCollection();
		this.__plotAreaMarginLeft = 0;
		this.__plotAreaMarginTop = 0;
		this.__plotAreaMarginRight = 0;
		this.__plotAreaMarginBottom = 0;
		$.ig.SeriesViewer.prototype.init.call(this);
		this.defaultStyleKey($.ig.XamDataChart.prototype.$type);
		var $t = this.axes();
		$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.axes_CollectionChanged.runOn(this));
		var $t1 = this.axes();
		$t1.collectionResetting = $.ig.Delegate.prototype.combine($t1.collectionResetting, this.axes_CollectionResetting.runOn(this));
	},
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.SeriesViewer.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.XamDataChart.prototype.windowScaleHorizontalPropertyName:
				this.actualWindowScaleHorizontal(this.windowScaleHorizontal());
				break;
			case $.ig.XamDataChart.prototype.windowScaleVerticalPropertyName:
				this.actualWindowScaleVertical(this.windowScaleVertical());
				break;
			case $.ig.XamDataChart.prototype.actualWindowScaleHorizontalPropertyName:
			case $.ig.XamDataChart.prototype.actualWindowScaleVerticalPropertyName:
				if (!this.suspendWindowRect()) {
					this.updateWindowRect(this.getActualWindowScaleHorizontal(), this.getActualWindowScaleVertical());
				}
				break;
			case $.ig.XamDataChart.prototype.gridModePropertyName:
				(this.view()).updateGridMode(newValue);
				{
					var en = this.axes().getEnumerator();
					while (en.moveNext()) {
						var axis = en.current();
						axis.renderAxis();
					}
				}
				break;
			case $.ig.XamDataChart.prototype.horizontalZoomablePropertyName:
			case $.ig.XamDataChart.prototype.verticalZoomablePropertyName:
				this.updateOverviewPlusDetailPaneControlPanelVisibility();
				break;
			case $.ig.XamDataChart.prototype.alignsGridLinesToPixelsPropertyName:
			case $.ig.XamDataChart.prototype.shouldClipGridlinesPropertyName:
				if (oldValue != newValue) {
					var en1 = this.axes().getEnumerator();
					while (en1.moveNext()) {
						var axis1 = en1.current();
						axis1.mustInvalidateLabels(true);
						axis1.renderAxis();
					}
				}
				break;
			case $.ig.XamDataChart.prototype.defaultAxisStrokePropertyName:
			case $.ig.XamDataChart.prototype.defaultAxisMajorStrokePropertyName:
			case $.ig.XamDataChart.prototype.defaultAxisMinorStrokePropertyName:
				var en2 = this.axes().getEnumerator();
				while (en2.moveNext()) {
					var axis2 = en2.current();
					axis2.updateActualBrushes();
				}
				break;
		}
	}
	,
	onPlotAreaMarginsChanged: function () {
		this.effectiveViewport(this.computeEffectiveViewport(this.viewportRect()));
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			axis.mustInvalidateLabels(true);
			axis.renderAxis();
		}
		var en1 = this.series().getEnumerator();
		while (en1.moveNext()) {
			var series = en1.current();
			series.renderSeries(false);
		}
	}
	,
	isSquare: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.isSquareProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.isSquareProperty);
		}
	}
	,
	getActualWindowScaleHorizontal: function () {
		return this.actualWindowScaleHorizontal();
	}
	,
	getActualWindowScaleVertical: function () {
		return this.actualWindowScaleVertical();
	}
	,
	updateAcutalWindowProperties: function () {
		$.ig.SeriesViewer.prototype.updateAcutalWindowProperties.call(this);
		this.actualWindowScaleHorizontal(this.actualWindowRect().width());
		this.actualWindowScaleVertical(this.actualWindowRect().height());
	}
	,
	windowScaleHorizontal: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.windowScaleHorizontalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.windowScaleHorizontalProperty);
		}
	}
	,
	windowScaleVertical: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.windowScaleVerticalProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.windowScaleVerticalProperty);
		}
	}
	,
	__actualWindowScaleHorizontal: 0,
	actualWindowScaleHorizontal: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualWindowScaleHorizontal;
			this.__actualWindowScaleHorizontal = value;
			this.raisePropertyChanged($.ig.XamDataChart.prototype.actualWindowScaleHorizontalPropertyName, oldValue, this.__actualWindowScaleHorizontal);
			return value;
		} else {
			return this.__actualWindowScaleHorizontal;
		}
	}
	,
	__actualWindowScaleVertical: 0,
	actualWindowScaleVertical: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__actualWindowScaleVertical;
			this.__actualWindowScaleVertical = value;
			this.raisePropertyChanged($.ig.XamDataChart.prototype.actualWindowScaleVerticalPropertyName, oldValue, this.__actualWindowScaleVertical);
			return value;
		} else {
			return this.__actualWindowScaleVertical;
		}
	}
	,
	isZoomingHorizontallyEnabled: function () {
		return this.horizontalZoomable();
	}
	,
	isZoomingVerticallyEnabled: function () {
		return this.verticalZoomable();
	}
	,
	horizontalZoomable: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.horizontalZoomableProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.horizontalZoomableProperty);
		}
	}
	,
	verticalZoomable: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.verticalZoomableProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.verticalZoomableProperty);
		}
	}
	,
	horizontalZoombarVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.horizontalZoombarVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamDataChart.prototype.horizontalZoombarVisibilityProperty));
		}
	}
	,
	verticalZoombarVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.verticalZoombarVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamDataChart.prototype.verticalZoombarVisibilityProperty));
		}
	}
	,
	gridMode: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.gridModeProperty, $.ig.GridMode.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.XamDataChart.prototype.gridModeProperty));
		}
	}
	,
	alignsGridLinesToPixels: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.alignsGridLinesToPixelsProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.alignsGridLinesToPixelsProperty);
		}
	}
	,
	shouldClipGridlines: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.shouldClipGridlinesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.shouldClipGridlinesProperty);
		}
	}
	,
	brushes: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.brushesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.brushesProperty);
		}
	}
	,
	markerBrushes: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.markerBrushesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.markerBrushesProperty);
		}
	}
	,
	outlines: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.outlinesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.outlinesProperty);
		}
	}
	,
	markerOutlines: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.markerOutlinesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.markerOutlinesProperty);
		}
	}
	,
	defaultAxisStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.defaultAxisStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.defaultAxisStrokeProperty);
		}
	}
	,
	defaultAxisMajorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.defaultAxisMajorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.defaultAxisMajorStrokeProperty);
		}
	}
	,
	defaultAxisMinorStroke: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.defaultAxisMinorStrokeProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.defaultAxisMinorStrokeProperty);
		}
	}
	,
	axes: function () {
		return this._axes;
	}
	,
	_axes: null,
	axes_CollectionChanged: function (sender, e) {
		if (e.oldItems() != null) {
			var en = e.oldItems().getEnumerator();
			while (en.moveNext()) {
				var axis = en.current();
				if (axis != null) {
					axis.fastItemsSourceProvider(null);
					axis.seriesViewer(null);
					this.removeDataSource(axis);
					this.view().removeAxis(axis);
					axis.rangeChanged = $.ig.Delegate.prototype.remove(axis.rangeChanged, this.axis_RangeChanged.runOn(this));
					this.view().removeLabelPanel(axis);
					if (axis.series() != null) {
						var en1 = axis.directSeries().getEnumerator();
						while (en1.moveNext()) {
							var series = en1.current();
							series.renderSeries(false);
						}
					}
				}
			}
			if (this.axes().count() == 0) {
				this.resetZoom();
			}
		}
		if (e.newItems() != null) {
			var en2 = e.newItems().getEnumerator();
			while (en2.moveNext()) {
				var axis1 = en2.current();
				if (axis1 != null) {
					this.updateDataSourceFor(axis1);
					axis1.fastItemsSourceProvider(this.actualSyncLink());
					axis1.seriesViewer(this);
					axis1.view().updateStrokeBrushesFromCss();
					this.view().attachAxis(axis1);
					axis1.rangeChanged = $.ig.Delegate.prototype.combine(axis1.rangeChanged, this.axis_RangeChanged.runOn(this));
					this.view().addLabelPanel(axis1);
				}
			}
		}
		this.notifyThumbnailAppearanceChanged();
	}
	,
	axes_CollectionResetting: function (sender, e) {
		var seriesList = new $.ig.List$1($.ig.Series.prototype.$type, 0);
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			if (axis.series() != null) {
				var en1 = axis.directSeries().getEnumerator();
				while (en1.moveNext()) {
					var series = en1.current();
					if (!seriesList.contains(series)) {
						seriesList.add(series);
					}
				}
			}
			axis.fastItemsSourceProvider(null);
			axis.seriesViewer(null);
			this.removeDataSource(axis);
			this.view().removeAxis(axis);
			axis.rangeChanged = $.ig.Delegate.prototype.remove(axis.rangeChanged, this.axis_RangeChanged.runOn(this));
			this.view().removeLabelPanel(axis);
			this.resetZoom();
		}
		var en2 = this.series().getEnumerator();
		while (en2.moveNext()) {
			var series1 = en2.current();
			if (!seriesList.contains(series1)) {
				seriesList.add(series1);
			}
		}
		var en3 = seriesList.getEnumerator();
		while (en3.moveNext()) {
			var series2 = en3.current();
			series2.renderSeries(false);
		}
	}
	,
	axisRangeChanged: null,
	axis_RangeChanged: function (sender, args) {
		var targetAxis = $.ig.util.cast($.ig.Axis.prototype.$type, sender);
		if (targetAxis == null) {
			return;
		}
		this.notifyThumbnailAppearanceChanged();
		if (this.axisRangeChanged != null) {
			this.axisRangeChanged(this, new $.ig.ChartAxisRangeChangedEventArgs(this, targetAxis, args.oldMinimumValue(), args.minimumValue(), args.oldMaximumValue(), args.maximumValue()));
		}
		if (targetAxis.crossingAxis() != null) {
			targetAxis.crossingAxis().refresh();
		}
		targetAxis.refresh();
		var animate = this.animateSeriesWhenAxisRangeChanges();
		if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, targetAxis) !== null) {
			animate = true;
		}
		var en = targetAxis.directSeries().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.thumbnailDirty(true);
			this.notifyThumbnailAppearanceChanged();
			series.renderSeries(animate);
		}
		if (targetAxis.seriesViewer() != null) {
			var en1 = targetAxis.seriesViewer().series().getEnumerator();
			while (en1.moveNext()) {
				var series1 = en1.current();
				$.ig.XamDataChart.prototype.onValueOverlayRangeChanged(targetAxis, animate, series1);
			}
		}
		var en2 = this.axes().getEnumerator();
		while (en2.moveNext()) {
			var chartAxis = en2.current();
			if (chartAxis != targetAxis && chartAxis.crossingAxis() != null && chartAxis.crossingAxis() == targetAxis) {
				chartAxis.refresh();
			}
		}
	}
	,
	onValueOverlayRangeChanged: function (targetAxis, animate, series) {
	}
	,
	updateSyncLink: function (oldLink, newLink) {
		$.ig.SeriesViewer.prototype.updateSyncLink.call(this, oldLink, newLink);
		if (this.axes() == null) {
			return;
		}
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			axis.fastItemsSourceProvider(this.actualSyncLink());
			axis.seriesViewer(this);
		}
	}
	,
	gridZIndex: function () {
		return this.gridMode() == $.ig.GridMode.prototype.beforeSeries ? 2 : 1;
	}
	,
	seriesZIndex: function () {
		return this.gridMode() == $.ig.GridMode.prototype.beforeSeries ? 1 : 2;
	}
	,
	__fontInfo: null,
	getFontInfo: function () {
		this.__fontInfo = this.chartView().font();
		return this.__fontInfo;
	}
	,
	styleUpdated: function () {
		this.view().styleUpdated();
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			axis.renderAxis1(false);
		}
		var en1 = this.series().getEnumerator();
		while (en1.moveNext()) {
			var series = en1.current();
			series.view().updateLegendItemVisual();
			series.renderSeries(false);
		}
	}
	,
	getFontBrush: function () {
		return this.chartView().fontBrush();
	}
	,
	destroyOverride: function () {
		$.ig.SeriesViewer.prototype.destroyOverride.call(this);
		var toDestroy = new $.ig.List$1($.ig.Axis.prototype.$type, 0);
		for (var i = 0; i < this.axes().count(); i++) {
			toDestroy.add(this.axes().__inner[i]);
		}
		for (var i1 = 0; i1 < toDestroy.count(); i1++) {
			this.axes().remove(toDestroy.__inner[i1]);
			if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, toDestroy.__inner[i1]) !== null) {
				var cat = toDestroy.__inner[i1];
				this.removeSpecificDataSource(cat.name(), true);
				cat.itemsSource(null);
			}
			toDestroy.__inner[i1].provideContext(null, null);
		}
	}
	,
	getAxisLineBrush: function () {
		return this.chartView().axisLineBrush();
	}
	,
	shouldAddAutoMargins: function () {
		return true;
	}
	,
	updateDataSources: function () {
		$.ig.SeriesViewer.prototype.updateDataSources.call(this);
		if (!this.manageDataSources()) {
			return;
		}
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			this.updateDataSourceFor(axis);
		}
	}
	,
	getBrushByIndex: function (index) {
		return this.getBrushByIndex1(index, this.brushes());
	}
	,
	getBrushByIndex1: function (index, brushes) {
		if (brushes != null && brushes.count() > 0) {
			return brushes.item(index % brushes.count());
		} else {
			return null;
		}
	}
	,
	getMarkerBrushByIndex: function (index) {
		return this.getBrushByIndex1(index, this.markerBrushes());
	}
	,
	getMarkerOutlineByIndex: function (index) {
		return this.getBrushByIndex1(index, this.markerOutlines());
	}
	,
	getOutlineByIndex: function (index) {
		return this.getBrushByIndex1(index, this.outlines());
	}
	,
	effectiveIsSquare: function () {
		if (this.isSquare()) {
			return true;
		}
		return this.hasPolarOrRadial();
	}
	,
	hasPolarOrRadial: function () {
		var polarAndRadial = ($.ig.Enumerable.prototype.where$1($.ig.Series.prototype.$type, (this.series()), function (series) { return $.ig.util.cast($.ig.RadialBase.prototype.$type, series) !== null || $.ig.util.cast($.ig.PolarBase.prototype.$type, series) !== null; }));
		if ($.ig.Enumerable.prototype.any$1($.ig.Series.prototype.$type, polarAndRadial)) {
			return true;
		}
		var angleAndRadius = ($.ig.Enumerable.prototype.where$1($.ig.Axis.prototype.$type, (this.axes()), function (axis) { return $.ig.util.cast($.ig.NumericAngleAxis.prototype.$type, axis) !== null || $.ig.util.cast($.ig.NumericRadiusAxis.prototype.$type, axis) !== null || $.ig.util.cast($.ig.CategoryAngleAxis.prototype.$type, axis) !== null; }));
		if ($.ig.Enumerable.prototype.any$1($.ig.Axis.prototype.$type, angleAndRadius)) {
			return true;
		}
		return false;
	}
	,
	createView: function () {
		return new $.ig.XamDataChartView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.SeriesViewer.prototype.onViewCreated.call(this, view);
		this.chartView(view);
	}
	,
	_chartView: null,
	chartView: function (value) {
		if (arguments.length === 1) {
			this._chartView = value;
			return value;
		} else {
			return this._chartView;
		}
	}
	,
	refreshAllContentAfterTiledZoom: function () {
		for (var i = 0; i < this._axes.count(); i++) {
			this._axes.__inner[i].mustInvalidateLabels(true);
			this._axes.__inner[i].renderAxis1(false);
		}
		$.ig.SeriesViewer.prototype.refreshAllContentAfterTiledZoom.call(this);
	}
	,
	plotAreaBackgroundContent: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.XamDataChart.prototype.plotAreaBackgroundContentProperty, value);
			return value;
		} else {
			return this.getValue($.ig.XamDataChart.prototype.plotAreaBackgroundContentProperty);
		}
	}
	,
	__plotAreaMarginLeft: 0,
	plotAreaMarginLeft: function (value) {
		if (arguments.length === 1) {
			this.__plotAreaMarginLeft = value;
			this.onPlotAreaMarginsChanged();
			return value;
		} else {
			return this.__plotAreaMarginLeft;
		}
	}
	,
	__plotAreaMarginTop: 0,
	plotAreaMarginTop: function (value) {
		if (arguments.length === 1) {
			this.__plotAreaMarginTop = value;
			this.onPlotAreaMarginsChanged();
			return value;
		} else {
			return this.__plotAreaMarginTop;
		}
	}
	,
	__plotAreaMarginRight: 0,
	plotAreaMarginRight: function (value) {
		if (arguments.length === 1) {
			this.__plotAreaMarginRight = value;
			this.onPlotAreaMarginsChanged();
			return value;
		} else {
			return this.__plotAreaMarginRight;
		}
	}
	,
	__plotAreaMarginBottom: 0,
	plotAreaMarginBottom: function (value) {
		if (arguments.length === 1) {
			this.__plotAreaMarginBottom = value;
			this.onPlotAreaMarginsChanged();
			return value;
		} else {
			return this.__plotAreaMarginBottom;
		}
	}
	,
	computeEffectiveViewport: function (viewportRect) {
		var baseRect = $.ig.SeriesViewer.prototype.computeEffectiveViewport.call(this, viewportRect);
		if (viewportRect.isEmpty()) {
			return $.ig.Rect.prototype.empty();
		}
		if (this.plotAreaMarginLeft() == 0 && this.plotAreaMarginTop() == 0 && this.plotAreaMarginRight() == 0 && this.plotAreaMarginBottom() == 0) {
			return $.ig.Rect.prototype.empty();
		}
		if (this.plotAreaMarginLeft() + this.plotAreaMarginRight() >= viewportRect.width() || this.plotAreaMarginTop() + this.plotAreaMarginBottom() >= viewportRect.height()) {
			return $.ig.Rect.prototype.empty();
		}
		var viewportWithMargins = new $.ig.Rect(0, viewportRect.left() + this.plotAreaMarginLeft(), viewportRect.top() + this.plotAreaMarginTop(), viewportRect.width() - this.plotAreaMarginLeft() - this.plotAreaMarginRight(), viewportRect.height() - this.plotAreaMarginTop() - this.plotAreaMarginBottom());
		return viewportWithMargins;
	}
	,
	getSafeViewportForInitialZoom: function () {
		var viewport = this.viewportRect();
		var window = this.windowRect();
		var effectiveViewport = this.effectiveViewport();
		if (effectiveViewport.isEmpty() || viewport.isEmpty()) {
			return viewport;
		}
		if (effectiveViewport.containsRect(viewport)) {
			return viewport;
		}
		if (viewport.containsRect(effectiveViewport)) {
			return effectiveViewport;
		}
		return viewport;
	}
	,
	exportVisualData: function () {
		var cvd = new $.ig.ChartVisualData();
		for (var i = 0; i < this.axes().count(); i++) {
			var avd = this.axes().__inner[i].exportVisualData();
			cvd.axes().add(avd);
		}
		for (var i1 = 0; i1 < this.series().count(); i1++) {
			var svd = this.series().__inner[i1].exportVisualData();
			cvd.series().add(svd);
		}
		cvd.name(this.name());
		this.exportTitleData(cvd);
		this.view().exportChartData(cvd);
		return cvd;
	}
	,
	prepareAxesForTiledZoom: function () {
		$.ig.SeriesViewer.prototype.prepareAxesForTiledZoom.call(this);
		for (var i = 0; i < this.axes().count(); i++) {
			var currentAxis = this.axes().__inner[i];
			var extent = 50;
			if (!$.ig.util.isNaN(currentAxis.labelPanel().extent())) {
				extent = currentAxis.labelPanel().extent();
			}
			currentAxis.extentOverride(extent);
		}
	}
	,
	releaseAxesFromTiledZoom: function () {
		$.ig.SeriesViewer.prototype.releaseAxesFromTiledZoom.call(this);
		for (var i = 0; i < this.axes().count(); i++) {
			var currentAxis = this.axes().__inner[i];
			currentAxis.extentOverride(NaN);
			currentAxis.mustInvalidateLabels(true);
			currentAxis.renderAxis1(false);
		}
	}
	,
	findMatchingAxes: function (axis) {
		var list = new $.ig.List$1($.ig.Axis.prototype.$type, 0);
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			var matchingAxis = currentSeries.getMatchingAxis(axis);
			if (matchingAxis != null) {
				list.add(matchingAxis);
			}
		}
		return list;
	}
	,
	$type: new $.ig.Type('XamDataChart', $.ig.SeriesViewer.prototype.$type)
}, true);

$.ig.util.defType('LabelPanelArranger', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	preparePanels: function (labelPanels, gridAreaRect) {
		var en = labelPanels.getEnumerator();
		while (en.moveNext()) {
			var panel = en.current();
			var axis = panel.axis();
			var crossingAxis = axis.crossingAxis();
			crossingAxis = $.ig.LabelPanelArranger.prototype.ensurePolarCrossing(panel, axis, crossingAxis);
			var labelLocation = $.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel);
			var desiredWidth = 0;
			var desiredHeight = 0;
			var desiredExtent = 0;
			if (axis.hasUserExtent()) {
				panel.view().bindExtentToSettings();
				desiredExtent = panel.extent();
			} else {
				desiredExtent = panel.getDesiredExtent(gridAreaRect);
			}
			desiredWidth = desiredExtent;
			desiredHeight = desiredExtent;
			if (panel.axis().labelSettings() != null && panel.axis().labelSettings().visibility() != $.ig.Visibility.prototype.visible) {
				desiredHeight = 0;
				desiredWidth = 0;
			}
			if (panel.isHorizontalPanel()) {
				switch (labelLocation) {
					case $.ig.AxisLabelsLocation.prototype.outsideTop:
						gridAreaRect.y(Math.max(0, gridAreaRect.top() + desiredHeight));
						gridAreaRect.height(Math.max(0, gridAreaRect.height() - desiredHeight));
						axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.outsideTop);
						break;
					case $.ig.AxisLabelsLocation.prototype.insideTop:
						if (crossingAxis != null && (panel.crossingValue() - gridAreaRect.top() < desiredHeight && $.ig.util.cast($.ig.HorizontalAxisLabelPanel.prototype.$type, panel) !== null)) {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideBottom);
						} else {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideTop);
						}
						break;
					case $.ig.AxisLabelsLocation.prototype.insideBottom:
						if (crossingAxis != null && (gridAreaRect.bottom() - panel.crossingValue() < desiredHeight && $.ig.util.cast($.ig.HorizontalAxisLabelPanel.prototype.$type, panel) !== null)) {
							if (axis.labelSettings() != null) {
								axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideTop);
							}
						} else {
							if (axis.labelSettings() != null) {
								axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideBottom);
							}
						}
						break;
					case $.ig.AxisLabelsLocation.prototype.outsideBottom:
					default:
						if (axis.labelSettings() != null) {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.outsideBottom);
						}
						gridAreaRect.height(Math.max(0, gridAreaRect.height() - desiredHeight));
						break;
				}
			}
			if ($.ig.util.cast($.ig.VerticalAxisLabelPanel.prototype.$type, panel) !== null) {
				switch (labelLocation) {
					case $.ig.AxisLabelsLocation.prototype.outsideRight:
						gridAreaRect.width(Math.max(0, gridAreaRect.width() - desiredWidth));
						axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.outsideRight);
						break;
					case $.ig.AxisLabelsLocation.prototype.insideLeft:
						if (crossingAxis != null && panel.crossingValue() - gridAreaRect.left() < desiredWidth) {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideRight);
						} else {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideLeft);
						}
						break;
					case $.ig.AxisLabelsLocation.prototype.insideRight:
						if (crossingAxis != null && gridAreaRect.right() - panel.crossingValue() < desiredWidth) {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideLeft);
						} else {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.insideRight);
						}
						break;
					case $.ig.AxisLabelsLocation.prototype.outsideLeft:
					default:
						if (axis.labelSettings() != null) {
							axis.labelSettings().actualLocation($.ig.AxisLabelsLocation.prototype.outsideLeft);
						}
						gridAreaRect.x(Math.max(0, gridAreaRect.left() + desiredWidth));
						gridAreaRect.width(Math.max(0, gridAreaRect.width() - desiredWidth));
						break;
				}
			}
			if ($.ig.util.cast($.ig.AngleAxisLabelPanel.prototype.$type, panel) !== null) {
				if (axis.labelSettings() != null) {
					axis.labelSettings().actualLocation(labelLocation);
				}
			}
		}
		return gridAreaRect;
	}
	,
	ensurePolarCrossing: function (panel, axis, crossingAxis) {
		if ($.ig.util.cast($.ig.RadialAxisLabelPanel.prototype.$type, panel) !== null && $.ig.util.cast($.ig.NumericRadiusAxis.prototype.$type, axis) !== null) {
			crossingAxis = (axis).angleAxis();
		}
		if ($.ig.util.cast($.ig.AngleAxisLabelPanel.prototype.$type, panel) !== null && $.ig.util.cast($.ig.NumericAngleAxis.prototype.$type, axis) !== null) {
			crossingAxis = (axis).radiusAxis();
		}
		if ($.ig.util.cast($.ig.AngleAxisLabelPanel.prototype.$type, panel) !== null && $.ig.util.cast($.ig.CategoryAngleAxis.prototype.$type, axis) !== null) {
			crossingAxis = (axis).radiusAxis();
		}
		return crossingAxis;
	}
	,
	resolveLabelLocation: function (panel) {
		if (panel == null) {
			return $.ig.AxisLabelsLocation.prototype.outsideBottom;
		} else {
			var axis = panel.axis();
			if (axis != null && axis.labelSettings() != null) {
				var location = axis.labelSettings().actualLocation();
				if (!panel.validLocation(location)) {
					return panel.getDefaultLabelsLocation();
				}
				return location;
			} else {
				return panel.getDefaultLabelsLocation();
			}
		}
	}
	,
	arrangeLabelPanel: function (panel, arrangeState, gridAreaRect, setBounds) {
		var axis = panel.axis();
		var crossingAxis = axis.crossingAxis();
		crossingAxis = $.ig.LabelPanelArranger.prototype.ensurePolarCrossing(panel, axis, crossingAxis);
		var labelLocation = $.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel);
		var bounds;
		var desiredExtent = panel.getDesiredExtent(gridAreaRect);
		var panelHeight = desiredExtent;
		var panelWidth = desiredExtent;
		if (panel.axis() != null && panel.axis().labelSettings() != null && panel.axis().labelSettings().visibility() == $.ig.Visibility.prototype.collapsed) {
			return;
		}
		switch (labelLocation) {
			case $.ig.AxisLabelsLocation.prototype.outsideRight:
				arrangeState.right(arrangeState.right() - panelWidth);
				arrangeState.insideRight(arrangeState.insideRight() - panelWidth);
				bounds = new $.ig.Rect(0, arrangeState.right(), gridAreaRect.top(), panelWidth, gridAreaRect.height());
				setBounds(panel, bounds);
				break;
			case $.ig.AxisLabelsLocation.prototype.outsideLeft:
				bounds = new $.ig.Rect(0, arrangeState.left(), gridAreaRect.top(), panelWidth, gridAreaRect.height());
				setBounds(panel, bounds);
				arrangeState.left(arrangeState.left() + panelWidth);
				arrangeState.insideLeft(arrangeState.insideLeft() + panelWidth);
				break;
			case $.ig.AxisLabelsLocation.prototype.insideRight:
				if (crossingAxis != null) {
					bounds = new $.ig.Rect(0, arrangeState.left() + panel.crossingValue(), gridAreaRect.top(), panelWidth, gridAreaRect.height());
				} else {
					arrangeState.insideRight(arrangeState.insideRight() - panelWidth);
					bounds = new $.ig.Rect(0, arrangeState.insideRight(), gridAreaRect.top(), panelWidth, gridAreaRect.height());
				}
				setBounds(panel, bounds);
				break;
			case $.ig.AxisLabelsLocation.prototype.insideLeft:
				if (crossingAxis != null) {
					bounds = new $.ig.Rect(0, arrangeState.left() + panel.crossingValue() - panelWidth, gridAreaRect.top(), panelWidth, gridAreaRect.height());
				} else {
					bounds = new $.ig.Rect(0, arrangeState.insideLeft(), gridAreaRect.top(), panelWidth, gridAreaRect.height());
					arrangeState.insideLeft(arrangeState.insideLeft() + panelWidth);
				}
				setBounds(panel, bounds);
				break;
			case $.ig.AxisLabelsLocation.prototype.outsideBottom:
				arrangeState.bottom(arrangeState.bottom() - panelHeight);
				arrangeState.insideBottom(arrangeState.insideBottom() - panelHeight);
				bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.bottom(), gridAreaRect.width(), panelHeight);
				setBounds(panel, bounds);
				break;
			case $.ig.AxisLabelsLocation.prototype.outsideTop:
				bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.top(), gridAreaRect.width(), panelHeight);
				setBounds(panel, bounds);
				arrangeState.top(arrangeState.top() + panelHeight);
				arrangeState.insideTop(arrangeState.insideTop() + panelHeight);
				break;
			case $.ig.AxisLabelsLocation.prototype.insideBottom:
				if (crossingAxis != null) {
					bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.top() + panel.crossingValue(), gridAreaRect.width(), panelHeight);
				} else {
					arrangeState.insideBottom(arrangeState.insideBottom() - panelHeight);
					bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.insideBottom(), gridAreaRect.width(), panelHeight);
				}
				setBounds(panel, bounds);
				break;
			case $.ig.AxisLabelsLocation.prototype.insideTop:
				if (crossingAxis != null) {
					bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.top() + panel.crossingValue() - panelHeight, gridAreaRect.width(), panelHeight);
				} else {
					bounds = new $.ig.Rect(0, gridAreaRect.left(), arrangeState.insideTop(), gridAreaRect.width(), panelHeight);
					arrangeState.insideTop(arrangeState.insideTop() + panelHeight);
				}
				setBounds(panel, bounds);
				break;
		}
		if ($.ig.util.cast($.ig.AngleAxisLabelPanel.prototype.$type, panel) !== null) {
			bounds = new $.ig.Rect(0, gridAreaRect.left(), gridAreaRect.top(), gridAreaRect.width(), gridAreaRect.height());
			setBounds(panel, bounds);
		}
	}
	,
	arrangePanels: function (labelPanels, arrangeState, gridAreaRect, setBounds) {
		var insidePanels = new $.ig.List$1($.ig.AxisLabelPanelBase.prototype.$type, 0);
		var outsidePanels = new $.ig.List$1($.ig.AxisLabelPanelBase.prototype.$type, 0);
		var en = labelPanels.getEnumerator();
		while (en.moveNext()) {
			var panel = en.current();
			var labelLocation = $.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel);
			switch (labelLocation) {
				case $.ig.AxisLabelsLocation.prototype.outsideBottom:
				case $.ig.AxisLabelsLocation.prototype.outsideLeft:
				case $.ig.AxisLabelsLocation.prototype.outsideTop:
				case $.ig.AxisLabelsLocation.prototype.outsideRight:
					outsidePanels.add(panel);
					break;
				case $.ig.AxisLabelsLocation.prototype.insideBottom:
				case $.ig.AxisLabelsLocation.prototype.insideLeft:
				case $.ig.AxisLabelsLocation.prototype.insideTop:
				case $.ig.AxisLabelsLocation.prototype.insideRight:
					insidePanels.add(panel);
					break;
			}
		}
		var en1 = outsidePanels.getEnumerator();
		while (en1.moveNext()) {
			var panel1 = en1.current();
			$.ig.LabelPanelArranger.prototype.arrangeLabelPanel(panel1, arrangeState, gridAreaRect, setBounds);
		}
		var en2 = insidePanels.getEnumerator();
		while (en2.moveNext()) {
			var panel2 = en2.current();
			$.ig.LabelPanelArranger.prototype.arrangeLabelPanel(panel2, arrangeState, gridAreaRect, setBounds);
		}
	}
	,
	$type: new $.ig.Type('LabelPanelArranger', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LabelPanelsArrangeState', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_bottom: 0,
	bottom: function (value) {
		if (arguments.length === 1) {
			this._bottom = value;
			return value;
		} else {
			return this._bottom;
		}
	}
	,
	_top: 0,
	top: function (value) {
		if (arguments.length === 1) {
			this._top = value;
			return value;
		} else {
			return this._top;
		}
	}
	,
	_insideBottom: 0,
	insideBottom: function (value) {
		if (arguments.length === 1) {
			this._insideBottom = value;
			return value;
		} else {
			return this._insideBottom;
		}
	}
	,
	_insideTop: 0,
	insideTop: function (value) {
		if (arguments.length === 1) {
			this._insideTop = value;
			return value;
		} else {
			return this._insideTop;
		}
	}
	,
	_left: 0,
	left: function (value) {
		if (arguments.length === 1) {
			this._left = value;
			return value;
		} else {
			return this._left;
		}
	}
	,
	_right: 0,
	right: function (value) {
		if (arguments.length === 1) {
			this._right = value;
			return value;
		} else {
			return this._right;
		}
	}
	,
	_insideLeft: 0,
	insideLeft: function (value) {
		if (arguments.length === 1) {
			this._insideLeft = value;
			return value;
		} else {
			return this._insideLeft;
		}
	}
	,
	_insideRight: 0,
	insideRight: function (value) {
		if (arguments.length === 1) {
			this._insideRight = value;
			return value;
		} else {
			return this._insideRight;
		}
	}
	,
	$type: new $.ig.Type('LabelPanelsArrangeState', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieChartBase', 'Control', {
	createView: function () {
		return new $.ig.PieChartBaseView(this);
	}
	,
	onViewCreated: function (view) {
		this.view(view);
	}
	,
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	init: function () {
		var $self = this;
		this.__brushesAttached = false;
		this.__outlinesAttached = false;
		this.__fastItemsSourceAttached = false;
		this.__selectedAttached = false;
		this.__explodedAttached = false;
		this.__explodedSlices = new $.ig.IndexCollection();
		this.__selectedSlices = new $.ig.IndexCollection();
		this.__textStyle = null;
		$.ig.Control.prototype.init.call(this);
		this.viewport($.ig.Rect.prototype.empty());
		var view = this.createView();
		this.onViewCreated(view);
		view.onInit();
		this.defaultStyleKey($.ig.PieChartBase.prototype.$type);
		this.valueIndices(new $.ig.List$1($.ig.Number.prototype.$type, 0));
		this.othersValueIndices(new $.ig.List$1($.ig.Number.prototype.$type, 0));
		this.others(new $.ig.List$1($.ig.Object.prototype.$type, 0));
		this.__propertyUpdatedOverride = function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		};
		this.__brushesChangedOverride = function (o, e) {
			$self.renderSlices();
			$self.renderLegendItems();
		};
		this.__explodedIndicesChangedOverride = function (o, e) {
			if ($self.allowSliceExplosion()) {
				$self.prepareSlices();
				$self.prepareLabels();
				$self.renderSlices();
				$self.renderLabels();
			}
		};
		this.__selectedIndicesChangedOverride = function (o, e) {
			$self.selectedIndicesChangedOverride(e);
		};
		this._fastItemsSource_Event = function (o, e) {
			$self.dataUpdatedOverride(e.action(), e.position(), e.count(), e.propertyName());
		};
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, this.__propertyUpdatedOverride);
		var $t = this.selectedSlices();
		$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.__selectedIndicesChangedOverride);
		this.__selectedAttached = true;
		var $t1 = this.explodedSlices();
		$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, this.__explodedIndicesChangedOverride);
		this.__explodedAttached = true;
		this._slices = (function () {
			var $ret = new $.ig.Pool$1($.ig.Slice.prototype.$type);
			$ret.create($self.view().sliceCreate.runOn($self.view()));
			$ret.activate($self.view().sliceActivate.runOn($self.view()));
			$ret.disactivate($self.view().sliceDisactivate.runOn($self.view()));
			$ret.destroy($self.view().sliceDestroy.runOn($self.view()));
			return $ret;
		}());
		this._labels = (function () {
			var $ret = new $.ig.Pool$1($.ig.PieLabel.prototype.$type);
			$ret.create($self.view().labelCreate.runOn($self.view()));
			$ret.activate($self.view().labelActivate.runOn($self.view()));
			$ret.disactivate($self.view().labelDisactivate.runOn($self.view()));
			$ret.destroy($self.view().labelDestroy.runOn($self.view()));
			return $ret;
		}());
	},
	__brushesAttached: false,
	__outlinesAttached: false,
	__fastItemsSourceAttached: false,
	__selectedAttached: false,
	__explodedAttached: false,
	__propertyUpdatedOverride: null,
	__brushesChangedOverride: null,
	__selectedIndicesChangedOverride: null,
	__explodedIndicesChangedOverride: null,
	_fastItemsSource_Event: null,
	fastItemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.fastItemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.fastItemsSourceProperty);
		}
	}
	,
	__valueColumn: null,
	valueColumn: function (value) {
		if (arguments.length === 1) {
			if (this.__valueColumn != value) {
				var oldValueColumn = this.__valueColumn;
				this.__valueColumn = value;
				this.raisePropertyChanged($.ig.PieChartBase.prototype.valueColumnPropertyName, oldValueColumn, this.__valueColumn);
			}
			return value;
		} else {
			return this.__valueColumn;
		}
	}
	,
	_totalSliceCount: 0,
	totalSliceCount: function (value) {
		if (arguments.length === 1) {
			this._totalSliceCount = value;
			return value;
		} else {
			return this._totalSliceCount;
		}
	}
	,
	_othersTotal: 0,
	othersTotal: function (value) {
		if (arguments.length === 1) {
			this._othersTotal = value;
			return value;
		} else {
			return this._othersTotal;
		}
	}
	,
	_total: 0,
	total: function (value) {
		if (arguments.length === 1) {
			this._total = value;
			return value;
		} else {
			return this._total;
		}
	}
	,
	_valueIndices: null,
	valueIndices: function (value) {
		if (arguments.length === 1) {
			this._valueIndices = value;
			return value;
		} else {
			return this._valueIndices;
		}
	}
	,
	_othersValueIndices: null,
	othersValueIndices: function (value) {
		if (arguments.length === 1) {
			this._othersValueIndices = value;
			return value;
		} else {
			return this._othersValueIndices;
		}
	}
	,
	_others: null,
	others: function (value) {
		if (arguments.length === 1) {
			this._others = value;
			return value;
		} else {
			return this._others;
		}
	}
	,
	_actualStartAngle: 0,
	actualStartAngle: function (value) {
		if (arguments.length === 1) {
			this._actualStartAngle = value;
			return value;
		} else {
			return this._actualStartAngle;
		}
	}
	,
	_legendItems: null,
	legendItems: function (value) {
		if (arguments.length === 1) {
			this._legendItems = value;
			return value;
		} else {
			return this._legendItems;
		}
	}
	,
	chartInnerExtent: function () {
		return this.innerExtent();
	}
	,
	itemsSource: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.itemsSourceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.itemsSourceProperty);
		}
	}
	,
	innerExtent: function (value) {
		if (arguments.length === 1) {
			var coercedValue = value;
			if ($.ig.util.isNaN(value) || Number.isInfinity(value)) {
				coercedValue = 0;
			}
			if (value < 0) {
				coercedValue = 0;
			}
			if (value > 100) {
				coercedValue = 100;
			}
			this.setValue($.ig.PieChartBase.prototype.innerExtentProperty, coercedValue);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.innerExtentProperty);
		}
	}
	,
	valueMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.valueMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.valueMemberPathProperty);
		}
	}
	,
	labelMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.labelMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.labelMemberPathProperty);
		}
	}
	,
	legendLabelMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.legendLabelMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.legendLabelMemberPathProperty);
		}
	}
	,
	__labelColumn: null,
	labelColumn: function (value) {
		if (arguments.length === 1) {
			if (this.__labelColumn != value) {
				var oldColumn = this.labelColumn();
				this.__labelColumn = value;
				this.raisePropertyChanged($.ig.PieChartBase.prototype.labelColumnPropertyName, oldColumn, this.labelColumn());
			}
			return value;
		} else {
			return this.__labelColumn;
		}
	}
	,
	__legendLabelColumn: null,
	legendLabelColumn: function (value) {
		if (arguments.length === 1) {
			if (this.__legendLabelColumn != value) {
				var oldColumn = this.legendLabelColumn();
				this.__legendLabelColumn = value;
				this.raisePropertyChanged($.ig.PieChartBase.prototype.legendLabelColumnPropertyName, oldColumn, this.legendLabelColumn());
			}
			return value;
		} else {
			return this.__legendLabelColumn;
		}
	}
	,
	labelsPosition: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.labelsPositionProperty, $.ig.LabelsPosition.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.PieChartBase.prototype.labelsPositionProperty));
		}
	}
	,
	leaderLineVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.leaderLineVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.PieChartBase.prototype.leaderLineVisibilityProperty));
		}
	}
	,
	leaderLineStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.leaderLineStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.leaderLineStyleProperty);
		}
	}
	,
	leaderLineType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.leaderLineTypeProperty, $.ig.LeaderLineType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.PieChartBase.prototype.leaderLineTypeProperty));
		}
	}
	,
	leaderLineMargin: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.leaderLineMarginProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.leaderLineMarginProperty);
		}
	}
	,
	toolTip: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.toolTipProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.toolTipProperty);
		}
	}
	,
	othersCategoryThreshold: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.othersCategoryThresholdProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.othersCategoryThresholdProperty);
		}
	}
	,
	othersCategoryType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.othersCategoryTypeProperty, $.ig.OthersCategoryType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.PieChartBase.prototype.othersCategoryTypeProperty));
		}
	}
	,
	othersCategoryText: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.othersCategoryTextProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.othersCategoryTextProperty);
		}
	}
	,
	explodedRadius: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.explodedRadiusProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.explodedRadiusProperty);
		}
	}
	,
	actualExplodedRadius: function () {
		var radius = this.explodedRadius();
		if ($.ig.util.isNaN(radius) || Number.isInfinity(radius) || radius < 0) {
			return 0;
		}
		if (radius > 1) {
			return 1;
		}
		return radius;
	}
	,
	radiusFactor: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.radiusFactorProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.radiusFactorProperty);
		}
	}
	,
	actualRadiusFactor: function () {
		var radiusFactor = this.radiusFactor();
		if ($.ig.util.isNaN(radiusFactor) || Number.isInfinity(radiusFactor) || radiusFactor < 0) {
			return 0;
		}
		if (radiusFactor > 1) {
			return 1;
		}
		return radiusFactor;
	}
	,
	allowSliceSelection: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.allowSliceSelectionProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.allowSliceSelectionProperty);
		}
	}
	,
	allowSliceExplosion: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.allowSliceExplosionProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.allowSliceExplosionProperty);
		}
	}
	,
	explodedSlices: function (value) {
		if (arguments.length === 1) {
			var $t = this.__explodedSlices;
			$t.collectionChanged = $.ig.Delegate.prototype.remove($t.collectionChanged, this.__explodedIndicesChangedOverride);
			this.__explodedAttached = false;
			this.__explodedSlices = value;
			if (this.__explodedSlices != null) {
				var $t1 = this.__explodedSlices;
				$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, this.__explodedIndicesChangedOverride);
				this.__explodedAttached = true;
			}
			if (this.allowSliceExplosion()) {
				this.prepareSlices();
				this.prepareLabels();
				this.renderSlices();
				this.renderLabels();
			}
			return value;
		} else {
			return this.__explodedSlices;
		}
	}
	,
	__explodedSlices: null,
	legend: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.legendProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.legendProperty);
		}
	}
	,
	labelExtent: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.labelExtentProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.labelExtentProperty);
		}
	}
	,
	startAngle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.startAngleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.startAngleProperty);
		}
	}
	,
	sweepDirection: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.sweepDirectionProperty, $.ig.SweepDirection.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.PieChartBase.prototype.sweepDirectionProperty));
		}
	}
	,
	selectedSlices: function (value) {
		if (arguments.length === 1) {
			var $t = this.__selectedSlices;
			$t.collectionChanged = $.ig.Delegate.prototype.remove($t.collectionChanged, this.__selectedIndicesChangedOverride);
			this.__selectedAttached = false;
			this.__selectedSlices = value;
			if (this.__selectedSlices != null) {
				var $t1 = this.__selectedSlices;
				$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, this.__selectedIndicesChangedOverride);
				this.__selectedAttached = true;
			}
			if (this.allowSliceSelection()) {
				this.prepareSlices();
				this.prepareLabels();
				this.renderSlices();
				this.renderLabels();
				this.renderLegendItems();
			}
			return value;
		} else {
			return this.__selectedSlices;
		}
	}
	,
	__selectedSlices: null,
	othersCategoryStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.othersCategoryStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.othersCategoryStyleProperty);
		}
	}
	,
	selectedStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.selectedStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.selectedStyleProperty);
		}
	}
	,
	toolTipStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.toolTipStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.toolTipStyleProperty);
		}
	}
	,
	brushes: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.brushesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.brushesProperty);
		}
	}
	,
	outlines: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.outlinesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.outlinesProperty);
		}
	}
	,
	legendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.legendItemTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.legendItemTemplateProperty);
		}
	}
	,
	legendItemBadgeTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.legendItemBadgeTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.legendItemBadgeTemplateProperty);
		}
	}
	,
	labelTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.labelTemplateProperty, value);
			return value;
		} else {
			return $.ig.util.cast($.ig.DataTemplate.prototype.$type, this.getValue($.ig.PieChartBase.prototype.labelTemplateProperty));
		}
	}
	,
	isSurfaceInteractionDisabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.isSurfaceInteractionDisabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.isSurfaceInteractionDisabledProperty);
		}
	}
	,
	formatLabel: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.formatLabelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.formatLabelProperty);
		}
	}
	,
	formatLegendLabel: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.PieChartBase.prototype.formatLegendLabelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.PieChartBase.prototype.formatLegendLabelProperty);
		}
	}
	,
	labelClick: null,
	onLabelClick: function (sender, e) {
		if (this.labelClick != null) {
			this.labelClick(sender, e);
		}
	}
	,
	sliceClick: null,
	onSliceClick: function (sender, e) {
		if (this.sliceClick != null) {
			this.sliceClick(sender, e);
		}
	}
	,
	_slices: null,
	_labels: null,
	explodeSlice: function (slice, explode) {
		if (!this.explodedSlices().contains(slice.index()) && explode) {
			this.explodedSlices().add(slice.index());
		}
		if (this.explodedSlices().contains(slice.index()) && !explode) {
			this.explodedSlices().remove(slice.index());
		}
	}
	,
	selectSlice: function (slice, shouldSelect) {
		if (!this.selectedSlices().contains(slice.index()) && shouldSelect) {
			this.selectedSlices().add(slice.index());
		}
		if (this.selectedSlices().contains(slice.index()) && !shouldSelect) {
			this.selectedSlices().remove(slice.index());
		}
	}
	,
	setSliceAppearance: function (slice) {
		this.view().setSliceAppearance(slice);
	}
	,
	getLabel: function (slice) {
		return this.view().getLabel(slice);
	}
	,
	getSliceInnerBounds: function (slice, position) {
		var bounds = new $.ig.Rect(0, 0, 0, 0, 0);
		return bounds;
	}
	,
	fitsInsideBounds: function (label, center) {
		var slice = label.slice();
		if (slice == null) {
			return false;
		}
		var origin = slice.getSliceOrigin();
		var startAngle = this.sweepDirection() == $.ig.SweepDirection.prototype.clockwise ? slice.startAngle() : slice.endAngle();
		var endAngle = this.sweepDirection() == $.ig.SweepDirection.prototype.clockwise ? slice.endAngle() : slice.startAngle();
		var useAngleOffset = false;
		var isCircle = false;
		var startPoint = $.ig.GeometryUtil.prototype.findRadialPoint(origin, startAngle, slice.radius());
		var endPoint = $.ig.GeometryUtil.prototype.findRadialPoint(origin, endAngle, slice.radius());
		startAngle = $.ig.PieChartBase.prototype.findAngle(startPoint.__x, origin.__x, startPoint.__y, origin.__y);
		endAngle = $.ig.PieChartBase.prototype.findAngle(endPoint.__x, origin.__x, endPoint.__y, origin.__y);
		if (this.isCircle(slice)) {
			isCircle = true;
		}
		var labelRadius;
		labelRadius = $.ig.MathUtil.prototype.hypot(label.bounds().right() - origin.__x, label.bounds().top() - origin.__y);
		if (labelRadius > slice.radius()) {
			return false;
		}
		labelRadius = $.ig.MathUtil.prototype.hypot(label.bounds().right() - origin.__x, label.bounds().bottom() - origin.__y);
		if (labelRadius > slice.radius()) {
			return false;
		}
		labelRadius = $.ig.MathUtil.prototype.hypot(label.bounds().left() - origin.__x, label.bounds().top() - origin.__y);
		if (labelRadius > slice.radius()) {
			return false;
		}
		labelRadius = $.ig.MathUtil.prototype.hypot(label.bounds().left() - origin.__x, label.bounds().bottom() - origin.__y);
		if (labelRadius > slice.radius()) {
			return false;
		}
		if (isCircle) {
			return true;
		}
		if (startAngle > endAngle) {
			startAngle = startAngle - 360;
			useAngleOffset = true;
		}
		var labelAngle;
		labelAngle = $.ig.PieChartBase.prototype.findAngle(label.bounds().right(), origin.__x, label.bounds().top(), origin.__y);
		if (useAngleOffset && labelAngle > 180 && labelAngle < 360) {
			labelAngle = labelAngle - 360;
		}
		if (labelAngle < startAngle || labelAngle > endAngle) {
			return false;
		}
		labelAngle = $.ig.PieChartBase.prototype.findAngle(label.bounds().right(), origin.__x, label.bounds().bottom(), origin.__y);
		if (useAngleOffset && labelAngle > 180 && labelAngle < 360) {
			labelAngle = labelAngle - 360;
		}
		if (labelAngle < startAngle || labelAngle > endAngle) {
			return false;
		}
		labelAngle = $.ig.PieChartBase.prototype.findAngle(label.bounds().left(), origin.__x, label.bounds().top(), origin.__y);
		if (useAngleOffset && labelAngle > 180 && labelAngle < 360) {
			labelAngle = labelAngle - 360;
		}
		if (labelAngle < startAngle || labelAngle > endAngle) {
			return false;
		}
		labelAngle = $.ig.PieChartBase.prototype.findAngle(label.bounds().left(), origin.__x, label.bounds().bottom(), origin.__y);
		if (useAngleOffset && labelAngle > 180 && labelAngle < 360) {
			labelAngle = labelAngle - 360;
		}
		if (labelAngle < startAngle || labelAngle > endAngle) {
			return false;
		}
		return true;
	}
	,
	roundAngle: function (angle) {
		var val = Math.round(angle * Math.pow(10, 5)) / Math.pow(10, 5);
		return val;
	}
	,
	isCircle: function (slice) {
		return $.ig.PieChartBase.prototype.roundAngle(Math.abs(slice.endAngle() - slice.startAngle())) == 360;
	}
	,
	findAngle: function (x, centerX, y, centerY) {
		var h = $.ig.MathUtil.prototype.hypot(x - centerX, y - centerY);
		var angle = Math.asin((y - centerY) / h) * 180 / Math.PI;
		if (x < centerX) {
			angle = 180 - angle;
		}
		if (x > centerX) {
			angle = 360 + angle;
		}
		if (angle == 360) {
			angle = 0;
		}
		return $.ig.GeometryUtil.prototype.simplifyAngle(angle);
	}
	,
	sortLabels: function (labels) {
		var anchors = new Array(labels.count());
		for (var i = 0; i < labels.count(); i++) {
			var currentLabel = labels.__inner[i];
			var currentSlice = currentLabel.slice();
			var pt = $.ig.GeometryUtil.prototype.findRadialPoint(currentSlice.origin(), currentLabel.angle(), currentSlice.radius());
			anchors[i] = pt.__y;
		}
		for (var i1 = 0; i1 < labels.count(); i1++) {
			for (var j = i1 + 1; j < labels.count(); j++) {
				if (anchors[i1] >= anchors[j]) {
					var temp = labels.__inner[i1];
					labels.__inner[i1] = labels.__inner[j];
					labels.__inner[j] = temp;
					var tempAnchor = anchors[i1];
					anchors[i1] = anchors[j];
					anchors[j] = tempAnchor;
				}
			}
		}
	}
	,
	resolveCollisions: function (labels) {
		if (labels.count() == 0) {
			return;
		}
		var renderWidth = this.view().viewport().width();
		var renderHeight = this.view().viewport().height();
		var count = labels.count();
		var radius = labels.__inner[0].slice().radius();
		var center = labels.__inner[0].slice().getSliceOrigin();
		var hasEnoughSpace = true;
		var collisions = 0;
		var minHeight = Number.POSITIVE_INFINITY;
		var maxHeight = Number.NEGATIVE_INFINITY;
		for (var i = 0; i < count - 1; i++) {
			var currentLabel = labels.__inner[i];
			var nextLabel = labels.__inner[i + 1];
			if (currentLabel.bounds().intersectsWith(nextLabel.bounds())) {
				collisions++;
			}
		}
		var totalHeight = 0;
		var en = labels.getEnumerator();
		while (en.moveNext()) {
			var label = en.current();
			minHeight = Math.min(minHeight, label.bounds().height());
			maxHeight = Math.max(maxHeight, label.bounds().height());
			totalHeight += label.bounds().height();
		}
		if (totalHeight > renderHeight) {
			hasEnoughSpace = false;
		}
		if (hasEnoughSpace && collisions > 0) {
			for (var i1 = 0; i1 < count - 1; i1++) {
				for (var j = i1 + 1; j < count; j++) {
					var currentLabel1 = labels.__inner[i1];
					var nextLabel1 = labels.__inner[j];
					if (currentLabel1.bounds().intersectsWith(nextLabel1.bounds())) {
						var bounds = nextLabel1.bounds();
						bounds.y(Math.min(currentLabel1.bounds().bottom() + 0.01, renderHeight - minHeight));
						var c = this.labelExtent() + radius;
						var b = Math.abs(center.__y - (bounds.y() + minHeight / 2));
						var x = Math.sqrt(Math.abs(c * c - b * b));
						var angle = $.ig.GeometryUtil.prototype.simplifyAngle(nextLabel1.angle());
						if (angle > 90 && angle < 270) {
							x = (bounds.width() + x) * -1;
						}
						bounds.x(center.__x + x);
						nextLabel1.bounds(bounds);
					}
				}
			}
			for (var i2 = count - 1; i2 > 0; i2--) {
				for (var j1 = i2 - 1; j1 >= 0; j1--) {
					var currentLabel2 = labels.__inner[i2];
					var nextLabel2 = labels.__inner[j1];
					if (currentLabel2.bounds().intersectsWith(nextLabel2.bounds())) {
						var bounds1 = nextLabel2.bounds();
						bounds1.y(Math.max(currentLabel2.bounds().top() - minHeight - 0.01, 0));
						var c1 = this.labelExtent() + radius;
						var b1 = Math.abs(center.__y - (bounds1.y() + minHeight / 2));
						var x1 = Math.sqrt(Math.abs(c1 * c1 - b1 * b1));
						var angle1 = $.ig.GeometryUtil.prototype.simplifyAngle(nextLabel2.angle());
						if (angle1 > 90 && angle1 < 270) {
							x1 = (bounds1.width() + x1) * -1;
						}
						bounds1.x(center.__x + x1);
						nextLabel2.bounds(bounds1);
					}
				}
			}
		}
		var en1 = labels.getEnumerator();
		while (en1.moveNext()) {
			var label1 = en1.current();
			var bounds2 = label1.bounds();
			if (bounds2.left() > renderWidth || bounds2.right() < 0) {
				label1.__visibility = $.ig.Visibility.prototype.collapsed;
				if (this.leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
					label1.leaderLine().__visibility = $.ig.Visibility.prototype.collapsed;
				} else {
					label1.leaderLinePath().__visibility = $.ig.Visibility.prototype.collapsed;
				}
			} else if (bounds2.left() < 0) {
				var offset = Math.abs(bounds2.x());
				bounds2.x(0);
				if (offset > bounds2.width()) {
					bounds2.width(0);
				} else {
				}
				label1.bounds(bounds2);
			} else if (bounds2.right() > renderWidth) {
				var offset1 = bounds2.right() - renderWidth;
				if (offset1 > bounds2.width()) {
					bounds2.width(0);
				} else {
					bounds2.width(bounds2.width() - offset1);
				}
				label1.bounds(bounds2);
			}
		}
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		this.renderChart();
	}
	,
	renderChart: function () {
		this.prepareData();
		this.prepareSlices();
		this.prepareLabels();
		this.renderSlices();
		this.renderLabels();
		this.renderLegendItems();
		this.view().updateView();
	}
	,
	prepareData: function () {
		this.total(0);
		this.othersTotal(0);
		this.valueIndices().clear();
		this.othersValueIndices().clear();
		this.others().clear();
		if (this.itemsSource() == null || this.fastItemsSource() == null) {
			return;
		}
		if (this.valueColumn() == null || this.valueColumn().count() == 0) {
			return;
		}
		var en = this.valueColumn().getEnumerator();
		while (en.moveNext()) {
			var value = en.current();
			if ($.ig.util.isNaN(value) || Number.isInfinity(value) || value <= 0) {
				continue;
			}
			this.total(this.total() + value);
		}
		for (var i = 0; i < this.valueColumn().count(); i++) {
			var value1 = this.valueColumn().item(i);
			var isInvalidValue = value1 <= 0;
			if ($.ig.util.isNaN(value1) || Number.isInfinity(value1) || isInvalidValue) {
				continue;
			}
			var calculatedValue = this.othersCategoryType() == $.ig.OthersCategoryType.prototype.percent ? value1 / this.total() : value1;
			var calculatedThreshold = this.othersCategoryType() == $.ig.OthersCategoryType.prototype.percent ? this.othersCategoryThreshold() / 100 : this.othersCategoryThreshold();
			var useOthersSlice = true;
			if (calculatedValue <= calculatedThreshold && useOthersSlice) {
				this.othersTotal(this.othersTotal() + value1);
				this.othersValueIndices().add(i);
				this.others().add1(this.fastItemsSource().item(i));
			} else {
				this.valueIndices().add(i);
			}
		}
	}
	,
	prepareSlices: function () {
		if (this.itemsSource() == null || this.fastItemsSource() == null) {
			this._slices.count(0);
			return;
		}
		var totalSliceCount = this.valueIndices().count();
		var hasOtherSlice = this.othersValueIndices().count() > 0;
		var startAngle = $.ig.PieChartBase.prototype.roundAngle(this.actualStartAngle());
		var endAngle = $.ig.PieChartBase.prototype.roundAngle(this.actualStartAngle());
		if (hasOtherSlice) {
			totalSliceCount++;
		}
		this.totalSliceCount(totalSliceCount);
		for (var i = 0; i < totalSliceCount; i++) {
			var isOtherSlice = false;
			var value;
			if (i == totalSliceCount - 1 && hasOtherSlice) {
				value = this.othersTotal();
				isOtherSlice = true;
			} else {
				value = this.valueColumn().item(this.valueIndices().__inner[i]);
			}
			if (this.sweepDirection() == $.ig.SweepDirection.prototype.clockwise) {
				endAngle += $.ig.PieChartBase.prototype.roundAngle(Math.abs(value) * 360 / this.total());
			} else {
				endAngle -= $.ig.PieChartBase.prototype.roundAngle(Math.abs(value) * 360 / this.total());
			}
			var slice = this._slices.item(i);
			slice.suspendCreation(true);
			slice.startAngle(startAngle);
			slice.endAngle(endAngle);
			slice.innerExtentStart(slice.innerExtentEnd(this.chartInnerExtent()));
			slice.isOthersSlice(isOtherSlice);
			slice.explodedRadius(this.actualExplodedRadius());
			slice.index(i);
			slice.dataContext(isOtherSlice ? this.others() : this.fastItemsSource().item(this.valueIndices().__inner[i]));
			slice.isExploded(this.explodedSlices().contains(i));
			slice.isSelected(this.selectedSlices().contains(i));
			startAngle = endAngle;
			slice.suspendCreation(false);
		}
		this._slices.count(totalSliceCount);
	}
	,
	prepareLabels: function () {
		var $self = this;
		if (this.itemsSource() == null || this.fastItemsSource() == null) {
			this._labels.count(0);
			return;
		}
		if (this.labelColumn() == null || this.labelColumn().count() == 0 || this.labelsPosition() == $.ig.LabelsPosition.prototype.none) {
			this._labels.count(0);
			return;
		}
		var totalLabelCount = this.valueIndices().count();
		if (this.othersValueIndices().count() > 0) {
			totalLabelCount++;
		}
		this.view().labelPreMeasure();
		for (var i = 0; i < totalLabelCount; i++) {
			var labelString = String.empty();
			var isOthersLabel = false;
			var labelFromLabelColumn;
			var legendLabelFromLegendLabelColumn = null;
			if (i == totalLabelCount - 1 && this.othersValueIndices().count() > 0) {
				labelFromLabelColumn = this.othersCategoryText();
				isOthersLabel = true;
				if (this.formatLabel() != null) {
					var context = (function () {
						var $ret = new $.ig.PieSliceDataContext();
						$ret.series($self);
						$ret.item(isOthersLabel ? $self.others() : $self.fastItemsSource().item($self.valueIndices().__inner[i]));
						$ret.itemLabel(labelFromLabelColumn);
						$ret.legendLabel(labelFromLabelColumn);
						$ret.percentValue($self.getPercentValue($self._slices.item(i)));
						$ret.isOthersSlice(isOthersLabel);
						return $ret;
					}());
					var c = context;
					c = (c).flatten();
					labelFromLabelColumn = this.formatLabel()(c);
				}
				if (null != labelFromLabelColumn) {
					labelString = labelFromLabelColumn.toString();
				} else {
					labelString = this.othersCategoryText();
				}
			} else {
				labelFromLabelColumn = this.labelColumn().item(this.valueIndices().__inner[i]);
				legendLabelFromLegendLabelColumn = (this.legendLabelColumn() != null && this.legendLabelColumn().count() > 0) ? this.legendLabelColumn().item(this.valueIndices().__inner[i]) : null;
				if (this.formatLabel() != null) {
					var context1 = (function () {
						var $ret = new $.ig.PieSliceDataContext();
						$ret.series($self);
						$ret.item(isOthersLabel ? $self.others() : $self.fastItemsSource().item($self.valueIndices().__inner[i]));
						$ret.itemLabel(labelFromLabelColumn);
						$ret.legendLabel(legendLabelFromLegendLabelColumn != null ? legendLabelFromLegendLabelColumn : labelFromLabelColumn);
						$ret.percentValue($self.getPercentValue($self._slices.item(i)));
						$ret.isOthersSlice(isOthersLabel);
						return $ret;
					}());
					var c1 = context1;
					c1 = (c1).flatten();
					var formatedLabel_ = this.formatLabel()(c1);
					if (null == formatedLabel_) {
						labelFromLabelColumn = this.labelColumn().item(this.valueIndices().__inner[i]);
					} else {
						labelFromLabelColumn = formatedLabel_;
					}
				}
				var label_ = labelFromLabelColumn;
				if(label_ === undefined) { throw new Error($.ig.Chart.locale.invalidLabelBinding); };
				if (null != labelFromLabelColumn) {
					labelString = labelFromLabelColumn.toString();
				}
			}
			var label = this._labels.item(i);
			var slice = this._slices.item(i);
			slice.label(label);
			slice.legendLabel($.ig.util.cast(String, legendLabelFromLegendLabelColumn));
			label.angle($.ig.GeometryUtil.prototype.simplifyAngle((slice.startAngle() + slice.endAngle()) / 2));
			label.slice(slice);
			label.label((function () {
				var $ret = new $.ig.TextBlock();
				$ret.text(labelString);
				return $ret;
			}()));
			if (this.labelTemplate() == null) {
				label.dataContext(isOthersLabel ? this.others() : this.fastItemsSource().item(this.valueIndices().__inner[i]));
				label.createContent(this.view());
			} else {
			}
			label.__visibility = $.ig.Visibility.prototype.visible;
			label.bounds(this.view().getLabelBounds(label));
		}
		this._labels.count(totalLabelCount);
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	renderSlices: function () {
		if (this.itemsSource() == null || this.fastItemsSource() == null) {
			return;
		}
		var pieCanvasSize = this.view().updatePieViewport();
		this.viewport(new $.ig.Rect(0, 0, 0, pieCanvasSize.width(), pieCanvasSize.height()));
		var center = { __x: pieCanvasSize.width() / 2, __y: pieCanvasSize.height() / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var radius = Math.min(pieCanvasSize.height() / 2, pieCanvasSize.width() / 2) * this.actualRadiusFactor();
		var en = this._slices.active().getEnumerator();
		while (en.moveNext()) {
			var slice = en.current();
			var explodedCenter = $.ig.GeometryUtil.prototype.findCenter(pieCanvasSize.width(), pieCanvasSize.height(), true, (slice.startAngle() + slice.endAngle()) / 2, radius * this.actualExplodedRadius());
			slice.suspendCreation(true);
			slice.innerExtentStart(slice.innerExtentEnd(this.chartInnerExtent()));
			slice.radius(radius);
			slice.explodedRadius(this.actualExplodedRadius());
			slice.origin(center);
			slice.explodedOrigin(explodedCenter);
			this.setSliceAppearance(slice);
			slice.suspendCreation(false);
		}
		this.view().updateView();
	}
	,
	renderLabels: function () {
		var renderWidth = this.view().viewport().width();
		var renderHeight = this.view().viewport().height();
		if (renderHeight == 0 || renderWidth == 0) {
			return;
		}
		if (this._labels.active().count() == 0 || this.labelsPosition() == $.ig.LabelsPosition.prototype.none) {
			this._labels.count(0);
			return;
		}
		var rightLabels = new $.ig.List$1($.ig.PieLabel.prototype.$type, 0);
		var leftLabels = new $.ig.List$1($.ig.PieLabel.prototype.$type, 0);
		var centerLabels = new $.ig.List$1($.ig.PieLabel.prototype.$type, 0);
		var insideEndLabels = new $.ig.List$1($.ig.PieLabel.prototype.$type, 0);
		var en = this._labels.active().getEnumerator();
		while (en.moveNext()) {
			var label = en.current();
			var slice = label.slice();
			if (slice == null) {
				continue;
			}
			var center = slice.getSliceOrigin();
			var width = label.bounds().width();
			var height = label.bounds().height();
			if (this.labelsPosition() == $.ig.LabelsPosition.prototype.center || this.labelsPosition() == $.ig.LabelsPosition.prototype.bestFit) {
				var innerRadius = slice.radius() * slice.innerExtentStart() / 100;
				var labelCenter = $.ig.GeometryUtil.prototype.findRadialPoint(center, label.angle(), slice.radius() - (slice.radius() - innerRadius) / 2);
				label.bounds(new $.ig.Rect(0, labelCenter.__x - width / 2, labelCenter.__y - height / 2, width, height));
				var fitsInCenter = this.fitsInsideBounds(label, labelCenter);
				if (fitsInCenter || this.labelsPosition() == $.ig.LabelsPosition.prototype.center) {
					centerLabels.add(label);
					label.actualLabelPosition($.ig.LabelsPosition.prototype.center);
					if (label.slice().owner().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
						label.leaderLine().__visibility = $.ig.Visibility.prototype.collapsed;
					} else {
						label.leaderLinePath().__visibility = $.ig.Visibility.prototype.collapsed;
					}
					if (!fitsInCenter && this.labelsPosition() == $.ig.LabelsPosition.prototype.center) {
						label.__visibility = $.ig.Visibility.prototype.collapsed;
					} else {
						label.__visibility = $.ig.Visibility.prototype.visible;
					}
					continue;
				}
			}
			if (this.labelsPosition() == $.ig.LabelsPosition.prototype.insideEnd || this.labelsPosition() == $.ig.LabelsPosition.prototype.bestFit) {
				var labelOffset = $.ig.PieChartBase.prototype.findLabelOffset(center, slice.radius(), label);
				var labelCenter1 = $.ig.GeometryUtil.prototype.findRadialPoint(center, label.angle(), labelOffset);
				label.bounds(new $.ig.Rect(0, labelCenter1.__x - width / 2, labelCenter1.__y - height / 2, width, height));
				var fitsOnInside = this.fitsInsideBounds(label, labelCenter1);
				if (fitsOnInside || this.labelsPosition() == $.ig.LabelsPosition.prototype.insideEnd) {
					insideEndLabels.add(label);
					label.actualLabelPosition($.ig.LabelsPosition.prototype.insideEnd);
					if (label.slice().owner().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
						label.leaderLine().__visibility = $.ig.Visibility.prototype.collapsed;
					} else {
						label.leaderLinePath().__visibility = $.ig.Visibility.prototype.collapsed;
					}
					if (!fitsOnInside && this.labelsPosition() == $.ig.LabelsPosition.prototype.insideEnd) {
						label.__visibility = $.ig.Visibility.prototype.collapsed;
					} else {
						label.__visibility = $.ig.Visibility.prototype.visible;
					}
					continue;
				}
			}
			var labelPoint = $.ig.GeometryUtil.prototype.findRadialPoint(center, label.angle(), slice.radius() + this.labelExtent());
			label.actualLabelPosition($.ig.LabelsPosition.prototype.outsideEnd);
			label.__visibility = $.ig.Visibility.prototype.visible;
			label.updateCascadingLeaderLineStroke();
			if (label.angle() < 90 && label.angle() >= 0) {
				label.bounds(new $.ig.Rect(0, labelPoint.__x, labelPoint.__y, width, height));
				rightLabels.add(label);
			} else if (label.angle() < 180 && label.angle() >= 90) {
				label.bounds(new $.ig.Rect(0, labelPoint.__x - width, labelPoint.__y, width, height));
				leftLabels.add(label);
			} else if (label.angle() < 270 && label.angle() >= 180) {
				label.bounds(new $.ig.Rect(0, labelPoint.__x - width, labelPoint.__y - height, width, height));
				leftLabels.add(label);
			} else {
				label.bounds(new $.ig.Rect(0, labelPoint.__x, labelPoint.__y - height, width, height));
				rightLabels.add(label);
			}
			if (label.bounds().y() < 0) {
				label.bounds(new $.ig.Rect(0, label.bounds().x(), 0, label.bounds().width(), label.bounds().height()));
			}
			if (label.bounds().bottom() > renderHeight) {
				label.bounds(new $.ig.Rect(0, label.bounds().x(), renderHeight - label.bounds().height(), label.bounds().width(), label.bounds().height()));
			}
		}
		$.ig.PieChartBase.prototype.sortLabels(rightLabels);
		this.resolveCollisions(rightLabels);
		$.ig.PieChartBase.prototype.sortLabels(leftLabels);
		this.resolveCollisions(leftLabels);
		var en1 = centerLabels.getEnumerator();
		while (en1.moveNext()) {
			var label1 = en1.current();
			this.view().updateLabelPosition(label1, label1.bounds().x(), label1.bounds().y());
		}
		var en2 = insideEndLabels.getEnumerator();
		while (en2.moveNext()) {
			var label2 = en2.current();
			this.view().updateLabelPosition(label2, label2.bounds().x(), label2.bounds().y());
		}
		var en3 = rightLabels.getEnumerator();
		while (en3.moveNext()) {
			var label3 = en3.current();
			this.view().updateLabelPosition(label3, label3.bounds().x(), label3.bounds().y());
			if (label3.slice().owner().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
				label3.updateLeaderLine();
			} else {
				label3.updateLeaderLinePath();
			}
		}
		var en4 = leftLabels.getEnumerator();
		while (en4.moveNext()) {
			var label4 = en4.current();
			this.view().updateLabelPosition(label4, label4.bounds().x(), label4.bounds().y());
			if (label4.slice().owner().leaderLineType() == $.ig.LeaderLineType.prototype.straight) {
				label4.updateLeaderLine();
			} else {
				label4.updateLeaderLinePath();
			}
		}
		this.view().updateView();
	}
	,
	findLabelOffset: function (center, radius, label) {
		var labelAngleRadians = label.angle() * Math.PI / 180;
		var testRadius = 1;
		var rectCenter = $.ig.GeometryUtil.prototype.findRadialPoint({ __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, label.angle(), testRadius);
		var collisionPoint = $.ig.PieChartBase.prototype.getCollisionPoint(label);
		var dist = Math.sqrt(collisionPoint.__x * collisionPoint.__x + collisionPoint.__y * collisionPoint.__y);
		var collisionVect = { __x: collisionPoint.__x / dist, __y: collisionPoint.__y / dist, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var angle = $.ig.PieChartBase.prototype.getAngleBetween(rectCenter, collisionVect);
		var p = dist / radius;
		var angleAtEnd = angle * p;
		var deltaAngle = angleAtEnd;
		var centAng = $.ig.GeometryUtil.prototype.getAngleTo({ __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, rectCenter);
		var collAng = $.ig.GeometryUtil.prototype.getAngleTo({ __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }, collisionVect);
		if (collAng < centAng) {
			deltaAngle = -deltaAngle;
		}
		var collisionPointAtEnd = $.ig.GeometryUtil.prototype.findRadialPoint(center, (labelAngleRadians + deltaAngle) * 180 / Math.PI, radius);
		var centerAtEnd = $.ig.PieChartBase.prototype.getCenterFromCollisionPoint(label, collisionPointAtEnd);
		var distToCenter = Math.sqrt((centerAtEnd.__x - center.__x) * (centerAtEnd.__x - center.__x) + (centerAtEnd.__y - center.__y) * (centerAtEnd.__y - center.__y));
		var labelOffset = distToCenter - 5;
		return labelOffset;
	}
	,
	getCenterFromCollisionPoint: function (label, collisionPointAtEnd) {
		var angle = $.ig.GeometryUtil.prototype.simplifyAngle(label.angle());
		var halfWidth = label.bounds().width() / 2;
		var halfHeight = label.bounds().height() / 2;
		if (angle >= 0 && angle <= 90) {
			return { __x: collisionPointAtEnd.__x - halfWidth, __y: collisionPointAtEnd.__y - halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (angle >= 90 && angle <= 180) {
			return { __x: collisionPointAtEnd.__x + halfWidth, __y: collisionPointAtEnd.__y - halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (angle >= 180 && angle <= 270) {
			return { __x: collisionPointAtEnd.__x + halfWidth, __y: collisionPointAtEnd.__y + halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return { __x: collisionPointAtEnd.__x - halfWidth, __y: collisionPointAtEnd.__y + halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	getAngleBetween: function (rectCenter, collisionVect) {
		var prod = rectCenter.__x * collisionVect.__x + rectCenter.__y * collisionVect.__y;
		var magCenter = Math.sqrt(rectCenter.__x * rectCenter.__x + rectCenter.__y * rectCenter.__y);
		var magColl = Math.sqrt(collisionVect.__x * collisionVect.__x + collisionVect.__y * collisionVect.__y);
		var ang = Math.acos(prod / (magCenter * magColl));
		return ang;
	}
	,
	getCollisionPoint: function (label) {
		var angle = $.ig.GeometryUtil.prototype.simplifyAngle(label.angle());
		var halfWidth = label.bounds().width() / 2;
		var halfHeight = label.bounds().height() / 2;
		if (angle >= 0 && angle <= 90) {
			return { __x: halfWidth, __y: halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (angle >= 90 && angle <= 180) {
			return { __x: -halfWidth, __y: halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (angle >= 180 && angle <= 270) {
			return { __x: -halfWidth, __y: -halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		return { __x: halfWidth, __y: -halfHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	renderLegendItems: function () {
		var $self = this;
		var itemLegend = $.ig.util.cast($.ig.ItemLegend.prototype.$type, this.legend());
		if (itemLegend == null) {
			return;
		}
		if ((this.labelColumn() == null || this.labelColumn().count() == 0) && (this.legendLabelColumn() == null || this.legendLabelColumn().count() == 0)) {
			itemLegend.clearLegendItems(this);
			return;
		}
		this.legendItems(new $.ig.List$1($.ig.UIElement.prototype.$type, 0));
		var en = this._slices.active().getEnumerator();
		while (en.moveNext()) {
			var slice = en.current();
			var item = new $.ig.ContentControl();
			var itemLabel = this.getLabel(slice);
			var itemBrush = this.view().getActualBackground(slice);
			item.content((function () {
				var $ret = new $.ig.PieSliceDataContext();
				$ret.series($self);
				$ret.slice(slice);
				$ret.item(slice.dataContext());
				$ret.itemBrush(itemBrush);
				$ret.itemLabel(itemLabel != null ? itemLabel.toString() : null);
				$ret.legendLabel(slice.isOthersSlice() ? $self.othersCategoryText() : slice.legendLabel() != null ? slice.legendLabel() : (itemLabel != null ? itemLabel.toString() : null));
				$ret.percentValue($self.getPercentValue(slice));
				$ret.isOthersSlice(slice.isOthersSlice());
				return $ret;
			}()));
			var dc = item.content();
			if (this.formatLegendLabel() != null) {
				var legendLabel = this.formatLegendLabel()(item.content());
				if (legendLabel != null) {
					dc.legendLabel(legendLabel.toString());
				}
			}
			if (this.legendItemTemplate() != null) {
				item.contentTemplate(this.legendItemTemplate());
			}
			this.legendItems().add(item);
		}
		itemLegend.createLegendItems(this.legendItems(), this);
	}
	,
	exportVisualData: function () {
		var chart = new $.ig.PieChartVisualData();
		chart.viewport(this.viewport());
		this.view().exportViewData(chart);
		for (var i = 0; i < this._slices.count(); i++) {
			var slice = this._slices.item(i).exportVisualData();
			chart.slices().add(slice);
			if (this._slices.item(i).isOthersSlice()) {
				chart.othersSlice(this._slices.item(i).exportVisualData());
			}
		}
		chart.others(this.others());
		chart.name(this.name());
		chart.radiusFactor(this.actualRadiusFactor());
		chart.leaderLineMargin(this.leaderLineMargin());
		return chart;
	}
	,
	registerDoubleColumn: function (memberPath) {
		var coercionMethod = null;
		return this.fastItemsSource().registerColumn(memberPath, coercionMethod, false);
	}
	,
	registerObjectColumn: function (memberPath) {
		var coercionMethod = null;
		return this.fastItemsSource().registerColumnObject(memberPath, coercionMethod, false);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.PieChartBase.prototype.itemsSourcePropertyName:
				this.fastItemsSource((function () {
					var $ret = new $.ig.FastItemsSource();
					$ret.itemsSource(newValue);
					return $ret;
				}()));
				break;
			case $.ig.PieChartBase.prototype.fastItemsSourcePropertyName:
				if ($.ig.util.cast($.ig.FastItemsSource.prototype.$type, oldValue) != null) {
					var $t = (oldValue);
					$t.event = $.ig.Delegate.prototype.remove($t.event, this._fastItemsSource_Event);
					this.__fastItemsSourceAttached = false;
					(oldValue).deregisterColumn(this.valueColumn());
					(oldValue).deregisterColumn(this.labelColumn());
					this.valueColumn(null);
					this.labelColumn(null);
					($.ig.util.cast($.ig.FastItemsSource.prototype.$type, oldValue)).deregisterColumn(this.legendLabelColumn());
					this.legendLabelColumn(null);
				}
				if ($.ig.util.cast($.ig.FastItemsSource.prototype.$type, newValue) != null) {
					var $t1 = (newValue);
					$t1.event = $.ig.Delegate.prototype.combine($t1.event, this._fastItemsSource_Event);
					this.__fastItemsSourceAttached = true;
					this.valueColumn(this.registerDoubleColumn(this.valueMemberPath()));
					this.labelColumn(this.registerObjectColumn(this.labelMemberPath()));
					this.legendLabelColumn(this.registerObjectColumn(this.legendLabelMemberPath()));
				}
				this.renderChart();
				break;
			case $.ig.PieChartBase.prototype.valueMemberPathPropertyName:
				if (this.fastItemsSource() != null) {
					this.fastItemsSource().deregisterColumn(this.valueColumn());
					this.valueColumn(this.registerDoubleColumn(this.valueMemberPath()));
				}
				break;
			case $.ig.PieChartBase.prototype.legendLabelMemberPathPropertyName:
				if (this.fastItemsSource() != null) {
					this.fastItemsSource().deregisterColumn(this.legendLabelColumn());
					this.legendLabelColumn(this.registerObjectColumn(this.legendLabelMemberPath()));
					this.renderLegendItems();
				}
				break;
			case $.ig.PieChartBase.prototype.formatLegendLabelPropertyName:
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.formatLabelPropertyName:
			case $.ig.PieChartBase.prototype.labelMemberPathPropertyName:
				if (this.fastItemsSource() != null) {
					this.fastItemsSource().deregisterColumn(this.labelColumn());
					this.labelColumn(this.registerObjectColumn(this.labelMemberPath()));
					this.prepareLabels();
					this.renderLabels();
					this.renderLegendItems();
				}
				break;
			case $.ig.PieChartBase.prototype.startAnglePropertyName:
				this.actualStartAngle(newValue);
				this.prepareSlices();
				this.prepareLabels();
				this.renderSlices();
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.toolTipPropertyName:
				this.view().updateToolTipContent(this.toolTip());
				break;
			case $.ig.PieChartBase.prototype.legendPropertyName:
				var oldLegend = $.ig.util.cast($.ig.ItemLegend.prototype.$type, oldValue);
				if (oldLegend != null) {
					oldLegend.clearLegendItems(this);
				}
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.legendItemBadgeTemplatePropertyName:
			case $.ig.PieChartBase.prototype.legendItemTemplatePropertyName:
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.radiusFactorPropertyName:
			case $.ig.PieChartBase.prototype.explodedRadiusPropertyName:
			case $.ig.PieChartBase.prototype.sweepDirectionPropertyName:
				this.prepareSlices();
				this.prepareLabels();
				this.renderSlices();
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.othersCategoryStylePropertyName:
			case $.ig.PieChartBase.prototype.selectedStylePropertyName:
				this.renderSlices();
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.brushesPropertyName:
				if (oldValue != null) {
					var ov = oldValue;
					ov.collectionChanged = $.ig.Delegate.prototype.remove(ov.collectionChanged, this.__brushesChangedOverride);
					this.__brushesAttached = false;
				}
				if (newValue != null) {
					var bc = newValue;
					bc.collectionChanged = $.ig.Delegate.prototype.combine(bc.collectionChanged, this.__brushesChangedOverride);
					this.__brushesAttached = true;
				}
				this.renderSlices();
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.outlinesPropertyName:
				if (oldValue != null) {
					var ov1 = oldValue;
					ov1.collectionChanged = $.ig.Delegate.prototype.remove(ov1.collectionChanged, this.__brushesChangedOverride);
					this.__outlinesAttached = false;
				}
				if (newValue != null) {
					var bc1 = newValue;
					bc1.collectionChanged = $.ig.Delegate.prototype.combine(bc1.collectionChanged, this.__brushesChangedOverride);
					this.__outlinesAttached = true;
				}
				this.renderSlices();
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.valueColumnPropertyName:
			case $.ig.PieChartBase.prototype.othersCategoryThresholdPropertyName:
			case $.ig.PieChartBase.prototype.othersCategoryTypePropertyName:
			case $.ig.PieChartBase.prototype.allowSliceExplosionPropertyName:
			case $.ig.PieChartBase.prototype.allowSliceSelectionPropertyName:
				this.renderChart();
				break;
			case $.ig.PieChartBase.prototype.labelsPositionPropertyName:
				this.prepareLabels();
				this.renderLabels();
				this.view().updateView();
				break;
			case $.ig.PieChartBase.prototype.labelExtentPropertyName:
				this.prepareLabels();
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.othersCategoryTextPropertyName:
				this.prepareLabels();
				this.renderLabels();
				this.renderLegendItems();
				break;
			case $.ig.PieChartBase.prototype.leaderLineVisibilityPropertyName:
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.leaderLineStylePropertyName:
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.textStylePropertyName:
				this.view().styleUpdated();
				break;
			case $.ig.PieChartBase.prototype._labelTemplatePropertyName:
				this.prepareLabels();
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.leaderLineTypePropertyName:
			case $.ig.PieChartBase.prototype.leaderLineMarginPropertyName:
				this._labels.doToAll(this.view().updateLabelLeaderLine.runOn(this.view()));
				this.renderLabels();
				break;
			case $.ig.PieChartBase.prototype.isSurfaceInteractionDisabledPropertyName:
				this.view().onIsSurfaceInteractionDisabledChanged();
				break;
			case $.ig.PieChartBase.prototype.innerExtentPropertyName:
				this.renderChart();
				break;
		}
	}
	,
	selectedIndicesChangedOverride: function (args) {
		if (this.allowSliceSelection()) {
			this.prepareSlices();
			this.renderSlices();
			this.renderLegendItems();
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	sliceClicked: function (slice, args) {
		this.sliceClicked1(slice, args, false);
	}
	,
	sliceClicked1: function (slice, args, fromLabel) {
		var sliceClickEventArgs = new $.ig.SliceClickEventArgs(slice, this.view().getOriginalEvent(args));
		this.onSliceClick(this, sliceClickEventArgs);
		if (!fromLabel) {
			this.view().updateToolTip(slice, args);
		}
	}
	,
	labelClicked: function (slice, args) {
		var labelClickEventArgs = new $.ig.LabelClickEventArgs(slice, this.view().getOriginalEvent(args));
		this.onLabelClick(this, labelClickEventArgs);
		return labelClickEventArgs.allowSliceClick();
	}
	,
	itemEntered: function (item, args) {
		this.view().updateToolTip(item, args);
	}
	,
	itemMouseMoved1: function (item, args, fromLabel) {
		this.view().updateToolTip(item, args);
	}
	,
	itemMouseMoved: function (item, args) {
		this.itemMouseMoved1(item, args, false);
	}
	,
	itemMouseLeft: function (o, e) {
		this.view().closeToolTip();
	}
	,
	onSizeUpdated: function () {
		this.renderChart();
	}
	,
	provideContainer: function (container) {
		this.view().onContainerProvided(container);
	}
	,
	onContainerResized: function (width, height) {
		this.view().onContainerResized(width, height);
	}
	,
	notifyContainerResized: function () {
		this.view().notifyContainerResized();
	}
	,
	getContainerRect: function () {
		return this.view().getContainerRect();
	}
	,
	getContainerOffsets: function () {
		return this.view().getContainerOffsets();
	}
	,
	destroy: function () {
		this.removeWidgetLevelDataSource();
		this.view().onContainerProvided(null);
	}
	,
	flush: function () {
		this.view().flush();
	}
	,
	__textStyle: null,
	textStyle: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__textStyle;
			this.__textStyle = value;
			this.raisePropertyChanged($.ig.PieChartBase.prototype.textStylePropertyName, oldValue, value);
			return value;
		} else {
			return this.__textStyle;
		}
	}
	,
	getPercentValue: function (slice) {
		if (slice == null || this.valueColumn() == null || this.valueIndices() == null) {
			return NaN;
		}
		if (slice.isOthersSlice()) {
			return this.othersTotal() / this.total() * 100;
		} else {
			return this.valueColumn().item(this.valueIndices().__inner[slice.index()]) / this.total() * 100;
		}
	}
	,
	notifySetItem: function (source_, index, oldItem, newItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		if (!this.sourcesEqual(source_)) {
			return;
		}
		var itemsSource = this.fastItemsSource();
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, newItem, oldItem, index));
	}
	,
	notifyClearItems: function (source_) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		if (!this.sourcesEqual(source_)) {
			return;
		}
		var itemsSource = this.fastItemsSource();
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(0, $.ig.NotifyCollectionChangedAction.prototype.reset));
	}
	,
	sourcesEqual: function (source) {
		return $.ig.PieChartBase.prototype.sourcesEqual1(source, this.itemsSource());
	}
	,
	sourcesEqual1: function (source, itemsSource) {
		return source == itemsSource;
	}
	,
	notifyInsertItem: function (source_, index, newItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		if (!this.sourcesEqual(source_)) {
			return;
		}
		var itemsSource = this.fastItemsSource();
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.add, newItem, index));
	}
	,
	notifyRemoveItem: function (source_, index, oldItem) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		if (!this.sourcesEqual(source_)) {
			return;
		}
		var itemsSource = this.fastItemsSource();
		if (itemsSource == null) {
			return;
		}
		itemsSource.handleCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(1, $.ig.NotifyCollectionChangedAction.prototype.remove, oldItem, index));
	}
	,
	setWidgetLevelDataSource: function (source_) {
		if (source_.dataView && source_.dataSource) { source_ = source_.dataView() };
		this.itemsSource(source_);
	}
	,
	removeWidgetLevelDataSource: function () {
		this.itemsSource(null);
	}
	,
	styleUpdated: function () {
		this.view().styleUpdated();
	}
	,
	getFontInfo: function () {
		return $.ig.FontUtil.prototype.toFontInfo(this.textStyle());
	}
	,
	$type: new $.ig.Type('PieChartBase', $.ig.Control.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('Slice', 'ContentControl', {
	createView: function () {
		return new $.ig.SliceView(this);
	}
	,
	onViewCreated: function (view) {
		this.view(view);
	}
	,
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	init: function () {
		this.__suspendCreation = false;
		$.ig.ContentControl.prototype.init.call(this);
		var view = this.createView();
		this.onViewCreated(view);
		view.onInit();
	},
	startAngle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.startAngleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.startAngleProperty);
		}
	}
	,
	endAngle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.endAngleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.endAngleProperty);
		}
	}
	,
	innerExtentStart: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.innerExtentStartProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.innerExtentStartProperty);
		}
	}
	,
	innerExtentEnd: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.innerExtentEndProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.innerExtentEndProperty);
		}
	}
	,
	isSelected: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.isSelectedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.isSelectedProperty);
		}
	}
	,
	isExploded: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.isExplodedProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.isExplodedProperty);
		}
	}
	,
	isOthersSlice: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.isOtherSliceProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.isOtherSliceProperty);
		}
	}
	,
	origin: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.originProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.originProperty);
		}
	}
	,
	explodedOrigin: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.explodedOriginProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.explodedOriginProperty);
		}
	}
	,
	radius: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.radiusProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.radiusProperty);
		}
	}
	,
	explodedRadius: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.explodedRadiusProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.explodedRadiusProperty);
		}
	}
	,
	index: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.indexProperty, value);
			return value;
		} else {
			return $.ig.util.getValue(this.getValue($.ig.Slice.prototype.indexProperty));
		}
	}
	,
	strokeThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.Slice.prototype.strokeThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.Slice.prototype.strokeThicknessProperty);
		}
	}
	,
	_bounds: null,
	bounds: function (value) {
		if (arguments.length === 1) {
			this._bounds = value;
			return value;
		} else {
			return this._bounds;
		}
	}
	,
	_owner: null,
	owner: function (value) {
		if (arguments.length === 1) {
			this._owner = value;
			return value;
		} else {
			return this._owner;
		}
	}
	,
	_label: null,
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	,
	_legendLabel: null,
	legendLabel: function (value) {
		if (arguments.length === 1) {
			this._legendLabel = value;
			return value;
		} else {
			return this._legendLabel;
		}
	}
	,
	_correctedExplodedBounds: null,
	correctedExplodedBounds: function (value) {
		if (arguments.length === 1) {
			this._correctedExplodedBounds = value;
			return value;
		} else {
			return this._correctedExplodedBounds;
		}
	}
	,
	_correctedExplodedOrigin: null,
	correctedExplodedOrigin: function (value) {
		if (arguments.length === 1) {
			this._correctedExplodedOrigin = value;
			return value;
		} else {
			return this._correctedExplodedOrigin;
		}
	}
	,
	_hasCorrecttedBounds: false,
	hasCorrecttedBounds: function (value) {
		if (arguments.length === 1) {
			this._hasCorrecttedBounds = value;
			return value;
		} else {
			return this._hasCorrecttedBounds;
		}
	}
	,
	onApplyTemplate: function () {
		$.ig.ContentControl.prototype.onApplyTemplate.call(this);
		this.view().onTemplateProvided();
	}
	,
	getActualRadius: function () {
		var circle = Math.abs($.ig.PieChartBase.prototype.roundAngle(this.endAngle() - this.startAngle())) == 360;
		if (circle) {
			return this.radius();
		}
		return this.radius();
	}
	,
	getSliceBounds: function () {
		var allowExploded = (this.owner() != null && this.owner().allowSliceExplosion()) ? true : false;
		var actualRadius = this.getActualRadius();
		if (this.isExploded() && allowExploded && this.owner().totalSliceCount() > 1) {
			var bounds = new $.ig.Rect(0, this.explodedOrigin().__x - actualRadius, this.explodedOrigin().__y - actualRadius, actualRadius * 2, actualRadius * 2);
			return bounds;
		}
		return new $.ig.Rect(0, this.origin().__x - actualRadius, this.origin().__y - actualRadius, actualRadius * 2, actualRadius * 2);
	}
	,
	getSliceOrigin: function () {
		if (this.isExploded() && this.owner() != null && this.owner().allowSliceExplosion() && this.owner().totalSliceCount() > 1) {
			if (this.hasCorrecttedBounds()) {
				return this.correctedExplodedOrigin();
			}
			return this.explodedOrigin();
		}
		return this.origin();
	}
	,
	__suspendCreation: false,
	suspendCreation: function (value) {
		if (arguments.length === 1) {
			var oldValue = this.__suspendCreation;
			this.__suspendCreation = value;
			if (oldValue && !this.__suspendCreation) {
				this.createShape();
			}
			return value;
		} else {
			return this.__suspendCreation;
		}
	}
	,
	createShape: function () {
		var $self = this;
		if (this.suspendCreation()) {
			return;
		}
		var slicePath = this.view().getSlicePath();
		var viewport = this.owner().viewport();
		if ($.ig.util.isNaN(this.startAngle()) || $.ig.util.isNaN(this.endAngle()) || $.ig.util.isNaN(this.radius()) || $.ig.util.isNaN(this.explodedRadius()) || this.index() < 0 || this.owner() == null || viewport.width() == 0 || viewport.height() == 0 || (this.origin().__x == 0 && this.origin().__y == 0) || (this.explodedOrigin().__x == 0 && this.explodedOrigin().__y == 0) || this.startAngle() == this.endAngle()) {
			return;
		}
		this.bounds(this.getSliceBounds());
		var ecc = $.ig.GeometryUtil.prototype.eccentricity(this.bounds());
		var halfHeight = this.bounds().height() / 2;
		var actualRadius = this.getActualRadius();
		var center = $.ig.RectUtil.prototype.getCenter(this.bounds());
		var startPointOuter = $.ig.Slice.prototype.ellipsePointAlternate($.ig.MathUtil.prototype.radians(this.startAngle()), ecc, center, halfHeight, 100);
		var endPointOuter = $.ig.Slice.prototype.ellipsePointAlternate($.ig.MathUtil.prototype.radians(this.endAngle()), ecc, center, halfHeight, 100);
		var endPointInner = $.ig.Slice.prototype.ellipsePointAlternate($.ig.MathUtil.prototype.radians(this.endAngle()), ecc, center, this.radius(), this.innerExtentEnd());
		var startPointInner = $.ig.Slice.prototype.ellipsePointAlternate($.ig.MathUtil.prototype.radians(this.startAngle()), ecc, center, this.radius(), this.innerExtentStart());
		var circle = Math.abs($.ig.PieChartBase.prototype.roundAngle(this.endAngle() - this.startAngle())) == 360;
		if (circle) {
			if (this.innerExtentEnd() == 0) {
				var circleGeometry = (function () {
					var $ret = new $.ig.EllipseGeometry();
					$ret.center(center);
					$ret.radiusX($self.radius());
					$ret.radiusY($self.radius());
					return $ret;
				}());
				slicePath.data(circleGeometry);
				return;
			} else if (this.innerExtentEnd() > 0) {
				var outerSize = new $.ig.Size(1, this.radius(), this.radius());
				var innerSize = new $.ig.Size(1, this.radius() * this.innerExtentEnd() / 100, this.radius() * this.innerExtentEnd() / 100);
				var leftOuterPoint = (function () {
					var $ret = new $.ig.Point(0);
					$ret.x(center.__x - $self.radius());
					$ret.y(center.__y);
					return $ret;
				}());
				var rightOuterPoint = (function () {
					var $ret = new $.ig.Point(0);
					$ret.x(center.__x + $self.radius());
					$ret.y(center.__y);
					return $ret;
				}());
				var leftInnerPoint = (function () {
					var $ret = new $.ig.Point(0);
					$ret.x(center.__x - $self.radius() * $self.innerExtentEnd() / 100);
					$ret.y(center.__y);
					return $ret;
				}());
				var rightInnerPoint = (function () {
					var $ret = new $.ig.Point(0);
					$ret.x(center.__x + $self.radius() * $self.innerExtentEnd() / 100);
					$ret.y(center.__y);
					return $ret;
				}());
				var firstOuterArc = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(leftOuterPoint);
					return $ret;
				}());
				var firstOuterArcSegments = new $.ig.PathSegmentCollection();
				var topOuterArc = (function () {
					var $ret = new $.ig.ArcSegment();
					$ret.size(outerSize);
					$ret.sweepDirection($.ig.SweepDirection.prototype.clockwise);
					$ret.point(rightOuterPoint);
					return $ret;
				}());
				firstOuterArcSegments.add(topOuterArc);
				firstOuterArc.__segments = firstOuterArcSegments;
				var firstInnerArc = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(rightInnerPoint);
					return $ret;
				}());
				var firstInnerArcSegments = new $.ig.PathSegmentCollection();
				var topInnerArc = (function () {
					var $ret = new $.ig.ArcSegment();
					$ret.size(innerSize);
					$ret.sweepDirection($.ig.SweepDirection.prototype.counterclockwise);
					$ret.point(leftInnerPoint);
					return $ret;
				}());
				firstInnerArcSegments.add(topInnerArc);
				firstInnerArc.__segments = firstInnerArcSegments;
				var secondOuterArc = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(leftOuterPoint);
					return $ret;
				}());
				var secondOuterArcSegments = new $.ig.PathSegmentCollection();
				var bottomOuterArc = (function () {
					var $ret = new $.ig.ArcSegment();
					$ret.size(outerSize);
					$ret.sweepDirection($.ig.SweepDirection.prototype.counterclockwise);
					$ret.point(rightOuterPoint);
					return $ret;
				}());
				secondOuterArcSegments.add(bottomOuterArc);
				secondOuterArc.__segments = secondOuterArcSegments;
				var secondInnerArc = (function () {
					var $ret = new $.ig.PathFigure();
					$ret.startPoint(rightInnerPoint);
					return $ret;
				}());
				var secondInnerArcSegments = new $.ig.PathSegmentCollection();
				var bottomInnerArc = (function () {
					var $ret = new $.ig.ArcSegment();
					$ret.size(innerSize);
					$ret.sweepDirection($.ig.SweepDirection.prototype.clockwise);
					$ret.point(leftInnerPoint);
					return $ret;
				}());
				secondInnerArcSegments.add(bottomInnerArc);
				secondInnerArc.__segments = secondInnerArcSegments;
				var figureCollection = (function () {
					var $ret = new $.ig.PathFigureCollection();
					$ret.add(firstOuterArc);
					$ret.add(firstInnerArc);
					$ret.add(secondOuterArc);
					$ret.add(secondInnerArc);
					return $ret;
				}());
				var pg = (function () {
					var $ret = new $.ig.PathGeometry();
					$ret.figures(figureCollection);
					return $ret;
				}());
				var gg = new $.ig.GeometryGroup();
				gg.children().add(pg);
				slicePath.data(gg);
				return;
			} else {
				var group = (function () {
					var $ret = new $.ig.GeometryGroup();
					$ret.fillRule($.ig.FillRule.prototype.evenOdd);
					return $ret;
				}());
				group.children().add((function () {
					var $ret = new $.ig.EllipseGeometry();
					$ret.center(center);
					$ret.radiusX($self.radius());
					$ret.radiusY($self.radius());
					return $ret;
				}()));
				group.children().add((function () {
					var $ret = new $.ig.EllipseGeometry();
					$ret.center(center);
					$ret.radiusX($self.radius() * $self.innerExtentEnd() / 100);
					$ret.radiusY($self.radius() * $self.innerExtentEnd() / 100);
					return $ret;
				}()));
				slicePath.data(group);
				return;
			}
		}
		var geometry = new $.ig.PathGeometry();
		slicePath.data(geometry);
		var figure = (function () {
			var $ret = new $.ig.PathFigure();
			$ret.isClosed(true);
			return $ret;
		}());
		geometry.figures(new $.ig.PathFigureCollection());
		geometry.figures().add(figure);
		figure.__startPoint = startPointOuter;
		var largeArc = Math.abs(this.endAngle() - this.startAngle()) > 180;
		var arcOuter = new $.ig.ArcSegment();
		arcOuter.point(endPointOuter);
		arcOuter.size(new $.ig.Size(1, this.bounds().width() / 2, this.bounds().height() / 2));
		arcOuter.isLargeArc(largeArc);
		if (this.endAngle() > this.startAngle()) {
			arcOuter.sweepDirection($.ig.SweepDirection.prototype.clockwise);
		} else {
			arcOuter.sweepDirection($.ig.SweepDirection.prototype.counterclockwise);
		}
		figure.__segments = new $.ig.PathSegmentCollection();
		figure.__segments.add(arcOuter);
		var connectEnd = new $.ig.LineSegment(1);
		connectEnd.point(endPointInner);
		figure.__segments.add(connectEnd);
		var lineLenght = Math.sqrt(Math.pow(endPointInner.__x - endPointOuter.__x, 2) + Math.pow(endPointInner.__y - endPointOuter.__y, 2));
		var innerRadius = actualRadius - lineLenght;
		var arcInner = new $.ig.ArcSegment();
		arcInner.point(startPointInner);
		if (innerRadius < 0) {
			innerRadius = 0.1;
		}
		arcInner.size(new $.ig.Size(1, innerRadius, innerRadius));
		arcInner.isLargeArc(arcOuter.isLargeArc());
		arcInner.sweepDirection($.ig.SweepDirection.prototype.counterclockwise);
		figure.__segments.add(arcInner);
		var bounds = this.getBounds(slicePath, startPointOuter, endPointOuter, this.startAngle(), this.endAngle(), center, actualRadius);
		var slicesWithinBounds = true;
		if (slicesWithinBounds && this.bounds().height() > 0 && this.bounds().width() > 0 && !viewport.containsRect(bounds)) {
			var sliceBounds = bounds;
			var chartBounds = new $.ig.Rect(0, 0, 0, viewport.width(), viewport.height());
			chartBounds.intersect(sliceBounds);
			var midAngle = $.ig.GeometryUtil.prototype.simplifyAngle((this.startAngle() + this.endAngle()) / 2);
			var midAngleRad = midAngle / 180 * Math.PI;
			var dx = Math.abs((sliceBounds.height() - chartBounds.height()) / Math.sin(midAngleRad));
			var dy = Math.abs((sliceBounds.width() - chartBounds.width()) / Math.cos(midAngleRad));
			if ($.ig.util.isNaN(dx) || Number.isInfinity(dx)) {
				dx = 0;
			}
			if ($.ig.util.isNaN(dy) || Number.isInfinity(dy)) {
				dy = 0;
			}
			var distance = Math.max(dx, dy);
			var explodedCenterNew = $.ig.GeometryUtil.prototype.findCenter(this.owner().viewport().width(), this.owner().viewport().height(), true, midAngle, this.radius() * this.owner().actualExplodedRadius() - distance);
			this.view().positionSlice(explodedCenterNew.__x - this.explodedOrigin().__x, explodedCenterNew.__y - this.explodedOrigin().__y);
			this.hasCorrecttedBounds(true);
			this.correctedExplodedOrigin(explodedCenterNew);
			this.correctedExplodedBounds(new $.ig.Rect(0, sliceBounds.x() - (explodedCenterNew.__x - this.explodedOrigin().__x), sliceBounds.y() - (explodedCenterNew.__y - this.explodedOrigin().__y), sliceBounds.width(), sliceBounds.height()));
		} else {
			this.hasCorrecttedBounds(false);
			this.view().resetSlicePosition();
		}
	}
	,
	containsPoint: function (p) {
		var viewport = this.owner().viewport();
		if (this.__visibility == $.ig.Visibility.prototype.collapsed) {
			return false;
		}
		if ($.ig.util.isNaN(this.startAngle()) || $.ig.util.isNaN(this.endAngle()) || $.ig.util.isNaN(this.radius()) || $.ig.util.isNaN(this.explodedRadius()) || this.index() < 0 || this.owner() == null || viewport.width() == 0 || viewport.height() == 0 || (this.origin().__x == 0 && this.origin().__y == 0) || (this.explodedOrigin().__x == 0 && this.explodedOrigin().__y == 0)) {
			return false;
		}
		var actualRadius = this.getActualRadius();
		var startRadius = ((this.innerExtentEnd() / 100) * actualRadius);
		var endRadius = actualRadius;
		var center = this.origin();
		if (this.isExploded() && this.owner().allowSliceExplosion() && this.owner().totalSliceCount() > 1) {
			center = this.explodedOrigin();
			if (this.hasCorrecttedBounds()) {
				center = this.correctedExplodedOrigin();
			}
		}
		var startRadiusSquared = startRadius * startRadius;
		var endRadiusSquared = endRadius * endRadius;
		var dist = Math.pow(p.__x - center.__x, 2) + Math.pow(p.__y - center.__y, 2);
		if (dist < startRadiusSquared || dist > endRadiusSquared) {
			return false;
		}
		var angle = Math.atan2(p.__y - center.__y, p.__x - center.__x);
		angle = angle * 180 / Math.PI;
		return this.containsAngle(angle);
	}
	,
	containsAngle: function (angle) {
		angle = $.ig.GeometryUtil.prototype.simplifyAngle(angle);
		var minAngle = Math.min(this.startAngle(), this.endAngle());
		var maxAngle = Math.max(this.startAngle(), this.endAngle());
		return (angle > minAngle && angle < maxAngle) || (angle - 360 > minAngle && angle - 360 < maxAngle) || (angle + 360 > minAngle && angle + 360 < maxAngle);
	}
	,
	getBounds: function (slicePath, outerStart, outerEnd, startAngle, endAngle, center, radius) {
		var points = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		points.add(outerStart);
		points.add(outerEnd);
		points.add(center);
		startAngle = $.ig.GeometryUtil.prototype.simplifyAngle(startAngle);
		endAngle = $.ig.GeometryUtil.prototype.simplifyAngle(endAngle);
		if ((0 > startAngle && 0 < endAngle) || (360 > startAngle && 360 < endAngle) || (endAngle < startAngle)) {
			points.add($.ig.GeometryUtil.prototype.findRadialPoint(center, 0, radius));
		}
		if (90 > startAngle && 90 < endAngle) {
			points.add($.ig.GeometryUtil.prototype.findRadialPoint(center, 90, radius));
		}
		if (180 > startAngle && 180 < endAngle) {
			points.add($.ig.GeometryUtil.prototype.findRadialPoint(center, 180, radius));
		}
		if (270 > startAngle && 270 < endAngle) {
			points.add($.ig.GeometryUtil.prototype.findRadialPoint(center, 270, radius));
		}
		var minX = 1.7976931348623157E+308;
		var minY = 1.7976931348623157E+308;
		var maxX = -1.7976931348623157E+308;
		var maxY = -1.7976931348623157E+308;
		var en = points.getEnumerator();
		while (en.moveNext()) {
			var point = en.current();
			minX = Math.min(minX, point.__x);
			minY = Math.min(minY, point.__y);
			maxX = Math.max(maxX, point.__x);
			maxY = Math.max(maxY, point.__y);
		}
		return new $.ig.Rect(0, minX, minY, maxX - minX, maxY - minY);
	}
	,
	exportVisualData: function () {
		var slice = new $.ig.PieSliceVisualData();
		slice.appearance(new $.ig.PrimitiveAppearanceData());
		slice.labelAppearance(new $.ig.LabelAppearanceData());
		slice.leaderLineAppearance(new $.ig.PrimitiveAppearanceData());
		slice.endAngle(this.endAngle());
		slice.explodedOrigin(this.explodedOrigin());
		slice.explodedRadius(this.explodedRadius());
		slice.index(this.index());
		slice.innerExtentEnd(this.innerExtentEnd());
		slice.innerExtentStart(this.innerExtentStart());
		slice.isExploded(this.isExploded());
		slice.isOthersSlice(this.isOthersSlice());
		slice.isSelected(this.isSelected());
		if (this.label() != null) {
			slice.labelAppearance().angle(this.label().angle());
			slice.labelBounds(this.label().bounds());
			slice.labelAngle(this.label().angle());
			if ($.ig.util.cast($.ig.TextBlock.prototype.$type, this.label().label()) !== null) {
				var label = $.ig.util.cast($.ig.TextBlock.prototype.$type, this.label().label());
				slice.label(label.text());
				var font = null;
				slice.labelAppearance().labelBrush($.ig.AppearanceHelper.prototype.fromBrush(label.fill()));
				slice.labelAppearance().text(label.text());
				if (this.owner() != null) {
					font = this.owner().getFontInfo();
					if (font == null) {
						font = this.owner().view().font();
					}
				}
				slice.labelAppearance($.ig.AppearanceHelper.prototype.fromTextElement(label, font));
				slice.labelAppearance().visibility(this.label().__visibility == $.ig.Visibility.prototype.visible);
			} else {
				slice.label(this.label().label().toString());
			}
			if (this.label().leaderLine() != null) {
				slice.leaderLineAppearance().fill($.ig.AppearanceHelper.prototype.fromBrush(this.label().leaderLine().__fill));
				slice.leaderLineAppearance().opacity(this.label().leaderLine().__opacity);
				slice.leaderLineAppearance().stroke($.ig.AppearanceHelper.prototype.fromBrush(this.label().leaderLine().__stroke));
				slice.leaderLineAppearance().strokeThickness(this.label().leaderLine().strokeThickness());
				slice.leaderLineAppearance().visibility(this.label().leaderLine().__visibility);
				slice.leaderLinePath(new $.ig.PathVisualData(2, "leaderLine", this.label().leaderLine()));
			} else if (this.label().leaderLinePath() != null) {
				slice.leaderLineAppearance().fill($.ig.AppearanceHelper.prototype.fromBrush(this.label().leaderLinePath().__fill));
				slice.leaderLineAppearance().opacity(this.label().leaderLinePath().__opacity);
				slice.leaderLineAppearance().stroke($.ig.AppearanceHelper.prototype.fromBrush(this.label().leaderLinePath().__stroke));
				slice.leaderLineAppearance().strokeThickness(this.label().leaderLinePath().strokeThickness());
				slice.leaderLineAppearance().visibility(this.label().leaderLinePath().__visibility);
				slice.leaderLinePath(new $.ig.PathVisualData(1, "leaderLine", this.label().leaderLinePath()));
			}
		}
		if (this.view() != null) {
			var slicePath = this.view().getSlicePath();
			slice.slicePath(new $.ig.PathVisualData(1, "slicePath", slicePath));
			slice.appearance().fill($.ig.AppearanceHelper.prototype.fromBrush(slicePath.__fill));
			slice.appearance().opacity(slicePath.__opacity);
			slice.appearance().stroke($.ig.AppearanceHelper.prototype.fromBrush(slicePath.__stroke));
			slice.appearance().strokeThickness(slicePath.strokeThickness());
			slice.appearance().visibility(slicePath.__visibility);
		}
		return slice;
	}
	,
	ellipsePointAlternate: function (theta, eccentricity, center, halfHeight, extent) {
		if (halfHeight == 0) {
			return center;
		}
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var r = Math.sqrt(halfHeight * halfHeight / (1 - (eccentricity * Math.pow(cos, 2))));
		r *= (extent / 100);
		return { __x: r * cos + center.__x, __y: r * sin + center.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	_background: null,
	background: function (value) {
		if (arguments.length === 1) {
			this._background = value;
			return value;
		} else {
			return this._background;
		}
	}
	,
	_borderBrush: null,
	borderBrush: function (value) {
		if (arguments.length === 1) {
			this._borderBrush = value;
			return value;
		} else {
			return this._borderBrush;
		}
	}
	,
	$type: new $.ig.Type('Slice', $.ig.ContentControl.prototype.$type)
}, true);

$.ig.util.defType('ChartContentManager', 'DependencyObject', {
	__owner: null,
	__content: null,
	__seriesList: null,
	seriesList: function (value) {
		if (arguments.length === 1) {
			this.__seriesList = value;
			return value;
		} else {
			return this.__seriesList;
		}
	}
	,
	init: function (owner) {
		this.__owner = null;
		this.__content = new $.ig.Dictionary$2($.ig.ChartContentType.prototype.$type, $.ig.Dictionary$2.prototype.$type.specialize($.ig.DependencyObject.prototype.$type, $.ig.ContentInfo.prototype.$type), 0);
		this.__seriesList = new $.ig.List$1($.ig.Series.prototype.$type, 0);
		this.__pending = false;
		$.ig.DependencyObject.prototype.init.call(this);
		this.firstTime(true);
		this.firstMeasure(true);
		this.__content.add($.ig.ChartContentType.prototype.series, new $.ig.Dictionary$2($.ig.DependencyObject.prototype.$type, $.ig.ContentInfo.prototype.$type, 0));
		this.__content.add($.ig.ChartContentType.prototype.axis, new $.ig.Dictionary$2($.ig.DependencyObject.prototype.$type, $.ig.ContentInfo.prototype.$type, 0));
		this.__content.add($.ig.ChartContentType.prototype.background, new $.ig.Dictionary$2($.ig.DependencyObject.prototype.$type, $.ig.ContentInfo.prototype.$type, 0));
		this.__owner = owner;
	},
	subscribe: function (type, obj, refresh) {
		var info = this.getInfo(type, obj);
		info.refresh(refresh);
		return info;
	}
	,
	unsubscribe: function (type, obj) {
		var ofType = this.__content.item(type);
		if (ofType.containsKey(obj)) {
			ofType.remove(obj);
		}
		var s = $.ig.util.cast($.ig.Series.prototype.$type, obj);
		if (s != null && this.seriesList().contains(s)) {
			this.seriesList().remove(s);
		}
	}
	,
	__pending: false,
	makePending: function () {
		if (!this.__pending) {
			this.__pending = true;
			window.setTimeout(this.doRefresh.runOn(this), 0);
		}
	}
	,
	refresh: function (type, obj, info, animate) {
		var contentInfo = info;
		if (!contentInfo.isDirty()) {
			contentInfo.doAnimation(animate);
		} else {
			if (!animate) {
				contentInfo.doAnimation(false);
			}
		}
		if (!contentInfo.isDirty()) {
			contentInfo.isDirty(true);
			this.makePending();
		}
	}
	,
	_previewRefreshPending: false,
	previewRefreshPending: function (value) {
		if (arguments.length === 1) {
			this._previewRefreshPending = value;
			return value;
		} else {
			return this._previewRefreshPending;
		}
	}
	,
	getInfo: function (type, obj) {
		var ofType = this.__content.item(type);
		var info = null;
		if (!(function () { var $ret = ofType.tryGetValue(obj, info); info = $ret.p1; return $ret.ret; }())) {
			info = new $.ig.ContentInfo();
			info.content(obj);
			ofType.add(obj, info);
			var s = $.ig.util.cast($.ig.Series.prototype.$type, obj);
			if (s != null && !this.seriesList().contains(s)) {
				if ($.ig.util.cast($.ig.FragmentBase.prototype.$type, s) !== null || $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, s) !== null) {
					var fragmentSeries = $.ig.util.cast($.ig.FragmentBase.prototype.$type, s);
					var splineFragmentSeries = $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, s);
					var parentSeries = fragmentSeries != null ? fragmentSeries.parentSeries() : splineFragmentSeries.parentSeries();
					var logicalSeries = fragmentSeries != null ? fragmentSeries.logicalSeriesLink() : splineFragmentSeries.logicalSeriesLink();
					var index = 0;
					if (this.seriesList().indexOf(parentSeries) == 0) {
						index++;
					}
					index += parentSeries.series().indexOf(logicalSeries);
					if (this.seriesList().count() <= index || parentSeries.series().count() == 0 || index == -1) {
						this.seriesList().add(s);
					} else {
						this.seriesList().insert(index, s);
					}
				} else {
					this.seriesList().add(s);
				}
			}
		}
		return info;
	}
	,
	force: function () {
		this.doRefresh();
	}
	,
	doRefresh: function () {
		if (this.__owner == null || this.__content == null) {
			return;
		}
		if (!this.__pending) {
			return;
		}
		this.__pending = false;
		if (this.__owner != null) {
			this.__owner.beforeContentRefresh();
		}
		var en = this.inOrder().getEnumerator();
		while (en.moveNext()) {
			var item = en.current();
			item.doRefresh();
		}
		if (!this.__pending) {
			this.__owner.raiseRefreshCompleted();
		}
	}
	,
	inOrder: function () {
		var d__ = new $.ig.ChartContentManager___InOrder__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	ensureAxesRendered: function (plotSize) {
		var en = this.__content.item($.ig.ChartContentType.prototype.axis).values().getEnumerator();
		while (en.moveNext()) {
			var info = en.current();
			(info.content()).overrideViewport();
		}
		var en1 = this.__content.item($.ig.ChartContentType.prototype.axis).values().getEnumerator();
		while (en1.moveNext()) {
			var info1 = en1.current();
			info1.doRefresh();
		}
		var en2 = this.__content.item($.ig.ChartContentType.prototype.axis).values().getEnumerator();
		while (en2.moveNext()) {
			var info2 = en2.current();
			(info2.content()).viewportOverride($.ig.Rect.prototype.empty());
		}
	}
	,
	_firstMeasure: false,
	firstMeasure: function (value) {
		if (arguments.length === 1) {
			this._firstMeasure = value;
			return value;
		} else {
			return this._firstMeasure;
		}
	}
	,
	_firstTime: false,
	firstTime: function (value) {
		if (arguments.length === 1) {
			this._firstTime = value;
			return value;
		} else {
			return this._firstTime;
		}
	}
	,
	viewportChanged: function (chartContentType, obj, info, newViewportRect) {
		info.viewport(newViewportRect);
	}
	,
	rangeDirty: function (axis, info) {
		if (!info.rangeDirty()) {
			info.rangeDirty(true);
			this.makePending();
		}
	}
	,
	$type: new $.ig.Type('ChartContentManager', $.ig.DependencyObject.prototype.$type)
}, true);

$.ig.util.defType('ContentInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_content: null,
	content: function (value) {
		if (arguments.length === 1) {
			this._content = value;
			return value;
		} else {
			return this._content;
		}
	}
	,
	_refresh: null,
	refresh: function (value) {
		if (arguments.length === 1) {
			this._refresh = value;
			return value;
		} else {
			return this._refresh;
		}
	}
	,
	_doAnimation: false,
	doAnimation: function (value) {
		if (arguments.length === 1) {
			this._doAnimation = value;
			return value;
		} else {
			return this._doAnimation;
		}
	}
	,
	_isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this._isDirty = value;
			return value;
		} else {
			return this._isDirty;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	isViewportValid: function () {
		if (this.viewport().isEmpty()) {
			return false;
		}
		if (this.viewport().width() == 0 && this.viewport().height() == 0) {
			return false;
		}
		return true;
	}
	,
	undirtyRange: function () {
		if (this.rangeDirty() && $.ig.util.cast($.ig.Axis.prototype.$type, this.content()) !== null) {
			this.rangeDirty(false);
			var wasDirty = this.isDirty();
			this.isDirty(true);
			var ret = (this.content()).updateRange1(true);
			if (!ret) {
				this.isDirty(wasDirty);
			}
		}
	}
	,
	doRefresh: function () {
		this.undirtyRange();
		if ($.ig.util.cast($.ig.Axis.prototype.$type, this.content()) !== null) {
			var axis = $.ig.util.cast($.ig.Axis.prototype.$type, this.content());
			if (axis.crossingAxis() != null) {
				var crossing = axis.crossingAxis();
				if (crossing.contentInfo() != null && crossing.contentInfo().rangeDirty()) {
					crossing.contentInfo().undirtyRange();
				}
			}
		}
		if (this.isDirty()) {
			this.isDirty(false);
			this.refresh()(this.doAnimation());
			this.doAnimation(false);
		}
	}
	,
	_rangeDirty: false,
	rangeDirty: function (value) {
		if (arguments.length === 1) {
			this._rangeDirty = value;
			return value;
		} else {
			return this._rangeDirty;
		}
	}
	,
	$type: new $.ig.Type('ContentInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CategoryMarkerManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	rasterizeMarkers: function (series, markerLocations, markers, lightweight) {
		var hasMarkers = series.shouldDisplayMarkers();
		if (markers == null) {
			return;
		}
		if (hasMarkers) {
			for (var i = 0; i < markerLocations.count(); ++i) {
				$.ig.CategoryMarkerManager.prototype.positionMarker(markers, i, markerLocations, lightweight);
			}
			markers.count(markerLocations.count());
		}
	}
	,
	positionMarker: function (markers, i, markerLocations, lightweight) {
		markers.item(i).canvasLeft(markerLocations.__inner[i].__x);
		markers.item(i).canvasTop(markerLocations.__inner[i].__y);
	}
	,
	$type: new $.ig.Type('CategoryMarkerManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieLabel', 'Control', {
	init: function () {
		$.ig.Control.prototype.init.call(this);
	},
	_slice: null,
	slice: function (value) {
		if (arguments.length === 1) {
			this._slice = value;
			return value;
		} else {
			return this._slice;
		}
	}
	,
	_bounds: null,
	bounds: function (value) {
		if (arguments.length === 1) {
			this._bounds = value;
			return value;
		} else {
			return this._bounds;
		}
	}
	,
	_angle: 0,
	angle: function (value) {
		if (arguments.length === 1) {
			this._angle = value;
			return value;
		} else {
			return this._angle;
		}
	}
	,
	_label: null,
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	,
	_leaderLine: null,
	leaderLine: function (value) {
		if (arguments.length === 1) {
			this._leaderLine = value;
			return value;
		} else {
			return this._leaderLine;
		}
	}
	,
	_leaderLinePath: null,
	leaderLinePath: function (value) {
		if (arguments.length === 1) {
			this._leaderLinePath = value;
			return value;
		} else {
			return this._leaderLinePath;
		}
	}
	,
	_actualLabelPosition: 0,
	actualLabelPosition: function (value) {
		if (arguments.length === 1) {
			this._actualLabelPosition = value;
			return value;
		} else {
			return this._actualLabelPosition;
		}
	}
	,
	createContent: function (view) {
		if (view.model().labelsPosition() == $.ig.LabelsPosition.prototype.outsideEnd) {
			this.bounds(view.getLabelBounds(this));
			var textBlock = $.ig.util.cast($.ig.TextBlock.prototype.$type, this.label());
			var sampleText = textBlock.text();
			view.model().renderSlices();
			var origin = this.slice().isExploded() ? this.slice().explodedOrigin() : this.slice().origin();
			var bounds = $.ig.GeometryUtil.prototype.findRadialPoint(origin, this.angle(), this.slice().radius() + view.model().labelExtent());
			var containerWidth = view.viewport().width();
			if (view.getDesiredWidth(textBlock) + bounds.__x > containerWidth && bounds.__x < containerWidth) {
				while (sampleText.length > 0 && view.getDesiredWidth(textBlock) + bounds.__x > containerWidth) {
					sampleText = sampleText.substr(0, sampleText.length - 1);
					textBlock.text(sampleText);
				}
				if (sampleText.length > 3) {
					sampleText = sampleText.substr(0, sampleText.length - 3);
					sampleText = sampleText + "...";
				} else {
					if (view.getDesiredWidth("...") < this.bounds().width()) {
						sampleText = "...";
					} else {
						sampleText = String.empty();
					}
				}
			}
			var newLabel = new $.ig.TextBlock();
			newLabel.text(sampleText);
			this.label(newLabel);
		}
	}
	,
	updateCascadingLeaderLineStroke: function () {
	}
	,
	updateLeaderLine: function () {
		this.leaderLine().__visibility = this.slice().owner().leaderLineVisibility() != $.ig.Visibility.prototype.visible ? this.slice().owner().leaderLineVisibility() : this.slice().label().__visibility;
		var endPoint;
		var margin = this.slice().owner().leaderLineMargin();
		var startPoint = $.ig.GeometryUtil.prototype.findRadialPoint(this.slice().getSliceOrigin(), this.angle(), this.slice().radius());
		this.leaderLine().x1(startPoint.__x);
		this.leaderLine().y1(startPoint.__y);
		if (this.angle() < 90 || this.angle() >= 270) {
			endPoint = { __x: this.bounds().left(), __y: (this.bounds().top() + this.bounds().bottom()) / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else {
			endPoint = { __x: this.bounds().right(), __y: (this.bounds().top() + this.bounds().bottom()) / 2, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (margin > 0) {
			var lineLength = $.ig.GeometryUtil.prototype.getSegmentLength(startPoint, endPoint);
			if (margin < lineLength) {
				endPoint = $.ig.GeometryUtil.prototype.pointAtDistance(endPoint, startPoint, margin);
			} else {
				endPoint = startPoint;
			}
		}
		this.leaderLine().x2(endPoint.__x);
		this.leaderLine().y2(endPoint.__y);
	}
	,
	updateLeaderLinePath: function () {
		this.leaderLinePath().__visibility = this.slice().owner().leaderLineVisibility() != $.ig.Visibility.prototype.visible ? this.slice().owner().leaderLineVisibility() : this.slice().label().__visibility;
		var sliceOrigin = this.slice().getSliceOrigin();
		var figure = (this.leaderLinePath().data()).figures().__inner[0];
		var segment = (figure.__segments.__inner[0]);
		var margin = this.slice().owner().leaderLineMargin();
		var endPointY = (this.bounds().top() + this.bounds().bottom()) / 2;
		var startPoint = $.ig.GeometryUtil.prototype.findRadialPoint(sliceOrigin, this.angle(), this.slice().radius());
		var cp1 = $.ig.GeometryUtil.prototype.findRadialPoint(sliceOrigin, this.angle(), this.slice().radius() + this.slice().owner().labelExtent() / 2);
		var cp2;
		var actualEndPoint;
		var endPoint;
		var cpY = endPointY;
		if (this.angle() < 90 && this.angle() >= 0) {
			cp2 = { __x: this.bounds().left() - $.ig.PieChartBase.prototype.leaderLinePathControlPointOffset, __y: cpY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			endPoint = { __x: this.bounds().left(), __y: endPointY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else if (this.angle() < 180 && this.angle() >= 90) {
			cp2 = { __x: this.bounds().right() + $.ig.PieChartBase.prototype.leaderLinePathControlPointOffset, __y: cpY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			endPoint = { __x: this.bounds().right(), __y: endPointY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else if (this.angle() < 270 && this.angle() >= 180) {
			cp2 = { __x: this.bounds().right() + $.ig.PieChartBase.prototype.leaderLinePathControlPointOffset, __y: cpY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			endPoint = { __x: this.bounds().right(), __y: endPointY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		} else {
			cp2 = { __x: this.bounds().left() - $.ig.PieChartBase.prototype.leaderLinePathControlPointOffset, __y: cpY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			endPoint = { __x: this.bounds().left(), __y: endPointY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		}
		if (margin > 0) {
			var lineLength = $.ig.GeometryUtil.prototype.getSegmentLength(startPoint, endPoint);
			if (margin < lineLength) {
				actualEndPoint = $.ig.GeometryUtil.prototype.pointAtDistance(endPoint, startPoint, margin);
				var deltaX1 = cp1.__x - startPoint.__x;
				var deltaY1 = cp1.__y - startPoint.__y;
				cp1 = $.ig.GeometryUtil.prototype.pointAtDistance(cp1, startPoint, margin);
				var deltaX2 = cp1.__x - startPoint.__x;
				var deltaY2 = cp1.__y - startPoint.__y;
				if ((deltaX1 > 0 && deltaX2 < 0) || (deltaX1 < 0 && deltaX2 > 0) || (deltaY1 > 0 && deltaY2 < 0) || (deltaY1 < 0 && deltaY2 > 0)) {
					cp1 = startPoint;
				}
				cp2 = $.ig.GeometryUtil.prototype.pointAtDistance(cp2, startPoint, margin);
				var scaleFactor = $.ig.GeometryUtil.prototype.getSegmentLength(startPoint, actualEndPoint) / $.ig.GeometryUtil.prototype.getSegmentLength(startPoint, endPoint);
				cp2.__x = startPoint.__x + (cp2.__x - startPoint.__x) * scaleFactor;
				cp2.__y = startPoint.__y + (cp2.__y - startPoint.__y) * scaleFactor;
			} else {
				this.leaderLinePath().__visibility = $.ig.Visibility.prototype.collapsed;
				return;
			}
		} else {
			actualEndPoint = endPoint;
		}
		if (this.angle() < 180 && this.angle() >= 0) {
			if (cp1.__y > cp2.__y) {
				cp1.__y = startPoint.__y;
			}
		} else {
			if (cp1.__y < cp2.__y) {
				cp1.__y = startPoint.__y;
			}
		}
		figure.__startPoint = startPoint;
		if (this.slice().owner().leaderLineType() == $.ig.LeaderLineType.prototype.arc) {
			segment.point1(startPoint);
		} else {
			segment.point1(cp1);
		}
		segment.point2(cp2);
		segment.point3(actualEndPoint);
	}
	,
	$type: new $.ig.Type('PieLabel', $.ig.Control.prototype.$type)
}, true);

$.ig.util.defType('IndexCollection', 'ObservableCollection$1', {
	init: function () {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.Number.prototype.$type, 0);
	},
	insertItem: function (index, item) {
		if (!this.contains(item)) {
			$.ig.ObservableCollection$1.prototype.insertItem.call(this, index, item);
		}
	}
	,
	setItem: function (index, item) {
		if (this.contains(item)) {
			this.remove(item);
			this.insertItem(index, item);
		} else {
			$.ig.ObservableCollection$1.prototype.setItem.call(this, index, item);
		}
	}
	,
	$type: new $.ig.Type('IndexCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.Number.prototype.$type))
}, true);

$.ig.util.defType('SyncLink', 'FrameworkElement', {
	init: function () {
		var $self = this;
		this._fastItemsSources = new $.ig.Dictionary$2($.ig.IEnumerable.prototype.$type, $.ig.FastItemsSourceReference.prototype.$type, 0);
		$.ig.FrameworkElement.prototype.init.call(this);
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		});
		this.chartsInternal(new $.ig.ChartCollection());
		var $t = this.chartsInternal();
		$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, this.charts_CollectionChanged.runOn(this));
		this.defaultWindowRect(new $.ig.Rect(0, 0, 0, 1, 1));
	},
	_syncChannel: null,
	syncChannel: function (value) {
		if (arguments.length === 1) {
			this._syncChannel = value;
			return value;
		} else {
			return this._syncChannel;
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
	}
	,
	releaseFastItemsSource: function (itemsSource) {
		var $self = this;
		if (itemsSource != null) {
			var itemsSourceReference = null;
			if ((function () { var $ret = $self._fastItemsSources.tryGetValue(itemsSource, itemsSourceReference); itemsSourceReference = $ret.p1; return $ret.ret; }())) {
				--itemsSourceReference._references;
				if (itemsSourceReference._references == 0) {
					this._fastItemsSources.remove(itemsSource);
				}
			}
		}
		return null;
	}
	,
	_fastItemsSourceFactory: null,
	fastItemsSourceFactory: function (value) {
		if (arguments.length === 1) {
			this._fastItemsSourceFactory = value;
			return value;
		} else {
			return this._fastItemsSourceFactory;
		}
	}
	,
	createDefaultFastItemsSource: function (data) {
		return (function () {
			var $ret = new $.ig.FastItemsSource();
			$ret.itemsSource(data);
			return $ret;
		}());
	}
	,
	getFastItemsSource: function (itemsSource) {
		var $self = this;
		if ($.ig.SyncLink.prototype.fastItemsSourceFactory() == null) {
			$.ig.SyncLink.prototype.fastItemsSourceFactory($.ig.SyncLink.prototype.createDefaultFastItemsSource);
		}
		var fastItemsSource = null;
		if (itemsSource != null) {
			var itemsSourceReference = null;
			if (!(function () { var $ret = $self._fastItemsSources.tryGetValue(itemsSource, itemsSourceReference); itemsSourceReference = $ret.p1; return $ret.ret; }())) {
				fastItemsSource = $.ig.SyncLink.prototype.fastItemsSourceFactory()(itemsSource);
				itemsSourceReference = new $.ig.FastItemsSourceReference(fastItemsSource);
				this._fastItemsSources.add(itemsSource, itemsSourceReference);
			}
			itemsSourceReference._references++;
			fastItemsSource = itemsSourceReference._fastItemsSource;
		}
		return fastItemsSource;
	}
	,
	peekItemsSource: function (itemsSource) {
		var $self = this;
		var fastItemsSource = null;
		if (itemsSource != null) {
			var itemsSourceReference = null;
			if (!(function () { var $ret = $self._fastItemsSources.tryGetValue(itemsSource, itemsSourceReference); itemsSourceReference = $ret.p1; return $ret.ret; }())) {
				return null;
			}
			fastItemsSource = itemsSourceReference._fastItemsSource;
		}
		return fastItemsSource;
	}
	,
	_fastItemsSources: null,
	_defaultWindowRect: null,
	defaultWindowRect: function (value) {
		if (arguments.length === 1) {
			this._defaultWindowRect = value;
			return value;
		} else {
			return this._defaultWindowRect;
		}
	}
	,
	synchroniseRect: function (sender, chart, rect) {
		if (!rect.isEmpty()) {
			rect = new $.ig.Rect(0, rect.left(), rect.top(), rect.width(), rect.height());
			var minWidth = sender.windowRectMinWidth();
			if (chart == sender) {
				if (!chart.isZoomingHorizontallyEnabled()) {
					rect.x(chart.windowRect().x());
					rect.width(chart.windowRect().width());
				}
				if (!chart.isZoomingVerticallyEnabled()) {
					rect.y(chart.windowRect().y());
					rect.height(chart.windowRect().height());
				}
			} else {
				var settings = $.ig.SyncManager.prototype.getSyncSettings(chart);
				if (settings == null || !settings.synchronizeHorizontally()) {
					rect.x(chart.windowRect().x());
					rect.width(chart.windowRect().width());
				}
				if (settings == null || !settings.synchronizeVertically()) {
					rect.y(chart.windowRect().y());
					rect.height(chart.windowRect().height());
				}
			}
			var cx = 0.5 * (rect.left() + rect.right());
			var cy = 0.5 * (rect.top() + rect.bottom());
			var width = $.ig.MathUtil.prototype.clamp(rect.width(), minWidth, 1);
			var height = $.ig.MathUtil.prototype.clamp(rect.height(), minWidth, 1);
			if (sender.useFixedAspectZoom() && !sender.viewportRect().isEmpty()) {
				var viewport = sender.viewportRect();
				var matchAspect = viewport.width() / viewport.height();
				var projectedWidth = width * viewport.width();
				var projectedHeight = height * viewport.height();
				var projectedAspect = projectedWidth / projectedHeight;
				if (projectedAspect != matchAspect) {
					if (projectedHeight * matchAspect > projectedWidth) {
						projectedWidth = projectedHeight * matchAspect;
						width = projectedWidth / viewport.width();
					} else {
						projectedHeight = projectedWidth / matchAspect;
						height = projectedHeight / viewport.height();
					}
				}
			} else if (sender.effectiveIsSquare()) {
				var widthChanging = false;
				var heightChanging = false;
				if (Math.abs(width - sender.actualWindowRect().width()) > minWidth) {
					widthChanging = true;
				}
				if (Math.abs(height - sender.actualWindowRect().height()) > minWidth) {
					heightChanging = true;
				}
				var $ret = sender.matchRatio(width, height, widthChanging, heightChanging);
				width = $ret.p0;
				height = $ret.p1;
				width = $.ig.MathUtil.prototype.clamp(width, minWidth, 1);
				height = $.ig.MathUtil.prototype.clamp(height, minWidth, 1);
			}
			var left = cx - 0.5 * width;
			var top = cy - 0.5 * height;
			var right = cx + 0.5 * width;
			var bottom = cy + 0.5 * height;
			if (left < 0) {
				left = 0;
				right = left + width;
			}
			if (right > 1) {
				right = 1;
				left = right - width;
			}
			if (top < 0) {
				top = 0;
				bottom = top + height;
			}
			if (bottom > 1) {
				bottom = 1;
				top = bottom - height;
			}
			rect = new $.ig.Rect(0, left, top, right - left, bottom - top);
		}
		return rect;
	}
	,
	charts: function () {
		return this.chartsInternal();
	}
	,
	_chartsInternal: null,
	chartsInternal: function (value) {
		if (arguments.length === 1) {
			this._chartsInternal = value;
			return value;
		} else {
			return this._chartsInternal;
		}
	}
	,
	charts_CollectionChanged: function (sender, e) {
		if (e.newItems() != null) {
			var en = e.newItems().getEnumerator();
			while (en.moveNext()) {
				var chart = en.current();
				if (chart.windowRect().isEmpty()) {
					chart.windowRect(this.synchroniseRect(null, chart, this.defaultWindowRect()));
				}
			}
		}
	}
	,
	crosshairNotify: function (sender, crossHairPoint) {
		var en = this.charts().getEnumerator();
		while (en.moveNext()) {
			var chart = en.current();
			if (chart == sender) {
				chart.crosshairPoint({ __x: crossHairPoint.__x, __y: crossHairPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			} else {
				var pt = { __x: crossHairPoint.__x, __y: crossHairPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				var settings = $.ig.SyncManager.prototype.getSyncSettings(chart);
				if (settings == null || !settings.synchronizeHorizontally()) {
					pt.__x = NaN;
				}
				if (settings == null || !settings.synchronizeVertically()) {
					pt.__y = NaN;
				}
				chart.crosshairPoint(pt);
			}
		}
	}
	,
	previewNotify: function (sender, previewRect) {
		var en = this.charts().getEnumerator();
		while (en.moveNext()) {
			var chart = en.current();
			chart.previewRect(this.synchroniseRect(sender, chart, previewRect));
		}
	}
	,
	windowNotify: function (sender, windowRect) {
		var invalid = windowRect.isEmpty() || $.ig.util.isNaN(windowRect.x()) || $.ig.util.isNaN(windowRect.y()) || $.ig.util.isNaN(windowRect.width()) || $.ig.util.isNaN(windowRect.height());
		$.ig.Debug.prototype.assert1(!invalid, "SyncLink attempted to apply an invalid WindowRect");
		if (!invalid && !sender.dontNotify()) {
			var en = this.charts().getEnumerator();
			while (en.moveNext()) {
				var chart = en.current();
				chart.dontNotify(true);
				chart.windowRect(this.synchroniseRect(sender, chart, windowRect));
				chart.dontNotify(false);
			}
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (name, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(name));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(name, oldValue, newValue));
		}
	}
	,
	$type: new $.ig.Type('SyncLink', $.ig.FrameworkElement.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type, $.ig.IFastItemsSourceProvider.prototype.$type])
}, true);

$.ig.util.defType('SyncSettings', 'FrameworkElement', {
	init: function () {
		$.ig.FrameworkElement.prototype.init.call(this);
	},
	syncChannel: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SyncSettings.prototype.syncChannelProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SyncSettings.prototype.syncChannelProperty);
		}
	}
	,
	synchronizeVertically: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SyncSettings.prototype.synchronizeVerticallyProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SyncSettings.prototype.synchronizeVerticallyProperty);
		}
	}
	,
	synchronizeHorizontally: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SyncSettings.prototype.synchronizeHorizontallyProperty, value);
			return value;
		} else {
			return this.getValue($.ig.SyncSettings.prototype.synchronizeHorizontallyProperty);
		}
	}
	,
	raisePropertyChanged: function (propertyName, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(propertyName, oldValue, newValue));
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	$type: new $.ig.Type('SyncSettings', $.ig.FrameworkElement.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('SyncLinkManager', 'Object', {
	instance: function () {
		if ($.ig.SyncLinkManager.prototype.__instance == null) {
			$.ig.SyncLinkManager.prototype.__instance = new $.ig.SyncLinkManager();
		}
		return $.ig.SyncLinkManager.prototype.__instance;
	}
	,
	__links: null,
	linkCount: function () {
		return this.__links.count();
	}
	,
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__links = new $.ig.Dictionary$2(String, $.ig.SyncLink.prototype.$type, 0);
	},
	getLink: function (name) {
		var $self = this;
		var link;
		if ((function () { var $ret = $self.__links.tryGetValue(name, link); link = $ret.p1; return $ret.ret; }())) {
			return link;
		}
		link = new $.ig.SyncLink();
		link.syncChannel(name);
		this.__links.add(name, link);
		return link;
	}
	,
	releaseLink: function (link) {
		if (link.charts().count() == 0 && link.syncChannel() != null && this.__links.containsKey(link.syncChannel())) {
			this.__links.remove(link.syncChannel());
		}
	}
	,
	$type: new $.ig.Type('SyncLinkManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SyncManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	suspendSyncChannel: function (chart) {
		var settings = $.ig.SyncManager.prototype.getSyncSettings(chart);
		if (settings == null) {
			return;
		}
		if (!chart.isSyncReady()) {
			return;
		}
		if (chart.syncChannel() != settings.syncChannel()) {
			return;
		}
		$.ig.SyncManager.prototype.changeSyncChannel(chart, chart.syncChannel(), null);
	}
	,
	ensureSyncChannel: function (chart) {
		var settings = $.ig.SyncManager.prototype.getSyncSettings(chart);
		if (settings == null) {
			return;
		}
		if (chart.isSyncReady() && chart.syncChannel() == settings.syncChannel()) {
			return;
		}
		var lastChannel = null;
		if (chart.isSyncReady()) {
			lastChannel = chart.syncChannel();
		}
		$.ig.SyncManager.prototype.changeSyncChannel(chart, lastChannel, settings.syncChannel());
	}
	,
	changeSyncChannel: function (chart, oldSyncChannel, newSyncChannel) {
		if (chart != null) {
			if (String.isNullOrEmpty(newSyncChannel)) {
				var oldLink = chart.actualSyncLink();
				chart.actualSyncLink(null);
				chart.actualSyncLink(new $.ig.SyncLink());
				if (oldLink != null) {
					$.ig.SyncLinkManager.prototype.instance().releaseLink(oldLink);
				}
				chart.syncChannel(null);
			} else {
				if (!String.isNullOrEmpty(oldSyncChannel)) {
					var oldLink1 = chart.actualSyncLink();
					chart.actualSyncLink(null);
					if (oldLink1 != null) {
						$.ig.SyncLinkManager.prototype.instance().releaseLink(oldLink1);
					}
				}
				chart.actualSyncLink($.ig.SyncLinkManager.prototype.instance().getLink(newSyncChannel));
				chart.syncChannel(newSyncChannel);
			}
		}
	}
	,
	setSyncSettings: function (target, syncSettings) {
		(target).syncSettings(syncSettings);
	}
	,
	getSyncSettings: function (target) {
		return (target).syncSettings();
	}
	,
	$type: new $.ig.Type('SyncManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('DefaultCategoryTrendlineHost', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.__trendLinePreparer = new $.ig.DefaultCategoryTrendlinePreparer();
	},
	__trendLinePreparer: null,
	trendlinePreparer: function () {
		return this.__trendLinePreparer;
	}
	,
	trendLineType: function () {
		return $.ig.TrendLineType.prototype.none;
	}
	,
	trendLinePeriod: function () {
		return 1;
	}
	,
	$type: new $.ig.Type('DefaultCategoryTrendlineHost', $.ig.Object.prototype.$type, [$.ig.IHasCategoryTrendline.prototype.$type])
}, true);

$.ig.util.defType('DefaultCategoryTrendlinePreparer', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	prepareLine: function (flattenedPoints, trendLineType, valueColumn, period, getScaledXValue, getScaledYValue, trendResolutionParams) {
	}
	,
	$type: new $.ig.Type('DefaultCategoryTrendlinePreparer', $.ig.Object.prototype.$type, [$.ig.IPreparesCategoryTrendline.prototype.$type])
}, true);

$.ig.util.defType('TrendResolutionParams', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_firstBucket: 0,
	firstBucket: function (value) {
		if (arguments.length === 1) {
			this._firstBucket = value;
			return value;
		} else {
			return this._firstBucket;
		}
	}
	,
	_lastBucket: 0,
	lastBucket: function (value) {
		if (arguments.length === 1) {
			this._lastBucket = value;
			return value;
		} else {
			return this._lastBucket;
		}
	}
	,
	_bucketSize: 0,
	bucketSize: function (value) {
		if (arguments.length === 1) {
			this._bucketSize = value;
			return value;
		} else {
			return this._bucketSize;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_window: null,
	window: function (value) {
		if (arguments.length === 1) {
			this._window = value;
			return value;
		} else {
			return this._window;
		}
	}
	,
	_resolution: 0,
	resolution: function (value) {
		if (arguments.length === 1) {
			this._resolution = value;
			return value;
		} else {
			return this._resolution;
		}
	}
	,
	_offset: 0,
	offset: function (value) {
		if (arguments.length === 1) {
			this._offset = value;
			return value;
		} else {
			return this._offset;
		}
	}
	,
	$type: new $.ig.Type('TrendResolutionParams', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TrendFitCalculator', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	calculateFit: function (trend, trendLineType, trendResolutionParams, trendCoefficients, count, GetUnscaledX, GetUnscaledY, GetScaledXValue, GetScaledYValue, xmin, xmax) {
		if (trendCoefficients == null) {
			switch (trendLineType) {
				case $.ig.TrendLineType.prototype.linearFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.linearFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.quadraticFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.quadraticFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.cubicFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.cubicFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.quarticFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.quarticFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.quinticFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.quinticFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.exponentialFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.exponentialFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.logarithmicFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.logarithmicFit(count, GetUnscaledX, GetUnscaledY);
					break;
				case $.ig.TrendLineType.prototype.powerLawFit:
					trendCoefficients = $.ig.LeastSquaresFit.prototype.powerLawFit(count, GetUnscaledX, GetUnscaledY);
					break;
				default: throw new $.ig.NotImplementedException(0);
			}
		}
		if (trendCoefficients == null) {
			return null;
		}
		for (var i = 0; i < trendResolutionParams.viewport().width(); i += 2) {
			var p = i / (trendResolutionParams.viewport().width() - 1);
			var xi = xmin + p * (xmax - xmin);
			var yi = NaN;
			switch (trendLineType) {
				case $.ig.TrendLineType.prototype.linearFit:
					yi = $.ig.LeastSquaresFit.prototype.linearEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.quadraticFit:
					yi = $.ig.LeastSquaresFit.prototype.quadraticEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.cubicFit:
					yi = $.ig.LeastSquaresFit.prototype.cubicEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.quarticFit:
					yi = $.ig.LeastSquaresFit.prototype.quarticEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.quinticFit:
					yi = $.ig.LeastSquaresFit.prototype.quinticEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.exponentialFit:
					yi = $.ig.LeastSquaresFit.prototype.exponentialEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.logarithmicFit:
					yi = $.ig.LeastSquaresFit.prototype.logarithmicEvaluate(trendCoefficients, xi);
					break;
				case $.ig.TrendLineType.prototype.powerLawFit:
					yi = $.ig.LeastSquaresFit.prototype.powerLawEvaluate(trendCoefficients, xi);
					break;
				default: throw new $.ig.NotImplementedException(0);
			}
			xi = GetScaledXValue(xi);
			yi = GetScaledYValue(yi);
			if (!$.ig.util.isNaN(yi) && !Number.isInfinity(yi)) {
				trend.add({ __x: xi + trendResolutionParams.offset(), __y: yi, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
		}
		return trendCoefficients;
	}
	,
	$type: new $.ig.Type('TrendFitCalculator', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TrendAverageCalculator', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getAverage: function (trendLineType, sourceColumn, period) {
		var average;
		switch (trendLineType) {
			case $.ig.TrendLineType.prototype.simpleAverage:
			case $.ig.TrendLineType.prototype.exponentialAverage:
			case $.ig.TrendLineType.prototype.modifiedAverage:
			case $.ig.TrendLineType.prototype.weightedAverage:
				if (period < 1) {
					period = 1;
				}
				break;
		}
		switch (trendLineType) {
			case $.ig.TrendLineType.prototype.simpleAverage:
				average = $.ig.Series.prototype.sMA(sourceColumn, period);
				break;
			case $.ig.TrendLineType.prototype.exponentialAverage:
				average = $.ig.Series.prototype.eMA(sourceColumn, period);
				break;
			case $.ig.TrendLineType.prototype.modifiedAverage:
				average = $.ig.Series.prototype.mMA(sourceColumn, period);
				break;
			case $.ig.TrendLineType.prototype.cumulativeAverage:
				average = $.ig.Series.prototype.cMA(sourceColumn);
				break;
			case $.ig.TrendLineType.prototype.weightedAverage:
				average = $.ig.Series.prototype.wMA(sourceColumn, period);
				break;
			default: throw new $.ig.NotImplementedException(0);
		}
		return average;
	}
	,
	calculateSingleValueAverage: function (trendLineType, trendColumn, valueColumn, period) {
		if (trendColumn.count() == 0) {
			var average = $.ig.TrendAverageCalculator.prototype.getAverage(trendLineType, valueColumn, period);
			var en = average.getEnumerator();
			while (en.moveNext()) {
				var d = en.current();
				trendColumn.add(d);
			}
		}
	}
	,
	calculateXYAverage: function (trendLineType, trendColumn, XColumn, YColumn, period) {
		if (trendColumn.count() == 0) {
			var xAverage = $.ig.TrendAverageCalculator.prototype.getAverage(trendLineType, XColumn, period).getEnumerator();
			var yAverage = $.ig.TrendAverageCalculator.prototype.getAverage(trendLineType, YColumn, period).getEnumerator();
			while (xAverage.moveNext() && yAverage.moveNext()) {
				trendColumn.add({ __x: xAverage.current(), __y: yAverage.current(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			}
		}
	}
	,
	$type: new $.ig.Type('TrendAverageCalculator', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SortingTrendLineManager', 'CategoryTrendLineManagerBase', {
	init: function (getUnscaledXValueFromUnsortedIndex, getUnscaledXValue) {
		$.ig.CategoryTrendLineManagerBase.prototype.init.call(this);
		this.getUnscaledValueFromUnsortedIndex(getUnscaledXValueFromUnsortedIndex);
		this.getUnscaledXValue(getUnscaledXValue);
	},
	_getUnscaledValueFromUnsortedIndex: null,
	getUnscaledValueFromUnsortedIndex: function (value) {
		if (arguments.length === 1) {
			this._getUnscaledValueFromUnsortedIndex = value;
			return value;
		} else {
			return this._getUnscaledValueFromUnsortedIndex;
		}
	}
	,
	_getUnscaledXValue: null,
	getUnscaledXValue: function (value) {
		if (arguments.length === 1) {
			this._getUnscaledXValue = value;
			return value;
		} else {
			return this._getUnscaledXValue;
		}
	}
	,
	prepareLine: function (flattenedPoints, trendLineType, valueColumn, period, GetScaledXValue, GetScaledYValue, trendResolutionParams) {
		var $self = this;
		var xmin = trendResolutionParams.firstBucket() * trendResolutionParams.bucketSize();
		var xmax = trendResolutionParams.lastBucket() * trendResolutionParams.bucketSize();
		var trend = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		if (trendLineType == $.ig.TrendLineType.prototype.none) {
			this.trendCoefficients(null);
			this.trendColumn().clear();
			return;
		}
		if (this.isFit(trendLineType)) {
			this.trendColumn().clear();
			this.trendCoefficients($.ig.TrendFitCalculator.prototype.calculateFit(trend, trendLineType, trendResolutionParams, this.trendCoefficients(), valueColumn.count(), function (x) { return (x + 1); }, function (i) { return valueColumn.item(i); }, function (x) {
				var floor = $.ig.truncate(Math.floor(x));
				var ceil = $.ig.truncate(Math.ceil(x));
				var p = x - floor;
				var unscaled;
				if (ceil <= xmax) {
					unscaled = $self.getUnscaledValueFromUnsortedIndex()(floor) + p * ($self.getUnscaledValueFromUnsortedIndex()(ceil) - $self.getUnscaledValueFromUnsortedIndex()(floor));
				} else {
					unscaled = $self.getUnscaledValueFromUnsortedIndex()(floor) + p * ($self.getUnscaledValueFromUnsortedIndex()($.ig.truncate(xmax)) - $self.getUnscaledValueFromUnsortedIndex()(floor));
				}
				return GetScaledXValue(unscaled);
			}, GetScaledYValue, xmin, xmax));
		}
		if (this.isAverage(trendLineType)) {
			this.trendCoefficients(null);
			$.ig.TrendAverageCalculator.prototype.calculateSingleValueAverage(trendLineType, this.trendColumn(), valueColumn, period);
			for (var i = trendResolutionParams.firstBucket(); i <= trendResolutionParams.lastBucket(); i += 1) {
				var itemIndex = i * trendResolutionParams.bucketSize();
				var unscaledX = this.getUnscaledValueFromUnsortedIndex()(itemIndex);
				if (itemIndex >= 0 && itemIndex < this.trendColumn().count()) {
					var xi = GetScaledXValue(unscaledX);
					var yi = GetScaledYValue(this.trendColumn().__inner[itemIndex]);
					trend.add({ __x: xi + trendResolutionParams.offset(), __y: yi, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				}
			}
		}
		this.flattenTrendLine(trend, trendResolutionParams, flattenedPoints);
	}
	,
	$type: new $.ig.Type('SortingTrendLineManager', $.ig.CategoryTrendLineManagerBase.prototype.$type)
}, true);

$.ig.util.defType('AxisCollection', 'ObservableCollection$1', {
	init: function () {
		var $self = this;
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.Axis.prototype.$type, 0);
		this.propertyChanged = $.ig.Delegate.prototype.combine(this.propertyChanged, function (o, e) {
			if (e.propertyName() == "Name") {
				for (var i = 0; i < $self.count(); ++i) {
					if ($self.__inner[i].name() == e.propertyName()) {
						$self.onCollectionChanged(new $.ig.NotifyCollectionChangedEventArgs(2, $.ig.NotifyCollectionChangedAction.prototype.replace, $self.__inner[i], $self.__inner[i], i));
					}
				}
			}
		});
	},
	collectionResetting: null,
	clearItems: function () {
		if (this.collectionResetting != null) {
			this.collectionResetting(this, null);
		}
		$.ig.ObservableCollection$1.prototype.clearItems.call(this);
	}
	,
	$type: new $.ig.Type('AxisCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.Axis.prototype.$type))
}, true);

$.ig.util.defType('AxisRange', 'Object', {
	init: function (minimum, maximum) {
		$.ig.Object.prototype.init.call(this);
		this.minimum(minimum);
		this.maximum(maximum);
	},
	_minimum: 0,
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			return this._minimum;
		}
	}
	,
	_maximum: 0,
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			return this._maximum;
		}
	}
	,
	equals: function (other) {
		return other != null && this.minimum() == other.minimum() && this.maximum() == other.maximum();
	}
	,
	equals1: function (other) {
		return this.equals($.ig.util.cast($.ig.AxisRange.prototype.$type, other));
	}
	,
	getHashCode: function () {
		return $.ig.Object.prototype.getHashCode.call(this);
	}
	,
	$type: new $.ig.Type('AxisRange', $.ig.Object.prototype.$type, [$.ig.IEquatable$1.prototype.$type.specialize(-1)])
}, true);

$.ig.AxisRange.prototype.$type.initSelfReferences();

$.ig.util.defType('AxisRangeChangedEventArgs', 'EventArgs', {
	init: function (oldMinimumValue, minimumValue, oldMaximumValue, maximumValue) {
		$.ig.EventArgs.prototype.init.call(this);
		this.oldMinimumValue(oldMinimumValue);
		this.minimumValue(minimumValue);
		this.oldMaximumValue(oldMaximumValue);
		this.maximumValue(maximumValue);
	},
	_oldMinimumValue: 0,
	oldMinimumValue: function (value) {
		if (arguments.length === 1) {
			this._oldMinimumValue = value;
			return value;
		} else {
			return this._oldMinimumValue;
		}
	}
	,
	_minimumValue: 0,
	minimumValue: function (value) {
		if (arguments.length === 1) {
			this._minimumValue = value;
			return value;
		} else {
			return this._minimumValue;
		}
	}
	,
	_oldMaximumValue: 0,
	oldMaximumValue: function (value) {
		if (arguments.length === 1) {
			this._oldMaximumValue = value;
			return value;
		} else {
			return this._oldMaximumValue;
		}
	}
	,
	_maximumValue: 0,
	maximumValue: function (value) {
		if (arguments.length === 1) {
			this._maximumValue = value;
			return value;
		} else {
			return this._maximumValue;
		}
	}
	,
	$type: new $.ig.Type('AxisRangeChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('Snapper', 'Object', {
	init: function () {
		this.__resolution = 7;
		this.__customResolution = false;
		$.ig.Object.prototype.init.call(this);
	},
	__resolution: 0,
	resolution: function (value) {
		if (arguments.length === 1) {
			this.__resolution = value;
			return value;
		} else {
			return this.__resolution;
		}
	}
	,
	__customResolution: false,
	customResolution: function (value) {
		if (arguments.length === 1) {
			this.__customResolution = value;
			return value;
		} else {
			return this.__customResolution;
		}
	}
	,
	expt: function (a, n) {
		var x = 1;
		if (n > 0) {
			for (; n > 0; --n) {
				x *= a;
			}
		} else {
			for (; n < 0; ++n) {
				x /= a;
			}
		}
		return x;
	}
	,
	nicenum: function (x, round) {
		var exp = $.ig.truncate(Math.floor(Math.log10(x)));
		var f = x / Math.pow(10, exp);
		if (round) {
			var nf = f < 1.5 ? 1 : f < 3 ? 2 : f < 7 ? 5 : 10;
			return nf * Math.pow(10, exp);
		} else {
			var nf1 = f <= 1 ? 1 : f <= 2 ? 2 : f <= 5 ? 5 : 10;
			return nf1 * Math.pow(10, exp);
		}
	}
	,
	nicenum1: function (span, round) {
		var niceSpan = (0);
		if ($.ig.util.timeSpanTotalDays(span) > 1) {
			niceSpan = $.ig.util.timeSpanFromDays(Math.ceil($.ig.util.timeSpanTotalDays(span)));
		} else if ($.ig.util.timeSpanTotalHours(span) > 1) {
			niceSpan = $.ig.util.timeSpanFromHours(Math.ceil($.ig.util.timeSpanTotalHours(span)));
		} else if ($.ig.util.timeSpanTotalMinutes(span) > 1) {
			niceSpan = $.ig.util.timeSpanFromMinutes(Math.ceil($.ig.util.timeSpanTotalMinutes(span)));
		} else if ($.ig.util.timeSpanTotalSeconds(span) > 1) {
			niceSpan = $.ig.util.timeSpanFromSeconds(Math.ceil($.ig.util.timeSpanTotalSeconds(span)));
		} else if ($.ig.util.timeSpanTotalMilliseconds(span) > 1) {
			niceSpan = $.ig.util.timeSpanFromMilliseconds(Math.ceil($.ig.util.timeSpanTotalMilliseconds(span)));
		}
		return niceSpan;
	}
	,
	$type: new $.ig.Type('Snapper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LinearNumericSnapper', 'Snapper', {
	init: function (initNumber, visibleMinimum, visibleMaximum, pixels, resolution) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.Snapper.prototype.init.call(this);
		if (resolution > 0) {
			this.resolution(resolution);
			this.customResolution(true);
		}
		this.initialize(visibleMinimum, visibleMaximum, pixels, 10);
	},
	init1: function (initNumber, visibleMinimum, visibleMaximum, pixels, minTicks, resolution) {
		$.ig.Snapper.prototype.init.call(this);
		if (resolution > 0) {
			this.resolution(resolution);
			this.customResolution(true);
		}
		this.initialize(visibleMinimum, visibleMaximum, pixels, minTicks);
	},
	initialize: function (visibleMinimum, visibleMaximum, pixels, minTicks) {
		this.interval(NaN);
		this.precision(0);
		this.minorCount(0);
		var ticks = 0;
		if (pixels < 100) {
			ticks = 4;
		} else {
			ticks = Math.min(minTicks, $.ig.truncate((pixels / this.resolution())));
		}
		if (ticks > 0) {
			var newTicks = this.adjustTicks(visibleMinimum, visibleMaximum, ticks);
			if (this.customResolution() && newTicks > ticks) {
				this.interval(NaN);
				newTicks = this.adjustTicks(visibleMinimum, visibleMaximum, ticks - 1);
			}
			ticks = newTicks;
			if (pixels / ticks > this.resolution() * 10) {
				this.minorCount(10);
			} else {
				if (pixels / ticks > this.resolution() * 5) {
					this.minorCount(5);
				} else {
					if (pixels / ticks > this.resolution() * 2) {
						this.minorCount(2);
					}
				}
			}
			this.precision(Math.max(-$.ig.truncate(Math.floor(Math.log10(this.interval()))), 0));
		}
	}
	,
	adjustTicks: function (visibleMinimum, visibleMaximum, ticks) {
		var range = $.ig.Snapper.prototype.nicenum(visibleMaximum - visibleMinimum, false);
		this.interval($.ig.Snapper.prototype.nicenum(range / (ticks - 1), true));
		var graphmin = Math.floor(visibleMinimum / this.interval()) * this.interval();
		var graphmax = Math.ceil(visibleMaximum / this.interval()) * this.interval();
		var newTicks = $.ig.truncate(Math.round((graphmax - graphmin) / this.interval()));
		return newTicks;
	}
	,
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_precision: 0,
	precision: function (value) {
		if (arguments.length === 1) {
			this._precision = value;
			return value;
		} else {
			return this._precision;
		}
	}
	,
	_minorCount: 0,
	minorCount: function (value) {
		if (arguments.length === 1) {
			this._minorCount = value;
			return value;
		} else {
			return this._minorCount;
		}
	}
	,
	$type: new $.ig.Type('LinearNumericSnapper', $.ig.Snapper.prototype.$type)
}, true);

$.ig.util.defType('LogarithmicNumericSnapper', 'Snapper', {
	init: function (visibleMinimum, visibleMaximum, logarithmBase, pixels) {
		$.ig.Snapper.prototype.init.call(this);
		this.interval(1);
		this.minorCount(logarithmBase);
	},
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_minorCount: 0,
	minorCount: function (value) {
		if (arguments.length === 1) {
			this._minorCount = value;
			return value;
		} else {
			return this._minorCount;
		}
	}
	,
	$type: new $.ig.Type('LogarithmicNumericSnapper', $.ig.Snapper.prototype.$type)
}, true);

$.ig.util.defType('LinearCategorySnapper', 'Snapper', {
	init: function (initNumber, visibleMinimum, visibleMaximum, pixels, resolution) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.LinearCategorySnapper.prototype.init1.call(this, 1, visibleMinimum, visibleMaximum, pixels, NaN, $.ig.CategoryMode.prototype.mode0, resolution);
	},
	init1: function (initNumber, visibleMinimum, visibleMaximum, pixels, interval, categoryMode, resolution) {
		$.ig.Snapper.prototype.init.call(this);
		if (resolution > 0) {
			this.resolution(resolution);
			this.customResolution(true);
		}
		this.interval(interval);
		this.minorCount(0);
		var ticks = Math.min(10, $.ig.truncate((pixels / this.resolution())));
		if (ticks > 0) {
			var newTicks = this.adjustTicks(visibleMinimum, visibleMaximum, ticks);
			if (this.customResolution() && newTicks > ticks) {
				this.interval(interval);
				newTicks = this.adjustTicks(visibleMinimum, visibleMaximum, ticks - 1);
			}
			ticks = newTicks;
			if (pixels / ticks > this.resolution() * 10) {
				this.minorCount(10);
			} else {
				if (pixels / ticks > this.resolution() * 5) {
					this.minorCount(5);
				} else {
					if (pixels / ticks > this.resolution() * 2) {
						this.minorCount(2);
					}
				}
			}
		}
	},
	adjustTicks: function (visibleMinimum, visibleMaximum, ticks) {
		var range = $.ig.Snapper.prototype.nicenum(visibleMaximum - visibleMinimum, false);
		if ($.ig.util.isNaN(this.interval())) {
			this.interval($.ig.Snapper.prototype.nicenum(range / (ticks - 1), true));
		}
		if (this.interval() < 1) {
			this.interval(1);
		}
		var graphmin = Math.floor(visibleMinimum / this.interval()) * this.interval();
		var graphmax = Math.ceil(visibleMaximum / this.interval()) * this.interval();
		var newTicks = $.ig.truncate(Math.round((graphmax - graphmin) / this.interval()));
		return newTicks;
	}
	,
	_interval: 0,
	interval: function (value) {
		if (arguments.length === 1) {
			this._interval = value;
			return value;
		} else {
			return this._interval;
		}
	}
	,
	_minorCount: 0,
	minorCount: function (value) {
		if (arguments.length === 1) {
			this._minorCount = value;
			return value;
		} else {
			return this._minorCount;
		}
	}
	,
	$type: new $.ig.Type('LinearCategorySnapper', $.ig.Snapper.prototype.$type)
}, true);

$.ig.util.defType('IDetectsCollisions', 'Object', {
	$type: new $.ig.Type('IDetectsCollisions', null)
}, true);

$.ig.util.defType('NonCollisionAvoider', 'Object', {
	staticInit: function () {
		$.ig.NonCollisionAvoider.prototype.instance(new $.ig.NonCollisionAvoider());
	},
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_instance: null,
	instance: function (value) {
		if (arguments.length === 1) {
			this._instance = value;
			return value;
		} else {
			return this._instance;
		}
	}
	,
	clear: function () {
	}
	,
	tryAdd: function (rc) {
		return true;
	}
	,
	$type: new $.ig.Type('NonCollisionAvoider', $.ig.Object.prototype.$type, [$.ig.IDetectsCollisions.prototype.$type])
}, true);

$.ig.util.defType('CategoryFrame', 'Frame', {
	init: function (count) {
		this._buckets = new $.ig.List$1(Array, 0);
		this._errorBuckets = new $.ig.List$1($.ig.Number.prototype.$type, 0);
		this._errorSpeedModifiers = new $.ig.List$1(Number, 0);
		this._markers = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		this._markerSpeedModifiers = new $.ig.List$1(Number, 0);
		this._trend = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		this._trendSpeedModifiers = new $.ig.List$1(Number, 0);
		this._errorBars = new $.ig.List$1($.ig.Point.prototype.$type, 0);
		this._errorBarsSpeedModifiers = new $.ig.List$1(Number, 0);
		this._errorBarPositiveSizes = new $.ig.List$1(Number, 0);
		this._errorBarNegativeSizes = new $.ig.List$1(Number, 0);
		this._speedModifiers = new $.ig.List$1(Number, 0);
		$.ig.Frame.prototype.init.call(this);
		this.__fullClip = new $.ig.Rect(0, 0, 0, 1, 1);
		this._cnt = count;
		this.incrementFrameVersion();
	},
	__fullClip: null,
	_buckets: null,
	_errorBuckets: null,
	_errorSpeedModifiers: null,
	_markers: null,
	_markerSpeedModifiers: null,
	_trend: null,
	_trendSpeedModifiers: null,
	_errorBars: null,
	_errorBarsSpeedModifiers: null,
	_errorBarPositiveSizes: null,
	_errorBarNegativeSizes: null,
	_speedModifiers: null,
	_frameVersion: 0,
	frameVersion: function (value) {
		if (arguments.length === 1) {
			this._frameVersion = value;
			return value;
		} else {
			return this._frameVersion;
		}
	}
	,
	_cnt: 0,
	interpolate3: function (p, _min, _max) {
		this.incrementFrameVersion();
		var min = $.ig.util.cast($.ig.CategoryFrame.prototype.$type, _min);
		var max = $.ig.util.cast($.ig.CategoryFrame.prototype.$type, _max);
		var minCount = min._buckets.count();
		var maxCount = max._buckets.count();
		var count = Math.max(minCount, maxCount);
		var markerCount = Math.max(min._markers.count(), max._markers.count());
		var trendCount = Math.max(min._trend.count(), max._trend.count());
		var errorCount = Math.max(min._errorBuckets.count(), max._errorBuckets.count());
		var errorBarsCount = Math.max(min._errorBars.count(), max._errorBars.count());
		var speedModified = min._speedModifiers.count() > 0;
		if (speedModified) {
			this.reconcileSpeedModifiers(this._speedModifiers, p, min._speedModifiers, max._speedModifiers, count);
		}
		var markerSpeedModified = min._markerSpeedModifiers.count() > 0;
		if (markerSpeedModified) {
			this.reconcileSpeedModifiers(this._markerSpeedModifiers, p, min._markerSpeedModifiers, max._markerSpeedModifiers, markerCount);
		}
		var trendSpeedModified = min._trendSpeedModifiers.count() > 0;
		if (trendSpeedModified) {
			this.reconcileSpeedModifiers(this._trendSpeedModifiers, p, min._trendSpeedModifiers, max._trendSpeedModifiers, trendCount);
		}
		var errorSpeedModified = min._errorSpeedModifiers.count() > 0;
		if (errorSpeedModified) {
			this.reconcileSpeedModifiers(this._errorSpeedModifiers, p, min._errorSpeedModifiers, max._errorSpeedModifiers, errorCount);
		}
		var errorBarsSpeedModified = min._errorBarsSpeedModifiers.count() > 0;
		if (errorBarsSpeedModified) {
			this.reconcileSpeedModifiers(this._errorBarsSpeedModifiers, p, min._errorBarsSpeedModifiers, max._errorBarsSpeedModifiers, errorBarsCount);
		}
		if (this._buckets.count() < count) {
			while (this._buckets.count() < count) {
				this._buckets.add(new Array(this._cnt));
			}
		}
		if (this._buckets.count() > count) {
			this._buckets.removeRange(count, this._buckets.count() - count);
		}
		if (speedModified) {
			var speed = 0;
			for (var i = 0; i < Math.min(minCount, maxCount); ++i) {
				var bucket = this._buckets.__inner[i];
				speed = p * this._speedModifiers.__inner[i];
				speed = speed > 1 ? 1 : speed;
				for (var j = 0; j < this._cnt; ++j) {
					bucket[j] = min._buckets.__inner[i][j] + speed * (max._buckets.__inner[i][j] - min._buckets.__inner[i][j]);
				}
			}
		} else {
			for (var i1 = 0; i1 < Math.min(minCount, maxCount); ++i1) {
				var bucket1 = this._buckets.__inner[i1];
				for (var j1 = 0; j1 < this._cnt; ++j1) {
					bucket1[j1] = min._buckets.__inner[i1][j1] + p * (max._buckets.__inner[i1][j1] - min._buckets.__inner[i1][j1]);
				}
			}
		}
		if (minCount < maxCount) {
			var b = new Array(this._cnt);
			for (var j2 = this._cnt - 1; j2 >= 0; --j2) {
				b[j2] = min._buckets.count() > 0 ? min._buckets.__inner[min._buckets.count() - 1][j2] : 0;
			}
			if (speedModified) {
				var speed1 = 0;
				for (var i2 = minCount; i2 < maxCount; ++i2) {
					var bucket2 = this._buckets.__inner[i2];
					speed1 = p * this._speedModifiers.__inner[i2];
					speed1 = speed1 > 1 ? 1 : speed1;
					for (var j3 = this._cnt - 1; j3 >= 0; --j3) {
						bucket2[j3] = b[j3] + speed1 * (max._buckets.__inner[i2][j3] - b[j3]);
					}
				}
			} else {
				for (var i3 = minCount; i3 < maxCount; ++i3) {
					var bucket3 = this._buckets.__inner[i3];
					for (var j4 = this._cnt - 1; j4 >= 0; --j4) {
						bucket3[j4] = b[j4] + p * (max._buckets.__inner[i3][j4] - b[j4]);
					}
				}
			}
		}
		if (minCount > maxCount) {
			var e = new Array(this._cnt);
			for (var j5 = this._cnt - 1; j5 >= 0; --j5) {
				e[j5] = max._buckets.count() > 0 ? max._buckets.__inner[max._buckets.count() - 1][j5] : 0;
			}
			if (speedModified) {
				var speed2 = 0;
				for (var i4 = maxCount; i4 < minCount; ++i4) {
					var bucket4 = this._buckets.__inner[i4];
					speed2 = p * this._speedModifiers.__inner[i4];
					speed2 = speed2 > 1 ? 1 : speed2;
					for (var j6 = this._cnt - 1; j6 >= 0; --j6) {
						bucket4[j6] = min._buckets.__inner[i4][j6] + speed2 * (e[j6] - min._buckets.__inner[i4][j6]);
					}
				}
			} else {
				for (var i5 = maxCount; i5 < minCount; ++i5) {
					var bucket5 = this._buckets.__inner[i5];
					for (var j7 = this._cnt - 1; j7 >= 0; --j7) {
						bucket5[j7] = min._buckets.__inner[i5][j7] + p * (e[j7] - min._buckets.__inner[i5][j7]);
					}
				}
			}
		}
		if (markerSpeedModified) {
			$.ig.Frame.prototype.interpolateWithSpeed(this._markers, p, min._markers, max._markers, this._markerSpeedModifiers);
		} else {
			$.ig.Frame.prototype.interpolate(this._markers, p, min._markers, max._markers);
		}
		if (trendSpeedModified) {
			$.ig.Frame.prototype.interpolateWithSpeed(this._trend, p, min._trend, max._trend, this._trendSpeedModifiers);
		} else {
			$.ig.Frame.prototype.interpolate(this._trend, p, min._trend, max._trend);
		}
		if (errorSpeedModified) {
			$.ig.Frame.prototype.interpolateWithSpeed(this._errorBars, p, min._errorBars, max._errorBars, this._errorSpeedModifiers);
		} else {
			$.ig.Frame.prototype.interpolate(this._errorBars, p, min._errorBars, max._errorBars);
		}
		if (errorBarsSpeedModified) {
			$.ig.Frame.prototype.interpolateWithSpeed1(this._errorBarPositiveSizes, p, min._errorBarPositiveSizes, max._errorBarPositiveSizes, this._errorBarsSpeedModifiers);
			$.ig.Frame.prototype.interpolateWithSpeed1(this._errorBarNegativeSizes, p, min._errorBarNegativeSizes, max._errorBarNegativeSizes, this._errorBarsSpeedModifiers);
		} else {
			$.ig.Frame.prototype.interpolate1(this._errorBarPositiveSizes, p, min._errorBarPositiveSizes, max._errorBarPositiveSizes);
			$.ig.Frame.prototype.interpolate1(this._errorBarNegativeSizes, p, min._errorBarNegativeSizes, max._errorBarNegativeSizes);
		}
		var minClip = min.customClip();
		var maxClip = max.customClip();
		if ($.ig.Rect.prototype.l_op_Equality(minClip, null)) {
			minClip = this.__fullClip;
		}
		if ($.ig.Rect.prototype.l_op_Equality(maxClip, null)) {
			maxClip = this.__fullClip;
		}
		var left = minClip.left() + (maxClip.left() - minClip.left()) * p;
		var top = minClip.top() + (maxClip.top() - minClip.top()) * p;
		var width = minClip.width() + (maxClip.width() - minClip.width()) * p;
		var height = minClip.height() + (maxClip.height() - minClip.height()) * p;
		this.customClip(new $.ig.Rect(0, left, top, width, height));
	}
	,
	reconcileSpeedModifiers: function (modifiers, p, minSpeedModifiers, maxSpeedModifiers, count) {
		if (maxSpeedModifiers.count() == 0) {
			for (var i = 0; i < minSpeedModifiers.count(); i++) {
				maxSpeedModifiers.add(minSpeedModifiers.__inner[i]);
			}
		} else {
			$.ig.Frame.prototype.interpolate1(modifiers, p, minSpeedModifiers, maxSpeedModifiers);
		}
		if (modifiers.count() < count) {
			var speedCount = modifiers.count();
			for (var i1 = 0; i1 < count - speedCount; i1++) {
				modifiers.add(1);
			}
		}
	}
	,
	clearSpeedModifiers: function () {
		this._speedModifiers.clear();
		this._trendSpeedModifiers.clear();
		this._markerSpeedModifiers.clear();
		this._errorSpeedModifiers.clear();
		this._errorBarsSpeedModifiers.clear();
	}
	,
	clearFrame: function () {
		this.incrementFrameVersion();
		this.clearSpeedModifiers();
		this.customClip(this.__fullClip);
	}
	,
	resetFrame: function () {
		this.clearFrame();
		this._buckets.clear();
		this._errorBars.clear();
		this._errorBuckets.clear();
		this._markers.clear();
		this._trend.clear();
	}
	,
	incrementFrameVersion: function () {
		$.ig.CategoryFrame.prototype._categoryFrameVersion++;
		if ($.ig.CategoryFrame.prototype._categoryFrameVersion >= (0x7FFFFFFF - 1)) {
			$.ig.CategoryFrame.prototype._categoryFrameVersion = 0;
		}
		this.frameVersion($.ig.CategoryFrame.prototype._categoryFrameVersion);
	}
	,
	_customClip: null,
	customClip: function (value) {
		if (arguments.length === 1) {
			this._customClip = value;
			return value;
		} else {
			return this._customClip;
		}
	}
	,
	$type: new $.ig.Type('CategoryFrame', $.ig.Frame.prototype.$type)
}, true);

$.ig.util.defType('CategoryTransitionSourceFramePreparer', 'Object', {
	init: function () {
		this.__rand = new $.ig.Random(0);
		$.ig.Object.prototype.init.call(this);
	},
	prepareSourceFrame: function (previousFrame, currentFrame, isVertical, xAxis, yAxis, mode, defaultMode, speedType, defaultSpeedType, getZeroValue, viewport) {
		previousFrame.customClip(new $.ig.Rect(0, 0, 0, 1, 1));
		previousFrame._buckets.clear();
		previousFrame._errorBuckets.clear();
		previousFrame._markers.clear();
		previousFrame._trend.clear();
		previousFrame._errorBars.clear();
		previousFrame._errorBarPositiveSizes.clear();
		previousFrame._errorBarNegativeSizes.clear();
		var yAxisIsInverted = false;
		var xAxisIsInverted = false;
		if (yAxis != null) {
			yAxisIsInverted = yAxis.isInverted();
		}
		if (xAxis != null) {
			xAxisIsInverted = xAxis.isInverted();
		}
		var transitionMode = mode;
		if (transitionMode == $.ig.CategoryTransitionInMode.prototype.auto) {
			transitionMode = defaultMode;
		}
		switch (transitionMode) {
			case $.ig.CategoryTransitionInMode.prototype.fromZero:
				var zeroValue = getZeroValue();
				this.prepareSourceFrameFromZero(previousFrame, currentFrame, zeroValue, isVertical);
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromLeft:
				this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, false, isVertical, viewport);
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromTop:
				this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, true, isVertical, viewport);
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromBottom:
				this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, false, isVertical, viewport);
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromRight:
				this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, true, isVertical, viewport);
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromLeft:
				this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, false);
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromRight:
				this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, true);
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromTop:
				this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, true);
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromBottom:
				this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, false);
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromCenter:
				this.copyFrame(previousFrame, currentFrame);
				previousFrame.customClip(new $.ig.Rect(0, 0.5, 0.5, 0, 0));
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromCategoryAxisMinimum:
				if (isVertical) {
					this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, yAxisIsInverted, isVertical, viewport);
				} else {
					this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, xAxisIsInverted, isVertical, viewport);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromCategoryAxisMaximum:
				if (isVertical) {
					this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, !yAxisIsInverted, isVertical, viewport);
				} else {
					this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, !xAxisIsInverted, isVertical, viewport);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromValueAxisMinimum:
				if (isVertical) {
					this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, xAxisIsInverted, isVertical, viewport);
				} else {
					this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, yAxisIsInverted, isVertical, viewport);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.accordionFromValueAxisMaximum:
				if (isVertical) {
					this.prepareSourceFrameFromLeftOrRight(previousFrame, currentFrame, !xAxisIsInverted, isVertical, viewport);
				} else {
					this.prepareSourceFrameFromTopOrBottom(previousFrame, currentFrame, !yAxisIsInverted, isVertical, viewport);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromCategoryAxisMinimum:
				if (isVertical) {
					this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, yAxisIsInverted);
				} else {
					this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, xAxisIsInverted);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromCategoryAxisMaximum:
				if (isVertical) {
					this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, !yAxisIsInverted);
				} else {
					this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, !xAxisIsInverted);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromValueAxisMinimum:
				if (isVertical) {
					this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, xAxisIsInverted);
				} else {
					this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, yAxisIsInverted);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.sweepFromValueAxisMaximum:
				if (isVertical) {
					this.prepareSourceFrameSweepFromLeftOrRight(previousFrame, currentFrame, !xAxisIsInverted);
				} else {
					this.prepareSourceFrameSweepFromTopOrBottom(previousFrame, currentFrame, !yAxisIsInverted);
				}
				break;
			case $.ig.CategoryTransitionInMode.prototype.expand:
				this.prepareSourceFrameExpand(previousFrame, currentFrame);
				break;
		}
		if (speedType == $.ig.TransitionInSpeedType.prototype.auto) {
			speedType = defaultSpeedType;
		}
		previousFrame.clearSpeedModifiers();
		currentFrame.clearSpeedModifiers();
		switch (speedType) {
			case $.ig.TransitionInSpeedType.prototype.indexScaled:
				this.applyIndexScaledSpeedModifiers(previousFrame._buckets.count(), transitionMode, previousFrame._speedModifiers, currentFrame._speedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyIndexScaledSpeedModifiers(previousFrame._markers.count(), transitionMode, previousFrame._markerSpeedModifiers, currentFrame._markerSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyIndexScaledSpeedModifiers(previousFrame._trend.count(), transitionMode, previousFrame._trendSpeedModifiers, currentFrame._trendSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyIndexScaledSpeedModifiers(previousFrame._errorBars.count(), transitionMode, previousFrame._errorSpeedModifiers, currentFrame._errorSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyIndexScaledSpeedModifiers(previousFrame._errorBarPositiveSizes.count(), transitionMode, previousFrame._errorBarsSpeedModifiers, currentFrame._errorBarsSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				break;
			case $.ig.TransitionInSpeedType.prototype.valueScaled:
				var zeroVAlue = getZeroValue();
				this.applyValueScaledSpeedModifiersFromBuckets(previousFrame._buckets.count(), zeroVAlue, transitionMode, previousFrame._buckets, currentFrame._buckets, previousFrame._speedModifiers, currentFrame._speedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyValueScaledSpeedModifiersFromPoints(previousFrame._markers.count(), zeroVAlue, transitionMode, previousFrame._markers, currentFrame._markers, previousFrame._markerSpeedModifiers, currentFrame._markerSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyValueScaledSpeedModifiersFromPoints(previousFrame._trend.count(), zeroVAlue, transitionMode, previousFrame._trend, currentFrame._trend, previousFrame._trendSpeedModifiers, currentFrame._trendSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyValueScaledSpeedModifiersFromPoints(previousFrame._errorBars.count(), zeroVAlue, transitionMode, previousFrame._errorBars, currentFrame._errorBars, previousFrame._errorSpeedModifiers, currentFrame._errorSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				this.applyValueScaledSpeedModifiersFromDoubles(previousFrame._errorBarPositiveSizes.count(), zeroVAlue, transitionMode, previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes, previousFrame._errorBarsSpeedModifiers, currentFrame._errorBarsSpeedModifiers, xAxis, yAxis, isVertical, viewport);
				break;
			case $.ig.TransitionInSpeedType.prototype.random:
				this.applyRandomSpeedModifiers(previousFrame._buckets.count(), transitionMode, previousFrame._speedModifiers, currentFrame._speedModifiers);
				this.applyRandomSpeedModifiers(previousFrame._markers.count(), transitionMode, previousFrame._markerSpeedModifiers, currentFrame._markerSpeedModifiers);
				this.applyRandomSpeedModifiers(previousFrame._trend.count(), transitionMode, previousFrame._trendSpeedModifiers, currentFrame._trendSpeedModifiers);
				this.applyRandomSpeedModifiers(previousFrame._errorBars.count(), transitionMode, previousFrame._errorSpeedModifiers, currentFrame._errorSpeedModifiers);
				this.applyRandomSpeedModifiers(previousFrame._errorBarPositiveSizes.count(), transitionMode, previousFrame._errorBarsSpeedModifiers, currentFrame._errorBarsSpeedModifiers);
				break;
		}
	}
	,
	__rand: null,
	applyRandomSpeedModifiers: function (count, transitionMode, previousModifiers, currentModifiers) {
		if (count == 0) {
			return;
		}
		for (var i = 0; i < count; i++) {
			previousModifiers.add(1 + this.__rand.nextDouble());
			currentModifiers.add(1 + this.__rand.nextDouble());
		}
	}
	,
	applyValueScaledSpeedModifiersFromBuckets: function (count, zeroValue, transitionMode, previousBuckets, currentBuckets, previousModifiers, currentModifiers, xAxis, yAxis, isVertical, viewport) {
		if (count == 0) {
			return;
		}
		var isInverted = false;
		var valueAxis = yAxis;
		if (isVertical) {
			valueAxis = xAxis;
		}
		if (valueAxis != null) {
			isInverted = valueAxis.isInverted();
		}
		var bound = viewport.bottom();
		var maxBound = viewport.bottom();
		var minBound = viewport.top();
		if (isVertical) {
			maxBound = viewport.right();
			minBound = viewport.left();
		}
		if (isInverted) {
			maxBound = viewport.top();
			minBound = viewport.bottom();
			if (isVertical) {
				maxBound = viewport.left();
				minBound = viewport.right();
			}
		}
		zeroValue = Math.max(zeroValue, Math.min(minBound, maxBound));
		zeroValue = Math.min(zeroValue, Math.max(minBound, maxBound));
		bound = 0;
		var currentBucket;
		for (var i = 0; i < count; i++) {
			currentBucket = currentBuckets.__inner[i];
			for (var j = 1; j < currentBucket.length; j++) {
				if ($.ig.util.isNaN(currentBucket[j]) || Number.isInfinity(currentBucket[j])) {
					continue;
				}
				bound = Math.max(bound, Math.abs(zeroValue - currentBucket[j]));
			}
		}
		var max;
		var min;
		var p;
		for (var i1 = 0; i1 < count; i1++) {
			currentBucket = currentBuckets.__inner[i1];
			max = Math.abs(currentBucket[1] - zeroValue);
			min = Math.abs(currentBucket[1] - zeroValue);
			for (var j1 = 1; j1 < currentBucket.length; j1++) {
				if ($.ig.util.isNaN(currentBucket[j1]) || Number.isInfinity(currentBucket[j1])) {
					continue;
				}
				max = Math.max(Math.abs(currentBucket[j1] - zeroValue), max);
				min = Math.min(Math.abs(currentBucket[j1] - zeroValue), min);
			}
			var mid = (max + min) / 2;
			if ($.ig.util.isNaN(mid) || bound == 0) {
				p = 1;
			} else {
				p = mid / bound;
			}
			previousModifiers.add(2 - p);
			currentModifiers.add(2 - p);
		}
	}
	,
	applyValueScaledSpeedModifiersFromPoints: function (count, zeroValue, transitionMode, previousPoints, currentPoints, previousModifiers, currentModifiers, xAxis, yAxis, isVertical, viewport) {
		if (count == 0) {
			return;
		}
		var isInverted = false;
		var valueAxis = yAxis;
		if (isVertical) {
			valueAxis = xAxis;
		}
		if (valueAxis != null) {
			isInverted = valueAxis.isInverted();
		}
		var bound = viewport.bottom();
		var maxBound = viewport.bottom();
		var minBound = viewport.top();
		if (isVertical) {
			maxBound = viewport.right();
			minBound = viewport.left();
		}
		if (isInverted) {
			maxBound = viewport.top();
			minBound = viewport.bottom();
			if (isVertical) {
				maxBound = viewport.left();
				minBound = viewport.right();
			}
		}
		zeroValue = Math.max(zeroValue, Math.min(minBound, maxBound));
		zeroValue = Math.min(zeroValue, Math.max(minBound, maxBound));
		bound = 0;
		var currentPoint;
		for (var i = 0; i < count; i++) {
			currentPoint = currentPoints.__inner[i];
			if (isVertical) {
				if ($.ig.util.isNaN(currentPoint.__x) || Number.isInfinity(currentPoint.__x)) {
					continue;
				}
				bound = Math.max(bound, Math.abs(currentPoint.__x - zeroValue));
			} else {
				if ($.ig.util.isNaN(currentPoint.__y) || Number.isInfinity(currentPoint.__y)) {
					continue;
				}
				bound = Math.max(bound, Math.abs(currentPoint.__y - zeroValue));
			}
		}
		var p;
		for (var i1 = 0; i1 < count; i1++) {
			currentPoint = currentPoints.__inner[i1];
			var mid;
			if (isVertical) {
				mid = currentPoint.__x;
			} else {
				mid = currentPoint.__y;
			}
			if ($.ig.util.isNaN(mid) || Number.isInfinity(mid) || bound == 0) {
				p = 1;
			} else {
				p = Math.abs(mid - zeroValue) / bound;
			}
			previousModifiers.add(2 - p);
			currentModifiers.add(2 - p);
		}
	}
	,
	applyValueScaledSpeedModifiersFromDoubles: function (count, zeroValue, transitionMode, previousDoubles, currentDoubles, previousModifiers, currentModifiers, xAxis, yAxis, isVertical, viewport) {
		if (count == 0) {
			return;
		}
		var isInverted = false;
		var valueAxis = yAxis;
		if (isVertical) {
			valueAxis = xAxis;
		}
		if (valueAxis != null) {
			isInverted = valueAxis.isInverted();
		}
		var bound = viewport.bottom();
		var maxBound = viewport.bottom();
		var minBound = viewport.top();
		if (isVertical) {
			maxBound = viewport.right();
			minBound = viewport.left();
		}
		if (isInverted) {
			maxBound = viewport.top();
			minBound = viewport.bottom();
			if (isVertical) {
				maxBound = viewport.left();
				minBound = viewport.right();
			}
		}
		zeroValue = Math.max(zeroValue, Math.min(minBound, maxBound));
		zeroValue = Math.min(zeroValue, Math.max(minBound, maxBound));
		bound = 0;
		var currentDouble;
		for (var i = 0; i < count; i++) {
			currentDouble = currentDoubles.__inner[i];
			if ($.ig.util.isNaN(currentDouble) || Number.isInfinity(currentDouble)) {
				continue;
			}
			bound = Math.max(bound, Math.abs(currentDouble - zeroValue));
		}
		var p;
		for (var i1 = 0; i1 < count; i1++) {
			currentDouble = currentDoubles.__inner[i1];
			var mid;
			mid = currentDouble;
			if (bound == 0 || $.ig.util.isNaN(mid) || Number.isInfinity(mid)) {
				p = 1;
			} else {
				p = Math.abs(mid - zeroValue) / bound;
			}
			previousModifiers.add(2 - p);
			currentModifiers.add(2 - p);
		}
	}
	,
	applyIndexScaledSpeedModifiers: function (count, transitionMode, previousModifiers, currentModifiers, xAxis, yAxis, isVertical, viewport) {
		if (count == 0) {
			return;
		}
		var indexAxis = xAxis;
		if (isVertical) {
			indexAxis = yAxis;
		}
		var isInverted = false;
		if (indexAxis != null) {
			isInverted = indexAxis.isInverted();
		}
		var p;
		for (var i = 0; i < count; i++) {
			if (count == 1) {
				p = 1;
			} else {
				p = i / (count - 1);
			}
			p = 1 - p;
			previousModifiers.add(1 + p);
			currentModifiers.add(1 + p);
		}
	}
	,
	prepareSourceFrameExpand: function (previousFrame, currentFrame) {
		previousFrame._buckets.clear();
		previousFrame._errorBuckets.clear();
		previousFrame._markers.clear();
		previousFrame._trend.clear();
		previousFrame._errorBars.clear();
		previousFrame._errorBarPositiveSizes.clear();
		previousFrame._errorBarNegativeSizes.clear();
		this.copyBucketList(previousFrame._buckets, currentFrame._buckets);
		this.copyFloatList(previousFrame._errorBuckets, currentFrame._errorBuckets);
		this.copyPointList(previousFrame._markers, currentFrame._markers);
		this.copyPointList(previousFrame._trend, currentFrame._trend);
		this.copyPointList(previousFrame._errorBars, currentFrame._errorBars);
		this.copyDoubleList(previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes);
		this.copyDoubleList(previousFrame._errorBarNegativeSizes, currentFrame._errorBarNegativeSizes);
		var bucketsCount = previousFrame._buckets.count();
		var buckets = previousFrame._buckets;
		var currentBucket;
		var min;
		var max;
		var mid;
		for (var i = 0; i < bucketsCount; i++) {
			currentBucket = buckets.__inner[i];
			min = currentBucket[1];
			max = currentBucket[1];
			for (var j = 2; j < currentBucket.length; j++) {
				min = Math.min(min, currentBucket[j]);
				max = Math.max(max, currentBucket[j]);
			}
			mid = (min + max) / 2;
			for (var j1 = 1; j1 < currentBucket.length; j1++) {
				currentBucket[j1] = mid;
			}
		}
		var errorBarSizesCount = previousFrame._errorBarPositiveSizes.count();
		var errorBarPositiveSizes = previousFrame._errorBarPositiveSizes;
		var errorBarNegativeSizes = previousFrame._errorBarNegativeSizes;
		for (var i1 = 0; i1 < errorBarSizesCount; i1++) {
			errorBarPositiveSizes.__inner[i1] = 0;
			errorBarNegativeSizes.__inner[i1] = 0;
		}
	}
	,
	prepareSourceFrameSweepFromLeftOrRight: function (previousFrame, currentFrame, isRight) {
		if (isRight) {
			this.copyFrame(previousFrame, currentFrame);
			previousFrame.customClip(new $.ig.Rect(0, 1, 0, 0, 1));
		} else {
			this.copyFrame(previousFrame, currentFrame);
			previousFrame.customClip(new $.ig.Rect(0, 0, 0, 0, 1));
		}
	}
	,
	prepareSourceFrameSweepFromTopOrBottom: function (previousFrame, currentFrame, isTop) {
		if (isTop) {
			this.copyFrame(previousFrame, currentFrame);
			previousFrame.customClip(new $.ig.Rect(0, 0, 0, 1, 0));
		} else {
			this.copyFrame(previousFrame, currentFrame);
			previousFrame.customClip(new $.ig.Rect(0, 0, 1, 1, 0));
		}
	}
	,
	copyFrame: function (previousFrame, currentFrame) {
		previousFrame._buckets.clear();
		previousFrame._errorBuckets.clear();
		previousFrame._markers.clear();
		previousFrame._trend.clear();
		previousFrame._errorBars.clear();
		previousFrame._errorBarPositiveSizes.clear();
		previousFrame._errorBarNegativeSizes.clear();
		this.copyBucketList(previousFrame._buckets, currentFrame._buckets);
		this.copyFloatList(previousFrame._errorBuckets, currentFrame._errorBuckets);
		this.copyPointList(previousFrame._markers, currentFrame._markers);
		this.copyPointList(previousFrame._trend, currentFrame._trend);
		this.copyPointList(previousFrame._errorBars, currentFrame._errorBars);
		this.copyDoubleList(previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes);
		this.copyDoubleList(previousFrame._errorBarNegativeSizes, currentFrame._errorBarNegativeSizes);
	}
	,
	preparePointListFromValue: function (sourceItems, targetItems, isVertical, value, isValueAxis) {
		var targetCount = targetItems.count();
		var currentPoint;
		var sourcePoint;
		for (var i = 0; i < targetCount; i++) {
			currentPoint = targetItems.__inner[i];
			if (isValueAxis) {
				if (isVertical) {
					sourcePoint = { __x: value, __y: currentPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				} else {
					sourcePoint = { __x: currentPoint.__x, __y: value, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				}
			} else {
				if (isVertical) {
					sourcePoint = { __x: currentPoint.__x, __y: value, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				} else {
					sourcePoint = { __x: value, __y: currentPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
				}
			}
			sourceItems.add(sourcePoint);
		}
	}
	,
	copyPointList: function (sourceItems, targetItems) {
		var targetCount = targetItems.count();
		var currentPoint;
		var sourcePoint;
		for (var i = 0; i < targetCount; i++) {
			currentPoint = targetItems.__inner[i];
			sourcePoint = { __x: currentPoint.__x, __y: currentPoint.__y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			sourceItems.add(sourcePoint);
		}
	}
	,
	copyBucketList: function (sourceItems, targetItems) {
		var bucketsCount = targetItems.count();
		var buckets = targetItems;
		var sourceBucket;
		var currentBucket;
		var sourceBuckets = sourceItems;
		for (var i = 0; i < bucketsCount; i++) {
			currentBucket = buckets.__inner[i];
			sourceBucket = new Array(currentBucket.length);
			for (var j = 0; j < sourceBucket.length; j++) {
				sourceBucket[j] = currentBucket[j];
			}
			sourceBuckets.add(sourceBucket);
		}
	}
	,
	prepareBucketListFromValue: function (sourceItems, targetItems, isVertical, value, isValueAxis) {
		var bucketsCount = targetItems.count();
		var buckets = targetItems;
		var sourceBucket;
		var currentBucket;
		var sourceBuckets = sourceItems;
		for (var i = 0; i < bucketsCount; i++) {
			currentBucket = buckets.__inner[i];
			sourceBucket = new Array(currentBucket.length);
			if (isValueAxis) {
				sourceBucket[0] = currentBucket[0];
				for (var j = 1; j < sourceBucket.length; j++) {
					sourceBucket[j] = value;
				}
			} else {
				sourceBucket[0] = value;
				for (var j1 = 1; j1 < sourceBucket.length; j1++) {
					sourceBucket[j1] = currentBucket[j1];
				}
			}
			sourceBuckets.add(sourceBucket);
		}
	}
	,
	prepareFloatListFromValue: function (sourceItems, targetItems) {
		var targetCount = targetItems.count();
		var currentItem;
		for (var i = 0; i < targetCount; i++) {
			currentItem = targetItems.__inner[i];
			sourceItems.add(currentItem);
		}
	}
	,
	copyFloatList: function (sourceItems, targetItems) {
		var targetCount = targetItems.count();
		var currentItem;
		for (var i = 0; i < targetCount; i++) {
			currentItem = targetItems.__inner[i];
			sourceItems.add(currentItem);
		}
	}
	,
	copyDoubleList: function (sourceItems, targetItems) {
		var targetCount = targetItems.count();
		var currentItem;
		for (var i = 0; i < targetCount; i++) {
			currentItem = targetItems.__inner[i];
			sourceItems.add(currentItem);
		}
	}
	,
	prepareDoubleListFromValue: function (sourceItems, targetItems, isVertical, value, isValueAxis) {
		var targetCount = targetItems.count();
		var currentItem;
		for (var i = 0; i < targetCount; i++) {
			currentItem = targetItems.__inner[i];
			sourceItems.add(currentItem);
		}
	}
	,
	prepareSourceFrameFromLeftOrRight: function (previousFrame, currentFrame, isRight, isVertical, viewport) {
		var fromValue = viewport.right();
		if (!isRight) {
			fromValue = viewport.left();
		}
		var isValueAxis = false;
		if (isVertical) {
			isValueAxis = true;
		}
		this.prepareBucketListFromValue(previousFrame._buckets, currentFrame._buckets, isVertical, fromValue, isValueAxis);
		this.prepareFloatListFromValue(previousFrame._errorBuckets, currentFrame._errorBuckets);
		this.preparePointListFromValue(previousFrame._markers, currentFrame._markers, isVertical, fromValue, isValueAxis);
		this.preparePointListFromValue(previousFrame._trend, currentFrame._trend, isVertical, fromValue, isValueAxis);
		this.preparePointListFromValue(previousFrame._errorBars, currentFrame._errorBars, isVertical, fromValue, isValueAxis);
		this.prepareDoubleListFromValue(previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes, isVertical, fromValue, isValueAxis);
		this.prepareDoubleListFromValue(previousFrame._errorBarNegativeSizes, currentFrame._errorBarNegativeSizes, isVertical, fromValue, isValueAxis);
	}
	,
	prepareSourceFrameFromTopOrBottom: function (previousFrame, currentFrame, isTop, isVertical, viewport) {
		var fromValue = viewport.bottom();
		if (isTop) {
			fromValue = viewport.top();
		}
		var isValueAxis = true;
		if (isVertical) {
			isValueAxis = false;
		}
		this.prepareBucketListFromValue(previousFrame._buckets, currentFrame._buckets, isVertical, fromValue, isValueAxis);
		this.prepareFloatListFromValue(previousFrame._errorBuckets, currentFrame._errorBuckets);
		this.preparePointListFromValue(previousFrame._markers, currentFrame._markers, isVertical, fromValue, isValueAxis);
		this.preparePointListFromValue(previousFrame._trend, currentFrame._trend, isVertical, fromValue, isValueAxis);
		this.preparePointListFromValue(previousFrame._errorBars, currentFrame._errorBars, isVertical, fromValue, isValueAxis);
		this.prepareDoubleListFromValue(previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes, isVertical, fromValue, isValueAxis);
		this.prepareDoubleListFromValue(previousFrame._errorBarNegativeSizes, currentFrame._errorBarNegativeSizes, isVertical, fromValue, isValueAxis);
	}
	,
	prepareSourceFrameFromZero: function (previousFrame, currentFrame, zeroValue, isVertical) {
		this.prepareBucketListFromValue(previousFrame._buckets, currentFrame._buckets, isVertical, zeroValue, true);
		this.prepareFloatListFromValue(previousFrame._errorBuckets, currentFrame._errorBuckets);
		this.preparePointListFromValue(previousFrame._markers, currentFrame._markers, isVertical, zeroValue, true);
		this.preparePointListFromValue(previousFrame._trend, currentFrame._trend, isVertical, zeroValue, true);
		this.preparePointListFromValue(previousFrame._errorBars, currentFrame._errorBars, isVertical, zeroValue, true);
		this.prepareDoubleListFromValue(previousFrame._errorBarPositiveSizes, currentFrame._errorBarPositiveSizes, isVertical, zeroValue, true);
		this.prepareDoubleListFromValue(previousFrame._errorBarNegativeSizes, currentFrame._errorBarNegativeSizes, isVertical, zeroValue, true);
	}
	,
	$type: new $.ig.Type('CategoryTransitionSourceFramePreparer', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CategorySeriesRenderManager', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_actualRenderFill: null,
	_actualRenderOutline: null,
	_actualRenderThickness: 0,
	_actualRenderDashArray: null,
	_actualRenderDashCap: 0,
	_actualRenderRadiusX: 0,
	_actualRenderRadiusY: 0,
	_actualRenderOpacity: 0,
	_actualRenderMiterLimit: 0,
	_actualRenderStartCap: 0,
	_actualRenderEndCap: 0,
	_initialRenderFill: null,
	_initialRenderOutline: null,
	_initialRenderThickness: 0,
	_initialRenderDashArray: null,
	_initialRenderDashCap: 0,
	_initialRenderRadiusX: 0,
	_initialRenderRadiusY: 0,
	_initialRenderOpacity: 0,
	_initialRenderMiterLimit: 0,
	_initialRenderStartCap: 0,
	_initialRenderEndCap: 0,
	_initialMarkerRenderFill: null,
	_initialMarkerRenderOutline: null,
	_initialMarkerRenderOpacity: 0,
	_actualNegativeShape: false,
	_actualNegativeMarkerShape: false,
	_actualMarkerRenderFill: null,
	_actualMarkerRenderOutline: null,
	_actualMarkerRenderOpacity: 0,
	_categoryOverrideArgs: null,
	categoryOverrideArgs: function (value) {
		if (arguments.length === 1) {
			this._categoryOverrideArgs = value;
			return value;
		} else {
			return this._categoryOverrideArgs;
		}
	}
	,
	_categoryMarkerOverrideArgs: null,
	categoryMarkerOverrideArgs: function (value) {
		if (arguments.length === 1) {
			this._categoryMarkerOverrideArgs = value;
			return value;
		} else {
			return this._categoryMarkerOverrideArgs;
		}
	}
	,
	_actualRenderCategoryAxis: null,
	_bucketSize: 0,
	_firstBucket: 0,
	initCategoryMarkerRenderSettings: function (source, shouldOverrideMarkerStyle, getItems, size, first) {
		this._bucketSize = size;
		this._firstBucket = first;
		this._actualNegativeMarkerShape = false;
		this._initialMarkerRenderFill = source.actualMarkerBrush();
		this._initialMarkerRenderOutline = source.actualMarkerOutline();
		this._initialMarkerRenderOpacity = 1;
		this._actualMarkerRenderFill = this._initialMarkerRenderFill;
		this._actualMarkerRenderOutline = this._initialMarkerRenderOutline;
		this._actualMarkerRenderOpacity = this._initialMarkerRenderOpacity;
		var areMarkerStylesOverriden = shouldOverrideMarkerStyle;
		this.categoryMarkerOverrideArgs(null);
		if (areMarkerStylesOverriden) {
			this.categoryMarkerOverrideArgs(new $.ig.AssigningCategoryMarkerStyleEventArgs());
			this.categoryMarkerOverrideArgs().maxAllSeriesHighlightingProgress(0);
			this.categoryMarkerOverrideArgs().sumAllSeriesHighlightingProgress(0);
			if (source.seriesViewer() != null) {
				this.categoryMarkerOverrideArgs().maxAllSeriesHighlightingProgress(source.seriesViewer().highlightingManager().maxMarkerHighlightingProgress());
				this.categoryMarkerOverrideArgs().sumAllSeriesHighlightingProgress(source.seriesViewer().highlightingManager().sumMarkerHighlightingProgress());
			}
			this.categoryMarkerOverrideArgs().getItems(getItems);
		}
	}
	,
	initCategoryRenderSettings: function (source, shouldOverrideCategoryStyle, categoryAxis, getItems, size, first) {
		this._bucketSize = size;
		this._firstBucket = first;
		this._actualNegativeShape = false;
		this._initialRenderFill = source.actualBrush();
		this._initialRenderOutline = source.actualOutline();
		this._initialRenderThickness = source.thickness();
		this._initialRenderDashArray = source.dashArray();
		this._initialRenderDashCap = source.dashCap();
		this._initialRenderRadiusX = 0;
		this._initialRenderRadiusY = 0;
		this._initialRenderOpacity = 1;
		this._initialRenderMiterLimit = source.miterLimit();
		this._initialRenderStartCap = source.startCap();
		this._initialRenderEndCap = source.endCap();
		this._actualRenderFill = this._initialRenderFill;
		this._actualRenderOutline = this._initialRenderOutline;
		this._actualRenderThickness = this._initialRenderThickness;
		this._actualRenderDashArray = this._initialRenderDashArray;
		this._actualRenderDashCap = this._initialRenderDashCap;
		this._actualRenderRadiusX = this._initialRenderRadiusX;
		this._actualRenderRadiusY = this._initialRenderRadiusY;
		this._actualRenderOpacity = this._initialRenderOpacity;
		this._actualRenderMiterLimit = this._initialRenderMiterLimit;
		this._actualRenderStartCap = this._initialRenderStartCap;
		this._actualRenderEndCap = this._initialRenderEndCap;
		this._actualRenderCategoryAxis = categoryAxis;
		var areStylesOverriden = shouldOverrideCategoryStyle;
		this.categoryOverrideArgs(null);
		if (areStylesOverriden) {
			this.categoryOverrideArgs(new $.ig.AssigningCategoryStyleEventArgs());
			this.categoryOverrideArgs().maxAllSeriesHighlightingProgress(0);
			this.categoryOverrideArgs().sumAllSeriesHighlightingProgress(0);
			if (source.seriesViewer() != null) {
				this.categoryOverrideArgs().maxAllSeriesHighlightingProgress(source.seriesViewer().highlightingManager().maxHighlightingProgress());
				this.categoryOverrideArgs().sumAllSeriesHighlightingProgress(source.seriesViewer().highlightingManager().sumHighlightingProgress());
			}
			this.categoryOverrideArgs().getItems(getItems);
		}
	}
	,
	setCategoryShapeAppearance: function (shape, strokeOnly, fillOnly, extended, useOutline) {
		var main = this._actualRenderFill;
		if (useOutline) {
			main = this._actualRenderOutline;
		}
		if (fillOnly) {
			shape.__fill = main;
		} else {
			if (strokeOnly) {
				shape.__stroke = main;
			} else {
				shape.__fill = main;
				shape.__stroke = this._actualRenderOutline;
			}
			shape.strokeThickness(this._actualRenderThickness);
			shape.strokeDashArray(this._actualRenderDashArray);
			shape.strokeDashCap(this._actualRenderDashCap);
			if (extended) {
			}
		}
		shape.__opacity = this._actualRenderOpacity;
	}
	,
	setCategoryMarkerAppearance: function (marker, context) {
		marker.__opacity = this._actualMarkerRenderOpacity;
		context.itemBrush(this._actualMarkerRenderFill);
		context.actualItemBrush(context.itemBrush());
		context.outline(this._actualMarkerRenderOutline);
		context.thickness($.ig.MarkerSeries.prototype.markerThicknessDefault);
	}
	,
	getBucketBounds: function (count, bucket) {
		var size = this._bucketSize;
		var i0 = Math.min(bucket * size, count - 1);
		var i1 = Math.min(i0 + size - 1, count - 1);
		var ret = new Array(2);
		ret[0] = Math.min(i0 + this._firstBucket * size, count - 1);
		ret[1] = Math.min(i1 + this._firstBucket * size, count - 1);
		return ret;
	}
	,
	applyHighlightingStyle: function (info) {
		if (info == null) {
			return;
		}
		var additionalBrightness = info.progress();
		additionalBrightness = additionalBrightness * 0.5;
		this._actualRenderFill = this.getBrightenedBrush(this._actualRenderFill, additionalBrightness);
		this._actualRenderOutline = this.getBrightenedBrush(this._actualRenderOutline, additionalBrightness);
	}
	,
	getBrightenedBrush: function (brush, additionalBrightness) {
		if (brush == null) {
			return brush;
		}
		return $.ig.BrushUtil.prototype.getLightened(brush, additionalBrightness);
	}
	,
	applyMarkerHighlightingStyle: function (info) {
		if (info == null) {
			return;
		}
		var additionalBrightness = info.progress();
		additionalBrightness = additionalBrightness * 0.5;
		this._actualMarkerRenderFill = this.getBrightenedBrush(this._actualMarkerRenderFill, additionalBrightness);
		this._actualMarkerRenderOutline = this.getBrightenedBrush(this._actualMarkerRenderOutline, additionalBrightness);
	}
	,
	populateArgsBounds: function (args, isSorting, buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, isMarker) {
		if (currentIndex == -1) {
			if (isSorting) {
				args.hasDateRange(true);
				args.startDate((categoryAxis).actualMinimumValue());
				args.endDate((categoryAxis).actualMaximumValue());
			} else {
				args.hasDateRange(false);
				args.startIndex(0);
				args.endIndex(valueCount - 1);
			}
		} else {
			if (isSorting) {
				var longStart_ = $.ig.truncate(categoryAxis.getUnscaledValue(buckets.__inner[currentIndex][0], axisParams));
				var longEnd_ = longStart_;
				if (currentIndex + 1 < buckets.count()) {
					longEnd_ = $.ig.truncate(categoryAxis.getUnscaledValue(buckets.__inner[currentIndex + 1][0], axisParams));
				}
				args.hasDateRange(true);
				args.startDate(new Date(longStart_));
				args.endDate(new Date(longEnd_));
				if (categoryAxis.isInverted()) {
					var swap = args.endDate();
					args.endDate(args.startDate());
					args.startDate(swap);
				}
				if (isMarker) {
					args.startIndex(currentIndex);
					args.endIndex(currentIndex);
				} else {
					var bounds = this.getBucketBounds(valueCount, currentIndex);
					args.startIndex(bounds[0]);
					args.endIndex(bounds[1]);
				}
			} else {
				if (isMarker) {
					args.startIndex(currentIndex);
					args.endIndex(currentIndex);
				} else {
					var bounds1 = this.getBucketBounds(valueCount, currentIndex);
					args.hasDateRange(false);
					args.startIndex(bounds1[0]);
					args.endIndex(bounds1[1]);
				}
			}
		}
	}
	,
	prePerformCategoryStyleOverride: function (buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, isHighlightingEnabled) {
		this._actualRenderFill = this._initialRenderFill;
		this._actualRenderOutline = this._initialRenderOutline;
		this._actualRenderThickness = this._initialRenderThickness;
		this._actualRenderDashArray = this._initialRenderDashArray;
		this._actualRenderDashCap = this._initialRenderDashCap;
		this._actualRenderRadiusX = this._initialRenderRadiusX;
		this._actualRenderRadiusY = this._initialRenderRadiusY;
		this._actualRenderOpacity = this._initialRenderOpacity;
		var args = this.categoryOverrideArgs();
		var isSorting = categoryAxis.isSorting();
		this.populateArgsBounds(args, isSorting, buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, false);
		args.fill(this._actualRenderFill);
		args.stroke(this._actualRenderOutline);
		args.strokeThickness(this._actualRenderThickness);
		args.strokeDashArray(this._actualRenderDashArray);
		args.strokeDashCap(this._actualRenderDashCap);
		args.radiusX(this._actualRenderRadiusX);
		args.radiusY(this._actualRenderRadiusY);
		args.opacity(this._actualRenderOpacity);
		args.isNegativeShape(this._actualNegativeShape);
		args.highlightingHandled(false);
	}
	,
	postPerformCategoryStyleOverride: function (info, isThumbnail, isHighlightingEnabled) {
		var args = this.categoryOverrideArgs();
		this._actualRenderFill = args.fill();
		this._actualRenderOutline = args.stroke();
		this._actualRenderThickness = args.strokeThickness();
		this._actualRenderDashArray = args.strokeDashArray();
		this._actualRenderDashCap = args.strokeDashCap();
		this._actualRenderRadiusX = args.radiusX();
		this._actualRenderRadiusY = args.radiusY();
		this._actualRenderOpacity = args.opacity();
		if (isHighlightingEnabled && !args.highlightingHandled() && !isThumbnail) {
			this.applyHighlightingStyle(info);
		}
	}
	,
	prePerformCategoryMarkerStyleOverride: function (buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, isHighlightingEnabled) {
		this._actualMarkerRenderFill = this._initialMarkerRenderFill;
		this._actualMarkerRenderOutline = this._initialMarkerRenderOutline;
		this._actualMarkerRenderOpacity = this._initialMarkerRenderOpacity;
		var args = this.categoryMarkerOverrideArgs();
		var isSorting = categoryAxis.isSorting();
		this.populateArgsBounds(args, isSorting, buckets, currentIndex, valueCount, categoryAxis, axisParams, isThumbnail, true);
		args.fill(this._actualMarkerRenderFill);
		args.stroke(this._actualMarkerRenderOutline);
		args.opacity(this._actualMarkerRenderOpacity);
		args.isNegativeShape(this._actualNegativeMarkerShape);
		args.highlightingHandled(false);
	}
	,
	postPerformCategoryMarkerStyleOverride: function (info, isThumbnail, isHighlightingEnabled) {
		var args = this.categoryMarkerOverrideArgs();
		this._actualMarkerRenderFill = args.fill();
		this._actualMarkerRenderOutline = args.stroke();
		this._actualMarkerRenderOpacity = args.opacity();
		if (isHighlightingEnabled && !args.highlightingHandled() && !isThumbnail) {
			this.applyMarkerHighlightingStyle(info);
		}
	}
	,
	$type: new $.ig.Type('CategorySeriesRenderManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SplineSeriesBase', 'HorizontalAnchoredCategorySeries', {
	init: function () {
		$.ig.HorizontalAnchoredCategorySeries.prototype.init.call(this);
	},
	createView: function () {
		return new $.ig.SplineSeriesBaseView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.HorizontalAnchoredCategorySeries.prototype.onViewCreated.call(this, view);
		this.splineBaseView(view);
	}
	,
	_splineBaseView: null,
	splineBaseView: function (value) {
		if (arguments.length === 1) {
			this._splineBaseView = value;
			return value;
		} else {
			return this._splineBaseView;
		}
	}
	,
	_uColumn: null,
	uColumn: function (value) {
		if (arguments.length === 1) {
			this._uColumn = value;
			return value;
		} else {
			return this._uColumn;
		}
	}
	,
	convertToSingle: function (value) {
		return value;
	}
	,
	prepareDateTimeFrame: function (frame, windowRect, viewportRect, xaxis, yaxis, view) {
		var $self = this;
		var sortingXAxis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xaxis);
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		if (sortingXAxis == null) {
			return;
		}
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, xaxis.isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, yaxis.isInverted(), effectiveViewportRect);
		var markers = this.shouldDisplayMarkers();
		var markerCount = 0;
		var offset = this.getOffset(xaxis, windowRect, viewportRect, effectiveViewportRect);
		var xv = function (i) { return i; };
		var yv = function (i) { return $self.valueColumn().item(sortingXAxis.sortedIndices().__inner[i]); };
		var lastBucket = this.categoryView().bucketCalculator()._lastBucket;
		var firstBucket = this.categoryView().bucketCalculator()._firstBucket;
		var n = $.ig.truncate(Math.ceil(viewportRect.width() / (lastBucket - firstBucket)));
		var collisionAvoider = new $.ig.CollisionAvoider();
		var bucketSize = this.categoryView().bucketCalculator()._bucketSize;
		if (bucketSize <= 0 || (firstBucket <= 0 && lastBucket <= 0)) {
			this.categoryView().markers().count(markerCount);
			return;
		}
		var bucketCount = 0;
		var markerBucket = 0;
		for (var i = firstBucket; i < lastBucket + 1; ++i) {
			var bucket = null;
			var itemIndex = i * bucketSize;
			if (sortingXAxis != null && sortingXAxis.sortedIndices() != null && itemIndex >= 0 && itemIndex < sortingXAxis.sortedIndices().count()) {
				itemIndex = sortingXAxis.sortedIndices().__inner[itemIndex];
			}
			if (i >= (this.valueColumn().count() - 1)) {
				if (markers && this.prepareMarker(frame, $.ig.Enumerable.prototype.last$1(Array, frame._buckets), collisionAvoider, Math.min(itemIndex, this.fastItemsSource().count() - 1), markerCount, view, bucketCount - 1)) {
					++markerCount;
				}
				break;
			}
			var x1 = xv(i);
			var y1 = yv(i);
			var x2 = xv(i + 1);
			var y2 = yv(i + 1);
			var h = x2 - x1;
			var u1 = this.uColumn()[i];
			var u2 = this.uColumn()[i + 1];
			var unscaledValue = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i]);
			var firstPointX = xaxis.getScaledValue(unscaledValue, xParams) + offset;
			var firstPointY = yaxis.getScaledValue(y1, yParams);
			frame._buckets.add([ firstPointX, firstPointY, firstPointY ]);
			bucketCount++;
			markerBucket = bucketCount;
			for (var j = 1; j < n; ++j) {
				var pp = (j) / (n);
				var x = x1 + h * pp;
				var a = (x2 - x) / h;
				var b = (x - x1) / h;
				var y = a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
				var unscaledValueFirst = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i]);
				var unscaledValueNext = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i + 1]);
				var currentUnscaledValue = unscaledValueFirst + (unscaledValueNext - unscaledValueFirst) * pp;
				x = xaxis.getScaledValue(currentUnscaledValue, xParams) + offset;
				y = yaxis.getScaledValue(y, yParams);
				frame._buckets.add([ x, y, y ]);
				bucketCount++;
			}
			if (markers) {
				bucket = [ firstPointX, firstPointY, firstPointY ];
			}
			if (markers && this.prepareMarker(frame, bucket, collisionAvoider, Math.min(itemIndex, this.fastItemsSource().count() - 1), markerCount, view, markerBucket - 1)) {
				++markerCount;
			}
		}
		this.categoryView().markers().count(markerCount);
	}
	,
	prepareMarker: function (frame, bucket, collisionAvoider, itemIndex, markerCount, view, bucketIndex) {
		var x = bucket[0];
		var y = bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			var marker = view.markers().item(markerCount);
			(marker.content()).item(this.fastItemsSource().item(itemIndex));
			marker.markerBucket(bucketIndex);
			return true;
		}
		return false;
	}
	,
	getMatchingBuckets: function (categoryAxis, buckets, bucketSize, firstBucket, world, skipUnknowns) {
		if (categoryAxis == null || categoryAxis.isSorting() || this.getBucketSize(this.view()) > 1) {
			return $.ig.HorizontalAnchoredCategorySeries.prototype.getMatchingBuckets.call(this, this.getCategoryAxis(), this._currentFrame._buckets, this.getBucketSize(this.view()), this.getFirstBucket(this.view()), world, skipUnknowns);
		}
		var lastBucket = this.splineBaseView().bucketCalculator()._lastBucket;
		var viewportRect = this.view().viewport();
		var n = $.ig.truncate(Math.ceil(viewportRect.width() / (lastBucket - firstBucket)));
		var prevBucketIndex = -1;
		var nextBucketIndex = -1;
		var exactIndex = this.getExactItemIndex(world);
		var previousIndex = this.getPreviousOrExactIndex(world, skipUnknowns);
		var nextIndex = this.getNextOrExactIndex(world, skipUnknowns);
		var prevBucket = $.ig.truncate(Math.floor(previousIndex / this.getBucketSize(this.view())));
		var nextBucket = $.ig.truncate(Math.floor(nextIndex / this.getBucketSize(this.view())));
		prevBucketIndex = prevBucket - this.getFirstBucket(this.view());
		nextBucketIndex = nextBucket - this.getFirstBucket(this.view());
		var actualPrev = prevBucketIndex * n;
		var actualNext = nextBucketIndex * n;
		var p = 0;
		if (previousIndex != nextIndex) {
			p = (exactIndex - previousIndex) / (nextIndex - previousIndex);
		}
		var actual = $.ig.truncate(Math.floor(actualPrev + p * (actualNext - actualPrev)));
		prevBucketIndex = actual;
		nextBucketIndex = actual + 1;
		if (prevBucketIndex < 0) {
			prevBucketIndex = 0;
		}
		if (prevBucketIndex > this._currentFrame._buckets.count() - 1) {
			prevBucketIndex = this._currentFrame._buckets.count() - 1;
		}
		if (nextBucketIndex < 0) {
			nextBucketIndex = 0;
		}
		if (nextBucketIndex > this._currentFrame._buckets.count() - 1) {
			nextBucketIndex = this._currentFrame._buckets.count() - 1;
		}
		var prevBucketValue = this._currentFrame._buckets.__inner[prevBucketIndex];
		var nextBucketValue = this._currentFrame._buckets.__inner[nextBucketIndex];
		var ret = new Array(2);
		ret[0] = prevBucketValue;
		ret[1] = nextBucketValue;
		return ret;
	}
	,
	prepareFrame: function (frame, view) {
		var $self = this;
		$.ig.HorizontalAnchoredCategorySeries.prototype.prepareFrame.call(this, frame, view);
		if (frame._buckets.count() <= 1) {
			return;
		}
		if (view.bucketCalculator()._bucketSize == 0) {
			return;
		}
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var xaxis = this.cachedXAxis();
		var yaxis = this.cachedYAxis();
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, xaxis.isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, yaxis.isInverted(), effectiveViewportRect);
		frame._buckets.clear();
		frame._markers.clear();
		var markers = this.shouldDisplayMarkers();
		var markerCount = 0;
		var sortingXAxis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.cachedXAxis());
		if (sortingXAxis != null && sortingXAxis.sortedIndices().count() != this.fastItemsSource().count()) {
			return;
		}
		var offset = this.getOffset(xaxis, windowRect, viewportRect, effectiveViewportRect);
		var xv = function (i) { return i; };
		var yv = function (i) { return $self.valueColumn().item(i); };
		var bucketSize = view.bucketCalculator()._bucketSize;
		if ((this.uColumn() == null || this.uColumn().length != this.valueColumn().count()) && bucketSize == 1) {
			var endPointsFirstDerivative = this.splineType() == $.ig.SplineType.prototype.natural ? NaN : 0;
			if (this.cachedXAxis() != null && $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.cachedXAxis()) !== null && (this.cachedXAxis()).sortedIndices() != null) {
				var sorted = new $.ig.SafeSortedReadOnlyDoubleCollection(1, this.valueColumn(), (this.cachedXAxis()).sortedIndices(), NaN);
				yv = function (i) { return sorted.item(i); };
			}
			this.uColumn($.ig.Numeric.prototype.safeCubicSplineFit(this.valueColumn().count(), xv, yv, endPointsFirstDerivative, endPointsFirstDerivative));
		}
		var lastBucket = view.bucketCalculator()._lastBucket;
		var firstBucket = view.bucketCalculator()._firstBucket;
		var n = $.ig.truncate(Math.ceil(viewportRect.width() / (lastBucket - firstBucket)));
		var collisionAvoider = new $.ig.CollisionAvoider();
		if (sortingXAxis != null) {
			this.prepareDateTimeFrame(frame, windowRect, viewportRect, xaxis, yaxis, view);
			return;
		}
		var anchoredView = view;
		anchoredView.cacheValues();
		var bucketCount = 0;
		var markerBucket = 0;
		for (var i = firstBucket; i <= lastBucket; ++i) {
			var bucket = null;
			if (bucketSize == 1) {
				if (i >= (this.valueColumn().count() - 1)) {
					if (markers && this.prepareMarker(frame, frame._buckets.__inner[frame._buckets.count() - 1], collisionAvoider, Math.min(i * bucketSize, this.fastItemsSource().count() - 1), markerCount, view, bucketCount - 1)) {
						++markerCount;
					}
					break;
				}
				var x1 = xv(i);
				var y1 = yv(i);
				var x2 = xv(i + 1);
				var y2 = yv(i + 1);
				var h = x2 - x1;
				var u1 = this.uColumn()[i];
				var u2 = this.uColumn()[i + 1];
				var firstPointX = xaxis.getScaledValue(x1, xParams) + offset;
				var firstPointY = yaxis.getScaledValue(y1, yParams);
				frame._buckets.add([ firstPointX, firstPointY, firstPointY ]);
				bucketCount++;
				markerBucket = bucketCount;
				for (var j = 1; j < n; ++j) {
					var x = x1 + h * j / n;
					var a = (x2 - x) / h;
					var b = (x - x1) / h;
					var y = a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
					x = xaxis.getScaledValue(x, xParams) + offset;
					y = yaxis.getScaledValue(y, yParams);
					frame._buckets.add([ x, y, y ]);
					bucketCount++;
				}
				if (markers) {
					bucket = view.bucketCalculator().getBucket(i);
					bucket[0] = (xaxis.getScaledValue(bucket[0], xParams) + offset);
					bucket[1] = yaxis.getScaledValue(bucket[1], yParams);
					bucket[2] = yaxis.getScaledValue(bucket[2], yParams);
				}
			} else {
				bucket = view.bucketCalculator().getBucket(i);
				if (!isNaN(bucket[0])) {
					bucket[0] = (xaxis.getScaledValue(bucket[0], xParams) + offset);
					bucket[1] = yaxis.getScaledValue(bucket[1], yParams);
					bucket[2] = yaxis.getScaledValue(bucket[2], yParams);
					frame._buckets.add(bucket);
					bucketCount++;
				}
			}
			if (markers && this.prepareMarker(frame, bucket, collisionAvoider, Math.min(i * bucketSize, this.fastItemsSource().count() - 1), markerCount, view, markerBucket - 1)) {
				++markerCount;
			}
		}
		anchoredView.unCacheValues();
		view.markers().count(markerCount);
	}
	,
	calculateSplineValue: function (p, x1, y1, x2, y2, u1, u2) {
		var h = x2 - x1;
		var x = x1 + h * p;
		var a = (x2 - x) / h;
		var b = (x - x1) / h;
		var y = a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
		return y;
	}
	,
	getInterpolatedSeriesValue: function (p, column, prevItem, nextItem, unsortedPrevItem, unsortedNextItem, offset, isSorting) {
		var prevValue = NaN;
		if (prevItem >= 0 && prevItem < column.count()) {
			prevValue = column.item(prevItem);
		}
		var nextValue = NaN;
		if (nextItem >= 0 && nextItem < column.count()) {
			nextValue = column.item(nextItem);
		}
		if (unsortedNextItem == 0) {
			return nextValue;
		}
		if (unsortedPrevItem == column.count() - 1) {
			return prevValue;
		}
		if ($.ig.util.isNaN(nextValue) && offset != 0 && p <= 0.5 && !isSorting) {
			return prevValue;
		}
		if ($.ig.util.isNaN(prevValue) && offset != 0 && p >= 0.5 && !isSorting) {
			return nextValue;
		}
		var x1 = unsortedPrevItem;
		var x2 = unsortedNextItem;
		var y1 = prevValue;
		var y2 = nextValue;
		var u1 = NaN;
		var u2 = NaN;
		if (this.uColumn() != null && unsortedPrevItem >= 0 && unsortedPrevItem < this.uColumn().length) {
			u1 = this.uColumn()[unsortedPrevItem];
		}
		if (this.uColumn() != null && unsortedNextItem >= 0 && unsortedNextItem < this.uColumn().length) {
			u2 = this.uColumn()[unsortedNextItem];
		}
		return this.calculateSplineValue(p, x1, y1, x2, y2, u1, u2);
	}
	,
	getOffset: function (axis, windowRect, viewportRect, effectiveViewportRect) {
		var categoryMode = this.preferredCategoryMode(axis);
		if (categoryMode == $.ig.CategoryMode.prototype.mode0 && axis.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
			categoryMode = $.ig.CategoryMode.prototype.mode1;
		}
		var offset = 0;
		switch (categoryMode) {
			case $.ig.CategoryMode.prototype.mode0:
				offset = 0;
				break;
			case $.ig.CategoryMode.prototype.mode1:
				offset = 0.5 * axis.getCategorySize(windowRect, viewportRect, effectiveViewportRect);
				break;
			case $.ig.CategoryMode.prototype.mode2:
				offset = axis.getGroupCenter(this.index(), windowRect, viewportRect, effectiveViewportRect);
				break;
		}
		if (axis.isInverted()) {
			offset = -offset;
		}
		return offset;
	}
	,
	splineType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.SplineSeriesBase.prototype.splineTypeProperty, $.ig.SplineType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.SplineSeriesBase.prototype.splineTypeProperty));
		}
	}
	,
	splineFitMustBeRecalculated: function () {
		this.uColumn(null);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		switch (propertyName) {
			case $.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName:
			case $.ig.Series.prototype.fastItemsSourcePropertyName:
				this.splineFitMustBeRecalculated();
				break;
		}
		$.ig.HorizontalAnchoredCategorySeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.SplineSeriesBase.prototype._splineTypePropertyName:
				this.splineFitMustBeRecalculated();
				this.renderSeries(false);
				this.notifyThumbnailAppearanceChanged();
				break;
		}
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		this.splineFitMustBeRecalculated();
		$.ig.HorizontalAnchoredCategorySeries.prototype.dataUpdatedOverride.call(this, action, position, count, propertyName);
	}
	,
	$type: new $.ig.Type('SplineSeriesBase', $.ig.HorizontalAnchoredCategorySeries.prototype.$type)
}, true);

$.ig.util.defType('ChartCollection', 'ObservableCollection$1', {
	init: function () {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.SeriesViewer.prototype.$type, 0);
	},
	collectionResetting: null,
	clearItems: function () {
		if (this.collectionResetting != null) {
			this.collectionResetting(this, null);
		}
		$.ig.ObservableCollection$1.prototype.clearItems.call(this);
	}
	,
	$type: new $.ig.Type('ChartCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.SeriesViewer.prototype.$type))
}, true);

$.ig.util.defType('SeriesCollection', 'ObservableCollection$1', {
	init: function () {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.Series.prototype.$type, 0);
	},
	collectionResetting: null,
	clearItems: function () {
		if (this.collectionResetting != null) {
			this.collectionResetting(this, null);
		}
		$.ig.ObservableCollection$1.prototype.clearItems.call(this);
	}
	,
	$type: new $.ig.Type('SeriesCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.Series.prototype.$type))
}, true);

$.ig.util.defType('ChartCursorEventArgs', 'EventArgs', {
	init: function (chart, series, item) {
		$.ig.EventArgs.prototype.init.call(this);
		this.seriesViewer(chart);
		this.series(series);
		this.item(item);
	},
	toString: function () {
		return this.seriesViewer().name() + ", " + this.series().name() + ", " + (this.item() != null ? this.item().toString() : "");
	}
	,
	_item: null,
	item: function (value) {
		if (arguments.length === 1) {
			this._item = value;
			return value;
		} else {
			return this._item;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_seriesViewer: null,
	seriesViewer: function (value) {
		if (arguments.length === 1) {
			this._seriesViewer = value;
			return value;
		} else {
			return this._seriesViewer;
		}
	}
	,
	chart: function () {
		return $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer());
	}
	,
	$type: new $.ig.Type('ChartCursorEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('PropertyUpdatedEventArgs', 'EventArgs', {
	init: function (propertyName, oldValue, newValue) {
		$.ig.EventArgs.prototype.init.call(this);
		this.propertyName(propertyName);
		this.oldValue(oldValue);
		this.newValue(newValue);
	},
	_propertyName: null,
	propertyName: function (value) {
		if (arguments.length === 1) {
			this._propertyName = value;
			return value;
		} else {
			return this._propertyName;
		}
	}
	,
	_oldValue: null,
	oldValue: function (value) {
		if (arguments.length === 1) {
			this._oldValue = value;
			return value;
		} else {
			return this._oldValue;
		}
	}
	,
	_newValue: null,
	newValue: function (value) {
		if (arguments.length === 1) {
			this._newValue = value;
			return value;
		} else {
			return this._newValue;
		}
	}
	,
	$type: new $.ig.Type('PropertyUpdatedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('SliceClickEventArgs', 'EventArgs', {
	init: function (slice, originalEvent) {
		$.ig.EventArgs.prototype.init.call(this);
		this.slice(slice);
		this.originalEvent(originalEvent);
		if (slice == null) {
			return;
		}
		this.isSelected(slice.isSelected());
		this.isExploded(slice.isExploded());
	},
	_slice: null,
	slice: function (value) {
		if (arguments.length === 1) {
			this._slice = value;
			return value;
		} else {
			return this._slice;
		}
	}
	,
	isSelected: function (value) {
		if (arguments.length === 1) {
			this.__isSelected = value;
			this.slice().isSelected(value);
			return value;
		} else {
			return this.__isSelected;
		}
	}
	,
	__isSelected: false,
	isExploded: function (value) {
		if (arguments.length === 1) {
			this.__isExploded = value;
			this.slice().isExploded(value);
			return value;
		} else {
			return this.__isExploded;
		}
	}
	,
	__isExploded: false,
	isOthersSlice: function () {
		return this.slice().isOthersSlice();
	}
	,
	dataContext: function () {
		if (this.slice() != null) {
			return this.slice().dataContext();
		}
		return null;
	}
	,
	_originalEvent: null,
	originalEvent: function (value) {
		if (arguments.length === 1) {
			this._originalEvent = value;
			return value;
		} else {
			return this._originalEvent;
		}
	}
	,
	$type: new $.ig.Type('SliceClickEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('StackedSeriesCreatedEventArgs', 'EventArgs', {
	init: function (series) {
		$.ig.EventArgs.prototype.init.call(this);
		this.series(series);
	},
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	brush: function (value) {
		if (arguments.length === 1) {
			this.series().brush(value);
			return value;
		} else {
			return this.series().brush();
		}
	}
	,
	legendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.series().legendItemTemplate(value);
			return value;
		} else {
			return this.series().legendItemTemplate();
		}
	}
	,
	legendItemBadgeTemplate: function (value) {
		if (arguments.length === 1) {
			this.series().legendItemBadgeTemplate(value);
			return value;
		} else {
			return this.series().legendItemBadgeTemplate();
		}
	}
	,
	legendItemVisibility: function (value) {
		if (arguments.length === 1) {
			this.series().legendItemVisibility(value);
			return value;
		} else {
			return this.series().legendItemVisibility();
		}
	}
	,
	outline: function (value) {
		if (arguments.length === 1) {
			this.series().outline(value);
			return value;
		} else {
			return this.series().outline();
		}
	}
	,
	dashArray: function (value) {
		if (arguments.length === 1) {
			this.series().dashArray(value);
			return value;
		} else {
			return this.series().dashArray();
		}
	}
	,
	dashCap: function (value) {
		if (arguments.length === 1) {
			this.series().dashCap(value);
			return value;
		} else {
			return this.series().dashCap();
		}
	}
	,
	index: function () {
		return this.series().index();
	}
	,
	thickness: function (value) {
		if (arguments.length === 1) {
			this.series().thickness(value);
			return value;
		} else {
			return this.series().thickness();
		}
	}
	,
	title: function (value) {
		if (arguments.length === 1) {
			this.series().title(value);
			return value;
		} else {
			return this.series().title();
		}
	}
	,
	markerBrush: function (value) {
		if (arguments.length === 1) {
			this.series().markerBrush(value);
			return value;
		} else {
			return this.series().markerBrush();
		}
	}
	,
	markerOutline: function (value) {
		if (arguments.length === 1) {
			this.series().markerOutline(value);
			return value;
		} else {
			return this.series().markerOutline();
		}
	}
	,
	markerStyle: function (value) {
		if (arguments.length === 1) {
			this.series().markerStyle(value);
			return value;
		} else {
			return this.series().markerStyle();
		}
	}
	,
	markerTemplate: function (value) {
		if (arguments.length === 1) {
			this.series().markerTemplate(value);
			return value;
		} else {
			return this.series().markerTemplate();
		}
	}
	,
	markerType: function (value) {
		if (arguments.length === 1) {
			this.series().markerType(value);
			return value;
		} else {
			return this.series().markerType();
		}
	}
	,
	startCap: function (value) {
		if (arguments.length === 1) {
			this.series().startCap(value);
			return value;
		} else {
			return this.series().actualStartCap();
		}
	}
	,
	endCap: function (value) {
		if (arguments.length === 1) {
			this.series().endCap(value);
			return value;
		} else {
			return this.series().actualEndCap();
		}
	}
	,
	$type: new $.ig.Type('StackedSeriesCreatedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('ItemLegend', 'LegendBase', {
	createView: function () {
		return new $.ig.ItemLegendView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.LegendBase.prototype.onViewCreated.call(this, view);
		this.itemView(view);
	}
	,
	_itemView: null,
	itemView: function (value) {
		if (arguments.length === 1) {
			this._itemView = value;
			return value;
		} else {
			return this._itemView;
		}
	}
	,
	init: function () {
		var $self = this;
		$.ig.LegendBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.ItemLegend.prototype.$type);
		var $t = this.children();
		$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, function (o, e) {
			if (e.oldItems() != null) {
				var en = e.oldItems().getEnumerator();
				while (en.moveNext()) {
					var item = en.current();
					$self.itemView().removeItemVisual(item);
				}
			}
			if (e.newItems() != null) {
				var en1 = e.newItems().getEnumerator();
				while (en1.moveNext()) {
					var item1 = en1.current();
					$self.itemView().addItemVisual(item1);
				}
			}
		});
	},
	addChildInOrder: function (legendItem, series) {
		if (!this.view().ready()) {
			return;
		}
		this.renderLegend(series);
	}
	,
	createLegendItems: function (legendItems, itemsHost) {
		this.clearLegendItems(itemsHost);
		if (itemsHost == null || legendItems == null || legendItems.count() == 0) {
			return;
		}
		var en = legendItems.getEnumerator();
		while (en.moveNext()) {
			var currentLegendItem = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, currentLegendItem);
			if (contentControl != null && contentControl.content() != null) {
				var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				if (context != null && !this.containsContext(context)) {
					this.children().add(currentLegendItem);
					var info = new $.ig.LegendItemInfo();
					info.dataContext(context);
					info.legendItem(currentLegendItem);
					info.series(itemsHost);
					if ($.ig.util.cast($.ig.PieSliceDataContext.prototype.$type, context) !== null) {
						info.text((context).legendLabel());
					} else {
						info.text(context.itemLabel());
					}
				}
			}
		}
	}
	,
	createLegendItemsInsert: function (legendItems, itemsHost) {
		var insertIndex = this.clearLegendItemsAndReturnInsertIndex(itemsHost);
		if (itemsHost == null || legendItems == null || legendItems.count() == 0) {
			return;
		}
		var en = legendItems.getEnumerator();
		while (en.moveNext()) {
			var currentLegendItem = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, currentLegendItem);
			if (contentControl != null && contentControl.content() != null) {
				var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				if (context != null && !this.containsContext(context)) {
					this.children().insert(insertIndex, currentLegendItem);
					insertIndex++;
					var info = new $.ig.LegendItemInfo();
					info.dataContext(context);
					info.legendItem(currentLegendItem);
					info.series(itemsHost);
					info.text(context.itemLabel());
				}
			}
		}
	}
	,
	renderLegend: function (itemsHost) {
		this.clearLegendItems(itemsHost);
		var bubbleSeries = $.ig.util.cast($.ig.BubbleSeries.prototype.$type, itemsHost);
		if (bubbleSeries != null && bubbleSeries.labelColumn() != null && bubbleSeries.legendItems() != null && bubbleSeries.legendItems().count() > 0) {
			var en = bubbleSeries.legendItems().getEnumerator();
			while (en.moveNext()) {
				var legendItem = en.current();
				var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, legendItem);
				if (contentControl != null && contentControl.content() != null) {
					var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
					if (context != null && !this.containsContext(context)) {
						this.children().add(legendItem);
						var info = new $.ig.LegendItemInfo();
						info.dataContext(context);
						info.legendItem(legendItem);
						info.series(itemsHost);
						info.text(context.itemLabel());
					}
				}
			}
		}
	}
	,
	clearLegendItems: function (itemsHost) {
		if (itemsHost == null || this.children() == null || this.children().count() == 0) {
			return;
		}
		var legendItems = new $.ig.ObservableCollection$1($.ig.UIElement.prototype.$type, 0);
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var existingLegendItem = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, existingLegendItem);
			if (contentControl != null && contentControl.content() != null) {
				var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				if (context != null && context.series() == itemsHost) {
					legendItems.add(existingLegendItem);
				}
			}
		}
		var en1 = legendItems.getEnumerator();
		while (en1.moveNext()) {
			var legendItem = en1.current();
			this.children().remove(legendItem);
		}
	}
	,
	clearLegendItemsAndReturnInsertIndex: function (itemsHost) {
		if (itemsHost == null || this.children() == null || this.children().count() == 0) {
			return 0;
		}
		var legendItems = new $.ig.ObservableCollection$1($.ig.UIElement.prototype.$type, 0);
		var insertIndex = -1;
		var index = 0;
		var en = this.children().getEnumerator();
		while (en.moveNext()) {
			var existingLegendItem = en.current();
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, existingLegendItem);
			if (contentControl != null && contentControl.content() != null) {
				var context = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				if (context != null && context.series() == itemsHost) {
					if (insertIndex == -1) {
						insertIndex = index;
					}
					legendItems.add(existingLegendItem);
				}
			}
			index++;
		}
		var en1 = legendItems.getEnumerator();
		while (en1.moveNext()) {
			var legendItem = en1.current();
			this.children().remove(legendItem);
		}
		if (insertIndex == -1) {
			return this.children().count();
		}
		return insertIndex;
	}
	,
	containsContext: function (dataContext) {
		return this.itemView().containsContext(dataContext);
	}
	,
	_fillColumn: null,
	fillColumn: function (value) {
		if (arguments.length === 1) {
			this._fillColumn = value;
			return value;
		} else {
			return this._fillColumn;
		}
	}
	,
	$type: new $.ig.Type('ItemLegend', $.ig.LegendBase.prototype.$type)
}, true);

$.ig.util.defType('LegendItemInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_text: null,
	text: function (value) {
		if (arguments.length === 1) {
			this._text = value;
			return value;
		} else {
			return this._text;
		}
	}
	,
	_legendItem: null,
	legendItem: function (value) {
		if (arguments.length === 1) {
			this._legendItem = value;
			return value;
		} else {
			return this._legendItem;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_dataContext: null,
	dataContext: function (value) {
		if (arguments.length === 1) {
			this._dataContext = value;
			return value;
		} else {
			return this._dataContext;
		}
	}
	,
	$type: new $.ig.Type('LegendItemInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CoercionInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_memberPath: null,
	memberPath: function (value) {
		if (arguments.length === 1) {
			this._memberPath = value;
			return value;
		} else {
			return this._memberPath;
		}
	}
	,
	_coercionMethod: null,
	coercionMethod: function (value) {
		if (arguments.length === 1) {
			this._coercionMethod = value;
			return value;
		} else {
			return this._coercionMethod;
		}
	}
	,
	$type: new $.ig.Type('CoercionInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TileZoomManager', 'Object', {
	_viewer: null,
	viewer: function (value) {
		if (arguments.length === 1) {
			this._viewer = value;
			return value;
		} else {
			return this._viewer;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_window: null,
	window: function (value) {
		if (arguments.length === 1) {
			this._window = value;
			return value;
		} else {
			return this._window;
		}
	}
	,
	_tileViewport: null,
	tileViewport: function (value) {
		if (arguments.length === 1) {
			this._tileViewport = value;
			return value;
		} else {
			return this._tileViewport;
		}
	}
	,
	_running: false,
	running: function (value) {
		if (arguments.length === 1) {
			this._running = value;
			return value;
		} else {
			return this._running;
		}
	}
	,
	_minZoomLevel: 0,
	minZoomLevel: function (value) {
		if (arguments.length === 1) {
			this._minZoomLevel = value;
			return value;
		} else {
			return this._minZoomLevel;
		}
	}
	,
	_existingTiles: null,
	existingTiles: function (value) {
		if (arguments.length === 1) {
			this._existingTiles = value;
			return value;
		} else {
			return this._existingTiles;
		}
	}
	,
	_persistentTiles: null,
	persistentTiles: function (value) {
		if (arguments.length === 1) {
			this._persistentTiles = value;
			return value;
		} else {
			return this._persistentTiles;
		}
	}
	,
	_newTiles: null,
	newTiles: function (value) {
		if (arguments.length === 1) {
			this._newTiles = value;
			return value;
		} else {
			return this._newTiles;
		}
	}
	,
	init: function (viewer, roundDown, cacheSize) {
		this.__lastDimension = -1;
		this.__horizontalCorrectiveSkew = 1;
		this.__verticalCorrectiveSkew = 1;
		this._tileID = 0;
		$.ig.Object.prototype.init.call(this);
		this.viewer(viewer);
		var $t = this.viewer();
		$t.actualWindowRectChanged = $.ig.Delegate.prototype.combine($t.actualWindowRectChanged, this.viewer_ActualWindowRectChanged.runOn(this));
		var $t1 = this.viewer();
		$t1.gridAreaRectChanged = $.ig.Delegate.prototype.combine($t1.gridAreaRectChanged, this.viewer_GridAreaRectChanged.runOn(this));
		this.tileCache(new $.ig.TileZoomTileCache(cacheSize, this));
		this.visibleTiles(new $.ig.List$1($.ig.TileZoomTileInfo.prototype.$type, 0));
		this.currentTiles(new $.ig.List$1($.ig.TileZoomTile.prototype.$type, 0));
		this.existingTiles(new $.ig.Dictionary$2($.ig.TileZoomTile.prototype.$type, $.ig.TileZoomTile.prototype.$type, 0));
		this.persistentTiles(new $.ig.Dictionary$2($.ig.TileZoomTile.prototype.$type, $.ig.TileZoomTile.prototype.$type, 0));
		this.newTiles(new $.ig.List$1($.ig.TileZoomTile.prototype.$type, 0));
		this.roundDown(roundDown);
		this.onViewportChanged();
	},
	__lastDimension: 0,
	onViewportChanged: function () {
		this.viewport(this.viewer().viewportRect());
		this.actualViewport(this.applySkew(this.viewport()));
		var dimension = this.getDimension();
		this.clearVisible();
		this.clearTileCache();
		this.__lastDimension = dimension;
		this.minZoomLevel(this.getMinZoomLevel(dimension));
		this.tileViewport(new $.ig.Rect(0, 0, 0, dimension, dimension));
	}
	,
	_actualViewport: null,
	actualViewport: function (value) {
		if (arguments.length === 1) {
			this._actualViewport = value;
			return value;
		} else {
			return this._actualViewport;
		}
	}
	,
	applySkew: function (viewport) {
		return new $.ig.Rect(0, viewport.left(), viewport.top(), viewport.width() * this.__horizontalCorrectiveSkew, viewport.height() * this.__verticalCorrectiveSkew);
	}
	,
	getMinZoomLevel: function (dimension) {
		var numTiles = dimension / $.ig.TileZoomManager.prototype.tileSize;
		var zoomLevel = Math.logBase(numTiles, 2);
		return zoomLevel;
	}
	,
	getDimension: function () {
		var maxDimension = Math.max(this.actualViewport().width(), this.actualViewport().height());
		var targetDimensionMult = 1;
		var targetDimension = $.ig.TileZoomManager.prototype.tileSize;
		while (targetDimension < maxDimension) {
			targetDimensionMult++;
			targetDimension = $.ig.TileZoomManager.prototype.tileSize * targetDimensionMult;
		}
		return targetDimension;
	}
	,
	viewer_GridAreaRectChanged: function (sender, e) {
		this.onViewportChanged();
		this.onWindowChanged();
	}
	,
	viewer_ActualWindowRectChanged: function (sender, e) {
		this.onWindowChanged();
	}
	,
	onWindowChanged: function () {
		this.__hasContent = true;
		this.window(this.viewer().actualWindowRect());
		if (this.running()) {
			if (this.updateCorrectiveSkew(this.window())) {
				$.ig.Debug.prototype.writeLine("skew change: " + this.__horizontalCorrectiveSkew + ", " + this.__verticalCorrectiveSkew);
				this.onViewportChanged();
			}
			this.determineVisibleTiles();
			this.readyVisibleTiles();
			this.displayVisibleTiles();
		}
	}
	,
	__horizontalCorrectiveSkew: 0,
	__verticalCorrectiveSkew: 0,
	updateCorrectiveSkew: function (window) {
		var horizontalSkewCorrection = 1;
		var verticalSkewCorrection = 1;
		if (this.isTooSkewed(window)) {
			if (window.width() > window.height()) {
				var skew = 1;
				if (window.height() != 0) {
					skew = window.width() / window.height();
				}
				var snapPow = 0;
				var snap = 1;
				while (snap < skew) {
					snapPow++;
					snap = $.ig.truncate(Math.pow(3, snapPow));
				}
				snap = $.ig.truncate(Math.pow(3, snapPow - 1));
				verticalSkewCorrection = snap;
				if (verticalSkewCorrection == 0 || Number.isInfinity(verticalSkewCorrection) || $.ig.util.isNaN(verticalSkewCorrection)) {
					verticalSkewCorrection = 1;
				}
			} else {
				var skew1 = 1;
				if (window.width() != 0) {
					skew1 = window.height() / window.width();
				}
				var snapPow1 = 0;
				var snap1 = 1;
				while (snap1 < skew1) {
					snapPow1++;
					snap1 = $.ig.truncate(Math.pow(3, snapPow1));
				}
				snap1 = $.ig.truncate(Math.pow(3, snapPow1 - 1));
				horizontalSkewCorrection = snap1;
				if (Number.isInfinity(horizontalSkewCorrection) || $.ig.util.isNaN(horizontalSkewCorrection)) {
					horizontalSkewCorrection = 1;
				}
			}
		} else {
			horizontalSkewCorrection = 1;
			verticalSkewCorrection = 1;
		}
		var changed = verticalSkewCorrection != this.__verticalCorrectiveSkew || horizontalSkewCorrection != this.__horizontalCorrectiveSkew;
		this.__horizontalCorrectiveSkew = horizontalSkewCorrection;
		this.__verticalCorrectiveSkew = verticalSkewCorrection;
		return changed;
	}
	,
	isTooSkewed: function (window) {
		return (window.width() / window.height()) > $.ig.TileZoomManager.prototype._maxAllowedSkew || (window.height() / window.width()) > $.ig.TileZoomManager.prototype._maxAllowedSkew;
	}
	,
	displayVisibleTiles: function () {
		var info = this.getZoomInfo();
		for (var i = 0; i < this.currentTiles().count(); i++) {
			this.assignTileLocation(info, this.currentTiles().__inner[i]);
		}
		var existing = new $.ig.Dictionary$2($.ig.Object.prototype.$type, $.ig.TileZoomTile.prototype.$type, 0);
		var en = this.persistentTiles().keys().getEnumerator();
		while (en.moveNext()) {
			var key = en.current();
			existing.add(this.persistentTiles().item(key).content(), this.persistentTiles().item(key));
		}
		this.viewer().view().displayZoomTiles(existing, this.newTiles(), $.ig.TileZoomManager.prototype.tileSize);
	}
	,
	assignTileLocation: function (info, tile) {
		var window = this.getTileWindow(tile, info);
		var left = window.left() * info.actualWidth();
		var top = window.top() * info.actualHeight();
		var right = window.right() * info.actualWidth();
		var bottom = window.bottom() * info.actualHeight();
		var locX = left - info.actualRect().left();
		var locY = top - info.actualRect().top();
		var width = right - left;
		var height = bottom - top;
		$.ig.Debug.prototype.assert(width > 0);
		$.ig.Debug.prototype.assert(height > 0);
		tile.xPosition(locX / this.__horizontalCorrectiveSkew);
		tile.yPosition(locY / this.__verticalCorrectiveSkew);
		tile.width(width / this.__horizontalCorrectiveSkew);
		tile.height(height / this.__verticalCorrectiveSkew);
	}
	,
	readyVisibleTiles: function () {
		var info = this.getZoomInfo();
		this.existingTiles().clear();
		for (var i = 0; i < this.currentTiles().count(); i++) {
			var currentTile = this.currentTiles().__inner[i];
			this.existingTiles().add(currentTile, currentTile);
		}
		this.currentTiles().clear();
		this.persistentTiles().clear();
		this.newTiles().clear();
		for (var i1 = 0; i1 < this.visibleTiles().count(); i1++) {
			var currentTile1 = this.visibleTiles().__inner[i1];
			var tile = this.tileCache().getTile(currentTile1);
			if (tile == null) {
				tile = this.acquireTile(currentTile1, info);
				this.tileCache().addTile(tile);
			}
			if (this.existingTiles().containsKey(tile)) {
				this.existingTiles().remove(tile);
				this.persistentTiles().add(tile, tile);
			} else {
				this.activateTile(tile);
				this.newTiles().add(tile);
			}
			this.currentTiles().add(tile);
		}
		var en = this.existingTiles().keys().getEnumerator();
		while (en.moveNext()) {
			var key = en.current();
			this.deactivateTile(key);
		}
	}
	,
	deactivateTile: function (key) {
	}
	,
	activateTile: function (tile) {
	}
	,
	acquireTile: function (tileInfo, info) {
		var tile = this.createTile(tileInfo);
		var window = this.getTileWindow(tile, info);
		var effectiveWindow = this.getEffectiveWindow();
		var widthScale = 1 / effectiveWindow.width();
		var heightScale = effectiveWindow.height();
		if (effectiveWindow.width() > effectiveWindow.height()) {
			widthScale = effectiveWindow.width();
			heightScale = 1 / effectiveWindow.height();
		}
		var left = (window.left() - effectiveWindow.left()) * widthScale;
		var top = (window.top() - effectiveWindow.top()) * heightScale;
		var right = (window.right() - effectiveWindow.left()) * widthScale;
		var bottom = (window.bottom() - effectiveWindow.top()) * heightScale;
		window = new $.ig.Rect(0, left, top, right - left, bottom - top);
		var content = this.viewer().view().acquireTileContent(window, tile, $.ig.truncate($.ig.TileZoomManager.prototype.tileSize));
		tile.content(content);
		return tile;
	}
	,
	getEffectiveWindow: function () {
		var viewport = this.viewer().viewportRect();
		var effectiveViewport = this.viewer().effectiveViewport();
		if (effectiveViewport.isEmpty()) {
			return new $.ig.Rect(0, 0, 0, 1, 1);
		}
		var left = (effectiveViewport.left() - viewport.left()) / viewport.width();
		var top = (effectiveViewport.top() - viewport.top()) / viewport.height();
		var right = (effectiveViewport.right() - viewport.left()) / viewport.width();
		var bottom = (effectiveViewport.bottom() - viewport.top()) / viewport.height();
		return new $.ig.Rect(0, left, top, right - left, bottom - top);
	}
	,
	getTileWindow: function (tile, info) {
		var tileLeft = tile.info().xPosition() * $.ig.TileZoomManager.prototype.tileSize;
		var tileTop = tile.info().yPosition() * $.ig.TileZoomManager.prototype.tileSize;
		var tileRight = tileLeft + $.ig.TileZoomManager.prototype.tileSize;
		var tileBottom = tileTop + $.ig.TileZoomManager.prototype.tileSize;
		var worldX = tileLeft / info.zoomWidth();
		var worldY = tileTop / info.zoomHeight();
		var worldWidth = $.ig.TileZoomManager.prototype.tileSize / info.zoomWidth();
		var worldHeight = $.ig.TileZoomManager.prototype.tileSize / info.zoomHeight();
		return new $.ig.Rect(0, worldX, worldY, worldWidth, worldHeight);
	}
	,
	_tileID: 0,
	createTile: function (tileInfo) {
		var id = 0;
		id = this._tileID;
		this._tileID++;
		var tile = new $.ig.TileZoomTile();
		tile.info(tileInfo);
		tile.iD(id);
		return tile;
	}
	,
	_visibleTiles: null,
	visibleTiles: function (value) {
		if (arguments.length === 1) {
			this._visibleTiles = value;
			return value;
		} else {
			return this._visibleTiles;
		}
	}
	,
	_currentTiles: null,
	currentTiles: function (value) {
		if (arguments.length === 1) {
			this._currentTiles = value;
			return value;
		} else {
			return this._currentTiles;
		}
	}
	,
	getZoomInfo: function () {
		var actualWindow = this.getActualWindow(this.window());
		var currentZoomLevel = this.getZoomLevel(actualWindow);
		var width = Math.pow(2, currentZoomLevel) * $.ig.TileZoomManager.prototype.tileSize;
		var height = width;
		var zoomWidth = (this.actualViewport().width() / this.tileViewport().width()) * width;
		var zoomHeight = (this.actualViewport().height() / this.tileViewport().height()) * height;
		var actualWidth = (this.actualViewport().width() / actualWindow.width());
		var actualHeight = (this.actualViewport().height() / actualWindow.height());
		var actualLeft = actualWindow.left() * actualWidth;
		var actualTop = actualWindow.top() * actualHeight;
		var actualRight = actualWindow.right() * actualWidth;
		var actualBottom = actualWindow.bottom() * actualHeight;
		var info = new $.ig.TileZoomInfo();
		info.actualRect(new $.ig.Rect(0, actualLeft, actualTop, actualRight - actualLeft, actualBottom - actualTop));
		var windowAtZoom = this.getWindowAtZoom(this.window(), info.actualRect(), currentZoomLevel, actualWidth, actualHeight, zoomWidth, zoomHeight);
		var zoomLeft = windowAtZoom.left() * zoomWidth;
		var zoomTop = windowAtZoom.top() * zoomHeight;
		var zoomRight = windowAtZoom.right() * zoomWidth;
		var zoomBottom = windowAtZoom.bottom() * zoomHeight;
		info.zoomRect(new $.ig.Rect(0, zoomLeft, zoomTop, zoomRight - zoomLeft, zoomBottom - zoomTop));
		info.currentZoomLevel(currentZoomLevel);
		info.zoomWidth(zoomWidth);
		info.zoomHeight(zoomHeight);
		info.actualWidth(actualWidth);
		info.actualHeight(actualHeight);
		return info;
	}
	,
	getActualWindow: function (window) {
		return window;
	}
	,
	getWindowAtZoom: function (window, actualRect, currentZoomLevel, actualWidth, actualHeight, zoomWidth, zoomHeight) {
		var centerX = (window.left() + window.right()) / 2;
		var centerY = (window.top() + window.bottom()) / 2;
		var width = window.width();
		var height = window.height();
		width = width * actualWidth / zoomWidth;
		height = height * actualHeight / zoomHeight;
		var halfWidth = width / 2;
		var halfHeight = height / 2;
		return new $.ig.Rect(0, centerX - halfWidth, centerY - halfHeight, width, height);
	}
	,
	determineVisibleTiles: function () {
		var info = this.getZoomInfo();
		var tileSizeX = $.ig.TileZoomManager.prototype.tileSize * info.actualWidth() / info.zoomWidth();
		var tileSizeY = $.ig.TileZoomManager.prototype.tileSize * info.actualHeight() / info.zoomHeight();
		var xStart = $.ig.truncate(Math.floor(info.actualRect().left() / tileSizeX));
		var yStart = $.ig.truncate(Math.floor(info.actualRect().top() / tileSizeY));
		var xEnd = $.ig.truncate(Math.floor(info.actualRect().right() / tileSizeX));
		var yEnd = $.ig.truncate(Math.floor(info.actualRect().bottom() / tileSizeY));
		this.visibleTiles().clear();
		for (var y = yStart; y <= yEnd; y++) {
			for (var x = xStart; x <= xEnd; x++) {
				this.visibleTiles().add((function () {
					var $ret = new $.ig.TileZoomTileInfo();
					$ret.xPosition(x);
					$ret.yPosition(y);
					$ret.zoomLevel(info.currentZoomLevel());
					return $ret;
				}()));
			}
		}
	}
	,
	getZoomLevel: function (window) {
		var scaleHoriz = 1 / window.width();
		var scaleVert = 1 / window.height();
		var zoomHoriz;
		var zoomVert;
		if (this.roundDown()) {
			zoomHoriz = Math.floor(Math.logBase(scaleHoriz, 2));
			zoomVert = Math.floor(Math.logBase(scaleVert, 2));
		} else {
			zoomHoriz = Math.ceil(Math.logBase(scaleHoriz, 2));
			zoomVert = Math.ceil(Math.logBase(scaleVert, 2));
		}
		var zoom = Math.min(zoomHoriz, zoomVert) + (this.minZoomLevel());
		return $.ig.truncate(zoom);
	}
	,
	_tileCache: null,
	tileCache: function (value) {
		if (arguments.length === 1) {
			this._tileCache = value;
			return value;
		} else {
			return this._tileCache;
		}
	}
	,
	__hasContent: false,
	clearTileCache: function () {
		if (!this.__hasContent) {
			return;
		}
		this.__hasContent = false;
		this.viewer().view().destroyAllTileContent();
		this.tileCache().clear();
	}
	,
	start: function () {
		this.running(true);
	}
	,
	end: function () {
		this.running(false);
		this.viewer().view().hideZoomTiles();
	}
	,
	_roundDown: false,
	roundDown: function (value) {
		if (arguments.length === 1) {
			this._roundDown = value;
			return value;
		} else {
			return this._roundDown;
		}
	}
	,
	destroyTile: function (tileZoomTile) {
		this.viewer().view().destroyTileContent(tileZoomTile);
	}
	,
	clearVisible: function () {
		this.currentTiles().clear();
		this.visibleTiles().clear();
		this.existingTiles().clear();
	}
	,
	$type: new $.ig.Type('TileZoomManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TileZoomInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_actualRect: null,
	actualRect: function (value) {
		if (arguments.length === 1) {
			this._actualRect = value;
			return value;
		} else {
			return this._actualRect;
		}
	}
	,
	_zoomRect: null,
	zoomRect: function (value) {
		if (arguments.length === 1) {
			this._zoomRect = value;
			return value;
		} else {
			return this._zoomRect;
		}
	}
	,
	_currentZoomLevel: 0,
	currentZoomLevel: function (value) {
		if (arguments.length === 1) {
			this._currentZoomLevel = value;
			return value;
		} else {
			return this._currentZoomLevel;
		}
	}
	,
	_zoomWidth: 0,
	zoomWidth: function (value) {
		if (arguments.length === 1) {
			this._zoomWidth = value;
			return value;
		} else {
			return this._zoomWidth;
		}
	}
	,
	_zoomHeight: 0,
	zoomHeight: function (value) {
		if (arguments.length === 1) {
			this._zoomHeight = value;
			return value;
		} else {
			return this._zoomHeight;
		}
	}
	,
	_actualWidth: 0,
	actualWidth: function (value) {
		if (arguments.length === 1) {
			this._actualWidth = value;
			return value;
		} else {
			return this._actualWidth;
		}
	}
	,
	_actualHeight: 0,
	actualHeight: function (value) {
		if (arguments.length === 1) {
			this._actualHeight = value;
			return value;
		} else {
			return this._actualHeight;
		}
	}
	,
	$type: new $.ig.Type('TileZoomInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TileZoomTileInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_zoomLevel: 0,
	zoomLevel: function (value) {
		if (arguments.length === 1) {
			this._zoomLevel = value;
			return value;
		} else {
			return this._zoomLevel;
		}
	}
	,
	_xPosition: 0,
	xPosition: function (value) {
		if (arguments.length === 1) {
			this._xPosition = value;
			return value;
		} else {
			return this._xPosition;
		}
	}
	,
	_yPosition: 0,
	yPosition: function (value) {
		if (arguments.length === 1) {
			this._yPosition = value;
			return value;
		} else {
			return this._yPosition;
		}
	}
	,
	toString: function () {
		return this.zoomLevel() + "_" + this.xPosition() + "_" + this.yPosition();
	}
	,
	$type: new $.ig.Type('TileZoomTileInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TileZoomTileCache', 'Object', {
	__cache: null,
	__mru: null,
	__maxTiles: 0,
	__owner: null,
	init: function (maxTiles, owner) {
		this.__cache = new $.ig.Dictionary$2(String, $.ig.TileZoomTile.prototype.$type, 0);
		this.__mru = new $.ig.LinkedList$1($.ig.TileZoomTile.prototype.$type);
		$.ig.Object.prototype.init.call(this);
		this.__maxTiles = maxTiles;
		this.__owner = owner;
	},
	clear: function () {
		this.__cache.clear();
		this.__mru = new $.ig.LinkedList$1($.ig.TileZoomTile.prototype.$type);
	}
	,
	touch: function (tileZoomTile) {
		this.__mru.remove(tileZoomTile.node());
		this.__mru.addLast(tileZoomTile);
		tileZoomTile.node(this.__mru.last());
	}
	,
	addTile: function (tileZoomTile) {
		this.__mru.addLast(tileZoomTile);
		this.__cache.add(tileZoomTile.info().toString(), tileZoomTile);
		tileZoomTile.owningCache(this);
		tileZoomTile.node(this.__mru.last());
		while (this.__cache.count() > this.__maxTiles) {
			this.removeTile(this.__mru.first().value());
		}
	}
	,
	removeTile: function (tileZoomTile) {
		this.__mru.remove(tileZoomTile.node());
		this.__cache.remove(tileZoomTile.info().toString());
		this.__owner.destroyTile(tileZoomTile);
	}
	,
	getTile: function (info) {
		if (this.__cache.containsKey(info.toString())) {
			var tile = this.__cache.item(info.toString());
			tile.touch();
			return tile;
		}
		return null;
	}
	,
	$type: new $.ig.Type('TileZoomTileCache', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('TileZoomTile', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_info: null,
	info: function (value) {
		if (arguments.length === 1) {
			this._info = value;
			return value;
		} else {
			return this._info;
		}
	}
	,
	_owningCache: null,
	owningCache: function (value) {
		if (arguments.length === 1) {
			this._owningCache = value;
			return value;
		} else {
			return this._owningCache;
		}
	}
	,
	_node: null,
	node: function (value) {
		if (arguments.length === 1) {
			this._node = value;
			return value;
		} else {
			return this._node;
		}
	}
	,
	touch: function () {
		if (this.owningCache() == null) {
			return;
		}
		this.owningCache().touch(this);
	}
	,
	_content: null,
	content: function (value) {
		if (arguments.length === 1) {
			this._content = value;
			return value;
		} else {
			return this._content;
		}
	}
	,
	_xPosition: 0,
	xPosition: function (value) {
		if (arguments.length === 1) {
			this._xPosition = value;
			return value;
		} else {
			return this._xPosition;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_yPosition: 0,
	yPosition: function (value) {
		if (arguments.length === 1) {
			this._yPosition = value;
			return value;
		} else {
			return this._yPosition;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_iD: 0,
	iD: function (value) {
		if (arguments.length === 1) {
			this._iD = value;
			return value;
		} else {
			return this._iD;
		}
	}
	,
	$type: new $.ig.Type('TileZoomTile', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AreaFragmentBucketCalculator', 'AnchoredCategoryBucketCalculator', {
	init: function (view) {
		$.ig.AnchoredCategoryBucketCalculator.prototype.init.call(this, view);
	},
	getBucket: function (bucket) {
		var i0 = Math.min(bucket * this._bucketSize, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var i1 = Math.min(i0 + this._bucketSize - 1, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var min = NaN;
		var max = NaN;
		var fragment = $.ig.util.cast($.ig.FragmentBase.prototype.$type, this.anchoredView().anchoredModel());
		var parentSeries = fragment.parentSeries();
		for (var i = i0; i <= i1; ++i) {
			var y = this.anchoredView().anchoredModel().valueColumn().item(i);
			if ($.ig.util.isNaN(y) || Number.isInfinity(y)) {
				y = 0;
			}
			var total = Math.abs(parentSeries.lows()[i]) + parentSeries.highs()[i];
			if ($.ig.util.cast($.ig.IStacked100Series.prototype.$type, parentSeries) !== null) {
				if (total == 0) {
					y = 0;
				} else if (y < 0) {
					y = (fragment.logicalSeriesLink().lowValues().__inner[i] + y) / total * 100;
				} else {
					y = (fragment.logicalSeriesLink().highValues().__inner[i] + y) / total * 100;
				}
			} else {
				y = y < 0 ? fragment.logicalSeriesLink().lowValues().__inner[i] + y : fragment.logicalSeriesLink().highValues().__inner[i] + y;
			}
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(y)) {
					min = Math.min(min, y);
					max = Math.max(max, y);
				}
			} else {
				min = y;
				max = y;
			}
		}
		if (!$.ig.util.isNaN(min)) {
			return [ (0.5 * (i0 + i1)), min, max ];
		}
		return [ (0.5 * (i0 + i1)), NaN, NaN ];
	}
	,
	$type: new $.ig.Type('AreaFragmentBucketCalculator', $.ig.AnchoredCategoryBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('LineFragmentBucketCalculator', 'AnchoredCategoryBucketCalculator', {
	init: function (view) {
		$.ig.AnchoredCategoryBucketCalculator.prototype.init.call(this, view);
	},
	getBucket: function (bucket) {
		var i0 = Math.min(bucket * this._bucketSize, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var i1 = Math.min(i0 + this._bucketSize - 1, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var min = NaN;
		var max = NaN;
		var fragment = $.ig.util.cast($.ig.FragmentBase.prototype.$type, this.anchoredView().anchoredModel());
		var parentSeries = fragment.parentSeries();
		for (var i = i0; i <= i1; ++i) {
			var y = this.anchoredView().anchoredModel().valueColumn().item(i);
			var total = Math.abs(parentSeries.lows()[i]) + parentSeries.highs()[i];
			if ($.ig.util.isNaN(y) || Number.isInfinity(y)) {
				y = 0;
			}
			if ($.ig.util.cast($.ig.IStacked100Series.prototype.$type, parentSeries) !== null) {
				if (total == 0) {
					y = 0;
				} else if (y < 0) {
					y = (fragment.logicalSeriesLink().lowValues().__inner[i] + y) / total * 100;
				} else {
					y = (fragment.logicalSeriesLink().highValues().__inner[i] + y) / total * 100;
				}
			} else {
				y = y < 0 ? fragment.logicalSeriesLink().lowValues().__inner[i] + y : fragment.logicalSeriesLink().highValues().__inner[i] + y;
			}
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(y)) {
					min = Math.min(min, y);
					max = Math.max(max, y);
				}
			} else {
				min = y;
				max = y;
			}
		}
		if (!$.ig.util.isNaN(min)) {
			return [ (0.5 * (i0 + i1)), min, max ];
		}
		return [ (0.5 * (i0 + i1)), NaN, NaN ];
	}
	,
	$type: new $.ig.Type('LineFragmentBucketCalculator', $.ig.AnchoredCategoryBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('SplineFragmentBucketCalculator', 'AnchoredCategoryBucketCalculator', {
	init: function (view) {
		$.ig.AnchoredCategoryBucketCalculator.prototype.init.call(this, view);
	},
	getBucket: function (bucket) {
		var i0 = Math.min(bucket * this._bucketSize, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var i1 = Math.min(i0 + this._bucketSize - 1, this.anchoredView().anchoredModel().valueColumn().count() - 1);
		var min = NaN;
		var max = NaN;
		var fragment = $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, this.anchoredView().anchoredModel());
		var parentSeries = fragment.parentSeries();
		for (var i = i0; i <= i1; ++i) {
			var y = this.anchoredView().anchoredModel().valueColumn().item(i);
			var total = Math.abs(parentSeries.lows()[i]) + parentSeries.highs()[i];
			if ($.ig.util.isNaN(y) || Number.isInfinity(y)) {
				y = 0;
			}
			if ($.ig.util.cast($.ig.IStacked100Series.prototype.$type, parentSeries) !== null) {
				if (total == 0) {
					y = 0;
				} else if (y < 0) {
					y = (fragment.logicalSeriesLink().lowValues().__inner[i] + y) / total * 100;
				} else {
					y = (fragment.logicalSeriesLink().highValues().__inner[i] + y) / total * 100;
				}
			} else {
				y = y < 0 ? fragment.logicalSeriesLink().lowValues().__inner[i] + y : fragment.logicalSeriesLink().highValues().__inner[i] + y;
			}
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(y)) {
					min = Math.min(min, y);
					max = Math.max(max, y);
				}
			} else {
				min = y;
				max = y;
			}
		}
		if (!$.ig.util.isNaN(min)) {
			return [ (0.5 * (i0 + i1)), min, max ];
		}
		return [ (0.5 * (i0 + i1)), NaN, NaN ];
	}
	,
	$type: new $.ig.Type('SplineFragmentBucketCalculator', $.ig.AnchoredCategoryBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('StackedBucketCalculator', 'CategoryBucketCalculator', {
	init: function (view) {
		$.ig.CategoryBucketCalculator.prototype.init.call(this, view);
	},
	getBucket: function (index) {
		var series = $.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, this.view().categoryModel());
		var count = Math.min(series.lows() != null ? series.lows().length : 0, series.highs() != null ? series.highs().length : 0);
		var i0 = Math.min(index * this._bucketSize, count - 1);
		var i1 = Math.min(i0 + this._bucketSize - 1, count - 1);
		var min = NaN;
		var max = NaN;
		for (var i = i0; i <= i1; ++i) {
			var low = Math.min(series.lows()[i], series.highs()[i]);
			var high = Math.max(series.lows()[i], series.highs()[i]);
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(low)) {
					min = Math.min(min, low);
					max = Math.max(max, low);
				}
				if (!$.ig.util.isNaN(high)) {
					min = Math.min(min, high);
					max = Math.max(max, high);
				}
			} else {
				min = low;
				max = high;
			}
		}
		if (!$.ig.util.isNaN(min) && !$.ig.util.isNaN(max)) {
			return [ (0.5 * (i0 + i1)), min, max ];
		}
		return [ NaN, NaN, NaN ];
	}
	,
	getBucket1: function (series, index, sortingIndex, windowRect, viewportRect, currentFrame) {
		return null;
	}
	,
	$type: new $.ig.Type('StackedBucketCalculator', $.ig.CategoryBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('StackedBarBucketCalculator', 'StackedBucketCalculator', {
	init: function (view) {
		$.ig.StackedBucketCalculator.prototype.init.call(this, view);
	},
	calculateBuckets: function (resolution) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var series = $.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.view().categoryModel());
		var fastItemsSource = this.view().categoryModel().fastItemsSource();
		if (windowRect.isEmpty() || viewportRect.isEmpty() || series.yAxis() == null || fastItemsSource == null || fastItemsSource.count() == 0) {
			this._bucketSize = 0;
			return;
		}
		var effectiveViewportRect = series.getEffectiveViewport1(this.view());
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, series.yAxis().isInverted(), effectiveViewportRect);
		var contentViewport = series.getContentViewport(this.view());
		var y0 = Math.floor(series.yAxis().getUnscaledValue1(contentViewport.top(), p, $.ig.CategoryMode.prototype.mode0));
		var y1 = Math.ceil(series.yAxis().getUnscaledValue1(contentViewport.bottom(), p, $.ig.CategoryMode.prototype.mode0));
		if (!series.yAxis().isInverted()) {
			y1 = Math.ceil(series.yAxis().getUnscaledValue1(contentViewport.top(), p, $.ig.CategoryMode.prototype.mode0));
			y0 = Math.floor(series.yAxis().getUnscaledValue1(contentViewport.bottom(), p, $.ig.CategoryMode.prototype.mode0));
		}
		var c = Math.floor((y1 - y0 + 1) * resolution / contentViewport.height());
		this._bucketSize = $.ig.truncate(Math.max(1, c));
		this._firstBucket = $.ig.truncate(Math.max(0, Math.floor(y0 / this._bucketSize) - 1));
		this._lastBucket = $.ig.truncate(Math.ceil(y1 / this._bucketSize));
	}
	,
	getBucket: function (index) {
		return $.ig.StackedBucketCalculator.prototype.getBucket.call(this, index);
	}
	,
	getBucket1: function (series, index, sortingIndex, windowRect, viewportRect, currentFrame) {
		var bucket = [ NaN, NaN, NaN ];
		var fragment = $.ig.util.cast($.ig.BarFragment.prototype.$type, series);
		if (fragment == null || fragment.logicalSeriesLink() == null) {
			return bucket;
		}
		var barSeries = $.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.view().categoryModel());
		var value = series.valueColumn().item(sortingIndex);
		var zero = 0;
		var min = NaN;
		var max = NaN;
		var high = Number.NEGATIVE_INFINITY;
		var low = Number.POSITIVE_INFINITY;
		var effectiveViewportRect = barSeries.getEffectiveViewport1(this.view());
		var count = Math.min(barSeries.lows() != null ? barSeries.lows().length : 0, barSeries.highs() != null ? barSeries.highs().length : 0);
		var i0 = sortingIndex * this._bucketSize;
		var i1 = Math.min(i0 + this._bucketSize - 1, count - 1);
		for (var i = i0; i <= i1; ++i) {
			value = series.valueColumn().item(i);
			if (value < zero) {
				low = Math.min(low, fragment.logicalSeriesLink().lowValues().__inner[i] + value);
				high = Math.max(high, fragment.logicalSeriesLink().lowValues().__inner[i]);
			} else {
				low = Math.min(low, fragment.logicalSeriesLink().highValues().__inner[i]);
				high = Math.max(high, fragment.logicalSeriesLink().highValues().__inner[i] + value);
			}
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(low)) {
					min = Math.min(min, low);
					max = Math.max(max, low);
				}
				if (!$.ig.util.isNaN(high)) {
					min = Math.min(min, high);
					max = Math.max(max, high);
				}
			} else {
				min = low;
				max = high;
			}
		}
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, barSeries.xAxis().isInverted(), effectiveViewportRect);
		bucket = [ currentFrame._buckets.__inner[index - this._firstBucket][0], barSeries.xAxis().getScaledValue(max, xParams), barSeries.xAxis().getScaledValue(min, xParams) ];
		return bucket;
	}
	,
	$type: new $.ig.Type('StackedBarBucketCalculator', $.ig.StackedBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('StackedColumnBucketCalculator', 'StackedBucketCalculator', {
	init: function (view) {
		$.ig.StackedBucketCalculator.prototype.init.call(this, view);
	},
	getBucket: function (index) {
		return $.ig.StackedBucketCalculator.prototype.getBucket.call(this, index);
	}
	,
	getBucket1: function (series, index, sortingIndex, windowRect, viewportRect, currentFrame) {
		var bucket = [ NaN, NaN, NaN ];
		var fragment = $.ig.util.cast($.ig.ColumnFragment.prototype.$type, series);
		if (fragment == null || fragment.logicalSeriesLink() == null) {
			return bucket;
		}
		var columnSeries = $.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, this.view().categoryModel());
		var value = series.valueColumn().item(sortingIndex);
		var zero = 0;
		var min = NaN;
		var max = NaN;
		var high = Number.NEGATIVE_INFINITY;
		var low = Number.POSITIVE_INFINITY;
		var effectiveViewportRect = columnSeries.getEffectiveViewport1(this.view());
		var count = Math.min(columnSeries.lows() != null ? columnSeries.lows().length : 0, columnSeries.highs() != null ? columnSeries.highs().length : 0);
		var i0 = sortingIndex * this._bucketSize;
		var i1 = Math.min(i0 + this._bucketSize - 1, count - 1);
		for (var i = i0; i <= i1; ++i) {
			value = series.valueColumn().item(i);
			if (value < zero) {
				low = Math.min(low, fragment.logicalSeriesLink().lowValues().__inner[i] + value);
				high = Math.max(high, fragment.logicalSeriesLink().lowValues().__inner[i]);
			} else {
				low = Math.min(low, fragment.logicalSeriesLink().highValues().__inner[i]);
				high = Math.max(high, fragment.logicalSeriesLink().highValues().__inner[i] + value);
			}
			if (!$.ig.util.isNaN(min)) {
				if (!$.ig.util.isNaN(low)) {
					min = Math.min(min, low);
					max = Math.max(max, low);
				}
				if (!$.ig.util.isNaN(high)) {
					min = Math.min(min, high);
					max = Math.max(max, high);
				}
			} else {
				min = low;
				max = high;
			}
		}
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, columnSeries.yAxis().isInverted(), effectiveViewportRect);
		bucket = [ currentFrame._buckets.__inner[index - this._firstBucket][0], columnSeries.yAxis().getScaledValue(max, yParams), columnSeries.yAxis().getScaledValue(min, yParams) ];
		return bucket;
	}
	,
	$type: new $.ig.Type('StackedColumnBucketCalculator', $.ig.StackedBucketCalculator.prototype.$type)
}, true);

$.ig.util.defType('FragmentBase', 'HorizontalAnchoredCategorySeries', {
	init: function () {
		this.__parentSeries = null;
		$.ig.HorizontalAnchoredCategorySeries.prototype.init.call(this);
	},
	_logicalSeriesLink: null,
	logicalSeriesLink: function (value) {
		if (arguments.length === 1) {
			this._logicalSeriesLink = value;
			return value;
		} else {
			return this._logicalSeriesLink;
		}
	}
	,
	__parentSeries: null,
	parentSeries: function (value) {
		if (arguments.length === 1) {
			this.__parentSeries = value;
			return value;
		} else {
			return this.__parentSeries;
		}
	}
	,
	isHighlightingSupported: function () {
		return false;
	}
	,
	isDropShadowSupported: function () {
		return false;
	}
	,
	getCategoryAxis: function () {
		if (this.parentSeries() == null) {
			return null;
		}
		return this.parentSeries().getXAxis();
	}
	,
	getValueAxis: function () {
		if (this.parentSeries() == null) {
			return null;
		}
		return this.parentSeries().getYAxis();
	}
	,
	prepareMarker: function (markersHost, frame, bucket, collisionAvoider, value, itemIndex, markerCount, markerBucket) {
		var x = bucket[0];
		var y = bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			markersHost.updateMarkerTemplate(markerCount, itemIndex, markerBucket);
			return true;
		}
		return false;
	}
	,
	prepareFrame: function (frame, view) {
		frame.clearFrame();
		if (this.valueColumn() == null || this.parentSeries() == null || this.logicalSeriesLink() == null) {
			return;
		}
		if (this.logicalSeriesLink().lowValues().count() == 0 || this.logicalSeriesLink().highValues().count() == 0) {
			return;
		}
		this.getFramePreparer(view).prepareFrame(frame, view);
	}
	,
	terminatePolygon1: function (polygon, buckets, view) {
		var worldZeroValue = this.getWorldZeroValue(view);
		var zero = worldZeroValue;
		var positive = this.logicalSeriesLink().positive();
		var seriesCollection = positive ? this.parentSeries().stackedSeriesManager().positiveSeries() : this.parentSeries().stackedSeriesManager().negativeSeries();
		var seriesIndex = seriesCollection.indexOf(this);
		if (polygon.count() == 0) {
			return;
		}
		if (seriesIndex == -1) {
			return;
		}
		var foundValidSeries = false;
		for (var index = seriesIndex; index >= 0; index--) {
			if (foundValidSeries) {
				break;
			}
			if (index == 0) {
				polygon.add({ __x: $.ig.Enumerable.prototype.last$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				polygon.add({ __x: $.ig.Enumerable.prototype.first$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				break;
			}
			var previousSeries = $.ig.util.cast($.ig.FragmentBase.prototype.$type, seriesCollection.__inner[index - 1]);
			if (previousSeries != null && previousSeries.lineRasterizer() != null && previousSeries.lineRasterizer().flattenedLinePoints().count() > 0 && this.view() != null && previousSeries.validateSeries(this.view().viewport(), this.view().windowRect(), this.view())) {
				foundValidSeries = true;
				for (var i = previousSeries.lineRasterizer().flattenedLinePoints().count() - 1; i >= 0; i--) {
					polygon.add(previousSeries.lineRasterizer().flattenedLinePoints().__inner[i]);
				}
			}
		}
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		var isValid = $.ig.HorizontalAnchoredCategorySeries.prototype.validateSeries.call(this, viewportRect, windowRect, view);
		var xAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.parentSeries().getXAxis());
		var yAxis = this.parentSeries().getYAxis();
		if (this.parentSeries() == null || xAxis == null || xAxis.itemsSource() == null || yAxis == null || this.parentSeries().fastItemsSource() == null || xAxis.seriesViewer() == null || yAxis.seriesViewer() == null) {
			isValid = false;
		}
		if (this.valueColumn() == null) {
			return false;
		}
		if (Number.isInfinity(this.valueColumn().minimum()) && Number.isInfinity(this.valueColumn().maximum())) {
			isValid = false;
		}
		if ($.ig.util.isNaN(this.valueColumn().minimum()) && $.ig.util.isNaN(this.valueColumn().maximum())) {
			isValid = false;
		}
		return isValid;
	}
	,
	getWorldZeroValue: function (view) {
		var value = 0;
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.yAxis().isInverted(), effectiveViewportRect);
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && this.yAxis() != null) {
			value = this.yAxis().getScaledValue(0, yParams);
		}
		return value;
	}
	,
	getRange: function (axis) {
		return null;
	}
	,
	getLegendItemIndex: function () {
		if (this.parentSeries() == null) {
			return -1;
		}
		var index = this.parentSeries().index();
		var list = new $.ig.PointCollection(0);
		list.reverse();
		var toEnumerate = this.parentSeries().actualSeries();
		if (this.parentSeries().reverseLegendOrder()) {
			toEnumerate = $.ig.Enumerable.prototype.reverse$1($.ig.StackedFragmentSeries.prototype.$type, this.parentSeries().actualSeries());
		}
		var en = toEnumerate.getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			if (series.visualSeriesLink() == this) {
				return index;
			}
			if (this.parentSeries().actualLegend() == null || series.actualVisibility() != $.ig.Visibility.prototype.visible || series.actualLegendItemVisibility() != $.ig.Visibility.prototype.visible) {
				continue;
			}
			index++;
		}
		return -1;
	}
	,
	updateLegend: function (legend) {
		if (legend == null) {
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.HorizontalAnchoredCategorySeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		if (this.parentSeries() == null) {
			return;
		}
		var yAxis = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, this.parentSeries().getYAxis());
		if (yAxis == null) {
			return;
		}
		switch (propertyName) {
			case $.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName:
				this.anchoredView().trendLineManager().reset();
				if (yAxis != null && !yAxis.updateRange()) {
					this.parentSeries().getSeriesView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
				}
				break;
			case $.ig.Series.prototype.actualBrushPropertyName:
				if (this.logicalSeriesLink() != null) {
					this.logicalSeriesLink().actualBrush(this.actualBrush());
				}
				break;
		}
	}
	,
	renderThumbnail: function (viewportRect, surface) {
		$.ig.HorizontalAnchoredCategorySeries.prototype.renderThumbnail.call(this, viewportRect, surface);
	}
	,
	$type: new $.ig.Type('FragmentBase', $.ig.HorizontalAnchoredCategorySeries.prototype.$type)
}, true);

$.ig.util.defType('SplineFragmentBase', 'SplineSeriesBase', {
	init: function () {
		this.__parentSeries = null;
		$.ig.SplineSeriesBase.prototype.init.call(this);
	},
	_logicalSeriesLink: null,
	logicalSeriesLink: function (value) {
		if (arguments.length === 1) {
			this._logicalSeriesLink = value;
			return value;
		} else {
			return this._logicalSeriesLink;
		}
	}
	,
	__parentSeries: null,
	parentSeries: function (value) {
		if (arguments.length === 1) {
			this.__parentSeries = value;
			return value;
		} else {
			return this.__parentSeries;
		}
	}
	,
	isDropShadowSupported: function () {
		return false;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	prepareMarker: function (frame, bucket, collisionAvoider, itemIndex, markerCount, view, markerBucket) {
		var x = bucket[0];
		var y = bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			var marker = view.markers().item(markerCount);
			(marker.content()).item(this.fastItemsSource().item(itemIndex));
			marker.markerBucket(markerBucket);
			return true;
		}
		return false;
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		var isValid = $.ig.SplineSeriesBase.prototype.validateSeries.call(this, viewportRect, windowRect, view);
		var xAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.parentSeries().getXAxis());
		var yAxis = this.parentSeries().getYAxis();
		if (this.parentSeries() == null || xAxis == null || xAxis.itemsSource() == null || yAxis == null || this.parentSeries().fastItemsSource() == null || xAxis.seriesViewer() == null || yAxis.seriesViewer() == null) {
			isValid = false;
		}
		if (this.valueColumn() == null) {
			return false;
		}
		if (Number.isInfinity(this.valueColumn().minimum()) && Number.isInfinity(this.valueColumn().maximum())) {
			isValid = false;
		}
		if ($.ig.util.isNaN(this.valueColumn().minimum()) && $.ig.util.isNaN(this.valueColumn().maximum())) {
			isValid = false;
		}
		return isValid;
	}
	,
	getRange: function (axis) {
		return null;
	}
	,
	prepareDateTimeFrame1: function (frame, windowRect, viewportRect, xaxis, yaxis, view) {
		var $self = this;
		var sortingXAxis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xaxis);
		if (sortingXAxis == null) {
			return;
		}
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, xaxis.isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, yaxis.isInverted(), effectiveViewportRect);
		var singlePixelSpan = this.convertToSingle(xaxis.getUnscaledValue(2, xParams) - xaxis.getUnscaledValue(1, xParams));
		var markers = this.shouldDisplayMarkers();
		var markerCount = 0;
		var offset = this.getOffset(xaxis, windowRect, viewportRect, effectiveViewportRect);
		var total = function (i) { return Math.abs($self.parentSeries().lows()[i]) + $self.parentSeries().highs()[i]; };
		var xv = function (i) { return i; };
		var yv = function (i) {
			var index = sortingXAxis.sortedIndices().__inner[i];
			if ($.ig.util.cast($.ig.IStacked100Series.prototype.$type, $self.parentSeries()) !== null) {
				return $self.valueColumn().item(index) < 0 ? ($self.logicalSeriesLink().lowValues().__inner[index] + $self.valueColumn().item(index)) / total(index) * 100 : ($self.logicalSeriesLink().highValues().__inner[index] + $self.valueColumn().item(index)) / total(index) * 100;
			} else {
				return $self.valueColumn().item(index) < 0 ? $self.logicalSeriesLink().lowValues().__inner[index] + $self.valueColumn().item(index) : $self.logicalSeriesLink().highValues().__inner[index] + $self.valueColumn().item(index);
			}
		};
		var lastBucket = this.categoryView().bucketCalculator()._lastBucket;
		var firstBucket = this.categoryView().bucketCalculator()._firstBucket;
		var n = $.ig.truncate(Math.ceil(viewportRect.width() / (lastBucket - firstBucket)));
		var collisionAvoider = new $.ig.CollisionAvoider();
		var bucketSize = this.categoryView().bucketCalculator()._bucketSize;
		if (bucketSize <= 0 || (firstBucket <= 0 && lastBucket <= 0)) {
			this.categoryView().markers().count(markerCount);
			return;
		}
		var bucketCount = 0;
		for (var i = firstBucket; i < lastBucket + 1; ++i) {
			var bucket = null;
			var itemIndex = i * bucketSize;
			if (sortingXAxis != null && sortingXAxis.sortedIndices() != null && itemIndex >= 0 && itemIndex < sortingXAxis.sortedIndices().count()) {
				itemIndex = sortingXAxis.sortedIndices().__inner[itemIndex];
			}
			if (i >= (this.valueColumn().count() - 1)) {
				if (markers && this.prepareMarker(frame, $.ig.Enumerable.prototype.last$1(Array, frame._buckets), collisionAvoider, Math.min(itemIndex, this.fastItemsSource().count() - 1), markerCount, view, bucketCount - 1)) {
					++markerCount;
				}
				break;
			}
			var x1 = xv(i);
			var y1 = yv(i);
			var x2 = xv(i + 1);
			var y2 = yv(i + 1);
			var h = x2 - x1;
			var u1 = this.uColumn()[i];
			var u2 = this.uColumn()[i + 1];
			var unscaledValue = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i]);
			var firstPointX = xaxis.getScaledValue(unscaledValue, xParams) + offset;
			var firstPointY = yaxis.getScaledValue(y1, yParams);
			frame._buckets.add([ firstPointX, firstPointY, firstPointY ]);
			bucketCount++;
			for (var j = 1; j < n; ++j) {
				var pp = (j) / (n);
				var x = x1 + h * pp;
				var a = (x2 - x) / h;
				var b = (x - x1) / h;
				var y = a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
				var unscaledValueFirst = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i]);
				var unscaledValueNext = sortingXAxis.getUnscaledValueAt(sortingXAxis.sortedIndices().__inner[i + 1]);
				if (unscaledValueFirst == unscaledValueNext && y1 == y2) {
					break;
				}
				var currentUnscaledValue = unscaledValueFirst + (unscaledValueNext - unscaledValueFirst) * pp;
				x = xaxis.getScaledValue(currentUnscaledValue, xParams) + offset;
				y = yaxis.getScaledValue(y, yParams);
				frame._buckets.add([ x, y, y ]);
				bucketCount++;
			}
			if (markers) {
				bucket = [ firstPointX, firstPointY, firstPointY ];
			}
			if (markers && this.prepareMarker(frame, bucket, collisionAvoider, Math.min(itemIndex, this.fastItemsSource().count() - 1), markerCount, view, bucketCount - 1)) {
				++markerCount;
			}
		}
		this.categoryView().markers().count(markerCount);
	}
	,
	prepareFrame: function (frame, view) {
		var $self = this;
		frame.clearFrame();
		if (this.valueColumn() == null || this.parentSeries() == null || this.logicalSeriesLink() == null) {
			return;
		}
		if (this.logicalSeriesLink().lowValues().count() == 0 || this.logicalSeriesLink().highValues().count() == 0) {
			return;
		}
		if (this.categoryView().bucketCalculator()._bucketSize == 0) {
			return;
		}
		$.ig.SplineSeriesBase.prototype.prepareFrame.call(this, frame, view);
		if (frame._buckets.count() <= 1) {
			return;
		}
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var xaxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.parentSeries().getXAxis());
		var yaxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.parentSeries().getYAxis());
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, xaxis.isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, yaxis.isInverted(), effectiveViewportRect);
		frame._buckets.clear();
		frame._markers.clear();
		var markers = this.shouldDisplayMarkers();
		var markerCount = 0;
		var parentFrame;
		var parentView;
		if (view.isAlternateView()) {
			parentFrame = this.parentSeries().alternateFrame();
			parentView = this.parentSeries().alternateViews().item(view.alternateViewIdentifier());
		} else if (view == this.thumbnailView()) {
			parentFrame = this.parentSeries()._thumbnailFrame;
			parentView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, this.parentSeries().thumbnailView());
		} else {
			parentFrame = this.parentSeries()._currentFrame;
			parentView = this.parentSeries().categoryView();
		}
		var parentBucketSize = parentView.bucketCalculator()._bucketSize;
		var sortingXAxis = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xaxis);
		if (sortingXAxis != null && sortingXAxis.sortedIndices().count() != this.fastItemsSource().count()) {
			return;
		}
		var categoryMode = this.preferredCategoryMode(xaxis);
		if (categoryMode == $.ig.CategoryMode.prototype.mode0 && xaxis.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
			categoryMode = $.ig.CategoryMode.prototype.mode1;
		}
		var offset = 0;
		switch (categoryMode) {
			case $.ig.CategoryMode.prototype.mode0:
				offset = 0;
				break;
			case $.ig.CategoryMode.prototype.mode1:
				offset = 0.5 * xaxis.getCategorySize(windowRect, viewportRect, effectiveViewportRect);
				break;
			case $.ig.CategoryMode.prototype.mode2:
				var index = this.index();
				offset = xaxis.getGroupCenter(this.index(), windowRect, viewportRect, effectiveViewportRect);
				break;
		}
		if (xaxis.isInverted()) {
			offset = -offset;
		}
		var total = function (i) { return Math.abs($self.parentSeries().lows()[i]) + $self.parentSeries().highs()[i]; };
		var xv = function (i) { return i; };
		var yv = function (i) {
			var value = $self.valueColumn().item(i);
			if ($.ig.util.isNaN(value) || Number.isInfinity(value)) {
				value = 0;
			}
			if ($.ig.util.cast($.ig.IStacked100Series.prototype.$type, $self.parentSeries()) !== null) {
				if (total(i) == 0) {
					return 0;
				}
				return value < 0 ? ($self.logicalSeriesLink().lowValues().__inner[i] + value) / total(i) * 100 : ($self.logicalSeriesLink().highValues().__inner[i] + value) / total(i) * 100;
			}
			return value < 0 ? $self.logicalSeriesLink().lowValues().__inner[i] + value : $self.logicalSeriesLink().highValues().__inner[i] + value;
		};
		var bucketSize = view.bucketCalculator()._bucketSize;
		var endPointsFirstDerivative = this.splineType() == $.ig.SplineType.prototype.natural ? NaN : 0;
		if (xaxis != null && $.ig.util.cast($.ig.ISortingAxis.prototype.$type, xaxis) !== null && (xaxis).sortedIndices() != null) {
			var sorted = new $.ig.SafeSortedReadOnlyDoubleCollection(0, this.valueColumn(), (xaxis).sortedIndices());
			yv = function (i) { return sorted.item(i); };
		}
		this.uColumn($.ig.Numeric.prototype.safeCubicSplineFit(this.valueColumn().count(), xv, yv, endPointsFirstDerivative, endPointsFirstDerivative));
		var firstBucket = parentView.bucketCalculator()._firstBucket;
		var lastBucket = parentView.bucketCalculator()._lastBucket;
		var n = $.ig.truncate(Math.ceil(viewportRect.width() / (lastBucket - firstBucket)));
		var collisionAvoider = new $.ig.CollisionAvoider();
		if (sortingXAxis != null) {
			this.prepareDateTimeFrame1(frame, windowRect, viewportRect, xaxis, yaxis, view);
			return;
		}
		var bucketCount = 0;
		var markerBucket = 0;
		for (var i = firstBucket; i < lastBucket + 1; ++i) {
			if (i >= this.valueColumn().count()) {
				break;
			}
			var bucket = null;
			if (bucketSize == 1) {
				if (i >= (this.valueColumn().count() - 1)) {
					if (markers && frame._buckets.count() > 0 && this.prepareMarker(frame, frame._buckets.__inner[frame._buckets.count() - 1], collisionAvoider, Math.min(i * bucketSize, this.fastItemsSource().count() - 1), markerCount, view, bucketCount - 1)) {
						++markerCount;
					}
					break;
				}
				var x1 = xv(i);
				var x2 = xv(i + 1);
				var y1 = yv(i);
				var y2 = yv(i + 1);
				var h = x2 - x1;
				var u1 = this.uColumn()[i];
				var u2 = this.uColumn()[i + 1];
				var firstPointX = xaxis.getScaledValue(x1, xParams) + offset;
				var firstPointY = yaxis.getScaledValue(y1, yParams);
				frame._buckets.add([ firstPointX, firstPointY, firstPointY ]);
				bucketCount++;
				markerBucket = bucketCount;
				for (var j = 1; j < n; ++j) {
					var x = x1 + h * j / n;
					var a = (x2 - x) / h;
					var b = (x - x1) / h;
					var y = a * y1 + b * y2 + ((a * a * a - a) * u1 + (b * b * b - b) * u2) * (h * h) / 6;
					x = xaxis.getScaledValue(x, xParams) + offset;
					y = yaxis.getScaledValue(y, yParams);
					frame._buckets.add([ x, y, y ]);
					bucketCount++;
				}
				if (markers) {
					bucket = [ firstPointX, firstPointY, firstPointY ];
				}
			} else {
				bucket = view.bucketCalculator().getBucket(i);
				if (!isNaN(bucket[0])) {
					bucket[0] = (xaxis.getScaledValue(bucket[0], xParams) + offset);
					bucket[1] = yaxis.getScaledValue(bucket[1], yParams);
					bucket[2] = yaxis.getScaledValue(bucket[2], yParams);
					frame._buckets.add(bucket);
				}
			}
			if (markers && this.prepareMarker(frame, bucket, collisionAvoider, Math.min(i * bucketSize, this.fastItemsSource().count() - 1), markerCount, view, markerBucket - 1)) {
				++markerCount;
			}
		}
		view.markers().count(markerCount);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.SplineSeriesBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.Series.prototype.actualBrushPropertyName:
				if (this.logicalSeriesLink() != null) {
					this.logicalSeriesLink().actualBrush(this.actualBrush());
				}
				break;
		}
	}
	,
	$type: new $.ig.Type('SplineFragmentBase', $.ig.SplineSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('SplineAreaFragment', 'SplineFragmentBase', {
	init: function () {
		$.ig.SplineFragmentBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.SplineAreaFragment.prototype.$type);
	},
	createView: function () {
		return new $.ig.SplineAreaFragmentView(this);
	}
	,
	onViewCreated: function (view) {
		$.ig.SplineFragmentBase.prototype.onViewCreated.call(this, view);
		this.splineAreaFragmentView($.ig.util.cast($.ig.SplineAreaFragmentView.prototype.$type, view));
	}
	,
	_splineAreaFragmentView: null,
	splineAreaFragmentView: function (value) {
		if (arguments.length === 1) {
			this._splineAreaFragmentView = value;
			return value;
		} else {
			return this._splineAreaFragmentView;
		}
	}
	,
	onApplyTemplate: function () {
		$.ig.SplineFragmentBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	testRangeAreaOver: function (position, isFinger) {
		var pathData1 = this.splineAreaFragmentView()._polygon0.data();
		if (this.testOverPoly(position, pathData1)) {
			return true;
		}
		var pathData2 = this.splineAreaFragmentView()._polygon1.data();
		if (this.testOverPoly(position, pathData2)) {
			return true;
		}
		return false;
	}
	,
	testHit: function (position, isFinger) {
		if (this.testNearStrokes(position, isFinger)) {
			return true;
		}
		if (this.testRangeAreaOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	testNearStrokes: function (position, isFinger) {
		var pathData1 = this.splineAreaFragmentView()._polyline0.data();
		if (this.testNearStroke(position, isFinger, pathData1)) {
			return true;
		}
		var pathData2 = this.splineAreaFragmentView()._polyline1.data();
		if (this.testNearStroke(position, isFinger, pathData2)) {
			return true;
		}
		return false;
	}
	,
	_points: null,
	points: function (value) {
		if (arguments.length === 1) {
			this._points = value;
			return value;
		} else {
			return this._points;
		}
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.SplineFragmentBase.prototype.clearRendering.call(this, wipeClean, view);
		var splineAreaFragmentView = view;
		splineAreaFragmentView.clearRendering();
	}
	,
	renderFrame: function (frame, view) {
		var $self = this;
		$.ig.SplineFragmentBase.prototype.renderFrame.call(this, frame, view);
		this.lineRasterizer().isSortingAxis($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.xAxis()) !== null ? true : false);
		var splineView = $.ig.util.cast($.ig.SplineAreaFragmentView.prototype.$type, view);
		var bucketSize = view.bucketCalculator()._bucketSize;
		this.lineRasterizer().rasterizePolygonPaths(splineView._polygon0, splineView._polyline0, splineView._polygon1, splineView._polyline1, frame._buckets.count(), frame._buckets, true, bucketSize, this.resolution(), function (p0, l0, p1, l1, f) { $self.terminatePolygon1(p0, frame._buckets, view); }, $.ig.UnknownValuePlotting.prototype.dontPlot);
		splineView._polygon0.__opacity = this.actualAreaFillOpacity();
		splineView._polygon1.__opacity = 0.5 * this.actualAreaFillOpacity();
	}
	,
	renderThumbnail: function (viewportRect, surface) {
		$.ig.SplineFragmentBase.prototype.renderThumbnail.call(this, viewportRect, surface);
	}
	,
	terminatePolygon1: function (polygon, buckets, view) {
		var worldZeroValue = this.getWorldZeroValue(view);
		var zero = worldZeroValue;
		var positive = this.logicalSeriesLink().positive();
		var seriesCollection = positive ? this.parentSeries().stackedSeriesManager().positiveSeries() : this.parentSeries().stackedSeriesManager().negativeSeries();
		var seriesIndex = seriesCollection.indexOf(this);
		if (polygon.count() == 0) {
			return;
		}
		if (seriesIndex == -1) {
			return;
		}
		var foundValidSeries = false;
		for (var index = seriesIndex; index >= 0; index--) {
			if (foundValidSeries) {
				break;
			}
			if (index == 0) {
				polygon.add({ __x: $.ig.Enumerable.prototype.last$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				polygon.add({ __x: $.ig.Enumerable.prototype.first$1($.ig.Point.prototype.$type, polygon).__x, __y: zero, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
				break;
			}
			var previousSeries = $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, seriesCollection.__inner[index - 1]);
			if (previousSeries != null && previousSeries.lineRasterizer() != null && previousSeries.lineRasterizer().flattenedLinePoints().count() > 0 && this.view() != null && previousSeries.validateSeries(this.view().viewport(), this.view().windowRect(), this.view())) {
				foundValidSeries = true;
				for (var i = previousSeries.lineRasterizer().flattenedLinePoints().count() - 1; i >= 0; i--) {
					polygon.add(previousSeries.lineRasterizer().flattenedLinePoints().__inner[i]);
				}
			}
		}
	}
	,
	getWorldZeroValue: function (view) {
		var value = 0;
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.yAxis().isInverted(), effectiveViewportRect);
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && this.yAxis() != null) {
			value = this.yAxis().getScaledValue(0, yParams);
		}
		return value;
	}
	,
	updateActualAreaFillOpacity: function () {
		var chart = ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer()));
		if (chart != null) {
			this.actualAreaFillOpacity($.ig.util.isNaN(this.areaFillOpacity()) ? this.parentSeries().actualAreaFillOpacity() : this.areaFillOpacity());
		}
	}
	,
	$type: new $.ig.Type('SplineAreaFragment', $.ig.SplineFragmentBase.prototype.$type)
}, true);

$.ig.util.defType('SplineFragment', 'SplineFragmentBase', {
	init: function () {
		$.ig.SplineFragmentBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.SplineFragment.prototype.$type);
	},
	createView: function () {
		return new $.ig.SplineFragmentView(this);
	}
	,
	_splineFragmentView: null,
	splineFragmentView: function (value) {
		if (arguments.length === 1) {
			this._splineFragmentView = value;
			return value;
		} else {
			return this._splineFragmentView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.SplineFragmentBase.prototype.onViewCreated.call(this, view);
		this.splineFragmentView(view);
	}
	,
	testRangeAreaOver: function (position, isFinger) {
		var pathData1 = this.splineFragmentView()._polygon01.data();
		if (this.testOverPoly(position, pathData1)) {
			return true;
		}
		return false;
	}
	,
	testHit: function (position, isFinger) {
		if (this.testNearStrokes(position, isFinger)) {
			return true;
		}
		if (this.testRangeAreaOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	testNearStrokes: function (position, isFinger) {
		var pathData1 = this.splineFragmentView()._polyline0.data();
		if (this.testNearStroke(position, isFinger, pathData1)) {
			return true;
		}
		var pathData2 = this.splineFragmentView()._polyline1.data();
		if (this.testNearStroke(position, isFinger, pathData2)) {
			return true;
		}
		return false;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.SplineFragmentBase.prototype.clearRendering.call(this, wipeClean, view);
		var splineFragmentView = view;
		splineFragmentView.clearRendering();
	}
	,
	renderFrame: function (frame, view) {
		$.ig.SplineFragmentBase.prototype.renderFrame.call(this, frame, view);
		this.lineRasterizer().isSortingAxis($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.xAxis()) !== null ? true : false);
		var splineView = $.ig.util.cast($.ig.SplineFragmentView.prototype.$type, view);
		var bucketSize = splineView.bucketCalculator()._bucketSize;
		this.lineRasterizer().rasterizePolylinePaths(splineView._polyline0, splineView._polygon01, splineView._polyline1, frame._buckets.count(), frame._buckets, true, $.ig.UnknownValuePlotting.prototype.dontPlot, this.getLineClipper(frame._buckets, frame._buckets.count() - 1, view.viewport(), view.windowRect()), bucketSize, this.resolution());
	}
	,
	$type: new $.ig.Type('SplineFragment', $.ig.SplineFragmentBase.prototype.$type)
}, true);

$.ig.util.defType('StackedSeriesBase', 'CategorySeries', {
	init: function () {
		this.__previousSeriesKeys = new $.ig.Dictionary$2(String, $.ig.Boolean.prototype.$type, 0);
		$.ig.CategorySeries.prototype.init.call(this);
		this.series(new $.ig.StackedSeriesCollection());
		var $t = this.series();
		$t.collectionResetting = $.ig.Delegate.prototype.combine($t.collectionResetting, this.series_CollectionResetting.runOn(this));
		var $t1 = this.series();
		$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, this.series_CollectionChanged.runOn(this));
		this.framePreparer(new $.ig.StackedSeriesFramePreparer(1, this, this.stackedView(), this, this, this.stackedView().bucketCalculator()));
		this.stackedSeriesManager(new $.ig.StackedSeriesManager(this));
		this.autoGeneratedSeries(new $.ig.StackedSeriesCollection());
		var $t2 = this.autoGeneratedSeries();
		$t2.collectionChanged = $.ig.Delegate.prototype.combine($t2.collectionChanged, this.series_CollectionChanged.runOn(this));
		var $t3 = this.autoGeneratedSeries();
		$t3.collectionResetting = $.ig.Delegate.prototype.combine($t3.collectionResetting, this.autoGeneratedSeries_CollectionResetting.runOn(this));
	},
	isHighlightingSupported: function () {
		return false;
	}
	,
	createView: function () {
		return new $.ig.StackedSeriesView(this);
	}
	,
	_stackedView: null,
	stackedView: function (value) {
		if (arguments.length === 1) {
			this._stackedView = value;
			return value;
		} else {
			return this._stackedView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.CategorySeries.prototype.onViewCreated.call(this, view);
		this.stackedView(view);
	}
	,
	onViewportChanged: function (oldViewportRect, newViewportRect) {
		$.ig.CategorySeries.prototype.onViewportChanged.call(this, oldViewportRect, newViewportRect);
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.visualSeriesLink().view().viewport(newViewportRect);
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	autoGenerateSeries: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedSeriesBase.prototype.autoGenerateSeriesProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedSeriesBase.prototype.autoGenerateSeriesProperty);
		}
	}
	,
	reverseLegendOrder: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedSeriesBase.prototype.reverseLegendOrderProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedSeriesBase.prototype.reverseLegendOrderProperty);
		}
	}
	,
	isStacked: function () {
		return true;
	}
	,
	seriesCreated: null,
	seriesVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedSeriesBase.prototype.seriesVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedSeriesBase.prototype.seriesVisibilityProperty));
		}
	}
	,
	_minimum: 0,
	minimum: function (value) {
		if (arguments.length === 1) {
			this._minimum = value;
			return value;
		} else {
			return this._minimum;
		}
	}
	,
	_maximum: 0,
	maximum: function (value) {
		if (arguments.length === 1) {
			this._maximum = value;
			return value;
		} else {
			return this._maximum;
		}
	}
	,
	_highs: null,
	highs: function (value) {
		if (arguments.length === 1) {
			this._highs = value;
			return value;
		} else {
			return this._highs;
		}
	}
	,
	_lows: null,
	lows: function (value) {
		if (arguments.length === 1) {
			this._lows = value;
			return value;
		} else {
			return this._lows;
		}
	}
	,
	_framePreparer: null,
	framePreparer: function (value) {
		if (arguments.length === 1) {
			this._framePreparer = value;
			return value;
		} else {
			return this._framePreparer;
		}
	}
	,
	_stackedSeriesManager: null,
	stackedSeriesManager: function (value) {
		if (arguments.length === 1) {
			this._stackedSeriesManager = value;
			return value;
		} else {
			return this._stackedSeriesManager;
		}
	}
	,
	_autoGeneratedSeries: null,
	autoGeneratedSeries: function (value) {
		if (arguments.length === 1) {
			this._autoGeneratedSeries = value;
			return value;
		} else {
			return this._autoGeneratedSeries;
		}
	}
	,
	actualSeries: function () {
		return this.autoGenerateSeries() ? this.autoGeneratedSeries() : this.series();
	}
	,
	autoGeneratedSeries_CollectionResetting: function (sender, e) {
		var en = this.autoGeneratedSeries().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			if (this.stackedSeriesManager() != null && this.stackedSeriesManager().seriesLogical().contains(series)) {
				series.parentSeries(null);
				this.stackedSeriesManager().seriesLogical().remove(series);
			}
		}
	}
	,
	series_CollectionResetting: function (sender, e) {
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			if (this.stackedSeriesManager() != null && this.stackedSeriesManager().seriesLogical().contains(series)) {
				series.parentSeries(null);
				this.stackedSeriesManager().seriesLogical().remove(series);
			}
		}
	}
	,
	series_CollectionChanged: function (sender, e) {
		if (e.oldItems() != null) {
			var en = e.oldItems().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				if (this.stackedSeriesManager() != null && this.stackedSeriesManager().seriesLogical().contains(series)) {
					series.parentSeries(null);
					this.stackedSeriesManager().seriesLogical().remove(series);
				}
			}
		}
		if (e.newItems() != null) {
			var counter = e.newStartingIndex();
			var en1 = e.newItems().getEnumerator();
			while (en1.moveNext()) {
				var series1 = en1.current();
				if (this.stackedSeriesManager() != null && !this.stackedSeriesManager().seriesLogical().contains(series1)) {
					series1.parentSeries(this);
					series1.updateIsDropShadowEnabled();
					series1.updateShadowBlur();
					series1.updateShadowColor();
					series1.updateUseSingleShadow();
					series1.updateShadowOffsetX();
					series1.updateShadowOffsetY();
					series1.updateBrush();
					series1.updateDashArray();
					series1.updateDashCap();
					series1.updateEndCap();
					series1.updateIsHitTestVisible();
					series1.updateLegendItemBadgeTemplate();
					series1.updateLegendItemTemplate();
					series1.updateLegendItemVisibility();
					series1.updateMarkerTemplate();
					series1.updateMarkerType();
					series1.updateMarkerBrush();
					series1.updateMarkerOutline();
					series1.updateMarkerStyle();
					series1.updateMarkerTemplate();
					series1.updateOpacity();
					series1.updateOpacityMask();
					series1.updateOutline();
					series1.updateAreaFillOpacity();
					series1.updateRadiusX();
					series1.updateRadiusY();
					series1.updateStartCap();
					series1.updateThickness();
					series1.updateToolTip();
					series1.updateUseLightweightMarkers();
					series1.updateVisibility();
					if (!this.autoGenerateSeries()) {
						this.stackedSeriesManager().seriesLogical().insert(counter, series1);
						counter++;
					}
				}
			}
		}
		if (!this.autoGenerateSeries()) {
			this.updateAxisRanges();
		}
	}
	,
	simulateHover: function (point) {
		var source = null;
		var data = null;
		var fragment = null;
		this.chart().view().onMouseOver(point, true, false);
	}
	,
	getFramePreparer: function (view) {
		if (view != null && view.isThumbnailView()) {
			if (view.isAlternateView()) {
				return new $.ig.StackedSeriesFramePreparer(1, $.ig.util.cast($.ig.IIsCategoryBased.prototype.$type, this), $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, view), view, this, view.bucketCalculator());
			} else {
				var thumbnailView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, this.thumbnailView());
				return new $.ig.StackedSeriesFramePreparer(1, this, $.ig.util.cast($.ig.ISupportsMarkers.prototype.$type, thumbnailView), this.seriesViewer().view().overviewPlusDetailViewportHost(), this, thumbnailView.bucketCalculator());
			}
		} else {
			return this.framePreparer();
		}
	}
	,
	prepareFrame: function (frame, view) {
		frame.clearFrame();
		this.prepareData();
		this.getFramePreparer(view).prepareFrame(frame, view);
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.CategorySeries.prototype.clearRendering.call(this, wipeClean, view);
		var en = this.actualSeries().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			if (series.visualSeriesLink() != null) {
				series.visualSeriesLink().clearRendering(wipeClean, series.visualSeriesLink().view());
			}
		}
	}
	,
	calculateStackedValues: function () {
		this.prepareData();
	}
	,
	updateAxisRanges: function () {
		var xAxis = this.getXAxis();
		if (xAxis != null) {
			xAxis.updateRange1(true);
		}
		var yAxis = this.getYAxis();
		if (yAxis != null) {
			yAxis.updateRange1(true);
		}
	}
	,
	scrollIntoView: function (item) {
		var index = this.fastItemsSource() != null ? this.fastItemsSource().indexOf(item) : -1;
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		var unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
		var effectiveViewportRect = this.getEffectiveViewportForUnitViewport(this.view());
		if (index >= 0 && $.ig.Rect.prototype.l_op_Inequality(windowRect, null) && $.ig.Rect.prototype.l_op_Inequality(viewportRect, null)) {
			var xAxis = this.getXAxis();
			if (xAxis != null) {
				var xParams = new $.ig.ScalerParams(0, unitRect, unitRect, xAxis.isInverted(), effectiveViewportRect);
				var cx = xAxis.getScaledValue(index, xParams);
				if (cx < windowRect.left() + 0.1 * windowRect.width()) {
					cx = cx + 0.4 * windowRect.width();
				}
				if (cx > windowRect.right() - 0.1 * windowRect.width()) {
					cx = cx - 0.4 * windowRect.width();
				}
				windowRect.x(cx - 0.5 * windowRect.width());
			}
			var yAxis = this.getYAxis();
			if (yAxis != null && this.highs() != null && index < this.highs().length) {
				var yParams = new $.ig.ScalerParams(0, unitRect, unitRect, yAxis.isInverted(), effectiveViewportRect);
				var high = yAxis.getScaledValue(this.highs()[index], yParams);
				var low = yAxis.getScaledValue(this.lows()[index], yParams);
				if (!$.ig.util.isNaN(high) && !$.ig.util.isNaN(low)) {
					var height = Math.abs(low - high);
					if (windowRect.height() < height) {
						windowRect.height(height);
						windowRect.y(Math.min(low, high));
					} else {
						if (low < windowRect.top() + 0.1 * windowRect.height()) {
							low = low + 0.4 * windowRect.height();
						}
						if (low > windowRect.bottom() - 0.1 * windowRect.height()) {
							low = low - 0.4 * windowRect.height();
						}
						windowRect.y(low - 0.5 * windowRect.height());
					}
				}
			}
			this.syncLink().windowNotify(this.seriesViewer(), windowRect);
		}
		return index >= 0;
	}
	,
	getRange: function (axis) {
		if (this.lows() == null || this.lows().length == 0 || this.highs() == null || this.highs().length == 0) {
			return null;
		}
		if (axis == this.getXAxis()) {
			var max = Math.min(this.lows().length, this.highs().length);
			return new $.ig.AxisRange(0, max - 1);
		}
		if (axis == this.getYAxis()) {
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	shouldDisplayMarkers: function () {
		return false;
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		this.updateNumericAxisRange();
		this.renderSeries(false);
	}
	,
	getSeriesView: function () {
		return this.stackedView();
	}
	,
	getScaledWorldZeroValue: function () {
		var value = 0;
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.getYAxis());
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && yAxis != null) {
			var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, yAxis.isInverted(), effectiveViewportRect);
			value = yAxis.getScaledValue(yAxis.referenceValue(), yParams);
		}
		return value;
	}
	,
	getUnscaledWorldZeroValue: function () {
		var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.getYAxis());
		if (yAxis != null) {
			return yAxis.referenceValue();
		}
		return 0;
	}
	,
	getFragmentSeriesIndex: function (series) {
		return this.index() < 0 || this.actualSeries() == null || this.actualSeries().count() == 0 ? -1 : this.index() + this.actualSeries().indexOf(series);
	}
	,
	getFragmentItemIndex: function (world) {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var xAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.getXAxis());
		var rowIndex = -1;
		if (xAxis != null && !windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var p = new $.ig.ScalerParams(0, windowRect, viewportRect, xAxis.isInverted(), effectiveViewportRect);
			var contentViewport = this.getContentViewport(this.view());
			var left = xAxis.getUnscaledValue(contentViewport.left(), p);
			var right = xAxis.getUnscaledValue(contentViewport.right(), p);
			var windowX = (world.__x - windowRect.left()) / windowRect.width();
			var bucket = left + (windowX * (right - left));
			if (xAxis.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
				bucket -= 0.5;
			}
			var bucketNumber = $.ig.truncate(Math.round(bucket));
			rowIndex = bucketNumber;
		}
		return rowIndex;
	}
	,
	validateFragmentSeries: function (series, viewportRect, windowRect, view) {
		var isValid = true;
		var xAxis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.getXAxis());
		var yAxis = $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.getYAxis());
		if (!view.hasSurface() || windowRect.isEmpty() || viewportRect.isEmpty() || xAxis == null || xAxis.itemsSource() == null || yAxis == null || this.fastItemsSource() == null || xAxis.seriesViewer() == null || yAxis.seriesViewer() == null || yAxis.actualMinimumValue() == yAxis.actualMaximumValue()) {
			isValid = false;
		}
		var categoryView = view;
		var bucketSize = categoryView.bucketCalculator()._bucketSize;
		if (series.valueColumn() == null || series.valueColumn().count() == 0 || bucketSize < 1 || series.__visibility != $.ig.Visibility.prototype.visible) {
			isValid = false;
		}
		return isValid;
	}
	,
	__previousSeriesKeys: null,
	generateSeries: function () {
		if (this.seriesViewer() == null || this.stackedSeriesManager() == null) {
			return;
		}
		if (!this.autoGenerateSeries()) {
			this.autoGeneratedSeries().clear();
			var en = this.series().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				if (!this.stackedSeriesManager().seriesLogical().contains(series)) {
					this.stackedSeriesManager().seriesLogical().add(series);
				}
			}
			this.updateAxisRanges();
			return;
		}
	}
	,
	renderFrame: function (frame, view) {
		$.ig.CategorySeries.prototype.renderFrame.call(this, frame, view);
		this.stackedSeriesManager().renderSeries();
	}
	,
	renderFragment: function (series, frame, view) {
	}
	,
	prepareData: function () {
		if (this.fastItemsSource() == null) {
			return;
		}
		var count = this.fastItemsSource().count();
		this.highs(new Array(count));
		this.lows(new Array(count));
		for (var i = 0; i < count; i++) {
			this.highs()[i] = 0;
			this.lows()[i] = 0;
		}
		this.minimum(Number.POSITIVE_INFINITY);
		this.maximum(Number.NEGATIVE_INFINITY);
		var zero = 0;
		var en = this.actualSeries().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			this.fastItemsSource().deregisterColumn(series.valueColumn());
			series.valueColumn(this.registerDoubleColumn(series.valueMemberPath()));
			if (series.visualSeriesLink() != null) {
				series.visualSeriesLink().shouldSuspendChangedNotification(true);
				series.visualSeriesLink().valueColumn(series.valueColumn());
				series.visualSeriesLink().shouldSuspendChangedNotification(false);
			}
			series.positive(true);
			if (series.valueColumn() != null) {
				series.highValues().clear();
				series.lowValues().clear();
				for (var i1 = 0; i1 < series.valueColumn().count(); i1++) {
					var value = series.valueColumn().item(i1);
					if (value < zero) {
						series.highValues().add(zero);
						series.lowValues().add(this.lows()[i1]);
						this.lows()[i1] = this.lows()[i1] + value;
						if (series.positive()) {
							series.positive(false);
						}
					} else if (value >= zero) {
						series.highValues().add(this.highs()[i1]);
						series.lowValues().add(zero);
						this.highs()[i1] = this.highs()[i1] + value;
					} else if ($.ig.util.isNaN(value) || Number.isInfinity(value)) {
						series.highValues().add(this.highs()[i1]);
						series.lowValues().add(this.lows()[i1]);
					}
				}
			}
		}
		for (var i2 = 0; i2 < count; i2++) {
			this.minimum(Math.min(this.minimum(), this.lows()[i2]));
			this.maximum(Math.max(this.maximum(), this.highs()[i2]));
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.CategorySeries.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.CategorySeries.prototype.seriesViewerPropertyName:
				if (this.actualSeries() != null) {
					var en = this.actualSeries().getEnumerator();
					while (en.moveNext()) {
						var series = en.current();
						series.chart(this.seriesViewer());
					}
					this.stackedSeriesManager().renderSeries();
				}
				break;
			case $.ig.Series.prototype.itemsSourcePropertyName:
				if (this.actualSeries() != null) {
					var en1 = this.actualSeries().getEnumerator();
					while (en1.moveNext()) {
						var series1 = en1.current();
						if (series1.visualSeriesLink() != null) {
							series1.visualSeriesLink().itemsSource(newValue);
						}
					}
				}
				break;
			case $.ig.CategorySeries.prototype.fastItemsSourcePropertyName:
				if (this.autoGenerateSeries()) {
					this.generateSeries();
				}
				if (!this.updateNumericAxisRange()) {
					this.stackedView().bucketCalculator().calculateBuckets(this.resolution());
				}
				this.renderSeries(false);
				break;
			case $.ig.StackedSeriesBase.prototype.autoGenerateSeriesPropertyName:
				this.generateSeries();
				break;
			case $.ig.StackedSeriesBase.prototype.reverseLegendOrderPropertyName:
				if (this.seriesViewer() != null) {
					this.seriesViewer().onLegendSortChanged1(this.stackedSeriesManager().seriesVisual());
				}
				break;
			case $.ig.StackedSeriesBase.prototype.seriesVisibilityPropertyName:
				var en2 = this.actualSeries().getEnumerator();
				while (en2.moveNext()) {
					var series2 = en2.current();
					series2.updateVisibility();
				}
				break;
			case $.ig.Series.prototype.brushPropertyName:
				var en3 = this.actualSeries().getEnumerator();
				while (en3.moveNext()) {
					var series3 = en3.current();
					series3.updateBrush();
				}
				break;
			case $.ig.Series.prototype.dashArrayPropertyName:
				var en4 = this.actualSeries().getEnumerator();
				while (en4.moveNext()) {
					var series4 = en4.current();
					series4.updateDashArray();
				}
				break;
			case $.ig.Series.prototype.dashCapPropertyName:
				var en5 = this.actualSeries().getEnumerator();
				while (en5.moveNext()) {
					var series5 = en5.current();
					series5.updateDashCap();
				}
				break;
			case $.ig.Series.prototype.isDropShadowEnabledPropertyName:
				var en6 = this.actualSeries().getEnumerator();
				while (en6.moveNext()) {
					var series6 = en6.current();
					series6.updateIsDropShadowEnabled();
				}
				break;
			case $.ig.Series.prototype.shadowBlurPropertyName:
				var en7 = this.actualSeries().getEnumerator();
				while (en7.moveNext()) {
					var series7 = en7.current();
					series7.updateShadowBlur();
				}
				break;
			case $.ig.Series.prototype.shadowColorPropertyName:
				var en8 = this.actualSeries().getEnumerator();
				while (en8.moveNext()) {
					var series8 = en8.current();
					series8.updateShadowColor();
				}
				break;
			case $.ig.Series.prototype.useSingleShadowPropertyName:
				var en9 = this.actualSeries().getEnumerator();
				while (en9.moveNext()) {
					var series9 = en9.current();
					series9.updateUseSingleShadow();
				}
				break;
			case $.ig.Series.prototype.shadowOffsetXPropertyName:
				var en10 = this.actualSeries().getEnumerator();
				while (en10.moveNext()) {
					var series10 = en10.current();
					series10.updateShadowOffsetX();
				}
				break;
			case $.ig.Series.prototype.shadowOffsetYPropertyName:
				var en11 = this.actualSeries().getEnumerator();
				while (en11.moveNext()) {
					var series11 = en11.current();
					series11.updateShadowOffsetY();
				}
				break;
			case $.ig.Series.prototype.endCapPropertyName:
				var en12 = this.actualSeries().getEnumerator();
				while (en12.moveNext()) {
					var series12 = en12.current();
					series12.updateEndCap();
				}
				break;
			case "IsHitTestVisible":
				var en13 = this.actualSeries().getEnumerator();
				while (en13.moveNext()) {
					var series13 = en13.current();
					series13.updateIsHitTestVisible();
				}
				break;
			case $.ig.Series.prototype.legendItemBadgeTemplatePropertyName:
				var en14 = this.actualSeries().getEnumerator();
				while (en14.moveNext()) {
					var series14 = en14.current();
					series14.updateLegendItemBadgeTemplate();
				}
				break;
			case $.ig.Series.prototype.legendItemTemplatePropertyName:
				var en15 = this.actualSeries().getEnumerator();
				while (en15.moveNext()) {
					var series15 = en15.current();
					series15.updateLegendItemTemplate();
				}
				break;
			case $.ig.Series.prototype.legendItemVisibilityPropertyName:
				var en16 = this.actualSeries().getEnumerator();
				while (en16.moveNext()) {
					var series16 = en16.current();
					series16.updateLegendItemVisibility();
				}
				break;
			case $.ig.MarkerSeries.prototype.markerTemplatePropertyName:
				var en17 = this.actualSeries().getEnumerator();
				while (en17.moveNext()) {
					var series17 = en17.current();
					series17.updateMarkerTemplate();
				}
				break;
			case $.ig.MarkerSeries.prototype.markerTypePropertyName:
				var en18 = this.actualSeries().getEnumerator();
				while (en18.moveNext()) {
					var series18 = en18.current();
					series18.updateMarkerType();
				}
				break;
			case $.ig.MarkerSeries.prototype.markerBrushPropertyName:
				var en19 = this.actualSeries().getEnumerator();
				while (en19.moveNext()) {
					var series19 = en19.current();
					series19.updateMarkerBrush();
				}
				break;
			case $.ig.MarkerSeries.prototype.markerOutlinePropertyName:
				var en20 = this.actualSeries().getEnumerator();
				while (en20.moveNext()) {
					var series20 = en20.current();
					series20.updateMarkerOutline();
				}
				break;
			case $.ig.MarkerSeries.prototype.markerStylePropertyName:
				var en21 = this.actualSeries().getEnumerator();
				while (en21.moveNext()) {
					var series21 = en21.current();
					series21.updateMarkerStyle();
				}
				break;
			case "Opacity":
				var en22 = this.actualSeries().getEnumerator();
				while (en22.moveNext()) {
					var series22 = en22.current();
					series22.updateOpacity();
				}
				break;
			case "OpacityMask":
				var en23 = this.actualSeries().getEnumerator();
				while (en23.moveNext()) {
					var series23 = en23.current();
					series23.updateOpacityMask();
				}
				break;
			case "AreaFillOpacity":
				var en24 = this.actualSeries().getEnumerator();
				while (en24.moveNext()) {
					var series24 = en24.current();
					series24.updateAreaFillOpacity();
				}
				break;
			case $.ig.Series.prototype.outlinePropertyName:
				var en25 = this.actualSeries().getEnumerator();
				while (en25.moveNext()) {
					var series25 = en25.current();
					series25.updateOutline();
				}
				break;
			case $.ig.Series.prototype.startCapPropertyName:
				var en26 = this.actualSeries().getEnumerator();
				while (en26.moveNext()) {
					var series26 = en26.current();
					series26.updateStartCap();
				}
				break;
			case $.ig.Series.prototype.thicknessPropertyName:
				var en27 = this.actualSeries().getEnumerator();
				while (en27.moveNext()) {
					var series27 = en27.current();
					series27.updateThickness();
				}
				break;
			case $.ig.Series.prototype.toolTipPropertyName:
				var en28 = this.actualSeries().getEnumerator();
				while (en28.moveNext()) {
					var series28 = en28.current();
					series28.updateToolTip();
				}
				break;
			case $.ig.MarkerSeries.prototype.useLightweightMarkersPropertyName:
				var en29 = this.actualSeries().getEnumerator();
				while (en29.moveNext()) {
					var series29 = en29.current();
					series29.updateUseLightweightMarkers();
				}
				break;
		}
	}
	,
	currentCategoryMode: function () {
		return this.preferredCategoryMode($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.getXAxis()));
	}
	,
	scaler: function () {
		return $.ig.util.cast($.ig.ICategoryScaler.prototype.$type, this.getXAxis());
	}
	,
	yScaler: function () {
		return $.ig.util.cast($.ig.IScaler.prototype.$type, this.getYAxis());
	}
	,
	bucketizer: function () {
		return this.categoryView().bucketCalculator();
	}
	,
	currentMode2Index: function () {
		return this.getMode2Index();
	}
	,
	provideCollisionDetector: function () {
		return new $.ig.CollisionAvoider();
	}
	,
	shouldTransitionIn: function () {
		return false;
	}
	,
	isDropShadowSupported: function () {
		return false;
	}
	,
	renderThumbnail: function (viewportRect, surface) {
		var dirty = this.thumbnailDirty();
		$.ig.CategorySeries.prototype.renderThumbnail.call(this, viewportRect, surface);
		if (!dirty) {
			this.view().prepSurface(surface);
			return;
		}
		this.view().prepSurface(surface);
		if (this.clearAndAbortIfInvalid1(this.thumbnailView())) {
			return;
		}
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var fragment = en.current();
			fragment.visualSeriesLink().renderThumbnail(viewportRect, surface);
		}
		this.thumbnailDirty(false);
	}
	,
	_alternateFrame: null,
	alternateFrame: function (value) {
		if (arguments.length === 1) {
			this._alternateFrame = value;
			return value;
		} else {
			return this._alternateFrame;
		}
	}
	,
	renderAlternateView: function (viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio) {
		$.ig.CategorySeries.prototype.renderAlternateView.call(this, viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio);
		var view = this.alternateViews().item(viewIdentifier);
		(view).bucketCalculator().calculateBuckets(this.resolution());
		view.prepAltSurface(surface);
		if (this.clearAndAbortIfInvalid1(view)) {
			return;
		}
		if (this.alternateFrame() == null) {
			this.alternateFrame(new $.ig.CategoryFrame(3));
		}
		this.alternateFrame().clearFrame();
		this.prepareData();
		this.getFramePreparer(view).prepareFrame(this.alternateFrame(), view);
		this.renderFrame(this.alternateFrame(), view);
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var fragment = en.current();
			fragment.visualSeriesLink().renderAlternateView(viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio);
		}
	}
	,
	exportVisualData: function () {
		var svd = new $.ig.StackedSeriesVisualData();
		svd.viewport(this.viewport());
		svd.type(this.getType().typeName());
		svd.name(this.name());
		var en = this.series().getEnumerator();
		while (en.moveNext()) {
			var fragment = en.current();
			var fragmentVisualData = new $.ig.SeriesVisualData();
			fragmentVisualData.viewport(this.viewport());
			fragmentVisualData.type(fragment.getType().typeName());
			fragmentVisualData.name(fragment.name());
			fragment.visualSeriesLink().view().exportViewShapes(fragmentVisualData);
			svd.fragmentSeries().add(fragmentVisualData);
		}
		this.exportVisualDataOverride(svd);
		this.view().exportViewShapes(svd);
		return svd;
	}
	,
	$type: new $.ig.Type('StackedSeriesBase', $.ig.CategorySeries.prototype.$type, [$.ig.IIsCategoryBased.prototype.$type])
}, true);

$.ig.util.defType('VerticalStackedSeriesBase', 'StackedSeriesBase', {
	init: function () {
		$.ig.StackedSeriesBase.prototype.init.call(this);
	},
	xAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.VerticalStackedSeriesBase.prototype.xAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.VerticalStackedSeriesBase.prototype.xAxisProperty);
		}
	}
	,
	yAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.VerticalStackedSeriesBase.prototype.yAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.VerticalStackedSeriesBase.prototype.yAxisProperty);
		}
	}
	,
	getCategoryAxis: function () {
		return this.yAxis();
	}
	,
	getValueAxis: function () {
		return this.xAxis();
	}
	,
	getOffsetValue: function () {
		return this.framePreparer().getOffset(this.yAxis(), this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	getCategoryWidth: function () {
		return this.yAxis().getCategorySize(this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	isVertical: function () {
		return true;
	}
	,
	getXAxis: function () {
		return this.xAxis();
	}
	,
	getYAxis: function () {
		return this.yAxis();
	}
	,
	updateNumericAxisRange: function () {
		return this.xAxis() != null && this.xAxis().updateRange();
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.StackedSeriesBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.VerticalStackedSeriesBase.prototype.xAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
			case $.ig.VerticalStackedSeriesBase.prototype.yAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.updateNumericAxisRange();
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
		}
	}
	,
	canUseAsYAxis: function (axis) {
		if ($.ig.util.cast($.ig.CategoryYAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	canUseAsXAxis: function (axis) {
		if ($.ig.util.cast($.ig.NumericXAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	$type: new $.ig.Type('VerticalStackedSeriesBase', $.ig.StackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedBarSeries', 'VerticalStackedSeriesBase', {
	init: function () {
		$.ig.VerticalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedBarSeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.VerticalStackedSeriesBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	createView: function () {
		return new $.ig.StackedBarSeriesView(this);
	}
	,
	_stackedBarView: null,
	stackedBarView: function (value) {
		if (arguments.length === 1) {
			this._stackedBarView = value;
			return value;
		} else {
			return this._stackedBarView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.VerticalStackedSeriesBase.prototype.onViewCreated.call(this, view);
		this.stackedBarView(view);
	}
	,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedBarSeries.prototype.radiusXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedBarSeries.prototype.radiusXProperty);
		}
	}
	,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedBarSeries.prototype.radiusYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedBarSeries.prototype.radiusYProperty);
		}
	}
	,
	getSeriesView: function () {
		return this.stackedBarView();
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode2;
	}
	,
	getMode2Index: function () {
		var result = 0;
		var en = this.seriesViewer().series().getEnumerator();
		while (en.moveNext()) {
			var currentSeries = en.current();
			if (currentSeries == this) {
				return result;
			}
			var currentCategorySeries = $.ig.util.cast($.ig.IBarSeries.prototype.$type, currentSeries);
			if (currentCategorySeries != null && currentCategorySeries.yAxis() == this.yAxis() && currentCategorySeries.getPreferredCategoryMode() == $.ig.CategoryMode.prototype.mode2) {
				result++;
			}
		}
		$.ig.Debug.prototype.assert1(false, "CategorySeries.GetMode2Index failed to find series");
		return -1;
	}
	,
	getScaledWorldZeroValue: function () {
		var value = 0;
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && this.xAxis() != null) {
			var effectiveViewportRect = this.getEffectiveViewport1(this.view());
			var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.xAxis().isInverted(), effectiveViewportRect);
			value = this.xAxis().getScaledValue(this.xAxis().referenceValue(), xParams);
		}
		return value;
	}
	,
	getUnscaledWorldZeroValue: function () {
		if (this.xAxis() != null) {
			return this.xAxis().referenceValue();
		}
		return 0;
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.yAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.xAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	scrollIntoView: function (item) {
		var index = this.fastItemsSource() != null ? this.fastItemsSource().indexOf(item) : -1;
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		var unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
		var effectiveViewportRect = this.getEffectiveViewportForUnitViewport(this.view());
		var xParams = new $.ig.ScalerParams(0, unitRect, unitRect, this.xAxis().isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, unitRect, unitRect, this.yAxis().isInverted(), effectiveViewportRect);
		if (index >= 0 && $.ig.Rect.prototype.l_op_Inequality(windowRect, null) && $.ig.Rect.prototype.l_op_Inequality(viewportRect, null)) {
			if (this.yAxis() != null) {
				var cy = this.yAxis().getScaledValue(index, yParams);
				if (cy < windowRect.top() + 0.1 * windowRect.height()) {
					cy = cy + 0.4 * windowRect.height();
				}
				if (cy > windowRect.bottom() - 0.1 * windowRect.height()) {
					cy = cy - 0.4 * windowRect.height();
				}
				windowRect.y(cy - 0.5 * windowRect.height());
			}
			if (this.xAxis() != null && this.highs() != null && index < this.highs().length) {
				var high = this.xAxis().getScaledValue(this.highs()[index], xParams);
				var low = this.xAxis().getScaledValue(this.lows()[index], xParams);
				if (!$.ig.util.isNaN(high) && !$.ig.util.isNaN(low)) {
					var width = Math.abs(low - high);
					if (windowRect.width() < width) {
						windowRect.width(width);
						windowRect.x(Math.min(low, high));
					} else {
						if (low < windowRect.left() + 0.1 * windowRect.width()) {
							low = low + 0.4 * windowRect.width();
						}
						if (low > windowRect.right() - 0.1 * windowRect.width()) {
							low = low - 0.4 * windowRect.width();
						}
						windowRect.x(low - 0.5 * windowRect.width());
					}
				}
			}
			this.syncLink().windowNotify(this.seriesViewer(), windowRect);
		}
		return index >= 0;
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		var isValid = true;
		var categoryView = view;
		if (!view.hasSurface() || windowRect.isEmpty() || viewportRect.isEmpty() || this.yAxis() == null || this.yAxis().itemsSource() == null || this.xAxis() == null || this.fastItemsSource() == null || this.xAxis().seriesViewer() == null || this.yAxis().seriesViewer() == null || this.xAxis().actualMinimumValue() == this.xAxis().actualMaximumValue()) {
			categoryView.bucketCalculator()._bucketSize = 0;
			isValid = false;
		}
		return isValid;
	}
	,
	dataUpdatedOverride: function (action, position, count, propertyName) {
		switch (action) {
			case $.ig.FastItemsSourceEventAction.prototype.reset:
			case $.ig.FastItemsSourceEventAction.prototype.insert:
			case $.ig.FastItemsSourceEventAction.prototype.remove:
				this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
				break;
		}
		switch (action) {
			case $.ig.FastItemsSourceEventAction.prototype.reset:
				if (this.xAxis() != null && !this.xAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.insert:
				if (this.xAxis() != null && !this.xAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.remove:
				if (this.xAxis() != null && !this.xAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.replace:
				if (this.categoryView().bucketCalculator()._bucketSize > 0) {
					this.renderSeries(true);
				}
				break;
			case $.ig.FastItemsSourceEventAction.prototype.change:
				if (this.xAxis() != null && !this.xAxis().updateRange()) {
					this.renderSeries(true);
				}
				break;
		}
	}
	,
	getItemIndex: function (world) {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var p = new $.ig.ScalerParams(0, windowRect, viewportRect, this.yAxis().isInverted(), effectiveViewportRect);
		var rowIndex = -1;
		if (this.yAxis() != null && !windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var contentViewport = this.getContentViewport(this.view());
			var top = this.yAxis().getUnscaledValue(contentViewport.top(), p);
			var bottom = this.yAxis().getUnscaledValue(contentViewport.bottom(), p);
			var windowY = (world.__y - windowRect.top()) / windowRect.height();
			var bucket = top + (windowY * (bottom - top));
			if (this.yAxis().categoryMode() != $.ig.CategoryMode.prototype.mode0) {
				bucket -= 0.5;
			}
			var bucketNumber = $.ig.truncate(Math.round(bucket));
			rowIndex = bucketNumber;
		}
		return rowIndex;
	}
	,
	getItem: function (world) {
		var index = this.getItemIndex(world);
		return index >= 0 && this.fastItemsSource() != null && index < this.fastItemsSource().count() ? this.fastItemsSource().item(index) : null;
	}
	,
	updateAxisRanges: function () {
		if (this.xAxis() != null) {
			this.xAxis().updateRange1(true);
		}
		if (this.yAxis() != null) {
			this.yAxis().updateRange1(true);
		}
	}
	,
	getFragmentItemIndex: function (world) {
		return this.getItemIndex(world);
	}
	,
	validateFragmentSeries: function (series, viewportRect, windowRect, view) {
		var isValid = true;
		if (!view.hasSurface() || windowRect.isEmpty() || viewportRect.isEmpty() || this.yAxis() == null || this.yAxis().itemsSource() == null || this.xAxis() == null || this.fastItemsSource() == null || this.xAxis().seriesViewer() == null || this.yAxis().seriesViewer() == null) {
			isValid = false;
		}
		var categoryView = view;
		if (series.valueColumn() == null || series.valueColumn().count() == 0 || categoryView.bucketCalculator()._bucketSize < 1) {
			isValid = false;
		}
		return isValid;
	}
	,
	getItemSpan: function () {
		return this.yAxis().getGroupSize(this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	renderFragment: function (series, frame, view) {
		var barSeries = $.ig.util.cast($.ig.BarFragment.prototype.$type, series);
		var fragmentView = $.ig.util.cast($.ig.ColumnFragmentView.prototype.$type, view);
		if (!this.validateSeries(view.viewport(), view.windowRect(), view) || barSeries == null || fragmentView == null) {
			return;
		}
		var groupWidth = this.yAxis().getGroupSize(view.windowRect(), view.viewport(), this.getEffectiveViewport1(view));
		if ($.ig.util.isNaN(groupWidth) || Number.isInfinity(groupWidth)) {
			barSeries.columnFragmentView().columns().count(0);
			return;
		}
		var counter = 0;
		var en = frame._buckets.getEnumerator();
		while (en.moveNext()) {
			var bucket = en.current();
			if (Number.isInfinity(bucket[0]) || $.ig.util.isNaN(bucket[0]) || Number.isInfinity(bucket[1]) || Number.isInfinity(bucket[2]) || $.ig.util.isNaN(bucket[1]) || $.ig.util.isNaN(bucket[2])) {
				continue;
			}
			var top = bucket[0] - 0.5 * groupWidth;
			var right = bucket[1];
			var left = bucket[2];
			left = Math.max(left, -100);
			right = Math.min(right, view.viewport().right() + 100);
			var column = fragmentView.columns().item(counter);
			column.height(groupWidth);
			column.width(Math.abs(right - left));
			fragmentView.positionRectangle(column, Math.min(right, left), top);
			counter++;
		}
		fragmentView.columns().count(counter);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.VerticalStackedSeriesBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.StackedBarSeries.prototype.radiusXPropertyName:
			case $.ig.StackedBarSeries.prototype.radiusYPropertyName:
				var en = this.actualSeries().getEnumerator();
				while (en.moveNext()) {
					var series = en.current();
					series.updateRadiusX();
					series.updateRadiusY();
				}
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.syncLinkPropertyName:
				if (this.xAxis() != null) {
					this.xAxis().updateRange();
				}
				break;
			case $.ig.CategorySeries.prototype.fastItemsSourcePropertyName:
				if (this.xAxis() != null && !this.xAxis().updateRange()) {
					this.stackedBarView().bucketCalculator().calculateBuckets(this.resolution());
				}
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.seriesViewerPropertyName:
				if (oldValue != null && newValue == null) {
					this.deregisterForAxis(this.xAxis());
					this.deregisterForAxis(this.yAxis());
				}
				if (oldValue == null && newValue != null) {
					this.registerForAxis(this.xAxis());
					this.registerForAxis(this.yAxis());
				}
				this.stackedBarView().bucketCalculator().calculateBuckets(this.resolution());
				this.renderSeries(false);
				if (this.xAxis() != null) {
					this.xAxis().updateRange();
				}
				break;
		}
	}
	,
	getPreferredCategoryMode: function () {
		return this.preferredCategoryMode(this.yAxis());
	}
	,
	currentCategoryMode: function () {
		return this.preferredCategoryMode(this.yAxis());
	}
	,
	scaler: function () {
		return this.yAxis();
	}
	,
	yScaler: function () {
		return this.xAxis();
	}
	,
	$type: new $.ig.Type('StackedBarSeries', $.ig.VerticalStackedSeriesBase.prototype.$type, [$.ig.IIsCategoryBased.prototype.$type, $.ig.IBarSeries.prototype.$type])
}, true);

$.ig.util.defType('IStacked100Series', 'Object', {
	$type: new $.ig.Type('IStacked100Series', null)
}, true);

$.ig.util.defType('AreaFragment', 'FragmentBase', {
	init: function () {
		$.ig.FragmentBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.AreaFragment.prototype.$type);
	},
	createView: function () {
		return new $.ig.AreaFragmentView(this);
	}
	,
	_areaFragmentView: null,
	areaFragmentView: function (value) {
		if (arguments.length === 1) {
			this._areaFragmentView = value;
			return value;
		} else {
			return this._areaFragmentView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.FragmentBase.prototype.onViewCreated.call(this, view);
		this.areaFragmentView(view);
	}
	,
	testRangeAreaOver: function (position, isFinger) {
		var pathData1 = this.areaFragmentView()._polygon0.data();
		if (this.testOverPoly(position, pathData1)) {
			return true;
		}
		var pathData2 = this.areaFragmentView()._polygon1.data();
		if (this.testOverPoly(position, pathData2)) {
			return true;
		}
		return false;
	}
	,
	testHit: function (position, isFinger) {
		if (this.testNearStrokes(position, isFinger)) {
			return true;
		}
		if (this.testRangeAreaOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	testNearStrokes: function (position, isFinger) {
		var pathData1 = this.areaFragmentView()._polyline0.data();
		if (this.testNearStroke(position, isFinger, pathData1)) {
			return true;
		}
		var pathData2 = this.areaFragmentView()._polyline1.data();
		if (this.testNearStroke(position, isFinger, pathData2)) {
			return true;
		}
		return false;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.FragmentBase.prototype.clearRendering.call(this, wipeClean, view);
		var areaFragmentView = view;
		areaFragmentView.clearRendering();
	}
	,
	renderFrame: function (frame, view) {
		var $self = this;
		$.ig.FragmentBase.prototype.renderFrame.call(this, frame, view);
		this.lineRasterizer().isSortingAxis($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.xAxis()) !== null ? true : false);
		var areaView = $.ig.util.cast($.ig.AreaFragmentView.prototype.$type, view);
		var bucketSize = areaView.bucketCalculator()._bucketSize;
		this.lineRasterizer().rasterizePolygonPaths(areaView._polygon0, areaView._polyline0, areaView._polygon1, areaView._polyline1, frame._buckets.count(), frame._buckets, true, bucketSize, this.resolution(), function (p0, l0, p01, l1, f) { $self.terminatePolygon1(p0, frame._buckets, view); }, $.ig.UnknownValuePlotting.prototype.linearInterpolate);
		areaView._polygon0.__opacity = this.actualAreaFillOpacity();
		areaView._polygon1.__opacity = 0.5 * this.actualAreaFillOpacity();
	}
	,
	updateActualAreaFillOpacity: function () {
		var chart = ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer()));
		if (chart != null) {
			this.actualAreaFillOpacity($.ig.util.isNaN(this.areaFillOpacity()) ? this.parentSeries().actualAreaFillOpacity() : this.areaFillOpacity());
		}
	}
	,
	$type: new $.ig.Type('AreaFragment', $.ig.FragmentBase.prototype.$type)
}, true);

$.ig.util.defType('ColumnFragment', 'FragmentBase', {
	init: function () {
		$.ig.FragmentBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.ColumnFragment.prototype.$type);
	},
	createView: function () {
		return new $.ig.ColumnFragmentView(this);
	}
	,
	_columnFragmentView: null,
	columnFragmentView: function (value) {
		if (arguments.length === 1) {
			this._columnFragmentView = value;
			return value;
		} else {
			return this._columnFragmentView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.FragmentBase.prototype.onViewCreated.call(this, view);
		this.columnFragmentView(view);
	}
	,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.ColumnFragment.prototype.radiusXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.ColumnFragment.prototype.radiusXProperty);
		}
	}
	,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.ColumnFragment.prototype.radiusYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.ColumnFragment.prototype.radiusYProperty);
		}
	}
	,
	xAxis: function () {
		return this.parentSeries() != null ? $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.parentSeries().getXAxis()) : null;
	}
	,
	yAxis: function () {
		return this.parentSeries() != null ? $.ig.util.cast($.ig.NumericYAxis.prototype.$type, this.parentSeries().getYAxis()) : null;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode2;
	}
	,
	getCategoryAxis: function () {
		return this.xAxis();
	}
	,
	getValueAxis: function () {
		return this.yAxis();
	}
	,
	getXAxis: function () {
		return null;
	}
	,
	getYAxis: function () {
		return null;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.FragmentBase.prototype.clearRendering.call(this, wipeClean, view);
		var columnFragmentView = view;
		if (wipeClean && columnFragmentView.columns() != null) {
			this._currentFrame._markers.clear();
			columnFragmentView.columns().count(0);
		}
	}
	,
	getRange: function (axis) {
		if (this.valueColumn() == null || this.valueColumn().count() == 0) {
			return null;
		}
		return new $.ig.AxisRange(this.valueColumn().minimum(), this.valueColumn().maximum());
	}
	,
	validateSeries: function (viewportRect, windowRect, view) {
		if (this.parentSeries() == null) {
			return false;
		}
		return this.parentSeries().validateFragmentSeries(this, viewportRect, windowRect, this.getParentView(view));
	}
	,
	useParentMarkerCanvas: function () {
		return true;
	}
	,
	getBucketSize: function (view) {
		if (this.parentSeries() != null) {
			return (this.parentSeries()).getBucketSize(this.parentSeries().view());
		}
		return $.ig.FragmentBase.prototype.getBucketSize.call(this, view);
	}
	,
	getFirstBucket: function (view) {
		if (this.parentSeries() != null) {
			return (this.parentSeries()).getFirstBucket(this.parentSeries().view());
		}
		return $.ig.FragmentBase.prototype.getBucketSize.call(this, view);
	}
	,
	getSeriesValueBoundingBox: function (world) {
		var pos = this.fromWorldPosition(world);
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.yAxis().isInverted(), effectiveViewportRect);
		var matching = this.getMatchingBuckets(this.getCategoryAxis(), this._currentFrame._buckets, this.getBucketSize(this.view()), this.getFirstBucket(this.view()), world, true);
		if (matching == null) {
			return $.ig.Rect.prototype.empty();
		}
		var prevBucketValue = matching[0];
		var nextBucketValue = matching[1];
		var prevDist = Math.abs(pos.__x - prevBucketValue[0]);
		var nextDist = Math.abs(pos.__x - nextBucketValue[0]);
		var groupWidth = this.getCategoryAxis().getGroupSize(windowRect, viewportRect, effectiveViewportRect);
		if (prevDist < nextDist) {
			var left = prevBucketValue[0] - 0.5 * groupWidth;
			var top = prevBucketValue[1];
			var bottom = prevBucketValue[2];
			return new $.ig.Rect(0, left, Math.min(top, bottom), groupWidth, Math.max(top, bottom) - Math.min(top, bottom));
		} else {
			var left1 = nextBucketValue[0] - 0.5 * groupWidth;
			var top1 = nextBucketValue[1];
			var bottom1 = nextBucketValue[2];
			return new $.ig.Rect(0, left1, Math.min(top1, bottom1), groupWidth, Math.max(top1, bottom1) - Math.min(top1, bottom1));
		}
	}
	,
	testHit: function (position, isFinger) {
		if (this.testShapesOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	testShapesOver: function (position, isFinger) {
		var box = this.getSeriesValueBoundingBoxFromSeriesPixel(position);
		if (box.isEmpty()) {
			return false;
		}
		var inflated = this.inflateBox(box, this.getHitTestAllowance(isFinger));
		return inflated.containsPoint(position);
	}
	,
	inflateBox: function (box, p) {
		var boxCenterX = box.left() + box.width() / 2;
		var boxCenterY = box.top() + box.height() / 2;
		var left = boxCenterX - ((box.width() / 2) + p);
		var top = boxCenterY - (box.height() / 2);
		var height = box.height();
		var width = box.width() + p * 2;
		return new $.ig.Rect(0, left, top, width, height);
	}
	,
	item: function (sender, point) {
		var frameworkElement = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, sender);
		var dataContext = frameworkElement != null ? $.ig.util.cast($.ig.DataContext.prototype.$type, frameworkElement.dataContext()) : null;
		var item = dataContext != null ? dataContext.item() : null;
		if (item == null) {
			var viewportRect = this.view().viewport();
			var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
			var world = { __x: windowRect.left() + windowRect.width() * (point.__x - viewportRect.left()) / viewportRect.width(), __y: windowRect.top() + windowRect.height() * (point.__y - viewportRect.top()) / viewportRect.height(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			item = this.getItem(world);
		}
		return item;
	}
	,
	getItem: function (world) {
		var index = 0;
		if ($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.getCategoryAxis()) !== null) {
			index = this.getItemIndexSorted(world);
			if (index == -1) {
				return null;
			}
		} else {
			index = this.getItemIndex(world);
		}
		return index >= 0 && this.fastItemsSource() != null && index < this.fastItemsSource().count() ? this.fastItemsSource().item(index) : null;
	}
	,
	getItemIndexSorted: function (world) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			return -1;
		}
		var xAxis = this.getCategoryAxis();
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, xAxis.isInverted(), effectiveViewportRect);
		var sorting = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.xAxis());
		var contentViewport = this.getContentViewport(this.view());
		var left = xAxis.getUnscaledValue(contentViewport.left(), xParams);
		var right = xAxis.getUnscaledValue(contentViewport.right(), xParams);
		var windowX = (world.__x - windowRect.left()) / windowRect.width();
		var axisValue = left + ((right - left) * windowX);
		if ($.ig.truncate(axisValue) <= $.ig.Date.prototype.minValue().getTime() || $.ig.truncate(axisValue) >= $.ig.Date.prototype.maxValue().getTime()) {
			return -1;
		}
		var itemIndex = sorting.getIndexClosestToUnscaledValue(axisValue);
		return itemIndex;
	}
	,
	getItemIndex: function (world) {
		if (this.parentSeries() == null) {
			return -1;
		}
		return this.parentSeries().getFragmentItemIndex(world);
	}
	,
	prepareMarker: function (markersHost, frame, bucket, collisionAvoider, value, itemIndex, markerCount, markerBucket) {
		var zero = 0;
		var x = bucket[0];
		var y = value < zero ? bucket[2] : bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			markersHost.updateMarkerTemplate(markerCount, itemIndex, markerBucket);
			return true;
		}
		return false;
	}
	,
	getParentView: function (view) {
		if (view.isAlternateView()) {
			return this.parentSeries().alternateViews().item(view.alternateViewIdentifier());
		} else if (view == this.thumbnailView()) {
			return this.parentSeries().thumbnailView();
		} else {
			return this.parentSeries().categoryView();
		}
	}
	,
	renderAlternateView: function (viewportRect, windowRect, surface, viewIdentifier, effectiveScalingRatio) {
		this.ensureAlternateView(viewportRect, windowRect, viewIdentifier, effectiveScalingRatio);
		var view = this.alternateViews().item(viewIdentifier);
		var categorySeriesView = view;
		view.prepAltSurface(surface);
		var parentView = this.getParentView(view);
		parentView.bucketCalculator().calculateBuckets(this.resolution());
		if (this.clearAndAbortIfInvalid1(categorySeriesView)) {
			return;
		}
		if (this.alternateFrame() == null) {
			this.alternateFrame(new $.ig.CategoryFrame(3));
		}
		this.alternateFrame().clearFrame();
		this.prepareFrame(this.alternateFrame(), categorySeriesView);
		this.renderFrame(this.alternateFrame(), categorySeriesView);
	}
	,
	prepareFrame: function (frame, view) {
		frame.clearFrame();
		if (this.valueColumn() == null || this.parentSeries() == null || this.logicalSeriesLink() == null || this.logicalSeriesLink().highValues().count() == 0 || this.logicalSeriesLink().lowValues().count() == 0) {
			return;
		}
		var parentFrame;
		if (view.isAlternateView()) {
			parentFrame = this.parentSeries().alternateFrame();
		} else if (view == this.thumbnailView()) {
			parentFrame = this.parentSeries()._thumbnailFrame;
		} else {
			parentFrame = this.parentSeries()._currentFrame;
		}
		var parentView = $.ig.util.cast($.ig.CategorySeriesView.prototype.$type, this.getParentView(view));
		frame._buckets.clear();
		frame._markers.clear();
		var firstBucket = parentView.bucketCalculator()._firstBucket;
		var lastbucket = parentView.bucketCalculator()._lastBucket;
		var yScaler = this.parentSeries().framePreparer().categoryBasedHost().yScaler();
		var sortingScaler = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.parentSeries().framePreparer().categoryBasedHost().scaler());
		var isLogarithmicYScaler = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, yScaler) !== null && (yScaler).isReallyLogarithmic();
		var bucketCalculator = $.ig.util.cast($.ig.StackedBucketCalculator.prototype.$type, parentView.bucketCalculator());
		var bucketSize = parentView.bucketCalculator()._bucketSize;
		var markerCount = 0;
		for (var i = firstBucket; i <= lastbucket; i++) {
			var itemIndex = i * bucketSize;
			if (this.__visibility != $.ig.Visibility.prototype.visible) {
				break;
			}
			if (i >= this.valueColumn().count() || i >= parentFrame._buckets.count() + firstBucket) {
				continue;
			}
			var value = this.valueColumn().item(i);
			var isValidBucket = !isLogarithmicYScaler || (isLogarithmicYScaler && value > 0);
			var bucket;
			if (sortingScaler == null) {
				bucket = bucketCalculator.getBucket1(this, i, i, view.windowRect(), view.viewport(), parentFrame);
			} else {
				bucket = bucketCalculator.getBucket1(this, i, sortingScaler.sortedIndices().__inner[i], view.windowRect(), view.viewport(), parentFrame);
			}
			frame._buckets.add(bucket);
			if (isValidBucket) {
				if (this.prepareMarker(view, frame, bucket, this.framePreparer().categoryBasedHost().provideCollisionDetector(), value, itemIndex, markerCount, i)) {
					markerCount++;
				}
			}
		}
		view.markers().count(markerCount);
	}
	,
	renderFrame: function (frame, view) {
		$.ig.FragmentBase.prototype.renderFrame.call(this, frame, view);
		if (this.parentSeries() == null) {
			return;
		}
		this.parentSeries().renderFragment(this, frame, view);
		$.ig.CategoryMarkerManager.prototype.rasterizeMarkers(this, frame._markers, view.markers(), this.useLightweightMarkers());
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.FragmentBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
	}
	,
	$type: new $.ig.Type('ColumnFragment', $.ig.FragmentBase.prototype.$type)
}, true);

$.ig.util.defType('BarFragment', 'ColumnFragment', {
	init: function () {
		$.ig.ColumnFragment.prototype.init.call(this);
		this.defaultStyleKey($.ig.BarFragment.prototype.$type);
	},
	xAxis: function () {
		return this.parentSeries() != null ? (this.parentSeries()).xAxis() : null;
	}
	,
	yAxis: function () {
		return this.parentSeries() != null ? (this.parentSeries()).yAxis() : null;
	}
	,
	getCategoryAxis: function () {
		if (this.parentSeries() == null) {
			return null;
		}
		return this.parentSeries().getYAxis();
	}
	,
	getExactItemIndex: function (world) {
		var windowRect = this.seriesViewer() != null ? this.seriesViewer().actualWindowRect() : $.ig.Rect.prototype.empty();
		var viewportRect = this.view().viewport();
		var contentViewport = this.getContentViewport(this.view());
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var categoryAxis = this.getCategoryAxis();
		var rowIndex = -1;
		if (categoryAxis != null && !windowRect.isEmpty() && !viewportRect.isEmpty()) {
			var p = new $.ig.ScalerParams(0, windowRect, viewportRect, categoryAxis.isInverted(), effectiveViewportRect);
			var top = categoryAxis.getUnscaledValue(contentViewport.top(), p);
			var bottom = categoryAxis.getUnscaledValue(contentViewport.bottom(), p);
			var windowY = (world.__y - windowRect.top()) / windowRect.height();
			var bucket = top + (windowY * (bottom - top));
			if (categoryAxis.categoryMode() != $.ig.CategoryMode.prototype.mode0) {
				bucket -= 0.5;
			}
			rowIndex = bucket;
		}
		return rowIndex;
	}
	,
	getValueAxis: function () {
		if (this.parentSeries() == null) {
			return null;
		}
		return this.parentSeries().getYAxis();
	}
	,
	inflateBox: function (box, p) {
		var boxCenterX = box.left() + box.width() / 2;
		var boxCenterY = box.top() + box.height() / 2;
		var left = boxCenterX - (box.width() / 2);
		var top = boxCenterY - ((box.height() / 2) + p);
		var height = box.height() + p * 2;
		var width = box.width();
		return new $.ig.Rect(0, left, top, width, height);
	}
	,
	getSeriesValueBoundingBox: function (world) {
		var pos = this.fromWorldPosition(world);
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var categoryAxis = this.getCategoryAxis();
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, categoryAxis.isInverted(), effectiveViewportRect);
		var matching = this.getMatchingBuckets(this.getCategoryAxis(), this._currentFrame._buckets, this.getBucketSize(this.view()), this.getFirstBucket(this.view()), world, true);
		if (matching == null) {
			return $.ig.Rect.prototype.empty();
		}
		var prevBucketValue = matching[0];
		var nextBucketValue = matching[1];
		var prevDist = Math.abs(pos.__y - prevBucketValue[0]);
		var nextDist = Math.abs(pos.__y - nextBucketValue[0]);
		var groupWidth = categoryAxis.getGroupSize(windowRect, viewportRect, effectiveViewportRect);
		if (prevDist < nextDist) {
			var top = prevBucketValue[0] - 0.5 * groupWidth;
			var left = prevBucketValue[2];
			var right = prevBucketValue[1];
			return new $.ig.Rect(0, left, top, Math.max(right, left) - Math.min(right, left), groupWidth);
		} else {
			var top1 = nextBucketValue[0] - 0.5 * groupWidth;
			var left1 = nextBucketValue[2];
			var right1 = nextBucketValue[1];
			return new $.ig.Rect(0, left1, top1, Math.max(right1, left1) - Math.min(right1, left1), groupWidth);
		}
	}
	,
	testHit: function (position, isFinger) {
		if (this.testShapesOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	prepareMarker: function (markersHost, frame, bucket, collisionAvoider, value, itemIndex, markerCount, markerBucket) {
		var y = bucket[0];
		var x = value < 0 ? bucket[2] : bucket[1];
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			markersHost.updateMarkerTemplate(markerCount, itemIndex, markerBucket);
			return true;
		}
		return false;
	}
	,
	getItem: function (world) {
		var index = 0;
		if ($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.yAxis()) !== null) {
			index = this.getItemIndexSorted(world);
			if (index == -1) {
				return null;
			}
		} else {
			index = this.getItemIndex(world);
		}
		return index >= 0 && this.fastItemsSource() != null && index < this.fastItemsSource().count() ? this.fastItemsSource().item(index) : null;
	}
	,
	getItemIndexSorted: function (world) {
		var windowRect = this.view().windowRect();
		var viewportRect = this.view().viewport();
		if (windowRect.isEmpty() || viewportRect.isEmpty()) {
			return -1;
		}
		var effectiveViewportRect = this.getEffectiveViewport1(this.view());
		var yParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.yAxis().isInverted(), effectiveViewportRect);
		var sorting = $.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.yAxis());
		var contentViewport = this.getContentViewport(this.view());
		var top = this.yAxis().getUnscaledValue(contentViewport.top(), yParams);
		var bottom = this.yAxis().getUnscaledValue(contentViewport.bottom(), yParams);
		var windowY = (world.__y - windowRect.top()) / windowRect.height();
		var axisValue = top + ((bottom - top) * windowY);
		if ($.ig.truncate(axisValue) <= $.ig.Date.prototype.minValue().getTime() || $.ig.truncate(axisValue) >= $.ig.Date.prototype.maxValue().getTime()) {
			return -1;
		}
		var itemIndex = sorting.getIndexClosestToUnscaledValue(axisValue);
		return itemIndex;
	}
	,
	getWorldZeroValue: function (view) {
		var value = 0;
		var windowRect = view.windowRect();
		var viewportRect = view.viewport();
		var effectiveViewportRect = this.getEffectiveViewport1(view);
		var xParams = new $.ig.ScalerParams(0, windowRect, viewportRect, this.xAxis().isInverted(), effectiveViewportRect);
		if (!windowRect.isEmpty() && !viewportRect.isEmpty() && this.xAxis() != null) {
			value = this.xAxis().getScaledValue(0, xParams);
		}
		return value;
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.ColumnFragment.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		if (this.parentSeries() == null || this.xAxis() == null) {
			return;
		}
		var xAxis = this.xAxis();
		switch (propertyName) {
			case $.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName:
				this.anchoredView().trendLineManager().reset();
				if (xAxis != null && !xAxis.updateRange()) {
					this.parentSeries().getSeriesView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
				}
				break;
		}
	}
	,
	$type: new $.ig.Type('BarFragment', $.ig.ColumnFragment.prototype.$type)
}, true);

$.ig.util.defType('HorizontalStackedSeriesBase', 'StackedSeriesBase', {
	init: function () {
		$.ig.StackedSeriesBase.prototype.init.call(this);
	},
	xAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.HorizontalStackedSeriesBase.prototype.xAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.HorizontalStackedSeriesBase.prototype.xAxisProperty);
		}
	}
	,
	yAxis: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.HorizontalStackedSeriesBase.prototype.yAxisProperty, value);
			return value;
		} else {
			return this.getValue($.ig.HorizontalStackedSeriesBase.prototype.yAxisProperty);
		}
	}
	,
	getOffsetValue: function () {
		return this.framePreparer().getOffset(this.xAxis(), this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	getCategoryWidth: function () {
		return this.xAxis().getCategorySize(this.view().windowRect(), this.view().viewport(), this.getEffectiveViewport1(this.view()));
	}
	,
	getXAxis: function () {
		return this.xAxis();
	}
	,
	getYAxis: function () {
		return this.yAxis();
	}
	,
	updateNumericAxisRange: function () {
		return this.yAxis() != null && this.yAxis().updateRange();
	}
	,
	updateActualAreaFillOpacity: function () {
		var chart = ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.seriesViewer()));
		if (chart != null) {
			this.actualAreaFillOpacity($.ig.util.isNaN(this.areaFillOpacity()) ? chart.chartView().defaultAreaFillOpacity() : this.areaFillOpacity());
			var en = this.actualSeries().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				series.updateAreaFillOpacity();
			}
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.StackedSeriesBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.HorizontalStackedSeriesBase.prototype.xAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
			case $.ig.HorizontalStackedSeriesBase.prototype.yAxisPropertyName:
				if (oldValue != newValue) {
					this.deregisterForAxis($.ig.util.cast($.ig.Axis.prototype.$type, oldValue));
					this.registerForAxis($.ig.util.cast($.ig.Axis.prototype.$type, newValue));
					this.categoryView().bucketCalculator().calculateBuckets(this.resolution());
					this.updateNumericAxisRange();
					this.renderSeries(false);
					this.notifyThumbnailAppearanceChanged();
				}
				break;
		}
	}
	,
	canUseAsYAxis: function (axis) {
		if ($.ig.util.cast($.ig.NumericYAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	canUseAsXAxis: function (axis) {
		if ($.ig.util.cast($.ig.CategoryXAxis.prototype.$type, axis) !== null || $.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, axis) !== null) {
			return true;
		}
		return false;
	}
	,
	$type: new $.ig.Type('HorizontalStackedSeriesBase', $.ig.StackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedAreaSeries', 'HorizontalStackedSeriesBase', {
	init: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedAreaSeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.xAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.yAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	$type: new $.ig.Type('StackedAreaSeries', $.ig.HorizontalStackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedColumnSeries', 'HorizontalStackedSeriesBase', {
	init: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedColumnSeries.prototype.$type);
	},
	createView: function () {
		return new $.ig.StackedColumnSeriesView(this);
	}
	,
	_stackedColumnView: null,
	stackedColumnView: function (value) {
		if (arguments.length === 1) {
			this._stackedColumnView = value;
			return value;
		} else {
			return this._stackedColumnView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.HorizontalStackedSeriesBase.prototype.onViewCreated.call(this, view);
		this.stackedColumnView(view);
	}
	,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedColumnSeries.prototype.radiusXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedColumnSeries.prototype.radiusXProperty);
		}
	}
	,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedColumnSeries.prototype.radiusYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedColumnSeries.prototype.radiusYProperty);
		}
	}
	,
	getSeriesView: function () {
		return this.stackedColumnView();
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode2;
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.xAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.yAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	getItemSpan: function () {
		var effectiveViewport = this.getEffectiveViewport1(this.view());
		return this.xAxis().getGroupSize(this.view().windowRect(), this.view().viewport(), effectiveViewport);
	}
	,
	renderFragment: function (series, frame, view) {
		var columnSeries = $.ig.util.cast($.ig.ColumnFragment.prototype.$type, series);
		var fragmentView = $.ig.util.cast($.ig.ColumnFragmentView.prototype.$type, view);
		if (!this.validateSeries(view.viewport(), view.windowRect(), view) || columnSeries == null || fragmentView == null) {
			return;
		}
		if (columnSeries == null) {
			return;
		}
		var effectiveViewport = this.getEffectiveViewport1(view);
		var groupWidth = this.xAxis().getGroupSize(view.windowRect(), view.viewport(), effectiveViewport);
		if ($.ig.util.isNaN(groupWidth) || Number.isInfinity(groupWidth)) {
			columnSeries.columnFragmentView().columns().count(0);
			return;
		}
		var counter = 0;
		var en = frame._buckets.getEnumerator();
		while (en.moveNext()) {
			var bucket = en.current();
			if (Number.isInfinity(bucket[0]) || $.ig.util.isNaN(bucket[0]) || Number.isInfinity(bucket[1]) || Number.isInfinity(bucket[2]) || $.ig.util.isNaN(bucket[1]) || $.ig.util.isNaN(bucket[2])) {
				continue;
			}
			var left = bucket[0] - 0.5 * groupWidth;
			var top = bucket[1];
			var bottom = bucket[2];
			top = Math.max(top, -100);
			bottom = Math.min(bottom, view.viewport().bottom() + 100);
			var column = fragmentView.columns().item(counter);
			column.width(groupWidth);
			column.height(Math.abs(bottom - top));
			fragmentView.positionRectangle(column, left, Math.min(bottom, top));
			counter++;
		}
		fragmentView.columns().count(counter);
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		$.ig.HorizontalStackedSeriesBase.prototype.propertyUpdatedOverride.call(this, sender, propertyName, oldValue, newValue);
		switch (propertyName) {
			case $.ig.StackedColumnSeries.prototype.radiusXPropertyName:
			case $.ig.StackedColumnSeries.prototype.radiusYPropertyName:
				var en = this.actualSeries().getEnumerator();
				while (en.moveNext()) {
					var series = en.current();
					series.updateRadiusX();
					series.updateRadiusY();
				}
				this.renderSeries(false);
				break;
			case $.ig.Series.prototype.syncLinkPropertyName:
				if (this.yAxis() != null) {
					this.yAxis().updateRange();
				}
				break;
			case $.ig.Series.prototype.seriesViewerPropertyName:
				if (this.yAxis() != null) {
					this.yAxis().updateRange();
				}
				break;
		}
	}
	,
	$type: new $.ig.Type('StackedColumnSeries', $.ig.HorizontalStackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedSplineAreaSeries', 'HorizontalStackedSeriesBase', {
	init: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedSplineAreaSeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.xAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.yAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	$type: new $.ig.Type('StackedSplineAreaSeries', $.ig.HorizontalStackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedSplineSeries', 'HorizontalStackedSeriesBase', {
	init: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedSplineSeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.xAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.yAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	$type: new $.ig.Type('StackedSplineSeries', $.ig.HorizontalStackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedLineSeries', 'HorizontalStackedSeriesBase', {
	init: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.StackedLineSeries.prototype.$type);
	},
	onApplyTemplate: function () {
		$.ig.HorizontalStackedSeriesBase.prototype.onApplyTemplate.call(this);
		this.renderSeries(false);
	}
	,
	getRange: function (axis) {
		if (this.itemsSource() == null) {
			return null;
		}
		if (axis == this.xAxis()) {
			return new $.ig.AxisRange(0, this.fastItemsSource().count() - 1);
		}
		if (axis == this.yAxis()) {
			this.prepareData();
			return new $.ig.AxisRange(this.minimum(), this.maximum());
		}
		return null;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	$type: new $.ig.Type('StackedLineSeries', $.ig.HorizontalStackedSeriesBase.prototype.$type)
}, true);

$.ig.util.defType('StackedFragmentSeries', 'DependencyObject', {
	init: function () {
		var $self = this;
		this.__hasUserSetDropShadow = false;
		this.__hasUserSetSingleShadow = false;
		$.ig.DependencyObject.prototype.init.call(this);
		this.highValues(new $.ig.List$1(Number, 0));
		this.lowValues(new $.ig.List$1(Number, 0));
		this.buckets(new $.ig.List$1(Array, 0));
		this.propertyUpdated = $.ig.Delegate.prototype.combine(this.propertyUpdated, function (o, e) {
			$self.propertyUpdatedOverride(o, e.propertyName(), e.oldValue(), e.newValue());
		});
	},
	brush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.brushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.brushProperty);
		}
	}
	,
	actualBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualBrushProperty);
		}
	}
	,
	dashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.dashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.dashArrayProperty);
		}
	}
	,
	actualDashArray: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualDashArrayProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualDashArrayProperty);
		}
	}
	,
	dashCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.dashCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.dashCapProperty));
		}
	}
	,
	actualDashCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualDashCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualDashCapProperty));
		}
	}
	,
	isDropShadowEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.isDropShadowEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.isDropShadowEnabledProperty);
		}
	}
	,
	__hasUserSetDropShadow: false,
	actualIsDropShadowEnabled: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledProperty);
		}
	}
	,
	shadowBlur: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.shadowBlurProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.shadowBlurProperty);
		}
	}
	,
	actualShadowBlur: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualShadowBlurProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualShadowBlurProperty);
		}
	}
	,
	shadowColor: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.shadowColorProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.shadowColorProperty);
		}
	}
	,
	actualShadowColor: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualShadowColorProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualShadowColorProperty);
		}
	}
	,
	useSingleShadow: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.useSingleShadowProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.useSingleShadowProperty);
		}
	}
	,
	__hasUserSetSingleShadow: false,
	actualUseSingleShadow: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualUseSingleShadowProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualUseSingleShadowProperty);
		}
	}
	,
	shadowOffsetX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.shadowOffsetXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.shadowOffsetXProperty);
		}
	}
	,
	actualShadowOffsetX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualShadowOffsetXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualShadowOffsetXProperty);
		}
	}
	,
	shadowOffsetY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.shadowOffsetYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.shadowOffsetYProperty);
		}
	}
	,
	actualShadowOffsetY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualShadowOffsetYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualShadowOffsetYProperty);
		}
	}
	,
	endCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.endCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.endCapProperty));
		}
	}
	,
	actualEndCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualEndCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualEndCapProperty));
		}
	}
	,
	isHitTestVisible: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.isHitTestVisibleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.isHitTestVisibleProperty);
		}
	}
	,
	actualIsHitTestVisible: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualIsHitTestVisibleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualIsHitTestVisibleProperty);
		}
	}
	,
	legendItemBadgeTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplateProperty);
		}
	}
	,
	actualLegendItemBadgeTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplateProperty);
		}
	}
	,
	legendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.legendItemTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.legendItemTemplateProperty);
		}
	}
	,
	actualLegendItemTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualLegendItemTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualLegendItemTemplateProperty);
		}
	}
	,
	legendItemVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.legendItemVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.legendItemVisibilityProperty));
		}
	}
	,
	actualLegendItemVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityProperty));
		}
	}
	,
	markerBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.markerBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.markerBrushProperty);
		}
	}
	,
	actualMarkerBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualMarkerBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualMarkerBrushProperty);
		}
	}
	,
	markerOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.markerOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.markerOutlineProperty);
		}
	}
	,
	actualMarkerOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualMarkerOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualMarkerOutlineProperty);
		}
	}
	,
	markerStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.markerStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.markerStyleProperty);
		}
	}
	,
	actualMarkerStyle: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualMarkerStyleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualMarkerStyleProperty);
		}
	}
	,
	markerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.markerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.markerTemplateProperty);
		}
	}
	,
	actualMarkerTemplate: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualMarkerTemplateProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualMarkerTemplateProperty);
		}
	}
	,
	markerType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.markerTypeProperty, $.ig.MarkerType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.markerTypeProperty));
		}
	}
	,
	actualMarkerType: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualMarkerTypeProperty, $.ig.MarkerType.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualMarkerTypeProperty));
		}
	}
	,
	name: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.nameProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.nameProperty);
		}
	}
	,
	opacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.opacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.opacityProperty);
		}
	}
	,
	actualOpacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualOpacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualOpacityProperty);
		}
	}
	,
	opacityMask: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.opacityMaskProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.opacityMaskProperty);
		}
	}
	,
	actualOpacityMask: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualOpacityMaskProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualOpacityMaskProperty);
		}
	}
	,
	outline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.outlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.outlineProperty);
		}
	}
	,
	actualOutline: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualOutlineProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualOutlineProperty);
		}
	}
	,
	areaFillOpacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.areaFillOpacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.areaFillOpacityProperty);
		}
	}
	,
	actualAreaFillOpacity: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityProperty);
		}
	}
	,
	radiusX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.radiusXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.radiusXProperty);
		}
	}
	,
	actualRadiusX: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualRadiusXProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualRadiusXProperty);
		}
	}
	,
	radiusY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.radiusYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.radiusYProperty);
		}
	}
	,
	actualRadiusY: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualRadiusYProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualRadiusYProperty);
		}
	}
	,
	startCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.startCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.startCapProperty));
		}
	}
	,
	actualStartCap: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualStartCapProperty, $.ig.PenLineCap.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualStartCapProperty));
		}
	}
	,
	thickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.thicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.thicknessProperty);
		}
	}
	,
	actualThickness: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualThicknessProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualThicknessProperty);
		}
	}
	,
	title: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.titleProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.titleProperty);
		}
	}
	,
	toolTip: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.toolTipProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.toolTipProperty);
		}
	}
	,
	actualToolTip: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualToolTipProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualToolTipProperty);
		}
	}
	,
	useLightweightMarkers: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.useLightweightMarkersProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.useLightweightMarkersProperty);
		}
	}
	,
	actualUseLightweightMarkers: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersProperty);
		}
	}
	,
	valueMemberPath: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.valueMemberPathProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.valueMemberPathProperty);
		}
	}
	,
	visibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.visibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.visibilityProperty));
		}
	}
	,
	actualVisibility: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.actualVisibilityProperty, $.ig.Visibility.prototype.getBox(value));
			return value;
		} else {
			return $.ig.util.getEnumValue(this.getValue($.ig.StackedFragmentSeries.prototype.actualVisibilityProperty));
		}
	}
	,
	_parentSeries: null,
	parentSeries: function (value) {
		if (arguments.length === 1) {
			this._parentSeries = value;
			return value;
		} else {
			return this._parentSeries;
		}
	}
	,
	_index: 0,
	index: function (value) {
		if (arguments.length === 1) {
			this._index = value;
			return value;
		} else {
			return this._index;
		}
	}
	,
	_chart: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this._chart = value;
			return value;
		} else {
			return this._chart;
		}
	}
	,
	_valueColumn: null,
	valueColumn: function (value) {
		if (arguments.length === 1) {
			this._valueColumn = value;
			return value;
		} else {
			return this._valueColumn;
		}
	}
	,
	_visualSeriesLink: null,
	visualSeriesLink: function (value) {
		if (arguments.length === 1) {
			this._visualSeriesLink = value;
			return value;
		} else {
			return this._visualSeriesLink;
		}
	}
	,
	_highValues: null,
	highValues: function (value) {
		if (arguments.length === 1) {
			this._highValues = value;
			return value;
		} else {
			return this._highValues;
		}
	}
	,
	_lowValues: null,
	lowValues: function (value) {
		if (arguments.length === 1) {
			this._lowValues = value;
			return value;
		} else {
			return this._lowValues;
		}
	}
	,
	_buckets: null,
	buckets: function (value) {
		if (arguments.length === 1) {
			this._buckets = value;
			return value;
		} else {
			return this._buckets;
		}
	}
	,
	_positive: false,
	positive: function (value) {
		if (arguments.length === 1) {
			this._positive = value;
			return value;
		} else {
			return this._positive;
		}
	}
	,
	parentOrLocalBrush: function (value) {
		if (arguments.length === 1) {
			this.setValue($.ig.StackedFragmentSeries.prototype.parentOrLocalBrushProperty, value);
			return value;
		} else {
			return this.getValue($.ig.StackedFragmentSeries.prototype.parentOrLocalBrushProperty);
		}
	}
	,
	updateVisibility: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualVisibility(this.parentSeries().__visibility != $.ig.Visibility.prototype.visible ? $.ig.Visibility.prototype.collapsed : this.visibility());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().__visibility = this.actualVisibility();
		}
	}
	,
	updateMarkerTemplate: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualMarkerTemplate(this.markerTemplate() != null ? this.markerTemplate() : this.parentSeries().markerTemplate());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().markerTemplate(this.actualMarkerTemplate());
		}
	}
	,
	updateMarkerType: function () {
		if (this.parentSeries() == null) {
			return;
		}
		var localMarkerType = this.markerType() == $.ig.MarkerType.prototype.unset ? $.ig.MarkerType.prototype.none : this.markerType();
		this.actualMarkerType(this.markerType() == $.ig.MarkerType.prototype.unset ? this.parentSeries().markerType() : localMarkerType);
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().markerType(this.actualMarkerType());
		}
	}
	,
	updateBrush: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.parentOrLocalBrush(this.brush() != null ? this.brush() : this.parentSeries().brush());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().brush(this.parentOrLocalBrush());
		}
	}
	,
	updateDashArray: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualDashArray(this.dashArray() != null ? this.dashArray() : this.parentSeries().dashArray());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().dashArray(this.actualDashArray());
		}
	}
	,
	updateDashCap: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualDashCap(this.dashCap());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().dashCap(this.actualDashCap());
		}
	}
	,
	updateIsDropShadowEnabled: function () {
		if (this.parentSeries() == null) {
			return;
		}
		if (!this.__hasUserSetDropShadow) {
			this.actualIsDropShadowEnabled(this.parentSeries().isDropShadowEnabled());
		} else {
			this.actualIsDropShadowEnabled(this.isDropShadowEnabled());
		}
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().isDropShadowEnabled(this.actualIsDropShadowEnabled());
		}
	}
	,
	updateShadowBlur: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualShadowBlur(!$.ig.util.isNaN(this.shadowBlur()) ? this.shadowBlur() : this.parentSeries().shadowBlur());
		if (this.visualSeriesLink() != null && !$.ig.util.isNaN(this.actualShadowBlur())) {
			this.visualSeriesLink().shadowBlur(this.actualShadowBlur());
		}
	}
	,
	updateShadowColor: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualShadowColor($.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.shadowColor()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) ? this.shadowColor() : this.parentSeries().shadowColor());
		if (this.visualSeriesLink() != null && $.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.actualShadowColor()), $.ig.util.toNullable($.ig.Color.prototype.$type, null))) {
			this.visualSeriesLink().shadowColor(this.actualShadowColor());
		}
	}
	,
	updateUseSingleShadow: function () {
		if (this.parentSeries() == null) {
			return;
		}
		if (!this.__hasUserSetSingleShadow) {
			this.actualUseSingleShadow(this.parentSeries().useSingleShadow());
		} else {
			this.actualUseSingleShadow(this.useSingleShadow());
		}
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().useSingleShadow(this.actualUseSingleShadow());
		}
	}
	,
	updateShadowOffsetX: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualShadowOffsetX(!$.ig.util.isNaN(this.shadowOffsetX()) ? this.shadowOffsetX() : this.parentSeries().shadowOffsetX());
		if (this.visualSeriesLink() != null && !$.ig.util.isNaN(this.actualShadowOffsetX())) {
			this.visualSeriesLink().shadowOffsetX(this.actualShadowOffsetX());
		}
	}
	,
	updateShadowOffsetY: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualShadowOffsetY(!$.ig.util.isNaN(this.shadowOffsetY()) ? this.shadowOffsetY() : this.parentSeries().shadowOffsetY());
		if (this.visualSeriesLink() != null && !$.ig.util.isNaN(this.actualShadowOffsetY())) {
			this.visualSeriesLink().shadowOffsetY(this.actualShadowOffsetY());
		}
	}
	,
	updateEndCap: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualEndCap(this.endCap());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().endCap(this.actualEndCap());
		}
	}
	,
	updateIsHitTestVisible: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualIsHitTestVisible(this.isHitTestVisible());
	}
	,
	updateLegendItemBadgeTemplate: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualLegendItemBadgeTemplate(this.legendItemBadgeTemplate() != null ? this.legendItemBadgeTemplate() : this.parentSeries().legendItemBadgeTemplate());
		if (this.visualSeriesLink() != null) {
			if (this.actualLegendItemBadgeTemplate() != null) {
				this.visualSeriesLink().legendItemBadgeTemplate(this.actualLegendItemBadgeTemplate());
			} else {
				this.visualSeriesLink().legendItemBadgeTemplate(null);
			}
		}
	}
	,
	updateLegendItemTemplate: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualLegendItemTemplate(this.legendItemTemplate() != null ? this.legendItemTemplate() : this.parentSeries().legendItemTemplate());
		if (this.visualSeriesLink() != null) {
			if (this.actualLegendItemTemplate() != null) {
				this.visualSeriesLink().legendItemTemplate(this.actualLegendItemTemplate());
			} else {
				this.visualSeriesLink().legendItemTemplate(null);
			}
		}
	}
	,
	updateLegendItemVisibility: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualLegendItemVisibility(this.parentSeries().legendItemVisibility() != $.ig.Visibility.prototype.visible ? $.ig.Visibility.prototype.collapsed : this.legendItemVisibility());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().legendItemVisibility(this.actualLegendItemVisibility());
		}
	}
	,
	updateMarkerBrush: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualMarkerBrush(this.markerBrush() != null ? this.markerBrush() : this.parentSeries().markerBrush());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().markerBrush(this.actualMarkerBrush());
		}
	}
	,
	updateMarkerOutline: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualMarkerOutline(this.markerOutline() != null ? this.markerOutline() : this.parentSeries().markerOutline());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().markerOutline(this.actualMarkerOutline());
		}
	}
	,
	updateMarkerStyle: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualMarkerStyle(this.markerStyle() != null ? this.markerStyle() : this.parentSeries().markerStyle());
		if (this.visualSeriesLink() != null) {
			if (this.actualMarkerStyle() != null) {
				this.visualSeriesLink().markerStyle(this.actualMarkerStyle());
			} else {
				this.visualSeriesLink().markerStyle(null);
			}
		}
	}
	,
	updateOpacity: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualOpacity(!$.ig.util.isNaN(this.opacity()) ? this.opacity() : this.parentSeries().__opacity);
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().__opacity = this.actualOpacity();
		}
	}
	,
	updateOpacityMask: function () {
	}
	,
	updateOutline: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualOutline(this.outline() != null ? this.outline() : this.parentSeries().outline());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().outline(this.actualOutline());
		}
	}
	,
	updateAreaFillOpacity: function () {
		if (this.parentSeries() == null) {
			return;
		}
		var actualAreaFill = NaN;
		if ($.ig.util.cast($.ig.StackedAreaSeries.prototype.$type, this.parentSeries()) !== null) {
			actualAreaFill = (this.parentSeries()).actualAreaFillOpacity();
		}
		if ($.ig.util.cast($.ig.StackedSplineAreaSeries.prototype.$type, this.parentSeries()) !== null) {
			actualAreaFill = (this.parentSeries()).actualAreaFillOpacity();
		}
		this.actualAreaFillOpacity(!$.ig.util.isNaN(this.areaFillOpacity()) ? this.areaFillOpacity() : actualAreaFill);
		if (this.visualSeriesLink() != null) {
			if ($.ig.util.cast($.ig.AreaFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).areaFillOpacity(this.actualAreaFillOpacity());
			}
			if ($.ig.util.cast($.ig.SplineAreaFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).areaFillOpacity(this.actualAreaFillOpacity());
			}
		}
	}
	,
	updateRadiusX: function () {
		if (this.parentSeries() == null) {
			return;
		}
		var radiusX = NaN;
		if ($.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, this.parentSeries()) !== null) {
			radiusX = (this.parentSeries()).radiusX();
		}
		if ($.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.parentSeries()) !== null) {
			radiusX = (this.parentSeries()).radiusX();
		}
		this.actualRadiusX(!$.ig.util.isNaN(radiusX) ? radiusX : this.radiusX());
		if (this.visualSeriesLink() != null) {
			if ($.ig.util.cast($.ig.ColumnFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).radiusX(this.actualRadiusX());
			}
			if ($.ig.util.cast($.ig.BarFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).radiusX(this.actualRadiusX());
			}
		}
	}
	,
	updateRadiusY: function () {
		if (this.parentSeries() == null) {
			return;
		}
		var radiusY = NaN;
		if ($.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, this.parentSeries()) !== null) {
			radiusY = (this.parentSeries()).radiusY();
		}
		if ($.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.parentSeries()) !== null) {
			radiusY = (this.parentSeries()).radiusY();
		}
		this.actualRadiusY(!$.ig.util.isNaN(radiusY) ? radiusY : this.radiusY());
		if (this.visualSeriesLink() != null) {
			if ($.ig.util.cast($.ig.ColumnFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).radiusY(this.actualRadiusY());
			}
			if ($.ig.util.cast($.ig.BarFragment.prototype.$type, this.visualSeriesLink()) !== null) {
				(this.visualSeriesLink()).radiusY(this.actualRadiusY());
			}
		}
	}
	,
	updateStartCap: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualStartCap(this.startCap());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().startCap(this.actualStartCap());
		}
	}
	,
	updateThickness: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualThickness(!$.ig.util.isNaN(this.thickness()) ? this.thickness() : this.parentSeries().thickness());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().thickness(this.actualThickness());
		}
	}
	,
	updateToolTip: function () {
		if (this.parentSeries() == null) {
			return;
		}
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().toolTip(this.toolTip());
		}
	}
	,
	updateUseLightweightMarkers: function () {
		if (this.parentSeries() == null) {
			return;
		}
		this.actualUseLightweightMarkers(this.useLightweightMarkers());
		if (this.visualSeriesLink() != null) {
			this.visualSeriesLink().useLightweightMarkers(this.actualUseLightweightMarkers());
		}
	}
	,
	propertyChanged: null,
	propertyUpdated: null,
	raisePropertyChanged: function (propertyName, oldValue, newValue) {
		if (this.propertyChanged != null) {
			this.propertyChanged(this, new $.ig.PropertyChangedEventArgs(propertyName));
		}
		if (this.propertyUpdated != null) {
			this.propertyUpdated(this, new $.ig.PropertyUpdatedEventArgs(propertyName, oldValue, newValue));
		}
	}
	,
	propertyUpdatedOverride: function (sender, propertyName, oldValue, newValue) {
		if (this.parentSeries() == null) {
			return;
		}
		switch (propertyName) {
			case $.ig.StackedFragmentSeries.prototype.titlePropertyName:
				if (this.parentSeries() == null || this.visualSeriesLink() == null) {
					return;
				}
				this.visualSeriesLink().title(newValue);
				break;
			case $.ig.StackedFragmentSeries.prototype.visibilityPropertyName:
				this.updateVisibility();
				break;
			case $.ig.StackedFragmentSeries.prototype.brushPropertyName:
				this.updateBrush();
				break;
			case $.ig.StackedFragmentSeries.prototype.dashArrayPropertyName:
				this.updateDashArray();
				break;
			case $.ig.StackedFragmentSeries.prototype.dashCapPropertyName:
				this.updateDashCap();
				break;
			case $.ig.StackedFragmentSeries.prototype.isDropShadowEnabledPropertyName:
				this.__hasUserSetDropShadow = true;
				this.updateIsDropShadowEnabled();
				break;
			case $.ig.StackedFragmentSeries.prototype.shadowBlurPropertyName:
				this.updateShadowBlur();
				break;
			case $.ig.StackedFragmentSeries.prototype.shadowColorPropertyName:
				this.updateShadowColor();
				break;
			case $.ig.StackedFragmentSeries.prototype.useSingleShadowPropertyName:
				this.__hasUserSetDropShadow = true;
				this.updateUseSingleShadow();
				break;
			case $.ig.StackedFragmentSeries.prototype.shadowOffsetXPropertyName:
				this.updateShadowOffsetX();
				break;
			case $.ig.StackedFragmentSeries.prototype.shadowOffsetYPropertyName:
				this.updateShadowOffsetY();
				break;
			case $.ig.StackedFragmentSeries.prototype.endCapPropertyName:
				this.updateEndCap();
				break;
			case $.ig.StackedFragmentSeries.prototype.isHitTestVisiblePropertyName:
				this.updateIsHitTestVisible();
				break;
			case $.ig.StackedFragmentSeries.prototype.markerTemplatePropertyName:
				this.updateMarkerTemplate();
				break;
			case $.ig.StackedFragmentSeries.prototype.markerTypePropertyName:
				this.updateMarkerType();
				break;
			case $.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplatePropertyName:
				this.updateLegendItemBadgeTemplate();
				break;
			case $.ig.StackedFragmentSeries.prototype.legendItemTemplatePropertyName:
				this.updateLegendItemTemplate();
				break;
			case $.ig.StackedFragmentSeries.prototype.legendItemVisibilityPropertyName:
				this.updateLegendItemVisibility();
				break;
			case $.ig.StackedFragmentSeries.prototype.markerBrushPropertyName:
				this.updateMarkerBrush();
				break;
			case $.ig.StackedFragmentSeries.prototype.markerOutlinePropertyName:
				this.updateMarkerOutline();
				break;
			case $.ig.StackedFragmentSeries.prototype.markerStylePropertyName:
				this.updateMarkerStyle();
				break;
			case $.ig.StackedFragmentSeries.prototype.opacityPropertyName:
				this.updateOpacity();
				break;
			case $.ig.StackedFragmentSeries.prototype.opacityMaskPropertyName:
				this.updateOpacityMask();
				break;
			case $.ig.StackedFragmentSeries.prototype.outlinePropertyName:
				this.updateOutline();
				break;
			case $.ig.StackedFragmentSeries.prototype.areaFillOpacityPropertyName:
				this.updateAreaFillOpacity();
				break;
			case $.ig.StackedFragmentSeries.prototype.radiusXPropertyName:
				this.updateRadiusX();
				break;
			case $.ig.StackedFragmentSeries.prototype.radiusYPropertyName:
				this.updateRadiusY();
				break;
			case $.ig.StackedFragmentSeries.prototype.startCapPropertyName:
				this.updateStartCap();
				break;
			case $.ig.StackedFragmentSeries.prototype.thicknessPropertyName:
				this.updateThickness();
				break;
			case $.ig.StackedFragmentSeries.prototype.toolTipPropertyName:
				this.updateToolTip();
				break;
			case $.ig.StackedFragmentSeries.prototype.useLightweightMarkersPropertyName:
				this.updateUseLightweightMarkers();
				break;
		}
		this.parentSeries().renderSeries(false);
	}
	,
	$type: new $.ig.Type('StackedFragmentSeries', $.ig.DependencyObject.prototype.$type, [$.ig.INotifyPropertyChanged.prototype.$type])
}, true);

$.ig.util.defType('StackedSeriesCollection', 'ObservableCollection$1', {
	init: function () {
		$.ig.ObservableCollection$1.prototype.init.call(this, $.ig.StackedFragmentSeries.prototype.$type, 0);
	},
	collectionResetting: null,
	clearItems: function () {
		if (this.collectionResetting != null) {
			this.collectionResetting(this, null);
		}
		$.ig.ObservableCollection$1.prototype.clearItems.call(this);
	}
	,
	$type: new $.ig.Type('StackedSeriesCollection', $.ig.ObservableCollection$1.prototype.$type.specialize($.ig.StackedFragmentSeries.prototype.$type))
}, true);

$.ig.util.defType('StackedSeriesFramePreparer', 'CategoryFramePreparer', {
	init: function (initNumber, host) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		$.ig.CategoryFramePreparer.prototype.init.call(this, 0, host);
	},
	init1: function (initNumber, host, markersHost, viewportHost, errorBarsHost, bucketizingHost) {
		$.ig.CategoryFramePreparer.prototype.init1.call(this, 1, host, markersHost, viewportHost, errorBarsHost, bucketizingHost);
	},
	getValues: function (p) {
		var h = new $.ig.SingleValuesHolder();
		if ($.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, this.categoryBasedHost()) !== null || $.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.categoryBasedHost()) !== null) {
			var host = $.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, this.categoryBasedHost());
			if (host.actualSeries().count() > 0) {
				h.values(host.actualSeries().__inner[0].valueColumn());
			}
			return h;
		}
		var values = this.valuesProvider().valueColumn();
		h.values(values);
		return h;
	}
	,
	prepareData: function (p, h, offset, markers, errorBars) {
		var $self = this;
		var markerCount = 0;
		var isCluster = false;
		var endBucket;
		var isSortingScaler = p.sortingScaler() != null;
		var collisionAvoider = this.categoryBasedHost().provideCollisionDetector();
		var highMarkerFidelity = p.useHighMarkerFidelity();
		var effectiveViewportRect = p.effectiveViewportRect();
		var sParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), p.scaler().isInverted(), effectiveViewportRect);
		var yParams = new $.ig.ScalerParams(0, p.windowRect(), p.viewportRect(), p.yScaler().isInverted(), effectiveViewportRect);
		var singlePixelSpan = (p.scaler().getUnscaledValue(2, sParams) - p.scaler().getUnscaledValue(1, sParams));
		var windowRect = p.windowRect();
		var viewportRect = p.viewportRect();
		var isLogarithmicYScaler = $.ig.util.cast($.ig.NumericAxisBase.prototype.$type, p.yScaler()) !== null && (p.yScaler()).isReallyLogarithmic();
		for (var i = p.firstBucket(); i <= p.lastBucket(); ++i) {
			var bucket;
			if (p.sortingScaler() == null) {
				bucket = this.bucketizingHost().getBucket(i);
			} else {
				bucket = (function () { var $ret = $self.sortingBucketize(p, i, h, singlePixelSpan, isCluster, endBucket, offset); i = $ret.p1; isCluster = $ret.p4; endBucket = $ret.p5; return $ret.ret; }());
			}
			var isValidBucket = !isLogarithmicYScaler || (isLogarithmicYScaler && bucket[1] > 0);
			var bucketX = bucket[0];
			if (!isNaN(bucket[0])) {
				this.scaleBucketValues(p, bucket, offset, isSortingScaler, sParams, yParams);
				p.frame()._buckets.add(bucket);
				var itemIndex = i * p.bucketSize();
				var unsortedIndex = itemIndex;
				if (p.sortingScaler() != null && p.sortingScaler().sortedIndices() != null && itemIndex >= 0 && itemIndex < p.sortingScaler().sortedIndices().count()) {
					itemIndex = p.sortingScaler().sortedIndices().__inner[itemIndex];
				}
				var markerBucket = bucket;
				if (highMarkerFidelity && itemIndex < h.count()) {
					markerBucket = new Array(bucket.length);
					markerBucket[0] = bucketX;
					this.storeYValues(h, itemIndex, true, p.isFragment());
					markerBucket[1] = h.tempY0();
					markerBucket[2] = h.tempY1();
					this.scaleBucketValues(p, markerBucket, offset, isSortingScaler, sParams, yParams);
				}
				if (markers && isValidBucket && this.prepareMarker(p.frame(), markerBucket, collisionAvoider, Math.min(itemIndex, h.count() - 1), markerCount, p.frame()._buckets.count() - 1)) {
					++markerCount;
				}
			}
		}
		return markerCount;
	}
	,
	prepareMarker: function (frame, bucket, collisionAvoider, itemIndex, markerCount, markerBucket) {
		var x = bucket[0];
		var y = bucket[1];
		if ($.ig.util.cast($.ig.IBarSeries.prototype.$type, this.markersHost()) !== null) {
			y = bucket[0];
			x = bucket[1];
		}
		var markerRect = new $.ig.Rect(0, x - 5, y - 5, 11, 11);
		if (!$.ig.util.isNaN(x) && !$.ig.util.isNaN(y) && !Number.isInfinity(x) && !Number.isInfinity(y) && collisionAvoider.tryAdd(markerRect)) {
			frame._markers.add({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			this.markersHost().updateMarkerTemplate(markerCount, itemIndex, markerBucket);
			return true;
		}
		return false;
	}
	,
	$type: new $.ig.Type('StackedSeriesFramePreparer', $.ig.CategoryFramePreparer.prototype.$type)
}, true);

$.ig.util.defType('LineFragment', 'FragmentBase', {
	init: function () {
		$.ig.FragmentBase.prototype.init.call(this);
		this.defaultStyleKey($.ig.LineFragment.prototype.$type);
	},
	createView: function () {
		return new $.ig.LineFragmentView(this);
	}
	,
	_lineFragmentView: null,
	lineFragmentView: function (value) {
		if (arguments.length === 1) {
			this._lineFragmentView = value;
			return value;
		} else {
			return this._lineFragmentView;
		}
	}
	,
	onViewCreated: function (view) {
		$.ig.FragmentBase.prototype.onViewCreated.call(this, view);
		this.lineFragmentView(view);
	}
	,
	testRangeAreaOver: function (position, isFinger) {
		var pathData1 = this.lineFragmentView()._polygon01.data();
		if (this.testOverPoly(position, pathData1)) {
			return true;
		}
		return false;
	}
	,
	testHit: function (position, isFinger) {
		if (this.testNearStrokes(position, isFinger)) {
			return true;
		}
		if (this.testRangeAreaOver(position, isFinger)) {
			return true;
		}
		if (this.testMarkersOver(position, isFinger)) {
			return true;
		}
		return false;
	}
	,
	testNearStrokes: function (position, isFinger) {
		var pathData1 = this.lineFragmentView()._polyline0.data();
		if (this.testNearStroke(position, isFinger, pathData1)) {
			return true;
		}
		var pathData2 = this.lineFragmentView()._polyline1.data();
		if (this.testNearStroke(position, isFinger, pathData2)) {
			return true;
		}
		return false;
	}
	,
	preferredCategoryMode: function (axis) {
		return $.ig.CategoryMode.prototype.mode0;
	}
	,
	clearRendering: function (wipeClean, view) {
		$.ig.FragmentBase.prototype.clearRendering.call(this, wipeClean, view);
		var lineFragmentView = view;
		lineFragmentView.clearLine();
	}
	,
	renderFrame: function (frame, view) {
		$.ig.FragmentBase.prototype.renderFrame.call(this, frame, view);
		var x0 = function (i) {
			return frame._buckets.__inner[i][0];
		};
		var y0 = function (i) {
			return frame._buckets.__inner[i][1];
		};
		var x1 = function (i) {
			return frame._buckets.__inner[i][0];
		};
		var y1 = function (i) {
			return frame._buckets.__inner[i][2];
		};
		this.lineRasterizer().isSortingAxis($.ig.util.cast($.ig.ISortingAxis.prototype.$type, this.xAxis()) !== null ? true : false);
		var bucketSize = view.bucketCalculator()._bucketSize;
		var lineFragmentView = $.ig.util.cast($.ig.LineFragmentView.prototype.$type, view);
		this.lineRasterizer().rasterizePolylinePaths(lineFragmentView._polyline0, lineFragmentView._polygon01, lineFragmentView._polyline1, frame._buckets.count(), frame._buckets, true, $.ig.UnknownValuePlotting.prototype.linearInterpolate, this.getLineClipper(frame._buckets, frame._buckets.count() - 1, view.viewport(), view.windowRect()), bucketSize, this.resolution());
	}
	,
	$type: new $.ig.Type('LineFragment', $.ig.FragmentBase.prototype.$type)
}, true);

$.ig.util.defType('ChartVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.dipScalingRatio(1);
		this.axes(new $.ig.AxisVisualDataList());
		this.series(new $.ig.SeriesVisualDataList());
	},
	_axes: null,
	axes: function (value) {
		if (arguments.length === 1) {
			this._axes = value;
			return value;
		} else {
			return this._axes;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_title: null,
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	,
	_subtitle: null,
	subtitle: function (value) {
		if (arguments.length === 1) {
			this._subtitle = value;
			return value;
		} else {
			return this._subtitle;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_actualWindowRect: null,
	actualWindowRect: function (value) {
		if (arguments.length === 1) {
			this._actualWindowRect = value;
			return value;
		} else {
			return this._actualWindowRect;
		}
	}
	,
	_contentArea: null,
	contentArea: function (value) {
		if (arguments.length === 1) {
			this._contentArea = value;
			return value;
		} else {
			return this._contentArea;
		}
	}
	,
	_centralArea: null,
	centralArea: function (value) {
		if (arguments.length === 1) {
			this._centralArea = value;
			return value;
		} else {
			return this._centralArea;
		}
	}
	,
	_plotArea: null,
	plotArea: function (value) {
		if (arguments.length === 1) {
			this._plotArea = value;
			return value;
		} else {
			return this._plotArea;
		}
	}
	,
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	_isViewportScaled: false,
	isViewportScaled: function (value) {
		if (arguments.length === 1) {
			this._isViewportScaled = value;
			return value;
		} else {
			return this._isViewportScaled;
		}
	}
	,
	scaleByViewport: function () {
		var en = this.axes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			axis.scaleByViewport();
		}
		var en1 = this.series().getEnumerator();
		while (en1.moveNext()) {
			var series = en1.current();
			series.scaleByViewport();
		}
		if (this.title() != null) {
			this.title().scaleByViewport();
		}
		if (this.subtitle() != null) {
			this.subtitle().scaleByViewport();
		}
	}
	,
	getBounds: function () {
		return new $.ig.Rect(0, 0, 0, this.width(), this.height());
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("name: " + this.name() + ",");
		sb.appendLine1("width: " + this.width() + ",");
		sb.appendLine1("height: " + this.height() + ",");
		sb.appendLine1("plotArea: { left: " + this.plotArea().left() + ", top: " + this.plotArea().top() + ", width: " + this.plotArea().width() + ", height: " + this.plotArea().height() + "}, ");
		sb.appendLine1("contentArea: { left: " + this.contentArea().left() + ", top: " + this.contentArea().top() + ", width: " + this.contentArea().width() + ", height: " + this.contentArea().height() + "}, ");
		sb.appendLine1("centralArea: { left: " + this.centralArea().left() + ", top: " + this.centralArea().top() + ", width: " + this.centralArea().width() + ", height: " + this.centralArea().height() + "}, ");
		sb.appendLine1("isViewportScaled: " + (this.isViewportScaled() ? "true" : "false") + ", ");
		sb.appendLine1("axes: [");
		for (var i = 0; i < this.axes().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.axes().__inner[i].serialize());
		}
		sb.appendLine1("],");
		sb.appendLine1("series: [");
		for (var i1 = 0; i1 < this.series().count(); i1++) {
			if (i1 != 0) {
				sb.append5(", ");
			}
			sb.append5(this.series().__inner[i1].serialize());
		}
		sb.appendLine1("]");
		if (this.title() != null) {
			sb.appendLine1(", title: " + this.title().serialize());
		}
		if (this.subtitle() != null) {
			sb.appendLine1(", subtitle: " + this.subtitle().serialize());
		}
		sb.append5(", dipScalingRatio: " + this.dipScalingRatio().toString());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	getSerializedSeriesPoints: function (seriesName, tag, settings) {
		var points = new $.ig.List$1($.ig.List$1.prototype.$type.specialize($.ig.Point.prototype.$type), 0);
		for (var i = 0; i < this.series().count(); i++) {
			if (this.series().__inner[i].name() == seriesName) {
				var hasTag = this.series().__inner[i].shapes().containingTag(tag);
				for (var j = 0; j < hasTag.count(); j++) {
					var shape = hasTag.__inner[i];
					shape.getPointsOverride(points, settings);
				}
			}
		}
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("[");
		for (var i1 = 0; i1 < points.count(); i1++) {
			var pointList = points.__inner[i1];
			sb.appendLine1("[");
			for (var j1 = 0; j1 < pointList.count(); j1++) {
				if (j1 != 0) {
					sb.append5(", ");
				}
				sb.append5("{ x: " + pointList.__inner[j1].__x + ", y: " + pointList.__inner[j1].__y + "}");
			}
			sb.appendLine1("]");
		}
		sb.appendLine1("]");
		return sb.toString();
	}
	,
	_dipScalingRatio: 0,
	dipScalingRatio: function (value) {
		if (arguments.length === 1) {
			this._dipScalingRatio = value;
			return value;
		} else {
			return this._dipScalingRatio;
		}
	}
	,
	$type: new $.ig.Type('ChartVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ChartTitleVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.appearance(new $.ig.LabelAppearanceData());
	},
	width: function () {
		return this.viewport().width();
	}
	,
	height: function () {
		return this.viewport().height();
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_textPlotArea: null,
	textPlotArea: function (value) {
		if (arguments.length === 1) {
			this._textPlotArea = value;
			return value;
		} else {
			return this._textPlotArea;
		}
	}
	,
	_appearance: null,
	appearance: function (value) {
		if (arguments.length === 1) {
			this._appearance = value;
			return value;
		} else {
			return this._appearance;
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("viewport: " + $.ig.VisualDataSerializer.prototype.serialize(this.viewport()) + ", ");
		sb.appendLine1("textPlotArea: " + $.ig.VisualDataSerializer.prototype.serialize(this.textPlotArea()) + ", ");
		sb.appendLine1("appearance: " + this.appearance().serialize());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	scaleByViewport1: function (viewport) {
		var x = (this.textPlotArea().x() - viewport.left()) / viewport.width();
		var y = (this.textPlotArea().y() - viewport.top()) / viewport.height();
		var width = this.textPlotArea().width() / viewport.width();
		var height = this.textPlotArea().height() / viewport.height();
		this.textPlotArea(new $.ig.Rect(0, x, y, width, height));
	}
	,
	scaleByViewport: function () {
		var x = (this.textPlotArea().x() - this.viewport().left()) / this.viewport().width();
		var y = (this.textPlotArea().y() - this.viewport().top()) / this.viewport().height();
		var width = this.textPlotArea().width() / this.viewport().width();
		var height = this.textPlotArea().height() / this.viewport().height();
		this.textPlotArea(new $.ig.Rect(0, x, y, width, height));
	}
	,
	unScaleByViewport1: function (viewport) {
		var x = this.textPlotArea().x() * viewport.width();
		var y = this.textPlotArea().y() * viewport.height();
		var width = this.textPlotArea().width() * viewport.width();
		var height = this.textPlotArea().height() * viewport.height();
		this.textPlotArea(new $.ig.Rect(0, x, y, width, height));
	}
	,
	unScaleByViewport: function () {
		var x = this.textPlotArea().x() * this.viewport().width();
		var y = this.textPlotArea().y() * this.viewport().height();
		var width = this.textPlotArea().width() * this.viewport().width();
		var height = this.textPlotArea().height() * this.viewport().height();
		this.textPlotArea(new $.ig.Rect(0, x, y, width, height));
	}
	,
	$type: new $.ig.Type('ChartTitleVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieChartVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.slices(new $.ig.PieSliceVisualDataList());
		this.others(new $.ig.List$1($.ig.Object.prototype.$type, 0));
		this.dipScalingRatio(1);
	},
	_slices: null,
	slices: function (value) {
		if (arguments.length === 1) {
			this._slices = value;
			return value;
		} else {
			return this._slices;
		}
	}
	,
	_othersSlice: null,
	othersSlice: function (value) {
		if (arguments.length === 1) {
			this._othersSlice = value;
			return value;
		} else {
			return this._othersSlice;
		}
	}
	,
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	_others: null,
	others: function (value) {
		if (arguments.length === 1) {
			this._others = value;
			return value;
		} else {
			return this._others;
		}
	}
	,
	_radiusFactor: 0,
	radiusFactor: function (value) {
		if (arguments.length === 1) {
			this._radiusFactor = value;
			return value;
		} else {
			return this._radiusFactor;
		}
	}
	,
	_leaderLineMargin: 0,
	leaderLineMargin: function (value) {
		if (arguments.length === 1) {
			this._leaderLineMargin = value;
			return value;
		} else {
			return this._leaderLineMargin;
		}
	}
	,
	_isViewportScaled: false,
	isViewportScaled: function (value) {
		if (arguments.length === 1) {
			this._isViewportScaled = value;
			return value;
		} else {
			return this._isViewportScaled;
		}
	}
	,
	_dipScalingRatio: 0,
	dipScalingRatio: function (value) {
		if (arguments.length === 1) {
			this._dipScalingRatio = value;
			return value;
		} else {
			return this._dipScalingRatio;
		}
	}
	,
	scaleByViewport: function () {
		if (this.isViewportScaled()) {
			return;
		}
		this.isViewportScaled(true);
		for (var i = 0; i < this.slices().count(); i++) {
			this.slices().__inner[i].scaleByViewport(this.viewport());
		}
		if (this.othersSlice() != null) {
			this.othersSlice().scaleByViewport(this.viewport());
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("name: " + this.name() + ",");
		sb.appendLine1("leaderLineMargin: " + this.leaderLineMargin() + ",");
		sb.appendLine1("radiusFactor: " + this.radiusFactor() + ",");
		sb.appendLine1("width: " + this.width() + ",");
		sb.appendLine1("height: " + this.height() + ",");
		sb.appendLine1("isViewportScaled: " + (this.isViewportScaled() ? "true" : "false") + ", ");
		sb.appendLine1("slices: [");
		for (var i = 0; i < this.slices().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.slices().__inner[i].serialize());
		}
		sb.appendLine1("],");
		sb.appendLine1("viewport: { left: " + this.viewport().left() + ", top: " + this.viewport().top() + ", width: " + this.viewport().width() + ", height: " + this.viewport().height() + "}");
		sb.append5(", dipScalingRatio: " + this.dipScalingRatio().toString());
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('PieChartVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.shapes(new $.ig.PrimitiveVisualDataList());
		this.markerShapes(new $.ig.MarkerVisualDataList());
		this.pointerTooltips(new $.ig.PointerTooltipVisualDataList());
	},
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	_type: null,
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_opacity: 0,
	opacity: function (value) {
		if (arguments.length === 1) {
			this._opacity = value;
			return value;
		} else {
			return this._opacity;
		}
	}
	,
	_shapes: null,
	shapes: function (value) {
		if (arguments.length === 1) {
			this._shapes = value;
			return value;
		} else {
			return this._shapes;
		}
	}
	,
	_pointerTooltips: null,
	pointerTooltips: function (value) {
		if (arguments.length === 1) {
			this._pointerTooltips = value;
			return value;
		} else {
			return this._pointerTooltips;
		}
	}
	,
	_markerShapes: null,
	markerShapes: function (value) {
		if (arguments.length === 1) {
			this._markerShapes = value;
			return value;
		} else {
			return this._markerShapes;
		}
	}
	,
	_pixels: null,
	pixels: function (value) {
		if (arguments.length === 1) {
			this._pixels = value;
			return value;
		} else {
			return this._pixels;
		}
	}
	,
	_pixelWidth: 0,
	pixelWidth: function (value) {
		if (arguments.length === 1) {
			this._pixelWidth = value;
			return value;
		} else {
			return this._pixelWidth;
		}
	}
	,
	scaleByViewport: function () {
		var en = this.shapes().getEnumerator();
		while (en.moveNext()) {
			var shape = en.current();
			shape.scaleByViewport(this.viewport());
		}
		var en1 = this.markerShapes().getEnumerator();
		while (en1.moveNext()) {
			var markerShape = en1.current();
			markerShape.scaleByViewport(this.viewport());
		}
		var en2 = this.pointerTooltips().getEnumerator();
		while (en2.moveNext()) {
			var pointer = en2.current();
			pointer.scaleByViewport(this.viewport());
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("name: \"" + this.name() + "\",");
		sb.appendLine1("type: \"" + this.type() + "\", ");
		sb.appendLine1("opacity: " + this.opacity() + ", ");
		sb.appendLine1("viewport: { left: " + this.viewport().left() + ", top: " + this.viewport().top() + ", width: " + this.viewport().width() + ", height: " + this.viewport().height() + "}, ");
		sb.appendLine1("shapes: [");
		for (var i = 0; i < this.shapes().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.shapes().__inner[i].serialize());
		}
		sb.appendLine1("],");
		sb.appendLine1("pointerTooltips: [");
		for (var i1 = 0; i1 < this.pointerTooltips().count(); i1++) {
			if (i1 != 0) {
				sb.append5(", ");
			}
			sb.append5(this.pointerTooltips().__inner[i1].serialize());
		}
		sb.appendLine1("],");
		sb.appendLine1("markerShapes: [");
		for (var i2 = 0; i2 < this.markerShapes().count(); i2++) {
			if (i2 != 0) {
				sb.append5(", ");
			}
			sb.append5(this.markerShapes().__inner[i2].serialize());
		}
		sb.appendLine1("]");
		if (this.pixels() != null) {
			sb.appendLine1(", pixels: [");
			for (var i3 = 0; i3 < this.pixels().length; i3++) {
				if (i3 != 0) {
					sb.append5(", ");
				}
				sb.append5(this.pixels()[i3].toString());
			}
			sb.appendLine1("], ");
			sb.appendLine1("pixelWidth: " + this.pixelWidth() + ", ");
		}
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('SeriesVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.SeriesVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('SeriesVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.SeriesVisualData.prototype.$type))
}, true);

$.ig.util.defType('MarkerVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_x: 0,
	x: function (value) {
		if (arguments.length === 1) {
			this._x = value;
			return value;
		} else {
			return this._x;
		}
	}
	,
	_y: 0,
	y: function (value) {
		if (arguments.length === 1) {
			this._y = value;
			return value;
		} else {
			return this._y;
		}
	}
	,
	_index: 0,
	index: function (value) {
		if (arguments.length === 1) {
			this._index = value;
			return value;
		} else {
			return this._index;
		}
	}
	,
	_markerAppearance: null,
	markerAppearance: function (value) {
		if (arguments.length === 1) {
			this._markerAppearance = value;
			return value;
		} else {
			return this._markerAppearance;
		}
	}
	,
	_markerType: null,
	markerType: function (value) {
		if (arguments.length === 1) {
			this._markerType = value;
			return value;
		} else {
			return this._markerType;
		}
	}
	,
	_contentTemplate: null,
	contentTemplate: function (value) {
		if (arguments.length === 1) {
			this._contentTemplate = value;
			return value;
		} else {
			return this._contentTemplate;
		}
	}
	,
	_visibility: 0,
	visibility: function (value) {
		if (arguments.length === 1) {
			this._visibility = value;
			return value;
		} else {
			return this._visibility;
		}
	}
	,
	serialize: function () {
		return "{ x: " + this.x() + ", y: " + this.y() + ", index: " + this.index() + ", markerAppearance: " + (this.markerAppearance() != null ? this.markerAppearance().serialize() : "null") + ", markerType: \"" + this.markerType() + "\", visibility: " + (this.visibility() == $.ig.Visibility.prototype.visible ? "true" : "false") + ", " + "bounds: { left: " + this.bounds().left() + ", top:" + this.bounds().top() + ", width:" + this.bounds().width() + ", height: " + this.bounds().height() + "} }";
	}
	,
	scaleByViewport: function (viewport) {
		this.x((this.x() - viewport.left()) / viewport.width());
		this.y((this.y() - viewport.top()) / viewport.height());
		if ($.ig.Rect.prototype.l_op_Inequality(this.bounds(), null)) {
			var left = (this.bounds().left() - viewport.left()) / viewport.width();
			var top = (this.bounds().top() - viewport.top()) / viewport.height();
			var right = (this.bounds().right() - viewport.left()) / viewport.width();
			var bottom = (this.bounds().bottom() - viewport.top()) / viewport.height();
			this.bounds(new $.ig.Rect(0, left, top, right - left, bottom - top));
		}
	}
	,
	_bounds: null,
	bounds: function (value) {
		if (arguments.length === 1) {
			this._bounds = value;
			return value;
		} else {
			return this._bounds;
		}
	}
	,
	$type: new $.ig.Type('MarkerVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('MarkerVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.MarkerVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('MarkerVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.MarkerVisualData.prototype.$type))
}, true);

$.ig.util.defType('AxisVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.tickMarksLength(0);
		this.labels(new $.ig.AxisLabelVisualDataList());
		this.title(new $.ig.ChartTitleVisualData());
	},
	_name: null,
	name: function (value) {
		if (arguments.length === 1) {
			this._name = value;
			return value;
		} else {
			return this._name;
		}
	}
	,
	_type: null,
	type: function (value) {
		if (arguments.length === 1) {
			this._type = value;
			return value;
		} else {
			return this._type;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_tickMarksLength: 0,
	tickMarksLength: function (value) {
		if (arguments.length === 1) {
			this._tickMarksLength = value;
			return value;
		} else {
			return this._tickMarksLength;
		}
	}
	,
	_tickMarks: null,
	tickMarks: function (value) {
		if (arguments.length === 1) {
			this._tickMarks = value;
			return value;
		} else {
			return this._tickMarks;
		}
	}
	,
	_labels: null,
	labels: function (value) {
		if (arguments.length === 1) {
			this._labels = value;
			return value;
		} else {
			return this._labels;
		}
	}
	,
	_axisLine: null,
	axisLine: function (value) {
		if (arguments.length === 1) {
			this._axisLine = value;
			return value;
		} else {
			return this._axisLine;
		}
	}
	,
	_majorLines: null,
	majorLines: function (value) {
		if (arguments.length === 1) {
			this._majorLines = value;
			return value;
		} else {
			return this._majorLines;
		}
	}
	,
	_minorLines: null,
	minorLines: function (value) {
		if (arguments.length === 1) {
			this._minorLines = value;
			return value;
		} else {
			return this._minorLines;
		}
	}
	,
	_strips: null,
	strips: function (value) {
		if (arguments.length === 1) {
			this._strips = value;
			return value;
		} else {
			return this._strips;
		}
	}
	,
	_labelsPlotArea: null,
	labelsPlotArea: function (value) {
		if (arguments.length === 1) {
			this._labelsPlotArea = value;
			return value;
		} else {
			return this._labelsPlotArea;
		}
	}
	,
	_labelsViewport: null,
	labelsViewport: function (value) {
		if (arguments.length === 1) {
			this._labelsViewport = value;
			return value;
		} else {
			return this._labelsViewport;
		}
	}
	,
	_title: null,
	title: function (value) {
		if (arguments.length === 1) {
			this._title = value;
			return value;
		} else {
			return this._title;
		}
	}
	,
	scaleByViewport: function () {
		var isHorizontal = true;
		if (this.type().equals("NumericYAxis") || this.type().equals("CategoryYAxis")) {
			isHorizontal = false;
		}
		var en = this.labels().getEnumerator();
		while (en.moveNext()) {
			var label = en.current();
			label.scaleByViewport(this.labelsViewport(), isHorizontal);
		}
		this.tickMarks().scaleByViewport(this.labelsViewport());
		this.axisLine().scaleByViewport(this.labelsViewport());
		if (this.title() != null) {
			this.title().scaleByViewport1(this.labelsViewport());
		}
		this.majorLines().scaleByViewport(this.viewport());
		this.minorLines().scaleByViewport(this.viewport());
		this.strips().scaleByViewport(this.viewport());
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("name: \"" + this.name() + "\",");
		sb.appendLine1("type: \"" + this.type() + "\", ");
		sb.appendLine1("tickMarksLength: \"" + this.tickMarksLength().toString() + "\", ");
		sb.appendLine1("viewport: " + $.ig.VisualDataSerializer.prototype.serialize(this.viewport()) + ", ");
		sb.appendLine1("labelsViewport: " + $.ig.VisualDataSerializer.prototype.serialize(this.labelsViewport()) + ", ");
		if ($.ig.Rect.prototype.l_op_Inequality(this.labelsPlotArea(), null)) {
			sb.appendLine1("labelsPlotArea: " + $.ig.VisualDataSerializer.prototype.serialize(this.labelsPlotArea()) + ", ");
		}
		sb.appendLine1("labels: [");
		for (var i = 0; i < this.labels().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.labels().__inner[i].serialize());
		}
		sb.appendLine1("],");
		if (this.title() != null) {
			sb.appendLine1("title: " + ((this.title() != null) ? this.title().serialize() : "null") + ", ");
		}
		sb.appendLine1("axisLine: " + ((this.axisLine() != null) ? this.axisLine().serialize() : "null") + ", ");
		sb.appendLine1("tickMarks: " + ((this.tickMarks() != null) ? this.tickMarks().serialize() : "null") + ", ");
		if (this.axisLine() != null) {
			sb.appendLine1("majorLines: " + ((this.majorLines() != null) ? this.majorLines().serialize() : "null") + ", ");
			sb.appendLine1("minorLines: " + ((this.minorLines() != null) ? this.minorLines().serialize() : "null") + ", ");
			sb.appendLine1("strips: " + ((this.strips() != null) ? this.strips().serialize() : "null"));
		}
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('AxisVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.AxisVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('AxisVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.AxisVisualData.prototype.$type))
}, true);

$.ig.util.defType('PieSliceVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.labelBounds($.ig.Rect.prototype.empty());
	},
	_startAngle: 0,
	startAngle: function (value) {
		if (arguments.length === 1) {
			this._startAngle = value;
			return value;
		} else {
			return this._startAngle;
		}
	}
	,
	_endAngle: 0,
	endAngle: function (value) {
		if (arguments.length === 1) {
			this._endAngle = value;
			return value;
		} else {
			return this._endAngle;
		}
	}
	,
	_origin: null,
	origin: function (value) {
		if (arguments.length === 1) {
			this._origin = value;
			return value;
		} else {
			return this._origin;
		}
	}
	,
	_explodedOrigin: null,
	explodedOrigin: function (value) {
		if (arguments.length === 1) {
			this._explodedOrigin = value;
			return value;
		} else {
			return this._explodedOrigin;
		}
	}
	,
	_radius: 0,
	radius: function (value) {
		if (arguments.length === 1) {
			this._radius = value;
			return value;
		} else {
			return this._radius;
		}
	}
	,
	_explodedRadius: 0,
	explodedRadius: function (value) {
		if (arguments.length === 1) {
			this._explodedRadius = value;
			return value;
		} else {
			return this._explodedRadius;
		}
	}
	,
	_innerExtentStart: 0,
	innerExtentStart: function (value) {
		if (arguments.length === 1) {
			this._innerExtentStart = value;
			return value;
		} else {
			return this._innerExtentStart;
		}
	}
	,
	_innerExtentEnd: 0,
	innerExtentEnd: function (value) {
		if (arguments.length === 1) {
			this._innerExtentEnd = value;
			return value;
		} else {
			return this._innerExtentEnd;
		}
	}
	,
	_isSelected: false,
	isSelected: function (value) {
		if (arguments.length === 1) {
			this._isSelected = value;
			return value;
		} else {
			return this._isSelected;
		}
	}
	,
	_isExploded: false,
	isExploded: function (value) {
		if (arguments.length === 1) {
			this._isExploded = value;
			return value;
		} else {
			return this._isExploded;
		}
	}
	,
	_isOthersSlice: false,
	isOthersSlice: function (value) {
		if (arguments.length === 1) {
			this._isOthersSlice = value;
			return value;
		} else {
			return this._isOthersSlice;
		}
	}
	,
	_index: 0,
	index: function (value) {
		if (arguments.length === 1) {
			this._index = value;
			return value;
		} else {
			return this._index;
		}
	}
	,
	_label: null,
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	,
	_labelAngle: 0,
	labelAngle: function (value) {
		if (arguments.length === 1) {
			this._labelAngle = value;
			return value;
		} else {
			return this._labelAngle;
		}
	}
	,
	_labelBounds: null,
	labelBounds: function (value) {
		if (arguments.length === 1) {
			this._labelBounds = value;
			return value;
		} else {
			return this._labelBounds;
		}
	}
	,
	_appearance: null,
	appearance: function (value) {
		if (arguments.length === 1) {
			this._appearance = value;
			return value;
		} else {
			return this._appearance;
		}
	}
	,
	_labelAppearance: null,
	labelAppearance: function (value) {
		if (arguments.length === 1) {
			this._labelAppearance = value;
			return value;
		} else {
			return this._labelAppearance;
		}
	}
	,
	_leaderLineAppearance: null,
	leaderLineAppearance: function (value) {
		if (arguments.length === 1) {
			this._leaderLineAppearance = value;
			return value;
		} else {
			return this._leaderLineAppearance;
		}
	}
	,
	_slicePath: null,
	slicePath: function (value) {
		if (arguments.length === 1) {
			this._slicePath = value;
			return value;
		} else {
			return this._slicePath;
		}
	}
	,
	_leaderLinePath: null,
	leaderLinePath: function (value) {
		if (arguments.length === 1) {
			this._leaderLinePath = value;
			return value;
		} else {
			return this._leaderLinePath;
		}
	}
	,
	scaleByViewport: function (viewport) {
		if (this.slicePath() != null) {
			this.slicePath().scaleByViewport(viewport);
		}
		if (this.leaderLinePath() != null) {
			this.leaderLinePath().scaleByViewport(viewport);
		}
		if (!this.labelBounds().isEmpty()) {
			var left = (this.labelBounds().left() - viewport.left()) / viewport.width();
			var top = (this.labelBounds().top() - viewport.top()) / viewport.height();
			var right = (this.labelBounds().right() - viewport.left()) / viewport.width();
			var bottom = (this.labelBounds().bottom() - viewport.top()) / viewport.height();
			this.labelBounds(new $.ig.Rect(0, left, top, right - left, bottom - top));
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		if (this.label() != null) {
			sb.appendLine1("label: \"" + this.label() + "\", ");
		}
		if (this.appearance() != null) {
			sb.appendLine1("appearance: " + this.appearance().serialize() + ", ");
		}
		if (this.labelAppearance() != null) {
			sb.appendLine1("labelAppearance: " + this.labelAppearance().serialize() + ", ");
		}
		if (this.leaderLineAppearance() != null) {
			sb.appendLine1("leaderLineAppearance: " + this.leaderLineAppearance().serialize() + ", ");
		}
		if (this.slicePath() != null) {
			sb.appendLine1("slicePath: " + this.slicePath().serialize() + ", ");
		}
		if (this.leaderLinePath() != null) {
			var serializedLine = this.leaderLinePath().serialize();
			if (serializedLine != null) {
				sb.appendLine1("leaderLinePath: " + serializedLine + ", ");
			}
		}
		sb.appendLine1("labelAngle: " + this.labelAngle() + ", ");
		sb.appendLine1("labelBounds: { left: " + this.labelBounds().left() + ", top: " + this.labelBounds().top() + ", width: " + this.labelBounds().width() + ", height: " + this.labelBounds().height() + "}");
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('PieSliceVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieSliceVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.PieSliceVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('PieSliceVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.PieSliceVisualData.prototype.$type))
}, true);

$.ig.util.defType('AxisLabelVisualData', 'Object', {
	_labelValue: null,
	labelValue: function (value) {
		if (arguments.length === 1) {
			this._labelValue = value;
			return value;
		} else {
			return this._labelValue;
		}
	}
	,
	_labelPosition: 0,
	labelPosition: function (value) {
		if (arguments.length === 1) {
			this._labelPosition = value;
			return value;
		} else {
			return this._labelPosition;
		}
	}
	,
	_position: null,
	position: function (value) {
		if (arguments.length === 1) {
			this._position = value;
			return value;
		} else {
			return this._position;
		}
	}
	,
	_panelPosition: null,
	panelPosition: function (value) {
		if (arguments.length === 1) {
			this._panelPosition = value;
			return value;
		} else {
			return this._panelPosition;
		}
	}
	,
	_appearance: null,
	appearance: function (value) {
		if (arguments.length === 1) {
			this._appearance = value;
			return value;
		} else {
			return this._appearance;
		}
	}
	,
	_size: null,
	size: function (value) {
		if (arguments.length === 1) {
			this._size = value;
			return value;
		} else {
			return this._size;
		}
	}
	,
	init: function () {
		this._size = new $.ig.Size();
		$.ig.Object.prototype.init.call(this);
		this.position({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.size(new $.ig.Size(1, NaN, NaN));
		this.panelPosition({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
	},
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("position: " + "{ x: " + this.position().__x + ", y: " + this.position().__y + "},");
		sb.appendLine1("size: " + "{ width: " + this.size().width() + ", height: " + this.size().height() + "},");
		sb.appendLine1("labelPosition: " + this.labelPosition() + ",");
		sb.appendLine1("appearance: " + (this.appearance() != null ? this.appearance().serialize() : "null"));
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport, isHorizontal) {
		if (isHorizontal) {
			this.labelPosition((this.labelPosition() - viewport.left()) / viewport.width());
		} else {
			this.labelPosition((this.labelPosition() - viewport.top()) / viewport.height());
		}
		var x = (this.position().__x - viewport.left()) / viewport.width();
		var y = (this.position().__y - viewport.top()) / viewport.height();
		this.position({ __x: x, __y: y, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		var w = (this.size().width()) / viewport.width();
		var h = (this.size().height()) / viewport.height();
		this.size(new $.ig.Size(1, w, h));
		;
	}
	,
	$type: new $.ig.Type('AxisLabelVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisLabelVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.AxisLabelVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('AxisLabelVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.AxisLabelVisualData.prototype.$type))
}, true);

$.ig.util.defType('PointerTooltipVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_boxShape: null,
	boxShape: function (value) {
		if (arguments.length === 1) {
			this._boxShape = value;
			return value;
		} else {
			return this._boxShape;
		}
	}
	,
	_pointerFillShape: null,
	pointerFillShape: function (value) {
		if (arguments.length === 1) {
			this._pointerFillShape = value;
			return value;
		} else {
			return this._pointerFillShape;
		}
	}
	,
	_pointerOutlineShape: null,
	pointerOutlineShape: function (value) {
		if (arguments.length === 1) {
			this._pointerOutlineShape = value;
			return value;
		} else {
			return this._pointerOutlineShape;
		}
	}
	,
	_offsetX: 0,
	offsetX: function (value) {
		if (arguments.length === 1) {
			this._offsetX = value;
			return value;
		} else {
			return this._offsetX;
		}
	}
	,
	_offsetY: 0,
	offsetY: function (value) {
		if (arguments.length === 1) {
			this._offsetY = value;
			return value;
		} else {
			return this._offsetY;
		}
	}
	,
	_categoryNames: null,
	categoryNames: function (value) {
		if (arguments.length === 1) {
			this._categoryNames = value;
			return value;
		} else {
			return this._categoryNames;
		}
	}
	,
	serialize: function () {
		var catNames = "";
		if (this.categoryNames() != null) {
			var en = this.categoryNames().getEnumerator();
			while (en.moveNext()) {
				var name = en.current();
				catNames += "\"" + name + "\",";
			}
			if (catNames != "") {
				catNames = catNames.substr(0, catNames.length - 1);
			}
		}
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("offsetX: " + this.offsetX() + ", ");
		sb.appendLine1("offsetY: " + this.offsetY() + ", ");
		sb.appendLine1("boxShape: " + this.boxShape().serialize() + ", ");
		sb.appendLine1("pointerFillShape: " + this.pointerFillShape().serialize() + ", ");
		sb.appendLine1("viewport: { left: " + this.viewport().left() + ", top: " + this.viewport().top() + ", width: " + this.viewport().width() + ", height: " + this.viewport().height() + "}, ");
		sb.appendLine1("pointerOutlineShape: " + this.pointerOutlineShape().serialize() + ", ");
		sb.appendLine1("categoryNames: [" + catNames + "]");
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	scaleByViewport: function (viewport) {
		this.boxShape().scaleByViewport(this.viewport());
		this.pointerFillShape().scaleByViewport(this.viewport());
		this.pointerOutlineShape().scaleByViewport(this.viewport());
		this.offsetX((this.offsetX() - viewport.left()) / viewport.width());
		this.offsetY((this.offsetY() - viewport.top()) / viewport.height());
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	$type: new $.ig.Type('PointerTooltipVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PointerTooltipVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.PointerTooltipVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('PointerTooltipVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.PointerTooltipVisualData.prototype.$type))
}, true);

$.ig.util.defType('StackedSeriesVisualData', 'SeriesVisualData', {
	init: function () {
		$.ig.SeriesVisualData.prototype.init.call(this);
		this.fragmentSeries(new $.ig.SeriesVisualDataList());
	},
	_fragmentSeries: null,
	fragmentSeries: function (value) {
		if (arguments.length === 1) {
			this._fragmentSeries = value;
			return value;
		} else {
			return this._fragmentSeries;
		}
	}
	,
	$type: new $.ig.Type('StackedSeriesVisualData', $.ig.SeriesVisualData.prototype.$type)
}, true);

$.ig.util.defType('VisualExportHelper', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	getRotatedBounds: function (textBlock) {
		var location = { __x: textBlock.canvasLeft(), __y: textBlock.canvasTop(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		var bounds = new $.ig.Rect(0, location.__x, location.__y, textBlock.actualWidth(), textBlock.actualHeight());
		var transform = textBlock.renderTransform();
		if (transform == null) {
			return bounds;
		}
		var angle = 0;
		var x = 0;
		var y = 0;
		var rotTransform = null;
		if ($.ig.util.cast($.ig.RotateTransform.prototype.$type, transform) !== null) {
			rotTransform = $.ig.util.cast($.ig.RotateTransform.prototype.$type, transform);
			angle = rotTransform.angle();
		} else if ($.ig.util.cast($.ig.TransformGroup.prototype.$type, transform) !== null) {
			var tg = $.ig.util.cast($.ig.TransformGroup.prototype.$type, transform);
			var en = tg.children().getEnumerator();
			while (en.moveNext()) {
				var child = en.current();
				if ($.ig.util.cast($.ig.RotateTransform.prototype.$type, child) !== null) {
					rotTransform = $.ig.util.cast($.ig.RotateTransform.prototype.$type, child);
					angle = rotTransform.angle();
				}
				if ($.ig.util.cast($.ig.TranslateTransform.prototype.$type, child) !== null) {
					var tt = $.ig.util.cast($.ig.TranslateTransform.prototype.$type, child);
					x = tt.x();
					y = tt.y();
				}
			}
		}
		if (rotTransform != null) {
			bounds = $.ig.RectUtil.prototype.rotateAboutPoint(bounds, rotTransform.centerX(), rotTransform.centerY(), angle);
		}
		bounds.x(bounds.x() + x);
		bounds.y(bounds.y() + y);
		return bounds;
	}
	,
	$type: new $.ig.Type('VisualExportHelper', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('VisualDataSerializer', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	serialize: function (rect) {
		var ret = "{ left: " + rect.left() + ", top: " + rect.top() + ", width: " + rect.width() + ", height: " + rect.height() + " }";
		return ret;
	}
	,
	$type: new $.ig.Type('VisualDataSerializer', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LegendItemVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.labelBounds($.ig.Rect.prototype.empty());
	},
	_label: null,
	label: function (value) {
		if (arguments.length === 1) {
			this._label = value;
			return value;
		} else {
			return this._label;
		}
	}
	,
	_labelBounds: null,
	labelBounds: function (value) {
		if (arguments.length === 1) {
			this._labelBounds = value;
			return value;
		} else {
			return this._labelBounds;
		}
	}
	,
	_appearance: null,
	appearance: function (value) {
		if (arguments.length === 1) {
			this._appearance = value;
			return value;
		} else {
			return this._appearance;
		}
	}
	,
	_labelAppearance: null,
	labelAppearance: function (value) {
		if (arguments.length === 1) {
			this._labelAppearance = value;
			return value;
		} else {
			return this._labelAppearance;
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		if (this.label() != null) {
			sb.appendLine1("label: \"" + this.label() + "\", ");
		}
		if (this.appearance() != null) {
			sb.appendLine1("appearance: " + this.appearance().serialize() + ", ");
		}
		if (this.labelAppearance() != null) {
			sb.appendLine1("labelAppearance: " + this.labelAppearance().serialize() + ", ");
		}
		sb.appendLine1("labelBounds: { left: " + this.labelBounds().left() + ", top: " + this.labelBounds().top() + ", width: " + this.labelBounds().width() + ", height: " + this.labelBounds().height() + "}");
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('LegendItemVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('LegendVisualDataList', 'List$1', {
	init: function () {
		$.ig.List$1.prototype.init.call(this, $.ig.LegendItemVisualData.prototype.$type, 0);
	},
	$type: new $.ig.Type('LegendVisualDataList', $.ig.List$1.prototype.$type.specialize($.ig.LegendItemVisualData.prototype.$type))
}, true);

$.ig.util.defType('LegendVisualData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.items(new $.ig.LegendVisualDataList());
	},
	_items: null,
	items: function (value) {
		if (arguments.length === 1) {
			this._items = value;
			return value;
		} else {
			return this._items;
		}
	}
	,
	_viewport: null,
	viewport: function (value) {
		if (arguments.length === 1) {
			this._viewport = value;
			return value;
		} else {
			return this._viewport;
		}
	}
	,
	_width: 0,
	width: function (value) {
		if (arguments.length === 1) {
			this._width = value;
			return value;
		} else {
			return this._width;
		}
	}
	,
	_height: 0,
	height: function (value) {
		if (arguments.length === 1) {
			this._height = value;
			return value;
		} else {
			return this._height;
		}
	}
	,
	serialize: function () {
		var sb = new $.ig.StringBuilder(0);
		sb.appendLine1("{");
		sb.appendLine1("width: " + this.width() + ",");
		sb.appendLine1("height: " + this.height() + ",");
		sb.appendLine1("items: [");
		for (var i = 0; i < this.items().count(); i++) {
			if (i != 0) {
				sb.append5(", ");
			}
			sb.append5(this.items().__inner[i].serialize());
		}
		sb.appendLine1("],");
		sb.appendLine1("}");
		return sb.toString();
	}
	,
	$type: new $.ig.Type('LegendVisualData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('CollisionAvoider', 'Object', {
	init: function () {
		this._rects = new $.ig.List$1($.ig.Rect.prototype.$type, 0);
		$.ig.Object.prototype.init.call(this);
	},
	tryAdd: function (rc) {
		for (var i = this._rects.count() - 1; i >= 0; --i) {
			if (rc.left() > this._rects.__inner[i].right()) {
				break;
			}
			if (this._rects.__inner[i].intersectsWith(rc)) {
				return false;
			}
		}
		if (this._rects.count() == 0 || rc.right() >= this._rects.__inner[this._rects.count() - 1].right()) {
			this._rects.add(rc);
		} else {
			this._rects.add(rc);
			this._rects.sort2(function (a, b) {
				return Math.sign(a.right() - b.right());
			});
		}
		return true;
	}
	,
	clear: function () {
		this._rects.clear();
	}
	,
	_rects: null,
	$type: new $.ig.Type('CollisionAvoider', $.ig.Object.prototype.$type, [$.ig.IDetectsCollisions.prototype.$type])
}, true);

$.ig.util.defType('DataChartMouseButtonEventArgs', 'EventArgs', {
	init: function (chart, series, item, mouseButtonEventArgs) {
		$.ig.EventArgs.prototype.init.call(this);
		this.chart(chart);
		this.series(series);
		this.item(item);
		this.originalEvent(mouseButtonEventArgs);
	},
	toString: function () {
		return this.chart().name() + ", " + this.series().name() + ", " + (this.item() != null ? this.item().toString() : "") + ", " + this.getPosition(null).toString();
	}
	,
	_originalEvent: null,
	originalEvent: function (value) {
		if (arguments.length === 1) {
			this._originalEvent = value;
			return value;
		} else {
			return this._originalEvent;
		}
	}
	,
	handled: function (value) {
		if (arguments.length === 1) {
			this.originalEvent().handled(value);
			return value;
		} else {
			return this.originalEvent().handled();
		}
	}
	,
	getPosition: function (relativeTo) {
		return this.originalEvent().getPosition(relativeTo);
	}
	,
	originalSource: function () {
		return this.originalEvent().originalSource();
	}
	,
	_item: null,
	item: function (value) {
		if (arguments.length === 1) {
			this._item = value;
			return value;
		} else {
			return this._item;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_chart: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this._chart = value;
			return value;
		} else {
			return this._chart;
		}
	}
	,
	$type: new $.ig.Type('DataChartMouseButtonEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('DataChartLegendMouseButtonEventArgs', 'DataChartMouseButtonEventArgs', {
	init: function (chart, series, item, mouseButtonEventArgs, legendItem) {
		$.ig.DataChartMouseButtonEventArgs.prototype.init.call(this, chart, series, item, mouseButtonEventArgs);
		this.legendItem(legendItem);
	},
	_legendItem: null,
	legendItem: function (value) {
		if (arguments.length === 1) {
			this._legendItem = value;
			return value;
		} else {
			return this._legendItem;
		}
	}
	,
	$type: new $.ig.Type('DataChartLegendMouseButtonEventArgs', $.ig.DataChartMouseButtonEventArgs.prototype.$type)
}, true);

$.ig.util.defType('ChartMouseEventArgs', 'EventArgs', {
	init: function (chart, series, item, originalEvent) {
		$.ig.EventArgs.prototype.init.call(this);
		this.chart(chart);
		this.series(series);
		this.item(item);
		this.originalEvent(originalEvent);
	},
	toString: function () {
		return this.chart().name() + ", " + this.series().name() + ", " + (this.item() != null ? this.item().toString() : "") + ", " + this.getPosition(null).toString();
	}
	,
	_originalEvent: null,
	originalEvent: function (value) {
		if (arguments.length === 1) {
			this._originalEvent = value;
			return value;
		} else {
			return this._originalEvent;
		}
	}
	,
	getPosition: function (relativeTo) {
		return this.originalEvent().getPosition(relativeTo);
	}
	,
	originalSource: function () {
		return this.originalEvent().originalSource();
	}
	,
	_item: null,
	item: function (value) {
		if (arguments.length === 1) {
			this._item = value;
			return value;
		} else {
			return this._item;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_chart: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this._chart = value;
			return value;
		} else {
			return this._chart;
		}
	}
	,
	$type: new $.ig.Type('ChartMouseEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('ChartLegendMouseEventArgs', 'ChartMouseEventArgs', {
	init: function (chart, series, item, mouseEventArgs, legendItem) {
		$.ig.ChartMouseEventArgs.prototype.init.call(this, chart, series, item, mouseEventArgs);
		this.legendItem(legendItem);
	},
	_legendItem: null,
	legendItem: function (value) {
		if (arguments.length === 1) {
			this._legendItem = value;
			return value;
		} else {
			return this._legendItem;
		}
	}
	,
	$type: new $.ig.Type('ChartLegendMouseEventArgs', $.ig.ChartMouseEventArgs.prototype.$type)
}, true);

$.ig.util.defType('RenderSurface', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_surface: null,
	surface: function (value) {
		if (arguments.length === 1) {
			this._surface = value;
			return value;
		} else {
			return this._surface;
		}
	}
	,
	$type: new $.ig.Type('RenderSurface', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('RenderRequestedEventArgs', 'EventArgs', {
	init: function () {
		$.ig.EventArgs.prototype.init.call(this);
	},
	_animate: false,
	animate: function (value) {
		if (arguments.length === 1) {
			this._animate = value;
			return value;
		} else {
			return this._animate;
		}
	}
	,
	$type: new $.ig.Type('RenderRequestedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('HighlightingInfo', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.state($.ig.HighlightingState.prototype.outward);
		this.progress(0);
		this.isMarker(false);
	},
	_startIndex: 0,
	startIndex: function (value) {
		if (arguments.length === 1) {
			this._startIndex = value;
			return value;
		} else {
			return this._startIndex;
		}
	}
	,
	_endIndex: 0,
	endIndex: function (value) {
		if (arguments.length === 1) {
			this._endIndex = value;
			return value;
		} else {
			return this._endIndex;
		}
	}
	,
	_state: 0,
	state: function (value) {
		if (arguments.length === 1) {
			this._state = value;
			return value;
		} else {
			return this._state;
		}
	}
	,
	_progress: 0,
	progress: function (value) {
		if (arguments.length === 1) {
			this._progress = value;
			return value;
		} else {
			return this._progress;
		}
	}
	,
	_isMarker: false,
	isMarker: function (value) {
		if (arguments.length === 1) {
			this._isMarker = value;
			return value;
		} else {
			return this._isMarker;
		}
	}
	,
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	$type: new $.ig.Type('HighlightingInfo', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('HighlightingManager', 'Object', {
	init: function () {
		this.__activeHighlights = new $.ig.Dictionary$2($.ig.HighlightingInfo.prototype.$type, $.ig.HighlightingInfo.prototype.$type, 0);
		this.__allHighlights = new $.ig.List$1($.ig.HighlightingInfo.prototype.$type, 0);
		this.__extraFlow = 0;
		this.__extraMarkerFlow = 0;
		this.__lastProgress = 0;
		this.__dirtySeriesMap = new $.ig.Dictionary$2($.ig.Series.prototype.$type, $.ig.Boolean.prototype.$type, 0);
		$.ig.Object.prototype.init.call(this);
		this.dirtySeries(new $.ig.List$1($.ig.Series.prototype.$type, 0));
	},
	__activeHighlights: null,
	__allHighlights: null,
	startHighlight: function (info) {
		if (info == null) {
			return;
		}
		this.inProgress(true);
		if (!this.__activeHighlights.containsKey(info)) {
			info.state($.ig.HighlightingState.prototype.inward);
			this.__activeHighlights.item(info, info);
			this.__allHighlights.add(info);
		}
		if (info.state() == $.ig.HighlightingState.prototype.outward) {
			info.state($.ig.HighlightingState.prototype.inward);
		}
	}
	,
	__extraFlow: 0,
	__extraMarkerFlow: 0,
	endHighlight: function (info) {
		if (info == null) {
			return;
		}
		if (!this.__activeHighlights.containsKey(info)) {
			return;
		}
		if (info.state() == $.ig.HighlightingState.prototype.inward) {
			if (info.progress() < 0.05) {
				if (info.isMarker()) {
					this.__extraMarkerFlow = this.__extraMarkerFlow + info.progress();
				} else {
					this.__extraFlow = this.__extraFlow + info.progress();
				}
				this.__activeHighlights.remove(info);
				this.__allHighlights.remove(info);
				return;
			}
			info.state($.ig.HighlightingState.prototype.outward);
		}
		if (info.state() == $.ig.HighlightingState.prototype.$static) {
			info.state($.ig.HighlightingState.prototype.outward);
			info.progress(1);
		}
	}
	,
	clear: function () {
		this.__allHighlights.clear();
		this.__activeHighlights.clear();
	}
	,
	getHighlightingInfo: function (owner, itemsSource, indexAxis, startIndex, endIndex, isMarker) {
		for (var i = 0; i < this.__allHighlights.count(); i++) {
			var info = this.__allHighlights.__inner[i];
			var start = info.startIndex();
			var end = info.endIndex();
			if (startIndex >= start && endIndex <= end && info.isMarker() == isMarker && owner == info.series() && (info.state() == $.ig.HighlightingState.prototype.inward || info.state() == $.ig.HighlightingState.prototype.$static)) {
				return info;
			}
		}
		for (var i1 = 0; i1 < this.__allHighlights.count(); i1++) {
			var info1 = this.__allHighlights.__inner[i1];
			var start1 = info1.startIndex();
			var end1 = info1.endIndex();
			if (startIndex >= start1 && endIndex <= end1 && info1.isMarker() == isMarker && owner == info1.series() && (info1.state() == $.ig.HighlightingState.prototype.outward)) {
				return info1;
			}
		}
		return null;
	}
	,
	__lastProgress: 0,
	_dirtySeries: null,
	dirtySeries: function (value) {
		if (arguments.length === 1) {
			this._dirtySeries = value;
			return value;
		} else {
			return this._dirtySeries;
		}
	}
	,
	__dirtySeriesMap: null,
	tick: function (progress) {
		this.__dirtySeriesMap.clear();
		this.dirtySeries().clear();
		var deltaProgress = 0;
		if (this.__lastProgress > progress) {
			deltaProgress = (1 - this.__lastProgress) + progress;
		} else {
			deltaProgress = progress - this.__lastProgress;
		}
		this.__lastProgress = progress;
		var stillRunning = false;
		var toRemove = new $.ig.List$1($.ig.HighlightingInfo.prototype.$type, 0);
		this.maxHighlightingProgress(0);
		this.sumHighlightingProgress(0);
		this.maxMarkerHighlightingProgress(0);
		this.sumMarkerHighlightingProgress(0);
		var inMarkerExists = false;
		var inExists = false;
		var totalIn = 0;
		var totalOut = 0;
		var totalMarkerIn = 0;
		var totalMarkerOut = 0;
		var numOut = 0;
		var numMarkerOut = 0;
		for (var i = 0; i < this.__allHighlights.count(); i++) {
			var item = this.__allHighlights.__inner[i];
			if (item.state() == $.ig.HighlightingState.prototype.inward) {
				if (item.isMarker()) {
					inMarkerExists = true;
					totalMarkerIn = totalMarkerIn + Math.min(1 - item.progress(), deltaProgress);
				} else {
					inExists = true;
					totalIn = totalIn + Math.min(1 - item.progress(), deltaProgress);
				}
			}
			if (item.state() == $.ig.HighlightingState.prototype.outward) {
				if (item.isMarker()) {
					totalMarkerOut = totalMarkerOut + Math.min(item.progress(), deltaProgress);
					numMarkerOut++;
				} else {
					totalOut = totalOut + Math.min(item.progress(), deltaProgress);
					numOut++;
				}
			}
		}
		totalOut = totalOut + this.__extraFlow;
		this.__extraFlow = 0;
		totalMarkerOut = totalMarkerOut + this.__extraMarkerFlow;
		this.__extraMarkerFlow = 0;
		var perOutRatio = 1;
		var perOutMarkerRatio = 1;
		if (inExists && totalOut > totalIn) {
			var diff = totalOut - totalIn;
			perOutRatio = totalIn / totalOut;
		}
		if (inMarkerExists && totalMarkerOut > totalMarkerIn) {
			var diff1 = totalMarkerOut - totalMarkerIn;
			perOutMarkerRatio = totalMarkerIn / totalMarkerOut;
		}
		var changeProgress;
		for (var i1 = 0; i1 < this.__allHighlights.count(); i1++) {
			var item1 = this.__allHighlights.__inner[i1];
			changeProgress = deltaProgress;
			if (item1.state() == $.ig.HighlightingState.prototype.outward) {
				changeProgress = Math.min(changeProgress, item1.progress());
				if (item1.isMarker()) {
					changeProgress = changeProgress * perOutMarkerRatio;
				} else {
					changeProgress = changeProgress * perOutRatio;
				}
				item1.progress(item1.progress() - changeProgress);
			} else {
				item1.progress(item1.progress() + changeProgress);
			}
			if (item1.state() == $.ig.HighlightingState.prototype.$static) {
				item1.progress(1);
			}
			if (item1.progress() > 1) {
				item1.progress(1);
			}
			if (item1.progress() < 0) {
				item1.progress(0);
			}
			if (item1.isMarker()) {
				this.maxMarkerHighlightingProgress(Math.max(item1.progress(), this.maxMarkerHighlightingProgress()));
				this.sumMarkerHighlightingProgress(this.sumMarkerHighlightingProgress() + item1.progress());
			} else {
				this.maxHighlightingProgress(Math.max(item1.progress(), this.maxHighlightingProgress()));
				this.sumHighlightingProgress(this.sumHighlightingProgress() + item1.progress());
			}
			if (item1.state() != $.ig.HighlightingState.prototype.outward && item1.progress() != 1) {
				stillRunning = true;
			}
			if (item1.state() == $.ig.HighlightingState.prototype.outward && item1.progress() != 0) {
				stillRunning = true;
			}
			if (item1.progress() == 1 && item1.state() == $.ig.HighlightingState.prototype.inward) {
				item1.state($.ig.HighlightingState.prototype.$static);
			}
			if (item1.progress() == 0 && item1.state() == $.ig.HighlightingState.prototype.outward) {
				toRemove.add(item1);
			}
			if (!this.__dirtySeriesMap.containsKey(item1.series())) {
				this.__dirtySeriesMap.add(item1.series(), true);
				this.dirtySeries().add(item1.series());
			}
		}
		var en = toRemove.getEnumerator();
		while (en.moveNext()) {
			var item2 = en.current();
			this.__activeHighlights.remove(item2);
			this.__allHighlights.remove(item2);
		}
		if (this.__activeHighlights.count() == 0) {
			this.inProgress(false);
			this.maxHighlightingProgress(0);
			this.sumHighlightingProgress(0);
			this.maxMarkerHighlightingProgress(0);
			this.sumMarkerHighlightingProgress(0);
		}
		if (!stillRunning) {
			this.__lastProgress = 0;
		}
		return stillRunning;
	}
	,
	_inProgress: false,
	inProgress: function (value) {
		if (arguments.length === 1) {
			this._inProgress = value;
			return value;
		} else {
			return this._inProgress;
		}
	}
	,
	_maxHighlightingProgress: 0,
	maxHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._maxHighlightingProgress = value;
			return value;
		} else {
			return this._maxHighlightingProgress;
		}
	}
	,
	_sumHighlightingProgress: 0,
	sumHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._sumHighlightingProgress = value;
			return value;
		} else {
			return this._sumHighlightingProgress;
		}
	}
	,
	_maxMarkerHighlightingProgress: 0,
	maxMarkerHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._maxMarkerHighlightingProgress = value;
			return value;
		} else {
			return this._maxMarkerHighlightingProgress;
		}
	}
	,
	_sumMarkerHighlightingProgress: 0,
	sumMarkerHighlightingProgress: function (value) {
		if (arguments.length === 1) {
			this._sumMarkerHighlightingProgress = value;
			return value;
		} else {
			return this._sumMarkerHighlightingProgress;
		}
	}
	,
	$type: new $.ig.Type('HighlightingManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SafeEnumerable', 'Object', {
	__target: null,
	init: function (target) {
		$.ig.Object.prototype.init.call(this);
		this.__target = target;
	},
	makeSafe1: function (value) {
		if (Number.isInfinity(value) || $.ig.util.isNaN(value)) {
			return 0;
		}
		return value;
	}
	,
	makeSafe: function () {
		var d__ = new $.ig.SafeEnumerable___MakeSafe__IteratorClass(-2);
		d__.__4__this = this;
		return d__;
	}
	,
	getEnumerator: function () {
		return this.makeSafe().getEnumerator();
	}
	,
	$type: new $.ig.Type('SafeEnumerable', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number)])
}, true);

$.ig.util.defType('SafeReadOnlyDoubleCollection', 'Object', {
	__target: null,
	__safeValue: 0,
	makeSafe: function (value) {
		if (Number.isInfinity(value) || $.ig.util.isNaN(value)) {
			return this.__safeValue;
		}
		return value;
	}
	,
	init: function (initNumber, target) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__safeValue = 0;
		$.ig.Object.prototype.init.call(this);
		this.__target = new $.ig.ReadOnlyCollection$1(Number, 1, target);
	},
	init1: function (initNumber, target, safeValue) {
		this.__safeValue = 0;
		$.ig.Object.prototype.init.call(this);
		this.__target = new $.ig.ReadOnlyCollection$1(Number, 1, target);
		this.__safeValue = safeValue;
	},
	indexOf: function (item) {
		return this.__target.indexOf(item);
	}
	,
	insert: function (index, item) {
		(this.__target).insert(index, item);
	}
	,
	removeAt: function (index) {
		(this.__target).removeAt(index);
	}
	,
	item: function (index, value) {
		if (arguments.length === 2) {
			($.ig.util.cast($.ig.IList$1.prototype.$type.specialize(Number), this.__target)).item(index, value);
			return value;
		} else {
			return this.makeSafe(this.__target.item(index));
		}
	}
	,
	add: function (item) {
		(this.__target).add(item);
	}
	,
	clear: function () {
		(this.__target).clear();
	}
	,
	contains: function (item) {
		return this.__target.contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		for (var i = arrayIndex; i < array.length; i++) {
			array[i] = this.item(i);
		}
	}
	,
	count: function () {
		return this.__target.count();
	}
	,
	isReadOnly: function () {
		return (this.__target).isReadOnly();
	}
	,
	remove: function (item) {
		return (this.__target).remove(item);
	}
	,
	getEnumerator: function () {
		return new $.ig.SafeEnumerable(this.__target).getEnumerator();
	}
	,
	$type: new $.ig.Type('SafeReadOnlyDoubleCollection', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize(Number)])
}, true);

$.ig.util.defType('SafeSortedReadOnlyDoubleCollection', 'Object', {
	__target: null,
	__sortedIndices: null,
	__safeValue: 0,
	makeSafe: function (value) {
		if (Number.isInfinity(value) || $.ig.util.isNaN(value)) {
			return this.__safeValue;
		}
		return value;
	}
	,
	init: function (initNumber, target, sortedIndices) {
		if (initNumber > 0) {
			switch (initNumber) {
				case 1:
					this.init1.apply(this, arguments);
					break;
			}
			return;
		}
		this.__safeValue = 0;
		$.ig.Object.prototype.init.call(this);
		this.__target = new $.ig.SafeReadOnlyDoubleCollection(0, target);
		this.__sortedIndices = sortedIndices;
	},
	init1: function (initNumber, target, sortedIndices, safeValue) {
		this.__safeValue = 0;
		$.ig.Object.prototype.init.call(this);
		this.__target = new $.ig.SafeReadOnlyDoubleCollection(1, target, safeValue);
		this.__sortedIndices = sortedIndices;
		this.__safeValue = safeValue;
	},
	indexOf: function (item) {
		var innerIndex = this.__target.indexOf(item);
		return this.__sortedIndices.indexOf(innerIndex);
	}
	,
	insert: function (index, item) {
		(this.__target).insert(index, item);
	}
	,
	removeAt: function (index) {
		(this.__target).removeAt(index);
	}
	,
	item: function (index, value) {
		if (arguments.length === 2) {
			($.ig.util.cast($.ig.IList$1.prototype.$type.specialize(Number), this.__target)).item(index, value);
			return value;
		} else {
			var innerIndex = this.__sortedIndices.item(index);
			return this.makeSafe(this.__target.item(innerIndex));
		}
	}
	,
	add: function (item) {
		(this.__target).add(item);
	}
	,
	clear: function () {
		(this.__target).clear();
	}
	,
	contains: function (item) {
		return this.__target.contains(item);
	}
	,
	copyTo: function (array, arrayIndex) {
		for (var i = arrayIndex; i < array.length; i++) {
			array[i] = this.item(i);
		}
	}
	,
	count: function () {
		return this.__target.count();
	}
	,
	isReadOnly: function () {
		return (this.__target).isReadOnly();
	}
	,
	remove: function (item) {
		return (this.__target).remove(item);
	}
	,
	getEnumerator: function () {
		var d__ = new $.ig.SafeSortedReadOnlyDoubleCollection___GetEnumerator__IteratorClass(0);
		d__.__4__this = this;
		return d__;
	}
	,
	$type: new $.ig.Type('SafeSortedReadOnlyDoubleCollection', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize(Number)])
}, true);

$.ig.util.defType('SortedListView$1', 'Object', {
	$t: null,
	__sortedIndices: null,
	__source: null,
	init: function ($t, source, sortedIndices) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		this.__sortedIndices = null;
		this.__source = null;
		$.ig.Object.prototype.init.call(this);
		this.__sortedIndices = sortedIndices;
		this.__source = source;
	},
	add: function (value) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	clear: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	contains: function (value) {
		return this.__source.contains(value);
	}
	,
	indexOf: function (value) {
		return this.__sortedIndices.indexOf(this.__source.indexOf(value));
	}
	,
	insert: function (index, value) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	isFixedSize: function () {
		return true;
	}
	,
	isReadOnly: function () {
		return true;
	}
	,
	remove: function (value) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	removeAt: function (index) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	item: function (index, value) {
		if (arguments.length === 2) {
			throw new $.ig.NotImplementedException(0);
			return value;
		} else {
			return this.__source.item(this.__sortedIndices.item(index));
		}
	}
	,
	count: function () {
		return this.__source.count();
	}
	,
	isSynchronized: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	syncRoot: function () {
		throw new $.ig.NotImplementedException(0);
	}
	,
	getEnumerator: function () {
		var d__ = new $.ig.SortedListView___GetEnumerator__IteratorClass$1(this.$t, 0);
		d__.__4__this = this;
		return d__;
	}
	,
	getEnumerator: function () {
		var d__ = new $.ig.SortedListView___GetEnumerator__IteratorClass1$1(this.$t, 0);
		d__.__4__this = this;
		return d__;
	}
	,
	copyTo: function (array, arrayIndex) {
		throw new $.ig.NotImplementedException(0);
	}
	,
	$type: new $.ig.Type('SortedListView$1', $.ig.Object.prototype.$type, [$.ig.IList$1.prototype.$type.specialize(0)])
}, true);

$.ig.util.defType('AxisComponentsForView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_labelPanel: null,
	labelPanel: function (value) {
		if (arguments.length === 1) {
			this._labelPanel = value;
			return value;
		} else {
			return this._labelPanel;
		}
	}
	,
	$type: new $.ig.Type('AxisComponentsForView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisComponentsFromView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_axisLines: null,
	axisLines: function (value) {
		if (arguments.length === 1) {
			this._axisLines = value;
			return value;
		} else {
			return this._axisLines;
		}
	}
	,
	_majorLines: null,
	majorLines: function (value) {
		if (arguments.length === 1) {
			this._majorLines = value;
			return value;
		} else {
			return this._majorLines;
		}
	}
	,
	_strips: null,
	strips: function (value) {
		if (arguments.length === 1) {
			this._strips = value;
			return value;
		} else {
			return this._strips;
		}
	}
	,
	_minorLines: null,
	minorLines: function (value) {
		if (arguments.length === 1) {
			this._minorLines = value;
			return value;
		} else {
			return this._minorLines;
		}
	}
	,
	$type: new $.ig.Type('AxisComponentsFromView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('AxisView', 'Object', {
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	init: function (model) {
		this.__axisComponentsFromView = new $.ig.AxisComponentsFromView();
		this.__renderedRect = $.ig.Rect.prototype.empty();
		$.ig.Object.prototype.init.call(this);
		this.model(model);
		this.__backgroundRect = new $.ig.Rectangle();
	},
	onInit: function () {
		this.axisLines((function () {
			var $ret = new $.ig.Path();
			$ret.data(new $.ig.GeometryGroup());
			return $ret;
		}()));
		this.strips((function () {
			var $ret = new $.ig.Path();
			$ret.data(new $.ig.GeometryGroup());
			$ret.isHitTestVisible(false);
			$ret.stroke(null);
			return $ret;
		}()));
		this.majorLines((function () {
			var $ret = new $.ig.Path();
			$ret.data(new $.ig.GeometryGroup());
			$ret.isHitTestVisible(false);
			return $ret;
		}()));
		this.minorLines((function () {
			var $ret = new $.ig.Path();
			$ret.data(new $.ig.GeometryGroup());
			$ret.isHitTestVisible(false);
			return $ret;
		}()));
		this.model().majorStrokeThickness(1);
		this.model().strokeThickness(1);
	}
	,
	onLabelPanelStyleChanged: function (style) {
	}
	,
	_axisLines: null,
	axisLines: function (value) {
		if (arguments.length === 1) {
			this._axisLines = value;
			return value;
		} else {
			return this._axisLines;
		}
	}
	,
	_majorLines: null,
	majorLines: function (value) {
		if (arguments.length === 1) {
			this._majorLines = value;
			return value;
		} else {
			return this._majorLines;
		}
	}
	,
	_strips: null,
	strips: function (value) {
		if (arguments.length === 1) {
			this._strips = value;
			return value;
		} else {
			return this._strips;
		}
	}
	,
	_minorLines: null,
	minorLines: function (value) {
		if (arguments.length === 1) {
			this._minorLines = value;
			return value;
		} else {
			return this._minorLines;
		}
	}
	,
	textBlockCreate: function () {
		var textBlock = new $.ig.TextBlock();
		return textBlock;
	}
	,
	textBlockActivate: function (textBlock) {
		textBlock.__visibility = $.ig.Visibility.prototype.visible;
		if (textBlock.parent() == null) {
			this.model().labelPanel().children().add(textBlock);
		}
	}
	,
	textBlockDisactivate: function (textBlock) {
		textBlock.__visibility = $.ig.Visibility.prototype.collapsed;
	}
	,
	textBlockDestroy: function (textBlock) {
		if (this.model().labelPanel().children().contains(textBlock)) {
			this.model().labelPanel().children().remove(textBlock);
		}
	}
	,
	onTemplateProvided: function () {
	}
	,
	ready: function () {
		return true;
	}
	,
	index: function () {
		if (this.model().seriesViewer() != null && this.model().seriesViewer().isMap()) {
			return this.model().seriesViewer().series().count() + 1;
		}
		var chart = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().chart());
		var before = 0;
		if (chart == null) {
			return 0;
		}
		if (chart != null && chart.gridMode() == $.ig.GridMode.prototype.beforeSeries) {
			var seriesIndex = 0;
			for (var i = 0; i < this.model().seriesViewer().series().count(); i++) {
				if (this.model().seriesViewer().series().__inner[i].isStacked()) {
					seriesIndex += (this.model().seriesViewer().series().__inner[i]).series().count();
				} else {
					seriesIndex++;
				}
			}
			before = seriesIndex;
		}
		return before + chart.axes().indexOf(this.model());
	}
	,
	labelNeedRearrange: function () {
		this.labelPanel().measure();
		this.labelPanel().arrange();
	}
	,
	ensureAutoExtent: function () {
		this.labelPanel().ensureExtentSet();
	}
	,
	clearAllMarks: function () {
		if (this.labelPanel() != null) {
			this.labelPanel().children().clear();
		}
		this.clearMarks((this.axisLines().data()).children());
		this.clearMarks((this.strips().data()).children());
		this.clearMarks((this.majorLines().data()).children());
		this.clearMarks((this.minorLines().data()).children());
		this.makeDirty();
	}
	,
	updateLineVisibility: function (visible) {
		this.axisLines().__visibility = visible;
		this.majorLines().__visibility = visible;
		this.strips().__visibility = visible;
		this.minorLines().__visibility = visible;
	}
	,
	resetLabelPanel: function () {
	}
	,
	changeLabelSettings: function (_currentLabelSettings) {
		this.model().mustInvalidateLabels(true);
		if (this.model().seriesViewer() != null) {
			this.model().seriesViewer().invalidatePanels();
		}
		this.model().renderAxis();
	}
	,
	__axisComponentsFromView: null,
	getAxisComponentsFromView: function () {
		this.__axisComponentsFromView.axisLines(this.axisLines());
		this.__axisComponentsFromView.majorLines(this.majorLines());
		this.__axisComponentsFromView.minorLines(this.minorLines());
		this.__axisComponentsFromView.strips(this.strips());
		return this.__axisComponentsFromView;
	}
	,
	clearMarks: function (geometry) {
		if (geometry != null) {
			geometry.clear();
		}
	}
	,
	getAxisLinesGeometry: function () {
		return (this.axisLines().data()).children();
	}
	,
	getAxisLinesPathInfo: function () {
		var $self = this;
		var ret = (function () {
			var $ret = new $.ig.PathRenderingInfo();
			$ret.stroke($self.model().stroke());
			$ret.strokeThickness($self.model().strokeThickness());
			$ret.dashArray($self.model().strokeDashArray());
			return $ret;
		}());
		if ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().chart()) !== null) {
			var c = this.model().chart();
			if (c.alignsGridLinesToPixels() && c.state() != $.ig.InteractionState.prototype.dragPan && c.state() != $.ig.InteractionState.prototype.dragZoom) {
				ret.alignToPixels(true);
			}
		}
		return ret;
	}
	,
	getStripsGeometry: function () {
		return (this.strips().data()).children();
	}
	,
	getMajorLinesGeometry: function () {
		return (this.majorLines().data()).children();
	}
	,
	getMajorLinesPathInfo: function () {
		var $self = this;
		var ret = (function () {
			var $ret = new $.ig.PathRenderingInfo();
			$ret.stroke($self.model().majorStroke());
			$ret.strokeThickness($self.model().majorStrokeThickness());
			$ret.dashArray($self.model().majorStrokeDashArray());
			return $ret;
		}());
		if ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().chart()) !== null) {
			var c = this.model().chart();
			if (c.alignsGridLinesToPixels() && c.state() != $.ig.InteractionState.prototype.dragPan && c.state() != $.ig.InteractionState.prototype.dragZoom) {
				ret.alignToPixels(true);
			}
		}
		return ret;
	}
	,
	getMinorLinesGeometry: function () {
		return (this.minorLines().data()).children();
	}
	,
	getMinorLinesPathInfo: function () {
		var $self = this;
		var ret = (function () {
			var $ret = new $.ig.PathRenderingInfo();
			$ret.stroke($self.model().minorStroke());
			$ret.strokeThickness($self.model().minorStrokeThickness());
			$ret.dashArray($self.model().minorStrokeDashArray());
			return $ret;
		}());
		if ($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model().chart()) !== null) {
			var c = this.model().chart();
			if (c.alignsGridLinesToPixels() && c.state() != $.ig.InteractionState.prototype.dragPan && c.state() != $.ig.InteractionState.prototype.dragZoom) {
				ret.alignToPixels(true);
			}
		}
		return ret;
	}
	,
	labelPanel: function () {
		return this.model().getAxisComponentsForView().labelPanel();
	}
	,
	updateLabelPanel: function (model, windowRect, viewportRect) {
		this.labelPanel().axis(model);
		this.labelPanel().windowRect(windowRect);
		this.labelPanel().viewportRect(viewportRect);
		this.makeDirty();
	}
	,
	clearLabelPanel: function () {
		this.labelPanel().children().clear();
		this.makeDirty();
	}
	,
	setLabelPanelInterval: function (p) {
		this.labelPanel().interval(p);
		this.makeDirty();
	}
	,
	updateLabelPanelContent: function (dataContexts, positions) {
		this.labelPanel().labelDataContext(dataContexts);
		this.labelPanel().labelPositions(positions);
	}
	,
	setLabelPanelCrossingValue: function (crossingValue) {
		this.labelPanel().crossingValue(crossingValue);
	}
	,
	bindLabelPanelStyle: function () {
	}
	,
	getLabelValue: function (dataItem_) {
		if (this.model().formatLabel() != null) {
			return this.model().formatLabel()(dataItem_);
		}
		var label_ = this.model().label();
		var labelValue_ = (typeof dataItem_[label_] != 'undefined') ? dataItem_[label_] : label_;;
		if (this.model().expectFunctions()) {
			if (typeof(labelValue_) == 'function') {
				labelValue_ = labelValue_();
			}
		}
		return labelValue_;
	}
	,
	_hitContext: null,
	hitContext: function (value) {
		if (arguments.length === 1) {
			this._hitContext = value;
			return value;
		} else {
			return this._hitContext;
		}
	}
	,
	_context: null,
	context: function (value) {
		if (arguments.length === 1) {
			this._context = value;
			return value;
		} else {
			return this._context;
		}
	}
	,
	onContextProvided: function (context, hitContext) {
		this.context(context);
		this.hitContext(hitContext);
	}
	,
	_isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this._isDirty = value;
			return value;
		} else {
			return this._isDirty;
		}
	}
	,
	makeDirty: function () {
		if (this.model().chart() == null || this.context() == null) {
			return;
		}
		if (!this.isDirty()) {
			this.isDirty(true);
			this.model().chart().canvasRenderScheduler().schedule();
		}
	}
	,
	undirty: function (clearRect) {
		this.isDirty(false);
		this.render(clearRect);
	}
	,
	__backgroundRect: null,
	render: function (clearRect) {
		if (this.context() == null) {
			return;
		}
		if (this.context().shouldRender()) {
			if (this.model().seriesViewer() != null && this.model().seriesViewer().actualPixelScalingRatio() != 1) {
				this.context().save();
				this.context().scale(this.model().seriesViewer().actualPixelScalingRatio(), this.model().seriesViewer().actualPixelScalingRatio());
			}
			var _container = this.model().chart().getContainerRect();
			if (clearRect) {
				this.context().clearRectangle(_container.left(), _container.top(), _container.width(), _container.height());
			}
			if (clearRect) {
				if (this.model().seriesViewer().plotAreaBackground() != null) {
					this.__backgroundRect.canvasTop(this.model().viewportRect().top());
					this.__backgroundRect.canvasLeft(this.model().viewportRect().left());
					this.__backgroundRect.width(this.model().viewportRect().width());
					this.__backgroundRect.height(this.model().viewportRect().height());
					this.__backgroundRect.__fill = this.model().seriesViewer().plotAreaBackground();
					this.context().renderRectangle(this.__backgroundRect);
				}
			}
			this.context().save();
			this.context().setRectangleClip(this.model().viewportRect());
			this.renderOverride();
			this.context().restore();
			if (this.model().seriesViewer() != null && this.model().seriesViewer().actualPixelScalingRatio() != 1) {
				this.context().restore();
			}
		}
		if (this.hitContext().shouldRender()) {
			if (this.model().seriesViewer() != null && this.model().seriesViewer().actualPixelScalingRatio() != 1) {
				this.hitContext().save();
				this.hitContext().scale(this.model().seriesViewer().actualPixelScalingRatio(), this.model().seriesViewer().actualPixelScalingRatio());
			}
			var prevRect = this.__renderedRect;
			var _container1 = this.model().chart().getContainerRect();
			if (!prevRect.isEmpty() && clearRect) {
				this.hitContext().clearRectangle(_container1.left(), _container1.top(), _container1.width(), _container1.height());
			}
			if (this.model().seriesViewer() != null && this.model().seriesViewer().actualPixelScalingRatio() != 1) {
				this.hitContext().restore();
			}
		}
	}
	,
	postRender: function () {
		this.labelPanel().render();
	}
	,
	__renderedRect: null,
	renderOverride: function () {
		if (this.context().shouldRender()) {
			this.axisLines().__stroke = this.model().actualStroke();
			this.strips().__fill = this.model().strip();
			this.minorLines().__stroke = this.model().actualMinorStroke();
			this.majorLines().__stroke = this.model().actualMajorStroke();
			this.minorLines().strokeThickness(this.model().minorStrokeThickness());
			this.majorLines().strokeThickness(this.model().majorStrokeThickness());
			this.axisLines().strokeThickness(this.model().strokeThickness());
			this.minorLines().strokeDashArray(this.model().minorStrokeDashArray());
			this.majorLines().strokeDashArray(this.model().majorStrokeDashArray());
			this.axisLines().strokeDashArray(this.model().strokeDashArray());
			this.__renderedRect = this.model().viewportRect();
			this.context().renderPath(this.axisLines());
			this.context().renderPath(this.strips());
			this.context().renderPath(this.majorLines());
			this.context().renderPath(this.minorLines());
		}
	}
	,
	ensureRender: function () {
		this.makeDirty();
	}
	,
	detachFromChart: function (oldSeriesViewer) {
		if (oldSeriesViewer != null) {
			oldSeriesViewer.canvasRenderScheduler().unRegister(this);
		}
	}
	,
	attachToChart: function (newSeriesViewer) {
		if (newSeriesViewer != null) {
			newSeriesViewer.canvasRenderScheduler().register(this);
			this.makeDirty();
		}
	}
	,
	isDisabled: function () {
		return this.context() == null;
	}
	,
	onTitleChange: function () {
		if (this.model().isAngular() || this.model().isRadial()) {
			return;
		}
		if (this.model().title() == null) {
			this.model().titleTextBlock(null);
			this.model().mustInvalidateLabels(true);
			this.model().renderAxis();
			return;
		}
		if (this.model().titleTextBlock() == null) {
			var titleTextBlock = new $.ig.TextBlock();
			titleTextBlock.text(this.model().title());
			titleTextBlock.dataContext(this.model().titleSettings());
			this.model().titleTextBlock(titleTextBlock);
		} else {
			this.model().titleTextBlock().text(this.model().title());
			this.model().titleTextBlock().dataContext(this.model().titleSettings());
		}
		this.model().mustInvalidateLabels(true);
		this.model().renderAxis();
	}
	,
	applyDefaultSettings: function () {
		var className;
		var settings = new $.ig.AxisLabelSettings();
		if (this.model().isAngular()) {
			className = "ui-angular-axis-labels";
			settings.margin(0);
		} else if (this.model().isVertical()) {
			className = "ui-vertical-axis-labels";
			settings.location($.ig.AxisLabelsLocation.prototype.outsideLeft);
		} else if (this.model().orientation() == $.ig.AxisOrientation.prototype.radial) {
			className = "ui-radial-axis-labels";
			settings.location($.ig.AxisLabelsLocation.prototype.insideBottom);
		} else {
			className = "ui-horizontal-axis-labels";
			settings.location($.ig.AxisLabelsLocation.prototype.outsideBottom);
		}
		this.applyCssLabelSettings(settings, className);
	}
	,
	updateStrokeBrushesFromCss: function () {
		if (this.model().seriesViewer() == null) {
			return;
		}
		var chartView = (this.model().seriesViewer()).chartView();
		var cssStroke = chartView.cssAxisStroke();
		var cssMajorStroke = chartView.cssAxisMajorStroke();
		if (this.model().stroke() == null) {
			if (cssStroke == null) {
				this.model().stroke(chartView.axisLineBrush());
			} else if (cssStroke.color().a() != 0) {
				this.model().stroke(cssStroke);
			}
		}
		if (this.model().majorStroke() == null) {
			if (cssMajorStroke == null) {
				this.model().majorStroke(chartView.axisLineBrush());
			} else if (cssMajorStroke.color().a() != 0) {
				this.model().majorStroke(cssMajorStroke);
			}
		}
	}
	,
	applyCssLabelSettings: function (settings, className) {
		var discovery = $.ig.CssHelper.prototype.getDisoveryElement();
		var body = $("body");
		body.append(discovery);
		var axisTopMargin = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "margin-top");
		var axisRightMargin = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "margin-right");
		var axisBottomMargin = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "margin-bottom");
		var axisLeftMargin = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "margin-left");
		var horizontalAlignment = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "text-align");
		var vericalAlignment = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "vertical-align");
		var textColor = $.ig.CssHelper.prototype.getPropertyValue(discovery, className, "color");
		if (axisTopMargin != null) {
			settings.topMargin(parseFloat(axisTopMargin));
		}
		if (axisRightMargin != null) {
			settings.rightMargin(parseFloat(axisRightMargin));
		}
		if (axisBottomMargin != null) {
			settings.bottomMargin(parseFloat(axisBottomMargin));
		}
		if (axisLeftMargin != null) {
			settings.leftMargin(parseFloat(axisLeftMargin));
		}
		if (textColor != null) {
			if (settings.textColor() == null) {
				settings.textColor(new $.ig.Brush());
			}
			settings.textColor().__fill = textColor;
		}
		if (horizontalAlignment != null) {
			switch (horizontalAlignment) {
				case "right":
					settings.horizontalAlignment($.ig.HorizontalAlignment.prototype.right);
					break;
				case "left":
					settings.horizontalAlignment($.ig.HorizontalAlignment.prototype.left);
					break;
				default:
					settings.horizontalAlignment($.ig.HorizontalAlignment.prototype.center);
					break;
			}
		}
		if (vericalAlignment != null) {
			switch (vericalAlignment) {
				case "top":
					settings.verticalAlignment($.ig.VerticalAlignment.prototype.top);
					break;
				case "bottom":
					settings.verticalAlignment($.ig.VerticalAlignment.prototype.bottom);
					break;
				default:
					settings.verticalAlignment($.ig.VerticalAlignment.prototype.center);
					break;
			}
		}
		discovery.remove();
		this.model().labelSettings(settings);
	}
	,
	preRender: function () {
		if (this.model().seriesViewer() != null) {
			this.model().seriesViewer().ensureCorrectSize();
		}
	}
	,
	isValid: function () {
		return this.model() != null && !this.model().viewportRect().isEmpty();
	}
	,
	exportLabelPosition: function (textBlock) {
		return { __x: textBlock.canvasLeft(), __y: textBlock.canvasTop(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	exportLabelsPanelPosition: function () {
		return { __x: this.model().labelPanel().labelViewport().left(), __y: this.model().labelPanel().labelViewport().top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	exportLabelsPanelViewport: function () {
		var viewport = this.model().labelPanel().labelViewport();
		return viewport;
	}
	,
	exportTitlePosition: function (textBlock) {
		return { __x: textBlock.canvasLeft(), __y: textBlock.canvasTop(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
	}
	,
	exportTitleBounds: function (textBlock) {
		var bounds = $.ig.VisualExportHelper.prototype.getRotatedBounds(textBlock);
		return bounds;
	}
	,
	exportTitleMargin: function (textBlock) {
		var left = this.model().labelPanel().view().getTitleLeftMargin();
		var top = this.model().labelPanel().view().getTitleTopMargin();
		var right = this.model().labelPanel().view().getTitleRightMargin();
		var bottom = this.model().labelPanel().view().getTitleBottomMargin();
		return new $.ig.Thickness(1, left, top, right, bottom);
	}
	,
	$type: new $.ig.Type('AxisView', $.ig.Object.prototype.$type, [$.ig.ISchedulableRender.prototype.$type])
}, true);

$.ig.util.defType('CategoryAxisBaseView', 'AxisView', {
	_categoryModel: null,
	categoryModel: function (value) {
		if (arguments.length === 1) {
			this._categoryModel = value;
			return value;
		} else {
			return this._categoryModel;
		}
	}
	,
	init: function (model) {
		$.ig.AxisView.prototype.init.call(this, model);
		this.categoryModel(model);
	},
	addLabels: function (list) {
		var textBlockCount = 0;
		var needRefresh = false;
		for (var i = 0; i < list.count(); i++) {
			var label = $.ig.util.cast($.ig.FrameworkElement.prototype.$type, list.__inner[i]);
			if (label == null) {
				label = this.model().textBlocks().item(i);
				var labelText = list.__inner[i] == null ? "" : list.__inner[i].toString();
				var currentText = (label).text();
				var currentLen = 0;
				var nextlen = 0;
				if (currentText != null) {
					currentLen = currentText.length;
				}
				if (labelText != null) {
					nextlen = labelText.length;
				}
				if (currentLen != nextlen) {
					needRefresh = true;
				}
				(label).text(labelText);
				textBlockCount++;
			} else {
				this.labelPanel().children().add(label);
			}
		}
		if (needRefresh) {
			this.model().mustInvalidateLabels(true);
		}
		return textBlockCount;
	}
	,
	$type: new $.ig.Type('CategoryAxisBaseView', $.ig.AxisView.prototype.$type)
}, true);

$.ig.util.defType('CategoryDateTimeXAxisView', 'CategoryAxisBaseView', {
	_xModel: null,
	xModel: function (value) {
		if (arguments.length === 1) {
			this._xModel = value;
			return value;
		} else {
			return this._xModel;
		}
	}
	,
	init: function (model) {
		$.ig.CategoryAxisBaseView.prototype.init.call(this, model);
		this.xModel(model);
	},
	$type: new $.ig.Type('CategoryDateTimeXAxisView', $.ig.CategoryAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('CategoryXAxisView', 'CategoryAxisBaseView', {
	_xModel: null,
	xModel: function (value) {
		if (arguments.length === 1) {
			this._xModel = value;
			return value;
		} else {
			return this._xModel;
		}
	}
	,
	init: function (model) {
		$.ig.CategoryAxisBaseView.prototype.init.call(this, model);
		this.xModel(model);
	},
	$type: new $.ig.Type('CategoryXAxisView', $.ig.CategoryAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('CategoryYAxisView', 'CategoryAxisBaseView', {
	_yModel: null,
	yModel: function (value) {
		if (arguments.length === 1) {
			this._yModel = value;
			return value;
		} else {
			return this._yModel;
		}
	}
	,
	init: function (model) {
		$.ig.CategoryAxisBaseView.prototype.init.call(this, model);
		this.yModel(model);
	},
	$type: new $.ig.Type('CategoryYAxisView', $.ig.CategoryAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('NumericAxisBaseView', 'AxisView', {
	_numericModel: null,
	numericModel: function (value) {
		if (arguments.length === 1) {
			this._numericModel = value;
			return value;
		} else {
			return this._numericModel;
		}
	}
	,
	init: function (model) {
		$.ig.AxisView.prototype.init.call(this, model);
		this.numericModel(model);
	},
	bindLogarithmBaseToActualTickmarks: function () {
	}
	,
	$type: new $.ig.Type('NumericAxisBaseView', $.ig.AxisView.prototype.$type)
}, true);

$.ig.util.defType('StraightNumericAxisBaseView', 'NumericAxisBaseView', {
	_straightModel: null,
	straightModel: function (value) {
		if (arguments.length === 1) {
			this._straightModel = value;
			return value;
		} else {
			return this._straightModel;
		}
	}
	,
	init: function (model) {
		$.ig.NumericAxisBaseView.prototype.init.call(this, model);
		this.straightModel(model);
	},
	bindScalerProperties: function () {
		this.straightModel().actualScaler().setActualMaximumValue(this.straightModel().actualMaximumValue());
		this.straightModel().actualScaler().setActualMinimumValue(this.straightModel().actualMinimumValue());
	}
	,
	$type: new $.ig.Type('StraightNumericAxisBaseView', $.ig.NumericAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('NumericXAxisView', 'StraightNumericAxisBaseView', {
	_xModel: null,
	xModel: function (value) {
		if (arguments.length === 1) {
			this._xModel = value;
			return value;
		} else {
			return this._xModel;
		}
	}
	,
	init: function (model) {
		$.ig.StraightNumericAxisBaseView.prototype.init.call(this, model);
		this.xModel(model);
	},
	$type: new $.ig.Type('NumericXAxisView', $.ig.StraightNumericAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('NumericYAxisView', 'StraightNumericAxisBaseView', {
	init: function (model) {
		$.ig.StraightNumericAxisBaseView.prototype.init.call(this, model);
		this.yModel(model);
	},
	_yModel: null,
	yModel: function (value) {
		if (arguments.length === 1) {
			this._yModel = value;
			return value;
		} else {
			return this._yModel;
		}
	}
	,
	$type: new $.ig.Type('NumericYAxisView', $.ig.StraightNumericAxisBaseView.prototype.$type)
}, true);

$.ig.util.defType('VerticalAxisLabelPanelView', 'AxisLabelPanelBaseView', {
	_verticalModel: null,
	verticalModel: function (value) {
		if (arguments.length === 1) {
			this._verticalModel = value;
			return value;
		} else {
			return this._verticalModel;
		}
	}
	,
	init: function (model) {
		$.ig.AxisLabelPanelBaseView.prototype.init.call(this, model);
		this.verticalModel(model);
	},
	bindExtent: function () {
	}
	,
	getAxisTitleFont: function () {
		var font = this.model().axis().seriesViewer().getFontInfo();
		if (this.model().axis().titleSettings() != null && this.model().axis().titleSettings().textStyle() != null) {
			font = this.model().axis().titleSettings().getFontInfo();
		} else {
			var defFont = this.model().axis().seriesViewer().getDefaultVerticalAxisFont();
			if (defFont != null) {
				font = defFont;
			}
		}
		return font;
	}
	,
	getTitleMargin: function () {
		return this.model().axis().seriesViewer().getDefaultVerticalAxisTitleMargin();
	}
	,
	getAxisTitleColor: function () {
		var brush = this.model().axis().chart().getFontBrush();
		if (this.model().axis().titleSettings() != null && this.model().axis().titleSettings().textColor() != null) {
			brush = this.model().axis().titleSettings().textColor();
		} else {
			var defBrush = this.model().axis().seriesViewer().getDefaultverticalAxisColor();
			if (defBrush != null) {
				brush = defBrush;
			}
		}
		return brush;
	}
	,
	handleHorizontalAlignment: function (rectangles, largestWidth) {
		var leftOffset, rightOffset;
		leftOffset = this.verticalModel().getLabelLeftOffset();
		rightOffset = this.verticalModel().getLabelRightOffset();
		var alignment = this.model().labelSettings() != null ? this.model().labelSettings().horizontalAlignment() : $.ig.HorizontalAlignment.prototype.center;
		var extent = this.model()._actualExtent;
		var span = this.verticalModel().getLabelSpan();
		var halfSpan = span / 2;
		var labelViewport = this.model().labelViewport();
		for (var i = 0; i < rectangles.count(); i++) {
			var rect = rectangles.__inner[i];
			var halfRectWidth = rect.width() / 2;
			switch (alignment) {
				case $.ig.HorizontalAlignment.prototype.left:
					rect.x(labelViewport.left() + leftOffset);
					break;
				case $.ig.HorizontalAlignment.prototype.center:
				case $.ig.HorizontalAlignment.prototype.stretch:
					rect.x((labelViewport.left() + leftOffset + halfSpan) - halfRectWidth);
					break;
				case $.ig.HorizontalAlignment.prototype.right:
					rect.x((labelViewport.right() - rightOffset) - rect.width());
					break;
			}
		}
	}
	,
	$type: new $.ig.Type('VerticalAxisLabelPanelView', $.ig.AxisLabelPanelBaseView.prototype.$type)
}, true);

$.ig.util.defType('MarkerSeriesView', 'SeriesView', {
	_markerModel: null,
	markerModel: function (value) {
		if (arguments.length === 1) {
			this._markerModel = value;
			return value;
		} else {
			return this._markerModel;
		}
	}
	,
	__markerHitOutlineThickness: 0,
	__markerNormalOutlineThickness: 0,
	__markerHitThicknessAugment: 0,
	init: function (model) {
		this.__markerHitOutlineThickness = 1;
		this.__markerNormalOutlineThickness = $.ig.MarkerSeries.prototype.markerThicknessDefault;
		this.__markerHitThicknessAugment = $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT;
		this.__hitMarker = new $.ig.Marker();
		$.ig.SeriesView.prototype.init.call(this, model);
		this.__hitMarker = new $.ig.Marker();
		this.__hitMarker.content(new $.ig.DataContext());
		this.markerModel(model);
	},
	onInit: function () {
		$.ig.SeriesView.prototype.onInit.call(this);
		this.visibleMarkers(new $.ig.List$1($.ig.Marker.prototype.$type, 0));
		this.__hitTemplate = (function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderAlignedSquareMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}());
	}
	,
	doUpdateMarkerTemplates: function () {
		var en = this.visibleMarkers().getEnumerator();
		while (en.moveNext()) {
			var marker = en.current();
			marker.contentTemplate(this.markerModel()._cachedActualMarkerTemplate);
		}
		this.makeDirty();
	}
	,
	setUseLightweightMode: function (p) {
	}
	,
	_visibleMarkers: null,
	visibleMarkers: function (value) {
		if (arguments.length === 1) {
			this._visibleMarkers = value;
			return value;
		} else {
			return this._visibleMarkers;
		}
	}
	,
	markerCreate: function () {
		var $self = this;
		var marker = new $.ig.Marker();
		marker.content((function () {
			var $ret = new $.ig.DataContext();
			$ret.series($self.model());
			return $ret;
		}()));
		marker.contentTemplate(this.markerModel()._cachedActualMarkerTemplate);
		this.visibleMarkers().add(marker);
		return marker;
	}
	,
	doToAllMarkers: function (action) {
	}
	,
	markerActivate: function (marker) {
		marker.__visibility = $.ig.Visibility.prototype.visible;
	}
	,
	markerDisactivate: function (marker) {
		marker.__visibility = $.ig.Visibility.prototype.collapsed;
	}
	,
	markerDestroy: function (marker) {
		this.visibleMarkers().remove(marker);
	}
	,
	hasCustomMarkerTemplate: function () {
		return this.markerModel().markerTemplate() != null;
	}
	,
	clearActualMarkerTemplate: function () {
		this.markerModel().actualMarkerTemplate(null);
	}
	,
	bindActualToCustomMarkerTemplate: function () {
		this.markerModel().actualMarkerTemplate(this.markerModel().markerTemplate());
	}
	,
	getBoundingBoxForMarker: function (marker) {
		var left = marker.canvasLeft();
		var top = marker.canvasTop();
		var width = marker.actualWidth();
		var height = marker.actualHeight();
		return new $.ig.Rect(0, left - width / 2, top - width / 2, width, height);
	}
	,
	bindActualToMarkerTemplate: function (p) {
		switch (p) {
			case $.ig.XamDataChart.prototype.circleMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().circleMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.triangleMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().triangleMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.pyramidMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().pyramidMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.squareMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().squareMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.diamondMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().diamondMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.pentagonMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().pentagonMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.hexagonMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().hexagonMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.tetragramMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().tetragramMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.pentagramMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().pentagramMarkerTemplate());
				break;
			case $.ig.XamDataChart.prototype.hexagramMarkerTemplatePropertyName:
				this.markerModel().actualMarkerTemplate(this.markerModel().seriesViewer().hexagramMarkerTemplate());
				break;
		}
	}
	,
	clearActualMarkerBrush: function () {
		this.markerModel().actualMarkerBrush(null);
	}
	,
	bindActualToMarkerBrush: function () {
		this.markerModel().actualMarkerBrush(this.markerModel().markerBrush());
	}
	,
	clearActualMarkerOutline: function () {
		this.markerModel().actualMarkerOutline(null);
	}
	,
	bindActualToMarkerOutline: function () {
		this.markerModel().actualMarkerOutline(this.markerModel().markerOutline());
	}
	,
	renderMarkers: function () {
		this.makeDirty();
	}
	,
	_markerAppearanceHandled: false,
	markerAppearanceHandled: function (value) {
		if (arguments.length === 1) {
			this._markerAppearanceHandled = value;
			return value;
		} else {
			return this._markerAppearanceHandled;
		}
	}
	,
	setupMarkerAppearanceOverride: function (item, index) {
		$.ig.SeriesView.prototype.setupMarkerAppearanceOverride.call(this, item, index);
		if (!this.markerAppearanceHandled()) {
			var marker = item;
			var context = marker.content();
			if (context != null) {
				context.actualItemBrush(this.markerModel().actualMarkerBrush());
				if (context.itemBrush() != null) {
					context.actualItemBrush(context.itemBrush());
				}
				context.outline(this.markerModel().actualMarkerOutline());
				context.thickness(this.__markerNormalOutlineThickness);
			}
		}
	}
	,
	__hitMarker: null,
	setupMarkerHitAppearanceOverride: function (item, index) {
		$.ig.SeriesView.prototype.setupMarkerHitAppearanceOverride.call(this, item, index);
		var marker = item;
		this.__hitMarker.__visibility = marker.__visibility;
		this.__hitMarker.contentTemplate(marker.contentTemplate());
		this.__hitMarker.width(marker.width());
		this.__hitMarker.height(marker.height());
		this.__hitMarker.actualWidth(marker.actualWidth());
		this.__hitMarker.actualHeight(marker.actualHeight());
		this.__hitMarker.canvasLeft(marker.canvasLeft());
		this.__hitMarker.canvasTop(marker.canvasTop());
		var hitBrush = this.getHitBrush1(index);
		var context = this.__hitMarker.content();
		var markerContext = marker.content();
		context.item(markerContext.item());
		context.series(markerContext.series());
		context.thickness(markerContext.thickness());
		if (context != null) {
			context.actualItemBrush(hitBrush);
			context.outline(hitBrush);
			context.thickness(this.__markerHitOutlineThickness + this.__markerHitThicknessAugment);
		}
	}
	,
	getDataContextByIndex: function (itemIndex) {
		if (itemIndex >= 0 && itemIndex < this.visibleMarkers().count()) {
			return this.visibleMarkers().__inner[itemIndex].content();
		}
		return $.ig.SeriesView.prototype.getDataContextByIndex.call(this, itemIndex);
	}
	,
	__hitTemplate: null,
	renderMarkersOverride: function (context, isHitContext) {
		$.ig.SeriesView.prototype.renderMarkersOverride.call(this, context, isHitContext);
		if (context.shouldRender()) {
			var passInfo = new $.ig.DataTemplatePassInfo();
			passInfo.isHitTestRender = isHitContext;
			passInfo.context = context.getUnderlyingContext();
			passInfo.viewportTop = this.viewport().top();
			passInfo.viewportLeft = this.viewport().left();
			passInfo.viewportWidth = this.viewport().width();
			passInfo.viewportHeight = this.viewport().height();
			passInfo.passID = "Markers";
			var renderInfo = new $.ig.DataTemplateRenderInfo();
			renderInfo.isHitTestRender = isHitContext;
			renderInfo.passInfo = passInfo;
			var measureInfo = new $.ig.DataTemplateMeasureInfo();
			measureInfo.passInfo = passInfo;
			var isConstant = false;
			var cont = context.getUnderlyingContext();
			measureInfo.context = cont;
			renderInfo.context = cont;
			var constantWidth = 0;
			var constantHeight = 0;
			var first = true;
			if (this.markerModel()._cachedActualMarkerTemplate != null && this.markerModel()._cachedActualMarkerTemplate.passStarting() != null) {
				this.markerModel()._cachedActualMarkerTemplate.passStarting()(passInfo);
			}
			for (var i = 0; i < this.visibleMarkers().count(); i++) {
				var marker = this.visibleMarkers().__inner[i];
				if (marker.__visibility == $.ig.Visibility.prototype.collapsed) {
					continue;
				}
				this.setupMarkerAppearance(marker, i, isHitContext);
				if (isHitContext) {
					marker = this.__hitMarker;
				}
				if (!isConstant) {
					measureInfo.data = marker.content();
					measureInfo.width = marker.width();
					measureInfo.height = marker.height();
					measureInfo.renderOffsetX = 0;
					measureInfo.renderOffsetY = 0;
					measureInfo.renderContext = context;
					var template = marker.contentTemplate();
					if (template.measure() != null) {
						measureInfo.data = marker.content();
						template.measure()(measureInfo);
						isConstant = measureInfo.isConstant;
						if (isConstant) {
							constantWidth = measureInfo.width;
							constantHeight = measureInfo.height;
						}
					}
					renderInfo.availableWidth = measureInfo.width;
					renderInfo.availableHeight = measureInfo.height;
					renderInfo.renderOffsetX = measureInfo.renderOffsetX;
					renderInfo.renderOffsetY = measureInfo.renderOffsetY;
					renderInfo.renderContext = context;
				} else {
					renderInfo.availableWidth = constantWidth;
					renderInfo.availableHeight = constantHeight;
				}
				if (!$.ig.util.isNaN(marker.width()) && !Number.isInfinity(marker.width())) {
					renderInfo.availableWidth = marker.width();
				}
				if (!$.ig.util.isNaN(marker.height()) && !Number.isInfinity(marker.height())) {
					renderInfo.availableHeight = marker.height();
				}
				first = false;
				context.renderContentControl(renderInfo, marker);
				marker.actualWidth(renderInfo.availableWidth);
				marker.actualHeight(renderInfo.availableHeight);
				marker._renderOffsetX = renderInfo.renderOffsetX;
				marker._renderOffsetY = renderInfo.renderOffsetY;
			}
			if (this.markerModel()._cachedActualMarkerTemplate != null && this.markerModel()._cachedActualMarkerTemplate.passCompleted() != null) {
				this.markerModel()._cachedActualMarkerTemplate.passCompleted()(passInfo);
			}
		}
	}
	,
	initMarkers: function (Markers) {
		Markers.create(this.markerCreate.runOn(this));
		Markers.destroy(this.markerDestroy.runOn(this));
		Markers.activate(this.markerActivate.runOn(this));
		Markers.disactivate(this.markerDisactivate.runOn(this));
	}
	,
	initMarkers1: function (Markers) {
		Markers.create(this.markerCreate.runOn(this));
		Markers.destroy(this.markerDestroy.runOn(this));
		Markers.activate(this.markerActivate.runOn(this));
		Markers.disactivate(this.markerDisactivate.runOn(this));
	}
	,
	getHitMarker: function (point) {
		var hitMarker = this.getHitMarkerWithBuffer(point, 0);
		if (hitMarker == null) {
			hitMarker = this.getHitMarkerWithBuffer(point, $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		}
		return hitMarker;
	}
	,
	getHitMarkerWithBuffer: function (point, buffer) {
		var halfWidth;
		var halfHeight;
		var offsetX;
		var offsetY;
		for (var i = this.visibleMarkers().count() - 1; i >= 0; i--) {
			var marker = this.visibleMarkers().__inner[i];
			if (marker.__visibility == $.ig.Visibility.prototype.collapsed || marker.__opacity == 0) {
				continue;
			}
			halfWidth = (marker.actualWidth() / 2) + buffer;
			halfHeight = (marker.actualHeight() / 2) + buffer;
			offsetX = marker._renderOffsetX;
			offsetY = marker._renderOffsetY;
			if ((marker.canvasLeft() + offsetX) - halfWidth <= point.__x && (marker.canvasLeft() + offsetX) + halfWidth >= point.__x && (marker.canvasTop() + offsetY) - halfHeight <= point.__y && (marker.canvasTop() + offsetY) + halfHeight >= point.__y) {
				return marker;
			}
		}
		return null;
	}
	,
	$type: new $.ig.Type('MarkerSeriesView', $.ig.SeriesView.prototype.$type)
}, true);

$.ig.util.defType('CategorySeriesView', 'MarkerSeriesView', {
	_categoryModel: null,
	categoryModel: function (value) {
		if (arguments.length === 1) {
			this._categoryModel = value;
			return value;
		} else {
			return this._categoryModel;
		}
	}
	,
	_frameVersion: 0,
	frameVersion: function (value) {
		if (arguments.length === 1) {
			this._frameVersion = value;
			return value;
		} else {
			return this._frameVersion;
		}
	}
	,
	checkFrameDirty: function (frame) {
		if (this.frameVersion() != frame.frameVersion()) {
			return true;
		}
		return false;
	}
	,
	updateFrameVersion: function (frame) {
		this.frameVersion(frame.frameVersion());
	}
	,
	init: function (model) {
		var $self = this;
		$.ig.MarkerSeriesView.prototype.init.call(this, model);
		this.frameVersion(-1);
		this.categoryModel(model);
		this.bucketCalculator(this.createBucketCalculator());
		this.markers((function () {
			var $ret = new $.ig.Pool$1($.ig.Marker.prototype.$type);
			$ret.create($self.markerCreate.runOn($self));
			$ret.activate($self.markerActivate.runOn($self));
			$ret.disactivate($self.markerDisactivate.runOn($self));
			$ret.destroy($self.markerDestroy.runOn($self));
			return $ret;
		}()));
	},
	updateMarkerTemplate: function (markerCount, itemIndex, markerBucket) {
		if (!this.markerModel().useLightweightMarkers()) {
			var marker = this.markers().item(markerCount);
			var context = marker.content();
			context.item(this.model().fastItemsSource().item(itemIndex));
			marker.currentIndex(itemIndex);
			marker.markerBucket(markerBucket);
		}
	}
	,
	_bucketCalculator: null,
	bucketCalculator: function (value) {
		if (arguments.length === 1) {
			this._bucketCalculator = value;
			return value;
		} else {
			return this._bucketCalculator;
		}
	}
	,
	createBucketCalculator: function () {
		return new $.ig.CategoryBucketCalculator(this);
	}
	,
	_markers: null,
	markers: function (value) {
		if (arguments.length === 1) {
			this._markers = value;
			return value;
		} else {
			return this._markers;
		}
	}
	,
	shouldDisplayMarkers: function () {
		return this.categoryModel().shouldDisplayMarkers();
	}
	,
	updateMarkerCount: function (markerCount) {
		this.markers().count(markerCount);
	}
	,
	doToAllMarkers: function (action) {
		this.markers().doToAll(action);
	}
	,
	hideErrorBars: function () {
	}
	,
	$type: new $.ig.Type('CategorySeriesView', $.ig.MarkerSeriesView.prototype.$type, [$.ig.ISupportsMarkers.prototype.$type])
}, true);

$.ig.util.defType('AnchoredCategorySeriesView', 'CategorySeriesView', {
	_anchoredModel: null,
	anchoredModel: function (value) {
		if (arguments.length === 1) {
			this._anchoredModel = value;
			return value;
		} else {
			return this._anchoredModel;
		}
	}
	,
	init: function (model) {
		$.ig.CategorySeriesView.prototype.init.call(this, model);
		this.anchoredModel(model);
		this.trendLineManager(new $.ig.CategoryTrendLineManager());
	},
	_trendLineManager: null,
	trendLineManager: function (value) {
		if (arguments.length === 1) {
			this._trendLineManager = value;
			return value;
		} else {
			return this._trendLineManager;
		}
	}
	,
	resetTrendlineBrush: function () {
		this.anchoredModel().actualTrendLineBrush(null);
	}
	,
	bindTrendlineBrushToActualTrendlineBrush: function () {
		this.anchoredModel().actualTrendLineBrush(this.anchoredModel().trendLineBrush());
	}
	,
	bindTrendlineBrushToActualBrush: function () {
		this.anchoredModel().actualTrendLineBrush(this.anchoredModel().actualBrush());
	}
	,
	createBucketCalculator: function () {
		return new $.ig.AnchoredCategoryBucketCalculator(this);
	}
	,
	cacheValues: function () {
		this.bucketCalculator().cacheValues();
	}
	,
	unCacheValues: function () {
		this.bucketCalculator().unCacheValues();
	}
	,
	getMarkerBoundingBox: function (index) {
		var marker = this.markers().item(index);
		return this.getBoundingBoxForMarker(marker);
	}
	,
	renderMarkersOverride: function (context, isHitContext) {
		if (context.shouldRender()) {
			if (this.anchoredModel().trendLineType() != $.ig.TrendLineType.prototype.none && !isHitContext) {
				var polyline = this.trendLineManager().trendPolyline();
				polyline.strokeThickness(this.anchoredModel().trendLineThickness());
				polyline.__stroke = this.anchoredModel().actualTrendLineBrush();
				polyline.strokeDashArray(this.anchoredModel().trendLineDashArray());
				polyline.strokeDashCap(this.anchoredModel().trendLineDashCap());
				context.renderPolyline(polyline);
			}
		}
		$.ig.CategorySeriesView.prototype.renderMarkersOverride.call(this, context, isHitContext);
	}
	,
	getDefaultTooltipTemplate: function () {
		var tooltipTemplate = "<div class='ui-chart-default-tooltip-content'>";
		var axis = null;
		if (this.anchoredModel().getXAxis().isCategory()) {
			axis = this.anchoredModel().getXAxis();
		} else if (this.anchoredModel().getYAxis().isCategory()) {
			axis = this.anchoredModel().getYAxis();
		}
		var dateTimeAxis = $.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, axis);
		if (dateTimeAxis != null) {
			tooltipTemplate += "<span>${item." + dateTimeAxis.dateTimeMemberPath() + "}</span><br/>";
		} else if (axis != null && axis.label() != null) {
			tooltipTemplate += "<span>${item." + axis.label() + "}</span><br/>";
		}
		tooltipTemplate += "<span";
		var nonTransparentOutline = this.model().actualOutline() != null && $.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.model().actualOutline().color()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) && this.model().actualOutline().color().a() > 0;
		if (nonTransparentOutline) {
			tooltipTemplate += " style='color:" + this.model().actualOutline().__fill + "'";
		}
		tooltipTemplate += ">${series.title}: </span><span class='ui-priority-primary'>" + "${item." + this.anchoredModel().valueMemberPath() + "}</span></div>";
		return tooltipTemplate;
	}
	,
	$type: new $.ig.Type('AnchoredCategorySeriesView', $.ig.CategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('SplineSeriesBaseView', 'AnchoredCategorySeriesView', {
	_splineBaseModel: null,
	splineBaseModel: function (value) {
		if (arguments.length === 1) {
			this._splineBaseModel = value;
			return value;
		} else {
			return this._splineBaseModel;
		}
	}
	,
	init: function (model) {
		$.ig.AnchoredCategorySeriesView.prototype.init.call(this, model);
		this.splineBaseModel(model);
	},
	applyDropShadowDefaultSettings: function () {
		var color = new $.ig.Color();
		color.colorString("rgba(95,95,95,0.5)");
		this.model().shadowColor(color);
		this.model().shadowBlur(3);
		this.model().shadowOffsetX(1);
		this.model().shadowOffsetY(4);
		this.model().useSingleShadow(false);
	}
	,
	$type: new $.ig.Type('SplineSeriesBaseView', $.ig.AnchoredCategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('SeriesViewerView', 'Object', {
	init: function (model) {
		this.__shouldMergeOverlayContext = false;
		this.__componentsFromView = new $.ig.SeriesViewerComponentsFromView();
		this.__currentPlotArea = $.ig.Rect.prototype.empty();
		this.__sizeChanged = false;
		this.__titlesDirty = true;
		this.__fromEmpty = false;
		this.__subTitleHeight = NaN;
		this.__renderedRect = $.ig.Rect.prototype.empty();
		this.__gradientsEnabled = false;
		this.__seriesMouseDown = false;
		this.__hasUserSetMobileMode = false;
		this.__isDirty = false;
		this.__infoBoxVisible = false;
		this.__titleText = null;
		this.__subTitleText = null;
		this.__hasUserTitleAlignment = false;
		this.__hasUserSubtitleAlignment = false;
		this.__panelsDirty = true;
		this._visibleTiles = null;
		this.__plotContentShown = true;
		$.ig.Object.prototype.init.call(this);
		this.containerWidth(0);
		this.containerHeight(0);
		this.model(model);
		this.model().crosshairPoint({ __x: NaN, __y: NaN, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
		this.model().windowResponse($.ig.WindowResponse.prototype.immediate);
		this.viewManager(new $.ig.SeriesViewerViewManager(this));
		this.horizontalCrosshairLine((function () {
			var $ret = new $.ig.Line();
			$ret.visibility($.ig.Visibility.prototype.collapsed);
			return $ret;
		}()));
		this.verticalCrosshairLine((function () {
			var $ret = new $.ig.Line();
			$ret.visibility($.ig.Visibility.prototype.collapsed);
			return $ret;
		}()));
	},
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	onInit: function () {
		this.model().ignoreCrosshairVisibilityChange(true);
		this.model().crosshairVisibility($.ig.Visibility.prototype.collapsed);
		this.model().ignoreCrosshairVisibilityChange(false);
		this.previewPath(new $.ig.Path());
		this.dragPathRect(new $.ig.Rectangle());
		this.dragPathRect().__visibility = $.ig.Visibility.prototype.collapsed;
		this.setDefaultMarkerTemplates();
		this.attachedSeries(new $.ig.SeriesCollection());
		this.attachedAxes(new $.ig.AxisCollection());
		this.overviewPlusDetailPane(new $.ig.XamOverviewPlusDetailPane());
		this.updateOverviewPlusDetailRects();
		this.overviewPlusDetailPane().world(new $.ig.Rect(0, 0, 0, 1, 1));
		this.overviewPlusDetailPane().window(this.model().windowRect());
		this.overviewPlusDetailPane().surfaceViewer(new $.ig.SeriesViewerSurfaceViewer(this.model(), this));
		var $t = this.model();
		$t.windowRectChanged = $.ig.Delegate.prototype.combine($t.windowRectChanged, this.model_WindowRectChanged.runOn(this));
		var $t1 = this.model();
		$t1.gridAreaRectChanged = $.ig.Delegate.prototype.combine($t1.gridAreaRectChanged, this.model_GridAreaRectChanged.runOn(this));
		this.overviewPlusDetailViewportHost(new $.ig.OverviewPlusDetailViewportHost(this));
		this.overlayScheduler(new $.ig.CanvasRenderScheduler());
		this.overlayScheduler().register(this);
		this.overlayScheduler().dependsOn().add(this.model().thumbnailCanvasRenderScheduler());
		if (this.model().overviewPlusDetailPane() != null) {
			this.model().overviewPlusDetailPane().view().scheduler(this.overlayScheduler());
			var $t2 = this.overviewPlusDetailPane();
			$t2.windowChanging = $.ig.Delegate.prototype.combine($t2.windowChanging, this.overviewPlusDetailPane_WindowChanging.runOn(this));
			var $t3 = this.overviewPlusDetailPane();
			$t3.windowChanged = $.ig.Delegate.prototype.combine($t3.windowChanged, this.overviewPlusDetailPane_WindowChanged.runOn(this));
		}
		this.overviewPlusDetailPaneVisibilityChanged();
	}
	,
	_overlayScheduler: null,
	overlayScheduler: function (value) {
		if (arguments.length === 1) {
			this._overlayScheduler = value;
			return value;
		} else {
			return this._overlayScheduler;
		}
	}
	,
	_overviewPlusDetailPane: null,
	overviewPlusDetailPane: function (value) {
		if (arguments.length === 1) {
			this._overviewPlusDetailPane = value;
			return value;
		} else {
			return this._overviewPlusDetailPane;
		}
	}
	,
	overviewPlusDetailPane_WindowChanging: function (sender, e) {
		var newWindowRect = $.ig.SeriesViewerSurfaceViewer.prototype.changeRect(e.oldValue(), e.newValue(), this.model().isZoomingHorizontallyEnabled(), this.model().isZoomingVerticallyEnabled(), this.overviewPlusDetailPane().world());
		if (newWindowRect.isEmpty()) {
			this.overviewPlusDetailPane().window(e.oldValue());
		} else if (!newWindowRect.equals1(e.newValue())) {
			this.overviewPlusDetailPane().window(newWindowRect);
		}
		if (this.model().windowResponse() == $.ig.WindowResponse.prototype.immediate) {
			var aspect = this.model().viewportRect().width() / this.model().viewportRect().height();
			newWindowRect = new $.ig.Rect(0, newWindowRect.left() / aspect, newWindowRect.top(), newWindowRect.width() / aspect, newWindowRect.height());
			this.model().windowRect(newWindowRect);
		}
	}
	,
	overviewPlusDetailPane_WindowChanged: function (sender, e) {
		var newWindowRect = $.ig.SeriesViewerSurfaceViewer.prototype.changeRect(e.oldValue(), e.newValue(), this.model().isZoomingHorizontallyEnabled(), this.model().isZoomingVerticallyEnabled(), this.overviewPlusDetailPane().world());
		if (newWindowRect.isEmpty()) {
			newWindowRect = e.oldValue();
		} else if (!newWindowRect.equals1(e.newValue())) {
			this.overviewPlusDetailPane().window(newWindowRect);
		}
		var aspect = this.model().viewportRect().width() / this.model().viewportRect().height();
		newWindowRect = new $.ig.Rect(0, newWindowRect.left() / aspect, newWindowRect.top(), newWindowRect.width() / aspect, newWindowRect.height());
		this.model().windowRect(newWindowRect);
	}
	,
	updateOverviewPlusDetailRects: function () {
		if (this.model().overviewPlusDetailPaneVisibility() != $.ig.Visibility.prototype.visible) {
			return;
		}
		var aspect = 1;
		if (this.model().viewportRect().isEmpty() == false) {
			aspect = this.model().viewportRect().width() / this.model().viewportRect().height();
		}
		var oldRect = this.overviewPlusDetailPane().world();
		var newRect = new $.ig.Rect(0, 0, 0, aspect, 1);
		this.overviewPlusDetailPane().world(newRect);
		if (oldRect.width() != newRect.width() || oldRect.height() != newRect.height() || oldRect.x() != newRect.x() || oldRect.y() != newRect.y()) {
			(this.overviewPlusDetailPane().surfaceViewer()).isDirty(true);
		}
		this.overviewPlusDetailPane().window(new $.ig.Rect(0, this.model().windowRect().left() * aspect, this.model().windowRect().top(), this.model().windowRect().width() * aspect, this.model().windowRect().height()));
	}
	,
	model_WindowRectChanged: function (sender, e) {
		this.updateOverviewPlusDetailRects();
	}
	,
	model_GridAreaRectChanged: function (sender, e) {
		this.updateOverviewPlusDetailRects();
	}
	,
	_overviewPlusDetailViewportHost: null,
	overviewPlusDetailViewportHost: function (value) {
		if (arguments.length === 1) {
			this._overviewPlusDetailViewportHost = value;
			return value;
		} else {
			return this._overviewPlusDetailViewportHost;
		}
	}
	,
	getThumbnail: function (width, height, surface) {
		var first = true;
		var en = this.model().series().getEnumerator();
		while (en.moveNext()) {
			var s = en.current();
			if (first && s.thumbnailDirty()) {
				first = false;
				surface.surface().clearRectangle(0, 0, width, height);
			}
			s.renderThumbnail(new $.ig.Rect(0, 0, 0, width, height), surface);
		}
	}
	,
	setDefaultCursor: function () {
		this.viewManager().setDefaultCursor();
	}
	,
	goToIdleState: function () {
	}
	,
	setHandCursor: function () {
		this.viewManager().setHandCursor();
	}
	,
	hideTooltip: function () {
		for (var i = 0; i < this.model().series().count(); i++) {
			this.model().series().__inner[i].view().hideTooltip();
		}
	}
	,
	goToDraggingVisualState: function () {
	}
	,
	goToPanningVisualState: function () {
	}
	,
	removeSeries: function (series) {
		var index = this.attachedSeries().indexOf(series);
		var removed = false;
		if (index >= 0) {
			this.attachedSeries().removeAt(index);
		}
		if ($.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, series) !== null) {
			var en = (series).stackedSeriesManager().seriesVisual().getEnumerator();
			while (en.moveNext()) {
				var sub = en.current();
				index = this.attachedSeries().indexOf(sub);
				if (index >= 0) {
					this.attachedSeries().removeAt(index);
				}
			}
		}
		this.model().recalculateResolvedHitTestMode();
		series.provideContext(null, null);
		this.onSeriesRemoved();
	}
	,
	onSeriesRemoved: function () {
		if (this.attachedSeries().count() == 0) {
			if (this.mainContext() != null && $.ig.Rect.prototype.l_op_Inequality(this.model().viewportRect(), null) && !this.model().viewportRect().isEmpty()) {
				this.mainContext().clearRectangle(this.model().viewportRect().left(), this.model().viewportRect().top(), this.model().viewportRect().width(), this.model().viewportRect().height());
			}
		}
		this.model().canvasRenderScheduler().schedule();
	}
	,
	seriesAttached: function (series) {
		series.onViewportChanged(series.view().viewport(), this.__currentPlotArea);
		return this.attachedSeries().contains(series);
	}
	,
	_attachedSeries: null,
	attachedSeries: function (value) {
		if (arguments.length === 1) {
			this._attachedSeries = value;
			return value;
		} else {
			return this._attachedSeries;
		}
	}
	,
	_attachedAxes: null,
	attachedAxes: function (value) {
		if (arguments.length === 1) {
			this._attachedAxes = value;
			return value;
		} else {
			return this._attachedAxes;
		}
	}
	,
	__shouldMergeOverlayContext: false,
	shouldMergeOverlayContext: function (value) {
		if (arguments.length === 1) {
			this.__shouldMergeOverlayContext = value;
			return value;
		} else {
			return this.__shouldMergeOverlayContext;
		}
	}
	,
	attachSeries: function (series) {
		if (!this.attachedSeries().contains(series)) {
			this.attachedSeries().add(series);
			if ($.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, series) !== null) {
				var en = (series).stackedSeriesManager().seriesVisual().getEnumerator();
				while (en.moveNext()) {
					var sub = en.current();
					this.attachedSeries().add(sub);
				}
			}
			this.model().recalculateResolvedHitTestMode();
		}
		series.provideContext(this.mainContext(), this.hitContext());
		this.model().invalidatePanels();
	}
	,
	propagateHitContext: function (hitContext) {
		this.hitContext(hitContext);
		for (var i = 0; i < this.attachedSeries().count(); i++) {
			this.attachedSeries().__inner[i].provideContext(this.mainContext(), this.hitContext());
		}
		for (var i1 = 0; i1 < this.attachedAxes().count(); i1++) {
			this.attachedAxes().__inner[i1].provideContext(this.mainContext(), this.hitContext());
		}
	}
	,
	createLayout: function () {
	}
	,
	cancelMouseInteractions: function () {
		this.hideDragPath();
		this.hideTooltip();
	}
	,
	hideDragPath: function () {
		this.dragPathRect().__visibility = $.ig.Visibility.prototype.collapsed;
		this.makeDirty();
	}
	,
	focusChart: function () {
	}
	,
	plotAreaCaptureMouse: function () {
	}
	,
	_dragPathRect: null,
	dragPathRect: function (value) {
		if (arguments.length === 1) {
			this._dragPathRect = value;
			return value;
		} else {
			return this._dragPathRect;
		}
	}
	,
	_previewPath: null,
	previewPath: function (value) {
		if (arguments.length === 1) {
			this._previewPath = value;
			return value;
		} else {
			return this._previewPath;
		}
	}
	,
	showDragPath: function () {
		this.dragPathRect().__visibility = $.ig.Visibility.prototype.visible;
		this.makeDirty();
	}
	,
	updateDragPath: function (rect) {
		this.dragPathRect().canvasTop(rect.top() + this.model().viewportRect().top());
		this.dragPathRect().canvasLeft(rect.left() + this.model().viewportRect().left());
		this.dragPathRect().width(rect.width());
		this.dragPathRect().height(rect.height());
		this.dragPathRect().__stroke = this.viewManager().getBlackBrush();
		this.dragPathRect().__fill = null;
		this.dragPathRect().strokeThickness(0.5);
		this.makeDirty();
	}
	,
	completeMouseCapture: function () {
	}
	,
	onTemplateProvided: function () {
	}
	,
	updateVerticalCrosshair: function (x1, y1, x2, y2) {
		this.verticalCrosshairLine().x1(x1);
		this.verticalCrosshairLine().y1(y1);
		this.verticalCrosshairLine().x2(x2);
		this.verticalCrosshairLine().y2(y2);
		this.makeDirty();
	}
	,
	_verticalCrosshairLine: null,
	verticalCrosshairLine: function (value) {
		if (arguments.length === 1) {
			this._verticalCrosshairLine = value;
			return value;
		} else {
			return this._verticalCrosshairLine;
		}
	}
	,
	_horizontalCrosshairLine: null,
	horizontalCrosshairLine: function (value) {
		if (arguments.length === 1) {
			this._horizontalCrosshairLine = value;
			return value;
		} else {
			return this._horizontalCrosshairLine;
		}
	}
	,
	showVerticalCrosshair: function () {
		this.verticalCrosshairLine().__visibility = $.ig.Visibility.prototype.visible;
		this.makeDirty();
	}
	,
	hideVerticalCrosshair: function () {
		if (this.verticalCrosshairLine().__visibility == $.ig.Visibility.prototype.visible) {
			this.verticalCrosshairLine().__visibility = $.ig.Visibility.prototype.collapsed;
			this.makeDirty();
		}
	}
	,
	updateHorizontalCrosshair: function (x1, y1, x2, y2) {
		this.horizontalCrosshairLine().x1(x1);
		this.horizontalCrosshairLine().y1(y1);
		this.horizontalCrosshairLine().x2(x2);
		this.horizontalCrosshairLine().y2(y2);
		this.makeDirty();
	}
	,
	showHorizontalCrosshair: function () {
		this.horizontalCrosshairLine().__visibility = $.ig.Visibility.prototype.visible;
		this.makeDirty();
	}
	,
	hideHorizontalCrosshair: function () {
		if (this.horizontalCrosshairLine().__visibility == $.ig.Visibility.prototype.visible) {
			this.horizontalCrosshairLine().__visibility = $.ig.Visibility.prototype.collapsed;
			this.makeDirty();
		}
	}
	,
	hidePreviewPath: function () {
		this.previewPath().__visibility = $.ig.Visibility.prototype.collapsed;
		this.makeDirty();
	}
	,
	toAntiClockwisePath: function (rect) {
		var figures = new $.ig.PathFigureCollection();
		var figure = new $.ig.PathFigure();
		figure.__isClosed = true;
		figure.__startPoint = { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figures.add(figure);
		return figures;
	}
	,
	toClockwisePath: function (rect) {
		var figures = new $.ig.PathFigureCollection();
		var figure = new $.ig.PathFigure();
		figure.__isClosed = true;
		figure.__startPoint = { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.right(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.bottom(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figure.__segments.add(new $.ig.LineSegment(0, { __x: rect.left(), __y: rect.top(), $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName }));
		figures.add(figure);
		return figures;
	}
	,
	updatePreviewPath: function (viewportRect, rect) {
		rect.intersect(viewportRect);
		var pg1 = new $.ig.PathGeometry();
		pg1.figures(this.toClockwisePath(viewportRect));
		var pg2 = new $.ig.PathGeometry();
		pg2.figures(this.toAntiClockwisePath(rect));
		var geometryGroup = new $.ig.GeometryGroup();
		geometryGroup.children().add(pg1);
		geometryGroup.children().add(pg2);
		this.previewPath().data(geometryGroup);
		this.previewPath().__fill = this.viewManager().getBlackBrush();
		this.previewPath().__opacity = 0.1;
		this.makeDirty();
	}
	,
	showPreviewPath: function () {
		this.previewPath().__visibility = $.ig.Visibility.prototype.visible;
		this.makeDirty();
	}
	,
	updateZoombars: function (WindowRect) {
	}
	,
	removeAxis: function (axis) {
		var index = this.attachedAxes().indexOf(axis);
		this.attachedAxes().removeAt(index);
		axis.provideContext(null, null);
		this.resize();
		this.model().removeSpecificDataSource(axis.name(), true);
	}
	,
	removeLabelPanel: function (axis) {
	}
	,
	attachAxis: function (axis) {
		if (!this.attachedAxes().contains(axis)) {
			this.attachedAxes().add(axis);
		}
		axis.provideContext(this.mainContext(), this.hitContext());
		this.resize();
	}
	,
	addLabelPanel: function (axis) {
	}
	,
	__componentsFromView: null,
	getComponentsFromView: function () {
		this.__componentsFromView.overviewPlusDetailPane(this.overviewPlusDetailPane());
		return this.__componentsFromView;
	}
	,
	getAllSeries: function (series) {
		var seriesList = series.seriesViewer().series();
		var allSeries = new $.ig.List$1($.ig.Series.prototype.$type, 0);
		for (var i = 0; i < seriesList.count(); i++) {
			allSeries.add(seriesList.__inner[i]);
			if ($.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, seriesList.__inner[i]) !== null) {
				var stacked = seriesList.__inner[i];
				var visualSeries = stacked.stackedSeriesManager().seriesVisual();
				for (var j = 0; j < visualSeries.count(); j++) {
					allSeries.add(visualSeries.__inner[j]);
				}
			}
		}
		return allSeries;
	}
	,
	resetWindowRect: function () {
		this.model().windowRect(new $.ig.Rect(0, 0, 0, 1, 1));
	}
	,
	_viewManager: null,
	viewManager: function (value) {
		if (arguments.length === 1) {
			this._viewManager = value;
			return value;
		} else {
			return this._viewManager;
		}
	}
	,
	_backgroundContext: null,
	backgroundContext: function (value) {
		if (arguments.length === 1) {
			this._backgroundContext = value;
			return value;
		} else {
			return this._backgroundContext;
		}
	}
	,
	_overlayContext: null,
	overlayContext: function (value) {
		if (arguments.length === 1) {
			this._overlayContext = value;
			return value;
		} else {
			return this._overlayContext;
		}
	}
	,
	_mainContext: null,
	mainContext: function (value) {
		if (arguments.length === 1) {
			this._mainContext = value;
			return value;
		} else {
			return this._mainContext;
		}
	}
	,
	_hitContext: null,
	hitContext: function (value) {
		if (arguments.length === 1) {
			this._hitContext = value;
			return value;
		} else {
			return this._hitContext;
		}
	}
	,
	_mSPointerEnabled: false,
	mSPointerEnabled: function (value) {
		if (arguments.length === 1) {
			this._mSPointerEnabled = value;
			return value;
		} else {
			return this._mSPointerEnabled;
		}
	}
	,
	_pointerEnabled: false,
	pointerEnabled: function (value) {
		if (arguments.length === 1) {
			this._pointerEnabled = value;
			return value;
		} else {
			return this._pointerEnabled;
		}
	}
	,
	onContainerProvided: function (container) {
		var $self = this;
		if (container == null) {
			if (this.eventProxy() != null) {
				this.eventProxy().destroy();
			}
			this.viewManager().onContainerProvided(null);
			this.backgroundContext(null);
			this.overlayContext(null);
			this.mainContext(null);
			this.hitContext(null);
			this.eventProxy(null);
			if (this.model().overviewPlusDetailPane() != null) {
				this.model().overviewPlusDetailPane().provideContext(null);
				this.model().overviewPlusDetailPane().provideContainer(null);
				this.model().overviewPlusDetailPane().provideEventSource(null);
			}
			return;
		}
		if (this.shouldMergeOverlayContext()) {
			this.overlayScheduler().dependsOn().add(this.model().canvasRenderScheduler());
		}
		this.viewManager().onContainerProvided(container);
		this.backgroundContext(this.viewManager().backgroundContext());
		this.overlayContext(this.viewManager().overlayContext());
		this.mainContext(this.viewManager().mainContext());
		this.hitContext(this.viewManager().hitContext());
		this.mSPointerEnabled(false);
		try {
			this.mSPointerEnabled(window.navigator.msPointerEnabled && MSGesture !== undefined);
		}
		catch (e) {
		}
		this.pointerEnabled(false);
		try {
			this.pointerEnabled(window.navigator.pointerEnabled);
		}
		catch (e1) {
		}
		if (this.mSPointerEnabled() || this.pointerEnabled()) {
			this.useDeltaZoom(true);
		}
		this.eventProxy(this.viewManager().eventProxy());
		this.eventProxy().viewport(this.model().viewportRect());
		this.eventProxy().shouldInteract(this.shouldInteract.runOn(this));
		var $t = this.eventProxy();
		$t.onContactCompleted = $.ig.Delegate.prototype.combine($t.onContactCompleted, this.onContactCompleted.runOn(this));
		var $t1 = this.eventProxy();
		$t1.onContactMoved = $.ig.Delegate.prototype.combine($t1.onContactMoved, this.onContactMoved.runOn(this));
		var $t2 = this.eventProxy();
		$t2.onContactStarted = $.ig.Delegate.prototype.combine($t2.onContactStarted, this.onContactStarted.runOn(this));
		var $t3 = this.eventProxy();
		$t3.onDragCompleted = $.ig.Delegate.prototype.combine($t3.onDragCompleted, this.model().onDragCompleted.runOn(this.model()));
		var $t4 = this.eventProxy();
		$t4.onFlingStarted = $.ig.Delegate.prototype.combine($t4.onFlingStarted, this.eventProxy_OnFlingStarted.runOn(this));
		var $t5 = this.eventProxy();
		$t5.onDragDelta = $.ig.Delegate.prototype.combine($t5.onDragDelta, function (p) { $self.model().onDragDelta(p); });
		var $t6 = this.eventProxy();
		$t6.onDragStarted = $.ig.Delegate.prototype.combine($t6.onDragStarted, function (p) { $self.model().onDragStarted(p, true); });
		var $t7 = this.eventProxy();
		$t7.onKeyDown = $.ig.Delegate.prototype.combine($t7.onKeyDown, this.model().onKeyDown.runOn(this.model()));
		var $t8 = this.eventProxy();
		$t8.onMouseDown = $.ig.Delegate.prototype.combine($t8.onMouseDown, this.onMouseDown.runOn(this));
		var $t9 = this.eventProxy();
		$t9.onMouseLeave = $.ig.Delegate.prototype.combine($t9.onMouseLeave, this.onMouseLeave.runOn(this));
		var $t10 = this.eventProxy();
		$t10.onMouseOver = $.ig.Delegate.prototype.combine($t10.onMouseOver, this.onMouseOver.runOn(this));
		var $t11 = this.eventProxy();
		$t11.onMouseUp = $.ig.Delegate.prototype.combine($t11.onMouseUp, this.onMouseUp.runOn(this));
		var $t12 = this.eventProxy();
		$t12.onMouseWheel = $.ig.Delegate.prototype.combine($t12.onMouseWheel, this.model().onMouseWheel.runOn(this.model()));
		if (this.eventProxy().supportsNonIsometricZoom()) {
			var $t13 = this.eventProxy();
			$t13.onZoomDelta = $.ig.Delegate.prototype.combine($t13.onZoomDelta, function (p, dx, dy, isoDeltaScale) { $self.model().onZoomDelta(p, dx, dy, isoDeltaScale); });
			var $t14 = this.eventProxy();
			$t14.onZoomStarted = $.ig.Delegate.prototype.combine($t14.onZoomStarted, function (p, dx, dy, isoDeltaScale) { $self.model().onZoomStarted(p, dx, dy, isoDeltaScale); });
			var $t15 = this.eventProxy();
			$t15.onZoomCompleted = $.ig.Delegate.prototype.combine($t15.onZoomCompleted, function (p, dx, dy, isoDeltaScale) { $self.model().onZoomCompleted(p, dx, dy, isoDeltaScale); });
		} else {
			var $t16 = this.eventProxy();
			$t16.onPinchDelta = $.ig.Delegate.prototype.combine($t16.onPinchDelta, function (p, d) { $self.model().onPinchDelta(d); });
			var $t17 = this.eventProxy();
			$t17.onPinchStarted = $.ig.Delegate.prototype.combine($t17.onPinchStarted, function (p, d) { $self.model().onPinchStarted(p); });
			var $t18 = this.eventProxy();
			$t18.onGestureCompleted = $.ig.Delegate.prototype.combine($t18.onGestureCompleted, function (p, d) { $self.model().onGestureCompleted(p); });
		}
		var $t19 = this.eventProxy();
		$t19.onDoubleTap = $.ig.Delegate.prototype.combine($t19.onDoubleTap, function (p) { $self.model().onDoubleTap(p); });
		var $t20 = this.eventProxy();
		$t20.onHold = $.ig.Delegate.prototype.combine($t20.onHold, this.onHold.runOn(this));
		if (this.model().overviewPlusDetailPane() != null) {
			this.model().overviewPlusDetailPane().provideContext(this.overlayContext());
			this.model().overviewPlusDetailPane().provideContainer(container);
			this.model().overviewPlusDetailPane().provideEventSource(this.eventProxy());
		}
	}
	,
	eventProxy_OnFlingStarted: function (point, velocityX, velocityY) {
		if (this.model().areCrossHairsActivated()) {
			return false;
		}
		return true;
	}
	,
	onContactMoved: function (p, isFinger) {
		this.model().onContactMoved(p, isFinger);
	}
	,
	onContactStarted: function (p, isFinger) {
		if (!isFinger && this.model().mobileMode()) {
			this.updateMobileMode(false);
		}
		if (isFinger && !this.model().mobileMode()) {
			this.updateMobileMode(true);
		}
		this.model().onContactStarted(p, isFinger);
	}
	,
	onHold: function (p) {
		this.model().onPlotAreaHold(p);
	}
	,
	onContactCompleted: function (p, isFinger) {
		this.model().onContactCompleted(p, isFinger);
	}
	,
	provideBackgroundContext: function (context) {
	}
	,
	requiresBackground: function () {
		return false;
	}
	,
	_eventProxy: null,
	eventProxy: function (value) {
		if (arguments.length === 1) {
			this._eventProxy = value;
			return value;
		} else {
			return this._eventProxy;
		}
	}
	,
	updateCurrentFontHeight: function () {
		this.fontHeight($.ig.FontUtil.prototype.getCurrentFontHeight(this.model().getFontInfo()));
	}
	,
	_fontHeight: 0,
	fontHeight: function (value) {
		if (arguments.length === 1) {
			this._fontHeight = value;
			return value;
		} else {
			return this._fontHeight;
		}
	}
	,
	getHitSeries: function (p, forceUpdate, context, isFinger) {
		var shouldCheckColorHit = true;
		var shouldCheckComputationalHit = false;
		var shouldFavorComputational = false;
		var viewer = this.model();
		if (viewer.actualContentHitTestMode() == $.ig.ChartHitTestMode.prototype.computational) {
			shouldCheckColorHit = false;
			shouldCheckComputationalHit = true;
		}
		if (viewer.actualContentHitTestMode() == $.ig.ChartHitTestMode.prototype.mixed || viewer.actualContentHitTestMode() == $.ig.ChartHitTestMode.prototype.mixedFavoringComputational) {
			shouldCheckComputationalHit = true;
		}
		if (viewer.actualContentHitTestMode() == $.ig.ChartHitTestMode.prototype.mixedFavoringComputational) {
			shouldFavorComputational = true;
		}
		var mouseX = $.ig.truncate(Math.round(p.__x));
		var mouseY = $.ig.truncate(Math.round(p.__y));
		context = null;
		var seriesIndex = -1;
		if (shouldCheckColorHit && this.hitContext() != null) {
			var hitPointX = mouseX;
			var hitPointY = mouseY;
			if (this.model().actualPixelScalingRatio() != 1) {
				hitPointX = $.ig.truncate(Math.round(p.__x * this.model().actualPixelScalingRatio()));
				hitPointY = $.ig.truncate(Math.round(p.__y * this.model().actualPixelScalingRatio()));
			}
			var imageData = this.hitContext().getPixelAt(hitPointX, hitPointY);
			if (imageData == null || imageData.length == 0) {
				context = null;
				return {
					ret: null,
					p2: context
				};
			}
			if ((imageData[0] > 0 || imageData[1] > 0 || imageData[2] > 0) && imageData[3] == 255) {
				var num2_ = imageData[2];
				if (num2_ % 4 != 0) {
					num2_ = num2_ + (4 - (num2_ % 4));
				}
				var num1_ = imageData[1];
				if (num1_ % 4 != 0) {
					num1_ = num1_ + (4 - (num1_ % 4));
				}
				var num0_ = imageData[0];
				if (num0_ % 4 != 0) {
					num0_ = num0_ + (4 - (num0_ % 4));
				}
				var num_ = 0;
				num_ = num2_ >> 2;
				num_ = num_ << 6;
				num_ = num_ | (num1_ >> 2);
				num_ = num_ << 6;
				num_ = num_ | (num0_ >> 2);
				seriesIndex = $.ig.truncate(Math.floor(($.ig.intDivide(num_, $.ig.SeriesView.prototype.iTEM_ALLOCATION))));
				seriesIndex--;
			}
		}
		var colorHitSeries = null;
		var colorHitSeriesIndex = -1;
		if (seriesIndex >= 0) {
			var foundSeries = false;
			var checkIndex = 0;
			var en = this.attachedSeries().getEnumerator();
			while (en.moveNext()) {
				var series = en.current();
				if (foundSeries) {
					break;
				}
				var stackedSeries = $.ig.util.cast($.ig.StackedSeriesBase.prototype.$type, series);
				if (stackedSeries != null) {
					var en1 = stackedSeries.series().getEnumerator();
					while (en1.moveNext()) {
						var fragment = en1.current();
						if (fragment.visualSeriesLink() != null && fragment.visualSeriesLink()._uniqueIndex == seriesIndex) {
							colorHitSeries = fragment.visualSeriesLink();
							colorHitSeriesIndex = checkIndex;
							foundSeries = true;
							break;
						}
					}
				} else if (series._uniqueIndex == seriesIndex) {
					colorHitSeries = series;
					colorHitSeriesIndex = checkIndex;
					break;
				}
				checkIndex++;
			}
		}
		var hitSeries = null;
		if (shouldCheckComputationalHit) {
			var checkedColor = false;
			for (var currIndex = this.attachedSeries().count() - 1; currIndex >= 0; currIndex--) {
				var currentSeries = this.attachedSeries().__inner[currIndex];
				if (!checkedColor && currIndex < colorHitSeriesIndex && shouldCheckColorHit && !shouldFavorComputational) {
					if (colorHitSeries != null) {
						hitSeries = colorHitSeries;
						checkedColor = true;
						break;
					}
				}
				if (currentSeries != null && currentSeries.actualHitTestMode() == $.ig.SeriesHitTestMode.prototype.computational) {
					if (currentSeries.testHit(p, isFinger)) {
						hitSeries = currentSeries;
						break;
					}
				}
			}
			if (shouldCheckColorHit && !checkedColor) {
				if (colorHitSeries != null) {
					hitSeries = colorHitSeries;
					checkedColor = true;
				}
			}
		} else {
			hitSeries = colorHitSeries;
		}
		if (hitSeries != null) {
			var hitDataContext = hitSeries.getHitDataContext({ __x: mouseX, __y: mouseY, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName });
			if (hitDataContext != null) {
				context = hitDataContext;
			}
			return {
				ret: hitSeries,
				p2: context
			};
		}
		return {
			ret: null,
			p2: context
		};
	}
	,
	getSeriesViewerViewContainerWidth: function () {
		return this.containerWidth();
	}
	,
	getSeriesViewerViewContainerHeight: function () {
		return this.containerHeight();
	}
	,
	_containerWidth: 0,
	containerWidth: function (value) {
		if (arguments.length === 1) {
			this._containerWidth = value;
			return value;
		} else {
			return this._containerWidth;
		}
	}
	,
	_containerHeight: 0,
	containerHeight: function (value) {
		if (arguments.length === 1) {
			this._containerHeight = value;
			return value;
		} else {
			return this._containerHeight;
		}
	}
	,
	__currentPlotArea: null,
	__sizeChanged: false,
	notifyContainerResized: function () {
		this.viewManager().notifyContainerResized();
	}
	,
	onContainerResized: function (width, height) {
		var oldWidth = this.containerWidth();
		var oldHeight = this.containerHeight();
		if (this.containerWidth() != width) {
			this.__sizeChanged = true;
		}
		this.containerWidth(width);
		if (this.containerHeight() != height) {
			this.__sizeChanged = true;
		}
		this.containerHeight(height);
		if (this.__sizeChanged) {
			var oldSize = new $.ig.Size(1, oldWidth, oldHeight);
			var newSize = new $.ig.Size(1, width, height);
			this.model().onSizeChanged(oldSize, newSize);
		}
		this.onTitlesChanged();
		this.resize();
	}
	,
	resize: function () {
		this.__panelsDirty = true;
		this.model().chartContentManager().makePending();
	}
	,
	__actualTopMargin: 0,
	__actualLeftMargin: 0,
	__actualRightMargin: 0,
	__actualBottomMargin: 0,
	__titlesDirty: false,
	__fromEmpty: false,
	determinePlotAreaSize: function () {
		var $self = this;
		if (this.containerWidth() == 0 || this.containerHeight() == 0) {
			return;
		}
		this.__panelsDirty = false;
		this.__fromEmpty = false;
		if (this.__titlesDirty) {
			this.onTitleChanged();
			this.onSubtitleChanged();
			this.__titlesDirty = false;
			this.makeDirty();
		}
		var _newPlotAreaWidth = this.containerWidth();
		var _newPlotAreaHeight = this.containerHeight();
		var leftMargin = this.model().leftMargin();
		var rightMargin = this.model().rightMargin();
		var bottomMargin = this.model().bottomMargin();
		var topMargin = this.model().topMargin();
		var autoMarginHeight = this.model().autoMarginHeight();
		var autoMarginWidth = this.model().autoMarginWidth();
		if ($.ig.util.isNaN(autoMarginHeight)) {
			autoMarginHeight = this.fontHeight() / 2;
		}
		if ($.ig.util.isNaN(autoMarginWidth)) {
			autoMarginWidth = 0;
		}
		var autoAddMargins = this.model().shouldAddAutoMargins();
		var labelPanels = new $.ig.List$1($.ig.AxisLabelPanelBase.prototype.$type, 0);
		var en = this.attachedAxes().getEnumerator();
		while (en.moveNext()) {
			var axis = en.current();
			if (axis.labelPanel() != null) {
				labelPanels.add(axis.labelPanel());
				axis.labelPanel().seriesViewerSizeChanged(function () {
					return $self.__sizeChanged;
				});
			}
		}
		if (autoAddMargins) {
			var hasOutsideLeft = false;
			var hasOutsideRight = false;
			var hasOutsideTop = false;
			var hasOutsideBottom = false;
			var en1 = labelPanels.getEnumerator();
			while (en1.moveNext()) {
				var panel = en1.current();
				if ($.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel) == $.ig.AxisLabelsLocation.prototype.outsideLeft && (panel.axis().labelSettings() == null || panel.axis().labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
					hasOutsideLeft = true;
				}
				if ($.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel) == $.ig.AxisLabelsLocation.prototype.outsideRight && (panel.axis().labelSettings() == null || panel.axis().labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
					hasOutsideRight = true;
				}
				if ($.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel) == $.ig.AxisLabelsLocation.prototype.outsideTop && (panel.axis().labelSettings() == null || panel.axis().labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
					hasOutsideTop = true;
				}
				if ($.ig.LabelPanelArranger.prototype.resolveLabelLocation(panel) == $.ig.AxisLabelsLocation.prototype.outsideBottom && (panel.axis().labelSettings() == null || panel.axis().labelSettings().visibility() == $.ig.Visibility.prototype.visible)) {
					hasOutsideBottom = true;
				}
				if (panel.axis() != null && panel.axis().labelSettings() != null) {
					panel.axis().labelSettings().actualLocation(panel.axis().labelSettings().location());
				}
			}
			if (hasOutsideLeft || hasOutsideRight) {
				if (!hasOutsideTop && $.ig.util.isNaN(topMargin)) {
					topMargin = autoMarginHeight;
				}
				if (!hasOutsideBottom && $.ig.util.isNaN(bottomMargin)) {
					bottomMargin = autoMarginHeight;
				}
			}
			if (hasOutsideBottom || hasOutsideTop) {
				if (!hasOutsideLeft && $.ig.util.isNaN(leftMargin)) {
					leftMargin = autoMarginWidth;
				}
				if (!hasOutsideRight && $.ig.util.isNaN(rightMargin)) {
					rightMargin = autoMarginWidth;
				}
			}
		}
		if ($.ig.util.isNaN(topMargin)) {
			topMargin = 0;
		}
		if ($.ig.util.isNaN(leftMargin)) {
			leftMargin = 0;
		}
		if ($.ig.util.isNaN(rightMargin)) {
			rightMargin = 0;
		}
		if ($.ig.util.isNaN(bottomMargin)) {
			bottomMargin = 0;
		}
		var titleHeight = this.getTitleContainerHeight();
		topMargin += titleHeight;
		var subtitleHeight = this.getSubtitleContainerHeight();
		topMargin += subtitleHeight;
		var gridAreaRect = new $.ig.Rect(0, leftMargin, topMargin, _newPlotAreaWidth - (leftMargin + rightMargin), _newPlotAreaHeight - (topMargin + bottomMargin));
		gridAreaRect = $.ig.LabelPanelArranger.prototype.preparePanels(labelPanels, gridAreaRect);
		var finalSize = new $.ig.Size(1, Math.max(0, _newPlotAreaWidth - (leftMargin + rightMargin)), Math.max(0, _newPlotAreaHeight - (topMargin + bottomMargin)));
		if (this.model().effectiveIsSquare() && gridAreaRect.width() != gridAreaRect.height()) {
			if (gridAreaRect.width() < gridAreaRect.height()) {
				topMargin += (gridAreaRect.height() - gridAreaRect.width()) / 2;
				gridAreaRect.top(gridAreaRect.top() + ((gridAreaRect.height() - gridAreaRect.width()) / 2));
				finalSize.height(finalSize.height() - (gridAreaRect.height() - gridAreaRect.width()));
				gridAreaRect.height(gridAreaRect.width());
			} else {
				leftMargin += (gridAreaRect.width() - gridAreaRect.height()) / 2;
				gridAreaRect.left(gridAreaRect.left() + ((gridAreaRect.width() - gridAreaRect.height()) / 2));
				finalSize.width(finalSize.width() - (gridAreaRect.width() - gridAreaRect.height()));
				gridAreaRect.width(gridAreaRect.height());
			}
		}
		this.__actualTopMargin = topMargin - (titleHeight + subtitleHeight);
		this.__actualLeftMargin = leftMargin;
		this.__actualRightMargin = rightMargin;
		this.__actualBottomMargin = bottomMargin;
		this.__currentPlotArea = gridAreaRect;
		var arrangeState = (function () {
			var $ret = new $.ig.LabelPanelsArrangeState();
			$ret.left(leftMargin);
			$ret.insideLeft(leftMargin);
			$ret.bottom(topMargin + finalSize.height());
			$ret.insideBottom(topMargin + finalSize.height());
			$ret.right(leftMargin + finalSize.width());
			$ret.insideRight(leftMargin + finalSize.width());
			$ret.top(topMargin);
			$ret.insideTop(topMargin);
			return $ret;
		}());
		$.ig.LabelPanelArranger.prototype.arrangePanels(labelPanels, arrangeState, this.__currentPlotArea, function (p, b) {
			if (!p.labelViewport().equals1(b)) {
				p.labelViewport(b);
				p.axis().view().labelNeedRearrange();
			}
		});
		var changed = false;
		if (this.__sizeChanged) {
			this.__sizeChanged = false;
			changed = true;
		}
		this.model().processPlotAreaSizeChanged(this.model().viewportRect(), this.__currentPlotArea);
		var en2 = this.attachedAxes().getEnumerator();
		while (en2.moveNext()) {
			var axis1 = en2.current();
			if ($.ig.Rect.prototype.l_op_Equality(axis1.viewportRect(), null) || axis1.viewportRect().isEmpty()) {
				this.__fromEmpty = true;
			}
			if (axis1.viewportRect().equals1(this.__currentPlotArea)) {
				continue;
			}
			axis1.handleRectChanged(axis1.viewportRect(), this.__currentPlotArea);
		}
		var en3 = this.attachedSeries().getEnumerator();
		while (en3.moveNext()) {
			var series = en3.current();
			if ($.ig.Rect.prototype.l_op_Equality(series.view().viewport(), null) || series.view().viewport().isEmpty()) {
				this.__fromEmpty = true;
			}
			if (series.view().viewport().equals1(this.__currentPlotArea)) {
				continue;
			}
			series.onViewportChanged(series.view().viewport(), this.__currentPlotArea);
		}
		this.updateOPDSize();
		this.provideBackgroundViewport(this.__currentPlotArea);
	}
	,
	updateOPDSize: function () {
		if (this.model().overviewPlusDetailPane() != null) {
			var element = this.model().overviewPlusDetailPane();
			var opdWidth = (this.model().actualMobileMode()) ? this.__currentPlotArea.width() : Number.POSITIVE_INFINITY;
			var opdHeight = (this.model().actualMobileMode()) ? this.__currentPlotArea.height() : Number.POSITIVE_INFINITY;
			var desiredSize = element.getDesiredSize(new $.ig.Size(1, opdWidth, opdHeight));
			this.model().overviewPlusDetailPane().arrange(new $.ig.Rect(0, this.__currentPlotArea.right() - desiredSize.width(), this.__currentPlotArea.bottom() - desiredSize.height(), desiredSize.width(), desiredSize.height()));
			this.updateOverviewPlusDetailRects();
		}
	}
	,
	getTitleFont: function () {
		var font = this.model().getFontInfo();
		var defFont = this.getDefaultTitleFont();
		if (this.model().getTitleFontInfo() != null) {
			font = this.model().getTitleFontInfo();
		} else if (defFont != null) {
			font = defFont;
		}
		return font;
	}
	,
	getSubtitleFont: function () {
		var font = this.model().getFontInfo();
		var defFont = this.getDefaultSubtitleFont();
		if (this.model().getSubtitleFontInfo() != null) {
			font = this.model().getSubtitleFontInfo();
		} else if (defFont != null) {
			font = defFont;
		}
		return font;
	}
	,
	getTitleBrush: function () {
		var fontBrush = this.model().getFontBrush();
		var defBrush = this.getDefaultTitleBrush();
		if (this.model().titleTextColor() != null) {
			fontBrush = this.model().titleTextColor();
		} else if (defBrush != null) {
			fontBrush = defBrush;
		}
		return fontBrush;
	}
	,
	getSubtitleBrush: function () {
		var fontBrush = this.model().getFontBrush();
		var defBrush = this.getDefaultSubtitleBrush();
		if (this.model().subtitleTextColor() != null) {
			fontBrush = this.model().subtitleTextColor();
		} else if (defBrush != null) {
			fontBrush = defBrush;
		}
		return fontBrush;
	}
	,
	getTitleContainerHeight: function () {
		if (this.model().title() == null || !($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model()) !== null)) {
			return 0;
		}
		var font = this.getTitleFont();
		var height = 0;
		height = $.ig.FontUtil.prototype.getCurrentFontHeight(font);
		var margin = this.getTitleMargin();
		height += margin.top() + margin.bottom();
		return height;
	}
	,
	__subTitleHeight: 0,
	getSubtitleContainerHeight: function () {
		if (this.model().subtitle() == null || !($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model()) !== null)) {
			return 0;
		}
		if (!$.ig.util.isNaN(this.__subTitleHeight)) {
			return this.__subTitleHeight;
		}
		var font = this.getSubtitleFont();
		this.__subTitleHeight = $.ig.FontUtil.prototype.getCurrentFontHeight(font);
		var margin = this.getSubtitleMargin();
		this.__subTitleHeight += margin.top() + margin.bottom();
		return this.__subTitleHeight;
	}
	,
	getTitleMargin: function () {
		var defaultMargin = this.viewManager().getDefaultChartTitleMargin();
		var top = $.ig.util.isNaN(this.model().titleTopMargin()) ? defaultMargin.top() : this.model().titleTopMargin();
		var left = $.ig.util.isNaN(this.model().titleLeftMargin()) ? defaultMargin.left() : this.model().titleLeftMargin();
		var right = $.ig.util.isNaN(this.model().titleRightMargin()) ? defaultMargin.right() : this.model().titleRightMargin();
		var bottom = $.ig.util.isNaN(this.model().titleBottomMargin()) ? defaultMargin.bottom() : this.model().titleBottomMargin();
		return new $.ig.Thickness(1, left, top, right, bottom);
	}
	,
	getSubtitleMargin: function () {
		var defaultMargin = this.viewManager().getDefaultChartSubTitleMargin();
		var top = $.ig.util.isNaN(this.model().subtitleTopMargin()) ? defaultMargin.top() : this.model().subtitleTopMargin();
		var left = $.ig.util.isNaN(this.model().subtitleLeftMargin()) ? defaultMargin.left() : this.model().subtitleLeftMargin();
		var right = $.ig.util.isNaN(this.model().subtitleRightMargin()) ? defaultMargin.right() : this.model().subtitleRightMargin();
		var bottom = $.ig.util.isNaN(this.model().subtitleBottomMargin()) ? defaultMargin.bottom() : this.model().subtitleBottomMargin();
		return new $.ig.Thickness(1, left, top, right, bottom);
	}
	,
	provideBackgroundViewport: function (viewport) {
	}
	,
	makeDirty: function () {
		if (!this.__isDirty) {
			this.__isDirty = true;
			this.overlayScheduler().schedule();
		}
	}
	,
	__renderedRect: null,
	render: function () {
		if (this.overlayContext() == null) {
			return;
		}
		if (this.overlayContext().shouldRender()) {
			if (this.model().actualPixelScalingRatio() != 1) {
				this.overlayContext().save();
				this.overlayContext().scale(this.model().actualPixelScalingRatio(), this.model().actualPixelScalingRatio());
			}
			if (!this.__renderedRect.isEmpty()) {
				if (!this.shouldMergeOverlayContext()) {
					this.overlayContext().clearRectangle(this.__renderedRect.left(), this.__renderedRect.top(), this.__renderedRect.width(), this.__renderedRect.height());
				}
			}
		}
		this.renderOverride();
		if (this.overlayContext().shouldRender()) {
			if (this.model().actualPixelScalingRatio() != 1) {
				this.overlayContext().restore();
			}
		}
	}
	,
	isValid: function () {
		return true;
	}
	,
	preRender: function () {
		this.viewManager().ensureCorrectSize(this.containerWidth(), this.containerHeight());
		this.preRenderOverride();
	}
	,
	preRenderOverride: function () {
	}
	,
	__gradientsEnabled: false,
	renderOverride: function () {
		if (this.overlayContext().shouldRender()) {
			this.__renderedRect = new $.ig.Rect(0, 0, 0, this.containerWidth(), this.containerHeight());
			if (this._visibleTiles != null && this._visibleTiles.count() > 0) {
				this.hidePlotContent();
				this.overlayContext().save();
				this.overlayContext().setRectangleClip(this.model().viewportRect());
				if (!this.shouldMergeOverlayContext()) {
					this.overlayContext().clearRectangle(this.model().viewportRect().left(), this.model().viewportRect().top(), this.model().viewportRect().width(), this.model().viewportRect().height());
				}
			}
			this.overlayContext().renderLine(this.horizontalCrosshairLine());
			this.overlayContext().renderLine(this.verticalCrosshairLine());
			this.overlayContext().renderPath(this.previewPath());
			this.overlayContext().renderRectangle(this.dragPathRect());
			this.overlayContext().setFontInfo(this.getTitleFont());
			if (this.__titleText != null) {
				this.__titleText.fill(this.getTitleBrush());
				this.overlayContext().renderTextBlock(this.__titleText);
			}
			this.overlayContext().setFontInfo(this.getSubtitleFont());
			if (this.__subTitleText != null) {
				this.__subTitleText.fill(this.getSubtitleBrush());
				this.overlayContext().renderTextBlock(this.__subTitleText);
			}
			if (this._visibleTiles != null && this._visibleTiles.count() > 0) {
				this.viewManager().renderTiles(this._visibleTiles);
				this.overlayContext().restore();
			}
			if (this.shouldClearTiles()) {
				this.showPlotContent();
				this.shouldClearTiles(false);
				this._visibleTiles.clear();
				this.model().tileManager().clearVisible();
				this.makeDirty();
			}
		}
	}
	,
	getContainerRect: function () {
		return new $.ig.Rect(0, 0, 0, this.containerWidth(), this.containerHeight());
	}
	,
	getContainerOffsets: function () {
		return this.viewManager().getContainerOffsets();
	}
	,
	setDefaultMarkerTemplates: function () {
		this.model().circleMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderCircleMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().triangleMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderTriangleMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().pyramidMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderPyramidMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().squareMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderSquareMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().diamondMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderDiamondMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().pentagonMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderPentagonMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().hexagonMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderHexagonMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().tetragramMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderTetragramMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().pentagramMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderPentagramMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
		this.model().hexagramMarkerTemplate((function () {
			var $ret = new $.ig.DataTemplate();
			$ret.render($.ig.MarkerTemplates.prototype.renderHexagramMarkerTemplate);
			$ret.measure($.ig.MarkerTemplates.prototype.measureAsEightByEightConstantMarkerTemplate);
			return $ret;
		}()));
	}
	,
	styleUpdated: function () {
		this.viewManager().styleUpdated();
		this.setDefaultBrushes();
		var oldFontHeight = this.fontHeight();
		this.updateCurrentFontHeight();
		if (oldFontHeight != this.fontHeight()) {
			this.model().invalidatePanels();
		}
	}
	,
	overviewPlusDetailPaneVisibilityChanged: function () {
		if (this.model().overviewPlusDetailPane() != null) {
			var visibility = this.model().overviewPlusDetailPaneVisibility();
			this.model().overviewPlusDetailPane().__visibility = visibility;
			this.model().overviewPlusDetailPane().refresh(false);
		}
	}
	,
	shouldInteract: function (p) {
		if ($.ig.Point.prototype.l_op_Equality(p, null)) {
			return false;
		}
		var mouseX = p.__x;
		var mouseY = p.__y;
		if (mouseX >= this.model().viewportRect().left() && mouseY >= this.model().viewportRect().top() && mouseX <= this.model().viewportRect().left() + this.model().viewportRect().width() && mouseY <= this.model().viewportRect().top() + this.model().viewportRect().height()) {
			var opd = this.model().overviewPlusDetailPane();
			if (opd.view().shouldInteract(p)) {
				return false;
			}
			return true;
		}
		return false;
	}
	,
	_mouseOverSeries: null,
	mouseOverSeries: function (value) {
		if (arguments.length === 1) {
			this._mouseOverSeries = value;
			return value;
		} else {
			return this._mouseOverSeries;
		}
	}
	,
	_mouseOverContext: null,
	mouseOverContext: function (value) {
		if (arguments.length === 1) {
			this._mouseOverContext = value;
			return value;
		} else {
			return this._mouseOverContext;
		}
	}
	,
	onMouseOver: function (p, onMouseMove, isFinger) {
		var $self = this;
		if (!isFinger && this.model().actualMobileMode()) {
			this.updateMobileMode(false);
		}
		var me = new $.ig.MouseEventArgs();
		me.position(p);
		if (this.model().state() == $.ig.InteractionState.prototype.dragPan || this.model().state() == $.ig.InteractionState.prototype.dragZoom || this.model().pinching() || (this.model().overviewPlusDetailPane() == null || this.model().overviewPlusDetailPane().pinching())) {
			if (this.mouseOverSeries() != null) {
				if (this.__seriesMouseDown) {
					this.onMouseUp(p);
				}
				this.mouseOverSeries().onMouseLeave(me.position(), this.mouseOverContext(), me);
				this.mouseOverSeries(null);
			}
			return;
		}
		var context = null;
		var hitSeries = (function () { var $ret = $self.getHitSeries(p, !onMouseMove, context, isFinger); context = $ret.p2; return $ret.ret; }());
		this.mouseOverContext(context);
		var parentSeries = this.getParentSeries(hitSeries);
		if (hitSeries != null) {
			var notOver = false;
			var changeSeries = false;
			if (this.mouseOverSeries() != hitSeries) {
				changeSeries = true;
			}
			if (this.mouseOverSeries() == null || changeSeries) {
				notOver = true;
			}
			if (notOver) {
				if (changeSeries) {
					if (this.mouseOverSeries() != null) {
						parentSeries = this.getParentSeries(this.mouseOverSeries());
						this.mouseOverSeries().onMouseLeave(me.position(), context, me);
						if (parentSeries != null) {
							parentSeries.onMouseLeave(me.position(), context, me);
						}
					}
				}
				this.mouseOverSeries(hitSeries);
				hitSeries.onMouseEnter(me.position(), context, me);
				if (parentSeries != null) {
					parentSeries.onMouseEnter(me.position(), context, me);
				}
			} else {
				this.mouseOverSeries(hitSeries);
				hitSeries.onMouseMove(me.position(), context, me);
				if (parentSeries != null) {
					parentSeries.onMouseMove(me.position(), context, me);
				}
			}
		} else {
			if (this.mouseOverSeries() != null) {
				parentSeries = this.getParentSeries(this.mouseOverSeries());
				this.mouseOverSeries().onMouseLeave(me.position(), context, me);
				if (parentSeries != null) {
					parentSeries.onMouseLeave(me.position(), context, me);
				}
				this.mouseOverSeries(null);
			}
			for (var i = 0; i < this.model().series().count(); i++) {
				var s = this.model().series().__inner[i];
				if (s.isMouseLeaveDeferred()) {
					parentSeries = this.getParentSeries(s);
					s.onMouseLeave(me.position(), s.lastHoverItem(), me);
					if (parentSeries != null) {
						parentSeries.onMouseLeave(me.position(), s.lastHoverItem(), me);
					}
				}
			}
		}
	}
	,
	getParentSeries: function (series) {
		var parentSeries = null;
		if (series != null && $.ig.util.cast($.ig.FragmentBase.prototype.$type, series) !== null) {
			parentSeries = (series).parentSeries();
		}
		if (series != null && $.ig.util.cast($.ig.SplineFragmentBase.prototype.$type, series) !== null) {
			parentSeries = (series).parentSeries();
		}
		return parentSeries;
	}
	,
	onMouseLeave: function (p) {
		if (this.mouseOverSeries() != null) {
			var parentSeries = this.getParentSeries(this.mouseOverSeries());
			var me = new $.ig.MouseEventArgs();
			me.position(p);
			this.mouseOverSeries().onMouseLeave(me.position(), null, me);
			if (parentSeries != null) {
				parentSeries.onMouseLeave(me.position(), null, me);
			}
			this.mouseOverSeries(null);
		}
		this.model().onMouseLeave(p);
	}
	,
	__seriesMouseDown: false,
	onMouseDown: function (p) {
		if (this.mouseOverSeries() != null && !this.eventProxy().rightButton()) {
			this.__seriesMouseDown = true;
			var ev = new $.ig.MouseButtonEventArgs();
			ev.position(p);
			this.mouseOverSeries().onLeftButtonDown(ev.position(), this.mouseOverContext(), ev);
		}
	}
	,
	onMouseUp: function (p) {
		if (this.mouseOverSeries() != null && !this.eventProxy().rightButton()) {
			this.__seriesMouseDown = false;
			var ev = new $.ig.MouseButtonEventArgs();
			ev.position(p);
			this.mouseOverSeries().onMouseLeftButtonUp(ev.position(), this.mouseOverContext(), ev);
		}
	}
	,
	setDefaultBrushes: function () {
	}
	,
	currentModifiers: function () {
		return this.eventProxy().currentModifiers();
	}
	,
	viewportChanged: function (_viewport) {
		if (this.eventProxy() != null) {
			this.eventProxy().viewport(this.model().viewportRect());
		}
	}
	,
	__hasUserSetMobileMode: false,
	hasUserSetMobileMode: function () {
		return this.__hasUserSetMobileMode;
	}
	,
	mobileModeChanged: function (mobileMode) {
		this.__hasUserSetMobileMode = true;
		this.model().actualMobileMode(mobileMode);
	}
	,
	actualMobileModeChanged: function (actualMobileMode) {
		this.model().updateCrosshairVisibility();
		this.viewManager().updateMobileMode(actualMobileMode);
		this.model().overviewPlusDetailPane().mobileMode(actualMobileMode);
		this.updateOverviewPlusDetailPaneVisibility();
	}
	,
	updateOverviewPlusDetailPaneVisibility: function () {
		this.model().updateOverviewPlusDetailPaneVisibility();
	}
	,
	__isDirty: false,
	isDirty: function (value) {
		if (arguments.length === 1) {
			this.__isDirty = value;
			return value;
		} else {
			return this.__isDirty;
		}
	}
	,
	undirty: function (clearRect) {
		this.__isDirty = false;
		this.render();
	}
	,
	index: function () {
		return 10;
	}
	,
	postRender: function () {
	}
	,
	ensurePanelsArranged: function () {
		this.resize();
	}
	,
	__infoBoxVisible: false,
	hideInfoBox: function () {
		this.viewManager().hideInfoBox();
	}
	,
	showInfoBox: function () {
		this.viewManager().showInfoBox();
	}
	,
	clearInfoBox: function (isVertical) {
		this.viewManager().clearInfoBox();
	}
	,
	addToInfoBox: function (control) {
		this.viewManager().addToInfoBox(control);
	}
	,
	updateInfoBoxXTranslation: function (x) {
		this.viewManager().updateInfoBoxXTranslation(x);
	}
	,
	updateInfoBoxYTranslation: function (p) {
		this.viewManager().updateInfoBoxYTranslation(p);
	}
	,
	addTooltipToView: function (control) {
		this.viewManager().addTooltipToView(control);
	}
	,
	removeTooltipFromView: function (control) {
		this.viewManager().removeTooltipFromView(control);
	}
	,
	onPlotAreaBackgroundChanged: function (plotAreaBackground) {
		this.model().canvasRenderScheduler().schedule();
	}
	,
	checkInteractionCompleted: function (pt) {
	}
	,
	_useDeltaZoom: false,
	useDeltaZoom: function (value) {
		if (arguments.length === 1) {
			this._useDeltaZoom = value;
			return value;
		} else {
			return this._useDeltaZoom;
		}
	}
	,
	resolveDefaultInteraction: function (isFinger) {
		if (this.model().actualMobileMode()) {
			return $.ig.InteractionState.prototype.dragPan;
		} else {
			return $.ig.InteractionState.prototype.dragZoom;
		}
	}
	,
	onIsInteractionDisabledChanged: function () {
		this.eventProxy().isInteractionDisabled(this.model().isSurfaceInteractionDisabled());
		if (this.overviewPlusDetailPane() != null) {
			this.overviewPlusDetailPane().isSurfaceInteractionDisabled(this.model().isSurfaceInteractionDisabled());
		}
	}
	,
	__titleText: null,
	__subTitleText: null,
	getDesiredTextWidth: function (text, font) {
		if (text == null) {
			return 0;
		}
		this.overlayContext().setFontInfo(font);
		return this.overlayContext().measureTextWidth(text);
	}
	,
	getDesiredTextHeight: function (text, font) {
		if (text == null) {
			return 0;
		}
		var height = 0;
		height = $.ig.FontUtil.prototype.getCurrentFontHeight(font);
		return height;
	}
	,
	onTitlesChanged: function () {
		this.__titlesDirty = true;
		this.resize();
		this.makeDirty();
	}
	,
	onTitleChanged: function () {
		if (this.model().title() == null || !($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model()) !== null)) {
			this.__titleText = null;
		} else {
			this.__titleText = new $.ig.TextBlock();
			this.__titleText.text(this.model().title().toString());
			var titleMargin = this.getTitleMargin();
			var textWidth = this.getDesiredTextWidth(this.__titleText.text(), this.getTitleFont());
			this.__titleText.canvasLeft((this.containerWidth() / 2) - ((textWidth + titleMargin.left() + titleMargin.right()) / 2));
			this.__titleText.canvasTop(titleMargin.top());
			var textHeight = this.getDesiredTextHeight(this.__titleText.text(), this.getTitleFont());
			this.__titleText.actualWidth(textWidth);
			this.__titleText.actualHeight(textHeight);
			var textAlign = this.getTitleAlignement();
			switch (textAlign) {
				case $.ig.HorizontalAlignment.prototype.left:
					this.__titleText.canvasLeft(titleMargin.left());
					break;
				case $.ig.HorizontalAlignment.prototype.right:
					this.__titleText.canvasLeft(Math.max((this.containerWidth() - titleMargin.right()) - textWidth, titleMargin.left()));
					break;
			}
		}
	}
	,
	onSubtitleChanged: function () {
		this.__subTitleHeight = NaN;
		if (this.model().subtitle() == null || !($.ig.util.cast($.ig.XamDataChart.prototype.$type, this.model()) !== null)) {
			this.__subTitleText = null;
		} else {
			this.__subTitleText = new $.ig.TextBlock();
			this.__subTitleText.text(this.model().subtitle().toString());
			var subTitleMargin = this.getSubtitleMargin();
			var textWidth = this.getDesiredTextWidth(this.__subTitleText.text(), this.getSubtitleFont());
			this.__subTitleText.canvasLeft((this.containerWidth() / 2) - ((textWidth + subTitleMargin.left() + subTitleMargin.right()) / 2));
			this.__subTitleText.canvasTop(this.getTitleContainerHeight() + subTitleMargin.top());
			var textHeight = this.getDesiredTextHeight(this.__subTitleText.text(), this.getSubtitleFont());
			this.__subTitleText.actualWidth(textWidth);
			this.__subTitleText.actualHeight(textHeight);
			var textAlign = this.getSubtitleAlignement();
			switch (textAlign) {
				case $.ig.HorizontalAlignment.prototype.left:
					this.__subTitleText.canvasLeft(subTitleMargin.left());
					break;
				case $.ig.HorizontalAlignment.prototype.right:
					this.__subTitleText.canvasLeft(Math.max((this.containerWidth() - subTitleMargin.right()) - textWidth, subTitleMargin.left()));
					break;
			}
		}
	}
	,
	getDefaultHorizontalAxisTitlePosition: function (axis) {
		var position = this.viewManager().getDefaultHorizontalAxisTitlePosition();
		if (position == $.ig.AxisTitlePosition.prototype.auto) {
			var actualLocation = $.ig.LabelPanelArranger.prototype.resolveLabelLocation(axis.labelPanel());
			if (axis.crossingAxis() == null) {
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop) {
					return $.ig.AxisTitlePosition.prototype.bottom;
				}
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideBottom) {
					return $.ig.AxisTitlePosition.prototype.top;
				}
			} else {
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideTop) {
					return $.ig.AxisTitlePosition.prototype.top;
				}
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideBottom) {
					return $.ig.AxisTitlePosition.prototype.bottom;
				}
			}
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideTop) {
				return $.ig.AxisTitlePosition.prototype.top;
			}
			return $.ig.AxisTitlePosition.prototype.bottom;
		}
		return position;
	}
	,
	getDefaultVerticalAxisTitlePosition: function (axis) {
		var position = this.viewManager().getDefaultVerticalAxisTitlePosition();
		if (position == $.ig.AxisTitlePosition.prototype.auto) {
			var actualLocation = $.ig.LabelPanelArranger.prototype.resolveLabelLocation(axis.labelPanel());
			if (axis.crossingAxis() == null) {
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideRight) {
					return $.ig.AxisTitlePosition.prototype.left;
				}
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft) {
					return $.ig.AxisTitlePosition.prototype.right;
				}
			} else {
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideRight) {
					return $.ig.AxisTitlePosition.prototype.right;
				}
				if (actualLocation == $.ig.AxisLabelsLocation.prototype.insideLeft) {
					return $.ig.AxisTitlePosition.prototype.left;
				}
			}
			if (actualLocation == $.ig.AxisLabelsLocation.prototype.outsideRight) {
				return $.ig.AxisTitlePosition.prototype.right;
			}
			return $.ig.AxisTitlePosition.prototype.left;
		}
		return position;
	}
	,
	getDefaultVerticalAxisFont: function () {
		return this.viewManager().getDefaultVerticalAxisFont();
	}
	,
	getDefaultVerticalAxisColor: function () {
		return this.viewManager().getDefaultVerticalAxisColor();
	}
	,
	getDefaultHorizontalAxisFont: function () {
		return this.viewManager().getDefaultHorizontalAxisFont();
	}
	,
	getDefaultHorizontalAxisColor: function () {
		return this.viewManager().getDefaultHorizontalAxisColor();
	}
	,
	getDefaultTitleFont: function () {
		return this.viewManager().getDefaultChartTitleFont();
	}
	,
	getDefaultSubtitleFont: function () {
		return this.viewManager().getDefaultChartSubTitleFont();
	}
	,
	getDefaultTitleBrush: function () {
		return this.viewManager().getDefaultChartTitleColor();
	}
	,
	getDefaultSubtitleBrush: function () {
		return this.viewManager().getDefaultChartSubTitleColor();
	}
	,
	exportTitleData: function (visualData) {
		var font = null;
		visualData.title(null);
		visualData.subtitle(null);
		var titleMargin = this.getTitleMargin();
		var titleContainerHeight = 0;
		var titleHeight = 0;
		if (this.__titleText != null) {
			font = this.getTitleFont();
			var fontInfo = $.ig.FontUtil.prototype.getFontInfo(this.__titleText, font);
			var titleOrigin = { __x: 0, __y: 0, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			titleHeight = this.__titleText.actualHeight() + titleMargin.bottom() + titleMargin.top();
			var titleData = new $.ig.ChartTitleVisualData();
			var contentArea = this.getContentArea();
			titleData.viewport(new $.ig.Rect(0, contentArea.left(), contentArea.top(), contentArea.width(), titleHeight));
			titleData.textPlotArea(this.exportTitleBounds(this.__titleText));
			titleData.textPlotArea(new $.ig.Rect(0, this.__titleText.canvasLeft(), this.__titleText.canvasTop(), this.__titleText.actualWidth(), this.__titleText.actualHeight()));
			titleContainerHeight = titleData.height();
			titleData.appearance($.ig.AppearanceHelper.prototype.fromTextElement(this.__titleText, fontInfo));
			var margin = this.getTitleMargin();
			titleData.appearance().marginTop(margin.top());
			titleData.appearance().marginLeft(margin.left());
			titleData.appearance().marginRight(margin.right());
			titleData.appearance().marginBottom(margin.bottom());
			var alignment = this.getTitleAlignement();
			titleData.appearance().horizontalAlignment($.ig.HorizontalAlignment.prototype.$getName(alignment));
			visualData.title(titleData);
		}
		if (this.__subTitleText != null) {
			font = this.getSubtitleFont();
			var fontInfo1 = $.ig.FontUtil.prototype.getFontInfo(this.__subTitleText, font);
			var subTitleOrigin = { __x: 0, __y: titleContainerHeight, $type: $.ig.Point.prototype.$type, getType: $.ig.Object.prototype.getType, getGetHashCode: $.ig.Object.prototype.getGetHashCode, typeName: $.ig.Object.prototype.typeName };
			var subTitleMargin = this.getSubtitleMargin();
			var subTitleHeight = this.__subTitleText.actualHeight() + subTitleMargin.bottom() + subTitleMargin.top();
			var subTitleData = new $.ig.ChartTitleVisualData();
			var contentArea1 = this.getContentArea();
			subTitleData.viewport(new $.ig.Rect(0, contentArea1.left(), contentArea1.top() + titleHeight, contentArea1.width(), subTitleHeight));
			subTitleData.textPlotArea(this.exportTitleBounds(this.__subTitleText));
			subTitleData.appearance($.ig.AppearanceHelper.prototype.fromTextElement(this.__subTitleText, fontInfo1));
			var margin1 = this.getSubtitleMargin();
			subTitleData.appearance().marginTop(margin1.top());
			subTitleData.appearance().marginLeft(margin1.left());
			subTitleData.appearance().marginRight(margin1.right());
			subTitleData.appearance().marginBottom(margin1.bottom());
			var alignment1 = this.getSubtitleAlignement();
			subTitleData.appearance().horizontalAlignment($.ig.HorizontalAlignment.prototype.$getName(alignment1));
			visualData.subtitle(subTitleData);
		}
	}
	,
	getContentArea: function () {
		return new $.ig.Rect(0, 0, 0, this.containerWidth(), this.containerHeight());
	}
	,
	exportTitleBounds: function (textBlock) {
		var bounds = $.ig.VisualExportHelper.prototype.getRotatedBounds(textBlock);
		return bounds;
	}
	,
	exportChartData: function (cvd) {
		cvd.width(this.containerWidth());
		cvd.height(this.containerHeight());
		cvd.contentArea(this.getContentArea());
		cvd.centralArea(new $.ig.Rect(0, this.__actualLeftMargin, 0, this.containerWidth() - (this.__actualLeftMargin + this.__actualRightMargin), this.containerHeight() - (this.__actualTopMargin + this.__actualBottomMargin)));
		cvd.plotArea(this.model().viewportRect());
		cvd.actualWindowRect(this.model().actualWindowRect());
	}
	,
	getDefaultVerticalAxisTitleMargin: function () {
		return this.viewManager().getDefaultVerticalAxisTitleMargin();
	}
	,
	getDefaultHorizontalAxisTitleMargin: function () {
		return this.viewManager().getDefaultHorizontalAxisTitleMargin();
	}
	,
	__hasUserTitleAlignment: false,
	__hasUserSubtitleAlignment: false,
	onSubtitleAlignmentChanged: function (oldValue, newValue) {
		this.__hasUserSubtitleAlignment = true;
	}
	,
	onTitleAlignmentChanged: function (oldValue, newValue) {
		this.__hasUserTitleAlignment = true;
	}
	,
	getTitleAlignement: function () {
		if (this.__hasUserTitleAlignment) {
			return this.model().titleHorizontalAlignment();
		} else {
			var ret = $.ig.HorizontalAlignment.prototype.center;
			switch (this.viewManager().getDefaultChartTitleTextAlign()) {
				case "left":
					ret = $.ig.HorizontalAlignment.prototype.left;
					break;
				case "right":
					ret = $.ig.HorizontalAlignment.prototype.right;
					break;
			}
			return ret;
		}
	}
	,
	getSubtitleAlignement: function () {
		if (this.__hasUserSubtitleAlignment) {
			return this.model().subtitleHorizontalAlignment();
		} else {
			var ret = $.ig.HorizontalAlignment.prototype.center;
			switch (this.viewManager().getDefaultChartSubTitleTextAlign()) {
				case "left":
					ret = $.ig.HorizontalAlignment.prototype.left;
					break;
				case "right":
					ret = $.ig.HorizontalAlignment.prototype.right;
					break;
			}
			return ret;
		}
	}
	,
	__panelsDirty: false,
	beforeContentRefresh: function () {
		if (this.__panelsDirty) {
			this.determinePlotAreaSize();
			if (this.__fromEmpty) {
				this.model().chartContentManager().force();
			}
			if (this.__panelsDirty) {
				this.determinePlotAreaSize();
			}
		}
	}
	,
	justZoomed: function () {
		if (this.model().zoomLongAgo()) {
			return false;
		}
		if (($.ig.Date.prototype.now().getTime() - this.model().lastZoomTime().getTime()) < 300) {
			return true;
		}
		return false;
	}
	,
	ensureCorrectSize: function () {
		this.viewManager().ensureCorrectSize(this.containerWidth(), this.containerHeight());
	}
	,
	isPagePanningAllowedChanged: function () {
		this.viewManager().isPagePanningAllowedChanged(this.model().isPagePanningAllowed());
	}
	,
	shouldInteractForDirection: function (direction) {
		var window = this.model().actualWindowRect();
		var isUpAllowed = window.top() > 0;
		var isLeftAllowed = window.left() > 0;
		var isRightAllowed = window.right() < 1;
		var isDownAllowed = window.bottom() < 1;
		var isUpRequested = direction.__y < 0;
		var isDownRequested = direction.__y > 0;
		var isLeftRequested = direction.__x < 0;
		var isRightRequested = direction.__x > 0;
		if (isUpAllowed && isUpRequested) {
			return true;
		}
		if (isLeftAllowed && isLeftRequested) {
			return true;
		}
		if (isDownAllowed && isDownRequested) {
			return true;
		}
		if (isRightRequested && isRightAllowed) {
			return true;
		}
		return false;
	}
	,
	pixelScalingRatioChanged: function () {
		this.viewManager().pixelScalingRatioChanged();
		this.model().canvasRenderScheduler().schedule();
		this.model().thumbnailCanvasRenderScheduler().schedule();
		this.model().alternateViewRenderScheduler().schedule();
		this.overlayScheduler().schedule();
	}
	,
	_visibleTiles: null,
	displayZoomTiles: function (existing, newTiles, tileSize) {
		this.shouldClearTiles(false);
		if (this._visibleTiles == null) {
			this._visibleTiles = new $.ig.List$1($.ig.TileZoomTile.prototype.$type, 0);
		}
		for (var i = 0; i < this._visibleTiles.count(); i++) {
			while (i < this._visibleTiles.count() && !existing.containsKey(this._visibleTiles.__inner[i].content())) {
				this._visibleTiles.removeAt(i);
			}
		}
		for (var i1 = 0; i1 < newTiles.count(); i1++) {
			this._visibleTiles.add(newTiles.__inner[i1]);
		}
		this.makeDirty();
	}
	,
	acquireTileContent: function (window, tile, tileSize) {
		return this.viewManager().acquireTileContent(window, tile, tileSize);
	}
	,
	destroyAllTileContent: function () {
		this.viewManager().destroyAllTileContent();
	}
	,
	destroyTileContent: function (tile) {
		this.viewManager().destroyTileContent(tile);
	}
	,
	hideZoomTiles: function () {
		if (this._visibleTiles == null) {
			return;
		}
		this.shouldClearTiles(true);
		this.makeDirty();
	}
	,
	_shouldClearTiles: false,
	shouldClearTiles: function (value) {
		if (arguments.length === 1) {
			this._shouldClearTiles = value;
			return value;
		} else {
			return this._shouldClearTiles;
		}
	}
	,
	__cacheClearTimer: 0,
	deferCacheClear: function () {
		this.viewManager().deferCacheClear();
	}
	,
	cancelDeferredCacheClear: function () {
		this.viewManager().cancelDeferredCacheClear();
	}
	,
	deferEndToTiledZoom: function (delay) {
		this.viewManager().deferEndToTiledZoom(delay);
	}
	,
	cancelEndToTiledZoom: function () {
		this.viewManager().cancelEndToTiledZoom();
	}
	,
	__plotContentShown: false,
	hidePlotContent: function () {
		if (this.__plotContentShown) {
			this.__plotContentShown = false;
			this.mainContext().clearRectangle(this.model().viewportRect().left(), this.model().viewportRect().top(), this.model().viewportRect().width(), this.model().viewportRect().height());
			this.model().canvasRenderScheduler().isDisabled(true);
		}
	}
	,
	showPlotContent: function () {
		if (!this.__plotContentShown) {
			this.__plotContentShown = true;
			this.model().canvasRenderScheduler().isDisabled(false);
			this.model().canvasRenderScheduler().schedule1(this.mainContext(), this.hitContext());
		}
	}
	,
	onTileZoomEnding: function () {
	}
	,
	onActualHitTestModeChanged: function () {
		this.viewManager().onActualHitTestModeChanged();
	}
	,
	updateMobileMode: function (value) {
		if (this.model() != null) {
			if (!this.hasUserSetMobileMode()) {
				this.model().actualMobileMode(value);
			}
		}
	}
	,
	$type: new $.ig.Type('SeriesViewerView', $.ig.Object.prototype.$type, [$.ig.ISchedulableRender.prototype.$type])
}, true);

$.ig.util.defType('XamDataChartView', 'SeriesViewerView', {
	init: function (model) {
		$.ig.SeriesViewerView.prototype.init.call(this, model);
		this.chartModel(model);
	},
	_chartModel: null,
	chartModel: function (value) {
		if (arguments.length === 1) {
			this._chartModel = value;
			return value;
		} else {
			return this._chartModel;
		}
	}
	,
	updateGridMode: function (newValue) {
		this.model().canvasRenderScheduler().sortDirty();
	}
	,
	preRenderOverride: function () {
		$.ig.SeriesViewerView.prototype.preRenderOverride.call(this);
		if (this.attachedAxes().count() == 0 && this.mainContext() != null) {
			this.mainContext().clearRectangle(0, 0, this.containerWidth(), this.containerHeight());
		}
	}
	,
	setDefaultBrushes: function () {
		var brushes;
		var outlines;
		var fontBrush;
		var font;
		var axisLineBrush, axisStroke, axisMajorStroke, axisMinorStroke;
		var areaFillOpacity = 1, categoryAxisTickLength = 0;
		var alignsGridLines = false;
		var $ret = this.viewManager().getDefaultPalette(brushes, outlines, fontBrush, font, axisLineBrush);
		brushes = $ret.p0;
		outlines = $ret.p1;
		fontBrush = $ret.p2;
		font = $ret.p3;
		axisLineBrush = $ret.p4;
		var chartMargins;
		var $ret1 = this.viewManager().getChartSpecificDefaults(areaFillOpacity, chartMargins, axisStroke, axisMajorStroke, categoryAxisTickLength, alignsGridLines);
		areaFillOpacity = $ret1.p0;
		chartMargins = $ret1.p1;
		axisStroke = $ret1.p2;
		axisMajorStroke = $ret1.p3;
		categoryAxisTickLength = $ret1.p4;
		alignsGridLines = $ret1.p5;
		this.model().topMargin(chartMargins[0]);
		this.model().rightMargin(chartMargins[1]);
		this.model().bottomMargin(chartMargins[2]);
		this.model().leftMargin(chartMargins[3]);
		this.chartModel().defaultAxisStroke(axisLineBrush);
		this.chartModel().defaultAxisMajorStroke(axisLineBrush);
		this.chartModel().defaultAxisMinorStroke(axisLineBrush);
		this.chartModel().alignsGridLinesToPixels(alignsGridLines);
		this.cssAxisStroke(axisStroke);
		this.cssAxisMajorStroke(axisMajorStroke);
		this.chartModel().brushes(brushes);
		this.chartModel().outlines(outlines);
		var markerBrushes = new $.ig.BrushCollection();
		for (var i = 0; i < brushes.count(); i++) {
			markerBrushes.add(brushes.item(i));
		}
		this.chartModel().markerBrushes(markerBrushes);
		var markerOutlines = new $.ig.BrushCollection();
		for (var i1 = 0; i1 < outlines.count(); i1++) {
			markerOutlines.add(outlines.item(i1));
		}
		this.chartModel().markerBrushes(markerBrushes);
		this.chartModel().markerOutlines(markerOutlines);
		this.fontBrush(fontBrush);
		this.font(font);
		this.axisLineBrush(axisLineBrush);
		this.defaultAreaFillOpacity(areaFillOpacity);
		this.defaultCategoryAxisTickLength(categoryAxisTickLength);
	}
	,
	_fontBrush: null,
	fontBrush: function (value) {
		if (arguments.length === 1) {
			this._fontBrush = value;
			return value;
		} else {
			return this._fontBrush;
		}
	}
	,
	_axisLineBrush: null,
	axisLineBrush: function (value) {
		if (arguments.length === 1) {
			this._axisLineBrush = value;
			return value;
		} else {
			return this._axisLineBrush;
		}
	}
	,
	_cssAxisStroke: null,
	cssAxisStroke: function (value) {
		if (arguments.length === 1) {
			this._cssAxisStroke = value;
			return value;
		} else {
			return this._cssAxisStroke;
		}
	}
	,
	_cssAxisMajorStroke: null,
	cssAxisMajorStroke: function (value) {
		if (arguments.length === 1) {
			this._cssAxisMajorStroke = value;
			return value;
		} else {
			return this._cssAxisMajorStroke;
		}
	}
	,
	_defaultAreaFillOpacity: 0,
	defaultAreaFillOpacity: function (value) {
		if (arguments.length === 1) {
			this._defaultAreaFillOpacity = value;
			return value;
		} else {
			return this._defaultAreaFillOpacity;
		}
	}
	,
	_defaultCategoryAxisTickLength: 0,
	defaultCategoryAxisTickLength: function (value) {
		if (arguments.length === 1) {
			this._defaultCategoryAxisTickLength = value;
			return value;
		} else {
			return this._defaultCategoryAxisTickLength;
		}
	}
	,
	onContainerProvided: function (container) {
		$.ig.SeriesViewerView.prototype.onContainerProvided.call(this, container);
	}
	,
	renderOverride: function () {
		this.horizontalCrosshairLine().strokeThickness(1);
		this.verticalCrosshairLine().strokeThickness(1);
		this.horizontalCrosshairLine().__stroke = this.fontBrush();
		this.verticalCrosshairLine().__stroke = this.fontBrush();
		$.ig.SeriesViewerView.prototype.renderOverride.call(this);
	}
	,
	_font: null,
	font: function (value) {
		if (arguments.length === 1) {
			this._font = value;
			return value;
		} else {
			return this._font;
		}
	}
	,
	$type: new $.ig.Type('XamDataChartView', $.ig.SeriesViewerView.prototype.$type)
}, true);

$.ig.util.defType('DataContext', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_series: null,
	series: function (value) {
		if (arguments.length === 1) {
			this._series = value;
			return value;
		} else {
			return this._series;
		}
	}
	,
	_item: null,
	item: function (value) {
		if (arguments.length === 1) {
			this._item = value;
			return value;
		} else {
			return this._item;
		}
	}
	,
	_actualItemBrush: null,
	actualItemBrush: function (value) {
		if (arguments.length === 1) {
			this._actualItemBrush = value;
			return value;
		} else {
			return this._actualItemBrush;
		}
	}
	,
	_outline: null,
	outline: function (value) {
		if (arguments.length === 1) {
			this._outline = value;
			return value;
		} else {
			return this._outline;
		}
	}
	,
	_itemLabel: null,
	itemLabel: function (value) {
		if (arguments.length === 1) {
			this._itemLabel = value;
			return value;
		} else {
			return this._itemLabel;
		}
	}
	,
	_itemBrush: null,
	itemBrush: function (value) {
		if (arguments.length === 1) {
			this._itemBrush = value;
			return value;
		} else {
			return this._itemBrush;
		}
	}
	,
	_thickness: 0,
	thickness: function (value) {
		if (arguments.length === 1) {
			this._thickness = value;
			return value;
		} else {
			return this._thickness;
		}
	}
	,
	flatten: function () {
		var series_ = this.series();
		var item_ = this.item();
		var actualItemBrush_ = this.actualItemBrush();
		var outline_ = this.outline();
		var itemLabel_ = this.itemLabel();
		var itemBrush_ = this.itemBrush();
		var thickness_ = this.thickness();
		return { item: item_, itemBrush: actualItemBrush_, outline: outline_, itemLabel: itemLabel_, thickness: thickness_ };
	}
	,
	$type: new $.ig.Type('DataContext', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('PieSliceDataContext', 'DataContext', {
	init: function () {
		$.ig.DataContext.prototype.init.call(this);
	},
	_slice: null,
	slice: function (value) {
		if (arguments.length === 1) {
			this._slice = value;
			return value;
		} else {
			return this._slice;
		}
	}
	,
	_percentValue: 0,
	percentValue: function (value) {
		if (arguments.length === 1) {
			this._percentValue = value;
			return value;
		} else {
			return this._percentValue;
		}
	}
	,
	_isOthersSlice: false,
	isOthersSlice: function (value) {
		if (arguments.length === 1) {
			this._isOthersSlice = value;
			return value;
		} else {
			return this._isOthersSlice;
		}
	}
	,
	_legendLabel: null,
	legendLabel: function (value) {
		if (arguments.length === 1) {
			this._legendLabel = value;
			return value;
		} else {
			return this._legendLabel;
		}
	}
	,
	flatten: function () {
		var ret_ = $.ig.DataContext.prototype.flatten.call(this);
		var percentValue_ = this.percentValue();
		var isOthersSlice_ = this.isOthersSlice();
		ret_.percentValue = percentValue_;
		ret_.isOthersSlice = isOthersSlice_;
		if (isOthersSlice_ && this.item() != null) {
			var items_ = [];
			var en = this.item().getEnumerator();
			while (en.moveNext()) {
				var currItem_ = en.current();
				items_.push(currItem_);
			}
			ret_.item = items_;
		}
		return ret_;
	}
	,
	$type: new $.ig.Type('PieSliceDataContext', $.ig.DataContext.prototype.$type)
}, true);

$.ig.util.defType('FunnelSliceDataContext', 'DataContext', {
	init: function () {
		$.ig.DataContext.prototype.init.call(this);
	},
	_itemOutline: null,
	itemOutline: function (value) {
		if (arguments.length === 1) {
			this._itemOutline = value;
			return value;
		} else {
			return this._itemOutline;
		}
	}
	,
	flatten: function () {
		var ret_ = $.ig.DataContext.prototype.flatten.call(this);
		var itemOutline_ = this.itemOutline();
		ret_.itemOutline = itemOutline_;
		return ret_;
	}
	,
	$type: new $.ig.Type('FunnelSliceDataContext', $.ig.DataContext.prototype.$type)
}, true);

$.ig.util.defType('Marker', 'ContentControl', {
	init: function () {
		$.ig.ContentControl.prototype.init.call(this);
	},
	_brush: null,
	brush: function (value) {
		if (arguments.length === 1) {
			this._brush = value;
			return value;
		} else {
			return this._brush;
		}
	}
	,
	_outline: null,
	outline: function (value) {
		if (arguments.length === 1) {
			this._outline = value;
			return value;
		} else {
			return this._outline;
		}
	}
	,
	_canvasZIndex: 0,
	canvasZIndex: function (value) {
		if (arguments.length === 1) {
			this._canvasZIndex = value;
			return value;
		} else {
			return this._canvasZIndex;
		}
	}
	,
	_currentIndex: 0,
	currentIndex: function (value) {
		if (arguments.length === 1) {
			this._currentIndex = value;
			return value;
		} else {
			return this._currentIndex;
		}
	}
	,
	_markerBucket: 0,
	markerBucket: function (value) {
		if (arguments.length === 1) {
			this._markerBucket = value;
			return value;
		} else {
			return this._markerBucket;
		}
	}
	,
	_renderOffsetX: 0,
	_renderOffsetY: 0,
	$type: new $.ig.Type('Marker', $.ig.ContentControl.prototype.$type)
}, true);

$.ig.util.defType('SeriesComponentsForView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('SeriesComponentsForView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesComponentsFromView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('SeriesComponentsFromView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ChartAxisRangeChangedEventArgs', 'EventArgs', {
	init: function (chart, axis, oldMinimumValue, minimumValue, oldMaximumValue, maximumValue) {
		$.ig.EventArgs.prototype.init.call(this);
		this.chart(chart);
		this.axis(axis);
		this.oldMinimumValue(oldMinimumValue);
		this.minimumValue(minimumValue);
		this.oldMaximumValue(oldMaximumValue);
		this.maximumValue(maximumValue);
	},
	_chart: null,
	chart: function (value) {
		if (arguments.length === 1) {
			this._chart = value;
			return value;
		} else {
			return this._chart;
		}
	}
	,
	_axis: null,
	axis: function (value) {
		if (arguments.length === 1) {
			this._axis = value;
			return value;
		} else {
			return this._axis;
		}
	}
	,
	_oldMinimumValue: 0,
	oldMinimumValue: function (value) {
		if (arguments.length === 1) {
			this._oldMinimumValue = value;
			return value;
		} else {
			return this._oldMinimumValue;
		}
	}
	,
	_minimumValue: 0,
	minimumValue: function (value) {
		if (arguments.length === 1) {
			this._minimumValue = value;
			return value;
		} else {
			return this._minimumValue;
		}
	}
	,
	_oldMaximumValue: 0,
	oldMaximumValue: function (value) {
		if (arguments.length === 1) {
			this._oldMaximumValue = value;
			return value;
		} else {
			return this._oldMaximumValue;
		}
	}
	,
	_maximumValue: 0,
	maximumValue: function (value) {
		if (arguments.length === 1) {
			this._maximumValue = value;
			return value;
		} else {
			return this._maximumValue;
		}
	}
	,
	$type: new $.ig.Type('ChartAxisRangeChangedEventArgs', $.ig.EventArgs.prototype.$type)
}, true);

$.ig.util.defType('LegendBaseView', 'Object', {
	init: function (model) {
		this._mouseOver = false;
		$.ig.Object.prototype.init.call(this);
		this.model(model);
		this.viewManager(new $.ig.LegendBaseViewManager(this));
	},
	_viewManager: null,
	viewManager: function (value) {
		if (arguments.length === 1) {
			this._viewManager = value;
			return value;
		} else {
			return this._viewManager;
		}
	}
	,
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	onInit: function () {
	}
	,
	isDiscrete: function () {
		return false;
	}
	,
	createMouseButtonArgs: function (legendItem) {
		var chart;
		var series;
		var item;
		var $ret = this.fetchLegendEnvironment(legendItem, chart, series, item);
		chart = $ret.p1;
		series = $ret.p2;
		item = $ret.p3;
		var be = new $.ig.MouseButtonEventArgs();
		var args = new $.ig.DataChartLegendMouseButtonEventArgs(chart, series, item, be, legendItem);
		return args;
	}
	,
	createMouseArgs: function (legendItem) {
		var chart;
		var series;
		var item;
		var $ret = this.fetchLegendEnvironment(legendItem, chart, series, item);
		chart = $ret.p1;
		series = $ret.p2;
		item = $ret.p3;
		var be = new $.ig.MouseEventArgs();
		var args = new $.ig.ChartLegendMouseEventArgs(chart, series, item, be, legendItem);
		return args;
	}
	,
	fetchLegendEnvironment: function (legendItem, chart, series, item) {
		chart = ($.ig.util.cast($.ig.SeriesViewer.prototype.$type, this.model().owner()));
		series = null;
		item = null;
		if (legendItem != null) {
			var contentControl = $.ig.util.cast($.ig.ContentControl.prototype.$type, legendItem);
			if (contentControl != null && contentControl.content() != null && $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content()) !== null) {
				var dc = $.ig.util.cast($.ig.DataContext.prototype.$type, contentControl.content());
				series = $.ig.util.cast($.ig.Series.prototype.$type, dc.series());
				if (series != null) {
					chart = series.seriesViewer();
				}
				item = dc.item();
			}
		}
		return {
			p1: chart,
			p2: series,
			p3: item
		};
	}
	,
	detachContent: function () {
	}
	,
	ready: function () {
		return true;
	}
	,
	attachItemEvents: function (uiElement) {
	}
	,
	removeItemEvents: function (uiElement) {
	}
	,
	onContainerProvided: function (container) {
		this.viewManager().onContainerProvided(container);
	}
	,
	removeItemVisual: function (item) {
		this.viewManager().removeItemVisual(item);
	}
	,
	addItemVisual: function (item) {
		var index = this.model().children().indexOf(item);
		this.viewManager().addItemVisual(item, index);
	}
	,
	_legendItemsListStyle: null,
	legendItemsListStyle: function (value) {
		if (arguments.length === 1) {
			this._legendItemsListStyle = value;
			return value;
		} else {
			return this._legendItemsListStyle;
		}
	}
	,
	_legendItemStyle: null,
	legendItemStyle: function (value) {
		if (arguments.length === 1) {
			this._legendItemStyle = value;
			return value;
		} else {
			return this._legendItemStyle;
		}
	}
	,
	_legendItemBadgeStyle: null,
	legendItemBadgeStyle: function (value) {
		if (arguments.length === 1) {
			this._legendItemBadgeStyle = value;
			return value;
		} else {
			return this._legendItemBadgeStyle;
		}
	}
	,
	_legendItemTextStyle: null,
	legendItemTextStyle: function (value) {
		if (arguments.length === 1) {
			this._legendItemTextStyle = value;
			return value;
		} else {
			return this._legendItemTextStyle;
		}
	}
	,
	_mouseOver: false,
	onSizeChanged: function () {
	}
	,
	item: function (e_) {
		var visual = $(e_.currentTarget);
		return this.viewManager().getItem(visual);
	}
	,
	legendMouseOver: function (e) {
		if (!this._mouseOver) {
			this.model().onLegendItemMouseEnter(this.createMouseArgs(this.item(e)));
		}
		this._mouseOver = true;
	}
	,
	legendMouseLeave: function (e) {
		if (this._mouseOver) {
			this.model().onLegendItemMouseLeave(this.createMouseArgs(this.item(e)));
		}
		this._mouseOver = false;
	}
	,
	legendMouseDown: function (e) {
		this.model().onLegendItemMouseLeftButtonDown(this.createMouseButtonArgs(this.item(e)));
	}
	,
	legendMouseUp: function (e) {
		this.model().onLegendItemMouseLeftButtonUp(this.createMouseButtonArgs(this.item(e)));
	}
	,
	$type: new $.ig.Type('LegendBaseView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ItemLegendView', 'LegendBaseView', {
	init: function (model) {
		$.ig.LegendBaseView.prototype.init.call(this, model);
		this.itemModel(model);
	},
	_itemModel: null,
	itemModel: function (value) {
		if (arguments.length === 1) {
			this._itemModel = value;
			return value;
		} else {
			return this._itemModel;
		}
	}
	,
	onInit: function () {
		$.ig.LegendBaseView.prototype.onInit.call(this);
	}
	,
	isDiscrete: function () {
		return true;
	}
	,
	containsContext: function (dataContext) {
		return this.viewManager().containsContext(dataContext);
	}
	,
	$type: new $.ig.Type('ItemLegendView', $.ig.LegendBaseView.prototype.$type)
}, true);

$.ig.util.defType('GradientData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
		this.gradientStops(new $.ig.List$1($.ig.GradientStopData.prototype.$type, 0));
	},
	_gradientStops: null,
	gradientStops: function (value) {
		if (arguments.length === 1) {
			this._gradientStops = value;
			return value;
		} else {
			return this._gradientStops;
		}
	}
	,
	$type: new $.ig.Type('GradientData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('GradientStopData', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_offset: 0,
	offset: function (value) {
		if (arguments.length === 1) {
			this._offset = value;
			return value;
		} else {
			return this._offset;
		}
	}
	,
	_brush: null,
	brush: function (value) {
		if (arguments.length === 1) {
			this._brush = value;
			return value;
		} else {
			return this._brush;
		}
	}
	,
	$type: new $.ig.Type('GradientStopData', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SliceView', 'Object', {
	_model: null,
	model: function (value) {
		if (arguments.length === 1) {
			this._model = value;
			return value;
		} else {
			return this._model;
		}
	}
	,
	init: function (model) {
		$.ig.Object.prototype.init.call(this);
		this.model(model);
	},
	_slicePath: null,
	slicePath: function (value) {
		if (arguments.length === 1) {
			this._slicePath = value;
			return value;
		} else {
			return this._slicePath;
		}
	}
	,
	onInit: function () {
		this.slicePath(new $.ig.Path());
		this.model().content(this.slicePath());
	}
	,
	onTemplateProvided: function () {
		this.model().createShape();
	}
	,
	getSlicePath: function () {
		return this.slicePath();
	}
	,
	positionSlice: function (x, y) {
		this.slicePath().renderTransform((function () {
			var $ret = new $.ig.TranslateTransform();
			$ret.x(x);
			$ret.y(y);
			return $ret;
		}()));
	}
	,
	resetSlicePosition: function () {
		this.slicePath().renderTransform(null);
	}
	,
	$type: new $.ig.Type('SliceView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesViewerComponentsForView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	$type: new $.ig.Type('SeriesViewerComponentsForView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('SeriesViewerComponentsFromView', 'Object', {
	init: function () {
		$.ig.Object.prototype.init.call(this);
	},
	_overviewPlusDetailPane: null,
	overviewPlusDetailPane: function (value) {
		if (arguments.length === 1) {
			this._overviewPlusDetailPane = value;
			return value;
		} else {
			return this._overviewPlusDetailPane;
		}
	}
	,
	$type: new $.ig.Type('SeriesViewerComponentsFromView', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('OverviewPlusDetailViewportHost', 'Object', {
	init: function (view) {
		$.ig.Object.prototype.init.call(this);
		if (view == null) {
			throw new $.ig.ArgumentNullException(0, "view");
		}
		this.view(view);
	},
	_view: null,
	view: function (value) {
		if (arguments.length === 1) {
			this._view = value;
			return value;
		} else {
			return this._view;
		}
	}
	,
	getViewInfo: function (viewportRect, windowRect) {
		viewportRect = new $.ig.Rect(0, 0, 0, this.view().overviewPlusDetailPane().view().worldRect().width(), this.view().overviewPlusDetailPane().view().worldRect().height());
		windowRect = $.ig.SeriesViewer.prototype.standardRect;
		return {
			p0: viewportRect,
			p1: windowRect
		};
	}
	,
	getEffectiveViewport: function () {
		if (!this.view().model().isMap()) {
			var chart = this.view().model();
			if (chart.effectiveViewport().isEmpty()) {
				return chart.effectiveViewport();
			}
			return chart.getScaledEffectiveViewport(this.view().overviewPlusDetailPane().previewViewportdRect(), chart.viewportRect(), chart.effectiveViewport());
		}
		return $.ig.Rect.prototype.empty();
	}
	,
	$type: new $.ig.Type('OverviewPlusDetailViewportHost', $.ig.Object.prototype.$type, [$.ig.IProvidesViewport.prototype.$type])
}, true);

$.ig.util.defType('AreaFragmentView', 'AnchoredCategorySeriesView', {
	_areaFragmentModel: null,
	areaFragmentModel: function (value) {
		if (arguments.length === 1) {
			this._areaFragmentModel = value;
			return value;
		} else {
			return this._areaFragmentModel;
		}
	}
	,
	onInit: function () {
		$.ig.AnchoredCategorySeriesView.prototype.onInit.call(this);
		if (!this.isThumbnailView()) {
			this.model().legendItemBadgeTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($.ig.LegendTemplates.prototype.rectBadgeTemplate);
				$ret.measure($.ig.LegendTemplates.prototype.legendItemBadgeMeasure);
				return $ret;
			}()));
		}
	}
	,
	init: function (model) {
		this._polygon0 = new $.ig.Path();
		this._polyline0 = new $.ig.Path();
		this._polygon1 = new $.ig.Path();
		this._polyline1 = new $.ig.Path();
		$.ig.AnchoredCategorySeriesView.prototype.init.call(this, model);
		this.areaFragmentModel(model);
	},
	_polygon0: null,
	_polyline0: null,
	_polygon1: null,
	_polyline1: null,
	clearRendering: function () {
		this._polygon0.data(null);
		this._polygon1.data(null);
		this._polyline0.data(null);
		this._polyline1.data(null);
	}
	,
	createBucketCalculator: function () {
		return new $.ig.AreaFragmentBucketCalculator(this);
	}
	,
	setupAppearanceOverride: function () {
		$.ig.AnchoredCategorySeriesView.prototype.setupAppearanceOverride.call(this);
		this._polygon0.__fill = this.model().actualBrush();
		this._polygon1.__fill = this.model().actualBrush();
		this._polygon0.__opacity = this.model().actualAreaFillOpacity();
		this._polygon1.__opacity = 0.5 * this.model().actualAreaFillOpacity();
		this._polyline0.__stroke = this.model().actualOutline();
		this._polyline0.strokeThickness(this.model().thickness());
		this._polyline0.strokeDashArray(this.model().dashArray());
		this._polyline0.strokeDashCap(this.model().dashCap());
		this._polyline1.__stroke = this.model().actualOutline();
		this._polyline1.strokeThickness(this.model().thickness());
		this._polyline1.strokeDashArray(this.model().dashArray());
		this._polyline1.strokeDashCap(this.model().dashCap());
	}
	,
	setupHitAppearanceOverride: function () {
		$.ig.AnchoredCategorySeriesView.prototype.setupHitAppearanceOverride.call(this);
		var hitBrush = this.getHitBrush();
		this._polygon0.__fill = hitBrush;
		this._polygon1.__fill = hitBrush;
		this._polygon0.__opacity = 1;
		this._polygon1.__opacity = 1;
		this._polyline0.__stroke = hitBrush;
		this._polyline0.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polyline1.__stroke = hitBrush;
		this._polyline1.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
	}
	,
	renderOverride: function (context, isHitContext) {
		$.ig.AnchoredCategorySeriesView.prototype.renderOverride.call(this, context, isHitContext);
		context.renderPath(this._polygon0);
		context.renderPath(this._polygon1);
		context.renderPath(this._polyline0);
		context.renderPath(this._polyline1);
	}
	,
	index: function () {
		var parentSeries = this.areaFragmentModel().parentSeries();
		var fragmentCount = parentSeries.series().count();
		var actualIndex = parentSeries.series().indexOf(this.areaFragmentModel().logicalSeriesLink());
		var reverseIndex = (fragmentCount - 1) - actualIndex;
		var parentIndex = parentSeries.view().index();
		return parentIndex + reverseIndex;
	}
	,
	exportViewShapes: function (svd) {
		$.ig.AnchoredCategorySeriesView.prototype.exportViewShapes.call(this, svd);
		var lowerShape = new $.ig.PathVisualData(1, "lowerShape", this._polyline0);
		lowerShape.tags().add("Lower");
		var upperShape = new $.ig.PathVisualData(1, "upperShape", this._polyline1);
		upperShape.tags().add("Upper");
		upperShape.tags().add("Main");
		var translucent = new $.ig.PathVisualData(1, "translucentShape", this._polygon0);
		translucent.tags().add("Translucent");
		var fill = new $.ig.PathVisualData(1, "fillShape", this._polygon1);
		fill.tags().add("Fill");
		svd.shapes().add(lowerShape);
		svd.shapes().add(upperShape);
		svd.shapes().add(translucent);
		svd.shapes().add(fill);
	}
	,
	$type: new $.ig.Type('AreaFragmentView', $.ig.AnchoredCategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('ColumnFragmentView', 'AnchoredCategorySeriesView', {
	_columnFragmentModel: null,
	columnFragmentModel: function (value) {
		if (arguments.length === 1) {
			this._columnFragmentModel = value;
			return value;
		} else {
			return this._columnFragmentModel;
		}
	}
	,
	onInit: function () {
		$.ig.AnchoredCategorySeriesView.prototype.onInit.call(this);
		if (!this.isThumbnailView()) {
			this.model().legendItemBadgeTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($.ig.LegendTemplates.prototype.rectBadgeTemplate);
				$ret.measure($.ig.LegendTemplates.prototype.legendItemBadgeMeasure);
				return $ret;
			}()));
		}
	}
	,
	init: function (model) {
		var $self = this;
		$.ig.AnchoredCategorySeriesView.prototype.init.call(this, model);
		this.columnFragmentModel(model);
		this.high(new $.ig.List$1(Number, 0));
		this.low(new $.ig.List$1(Number, 0));
		this.columns((function () {
			var $ret = new $.ig.Pool$1($.ig.Rectangle.prototype.$type);
			$ret.create($self.columnCreate.runOn($self));
			$ret.activate($self.columnActivate.runOn($self));
			$ret.disactivate($self.columnDisactivate.runOn($self));
			$ret.destroy($self.columnDestroy.runOn($self));
			return $ret;
		}()));
		this.visibleColumns(new $.ig.List$1($.ig.Rectangle.prototype.$type, 0));
	},
	_visibleColumns: null,
	visibleColumns: function (value) {
		if (arguments.length === 1) {
			this._visibleColumns = value;
			return value;
		} else {
			return this._visibleColumns;
		}
	}
	,
	_columns: null,
	columns: function (value) {
		if (arguments.length === 1) {
			this._columns = value;
			return value;
		} else {
			return this._columns;
		}
	}
	,
	_high: null,
	high: function (value) {
		if (arguments.length === 1) {
			this._high = value;
			return value;
		} else {
			return this._high;
		}
	}
	,
	_low: null,
	low: function (value) {
		if (arguments.length === 1) {
			this._low = value;
			return value;
		} else {
			return this._low;
		}
	}
	,
	columnCreate: function () {
		var $self = this;
		var column = (function () {
			var $ret = new $.ig.Rectangle();
			$ret.dataContext((function () {
				var $ret = new $.ig.DataContext();
				$ret.series($self.model());
				return $ret;
			}()));
			return $ret;
		}());
		this.visibleColumns().add(column);
		column.__visibility = $.ig.Visibility.prototype.collapsed;
		return column;
	}
	,
	columnActivate: function (column) {
		column.__visibility = $.ig.Visibility.prototype.visible;
	}
	,
	columnDisactivate: function (column) {
		column.__visibility = $.ig.Visibility.prototype.collapsed;
	}
	,
	columnDestroy: function (column) {
		this.visibleColumns().remove(column);
	}
	,
	setupItemAppearanceOverride: function (item, index) {
		$.ig.AnchoredCategorySeriesView.prototype.setupItemAppearanceOverride.call(this, item, index);
		var column = item;
		column.__fill = this.model().actualBrush();
		column.__stroke = this.model().actualOutline();
		column.strokeThickness(this.model().thickness());
		column.strokeDashArray(this.model().dashArray());
		column.strokeDashCap(this.model().dashCap());
		column.radiusX(this.columnFragmentModel().radiusX());
		column.radiusY(this.columnFragmentModel().radiusY());
	}
	,
	positionRectangle: function (column, left, top) {
		var dirty = false;
		if (column.canvasTop() != top) {
			dirty = true;
			column.canvasTop(top);
		}
		if (column.canvasLeft() != left) {
			dirty = true;
			column.canvasLeft(left);
		}
		if (dirty) {
			this.makeDirty();
		}
	}
	,
	setupItemHitAppearanceOverride: function (item, index) {
		$.ig.AnchoredCategorySeriesView.prototype.setupItemHitAppearanceOverride.call(this, item, index);
		var column = item;
		var hitBrush = this.getHitBrush1(index);
		column.__fill = hitBrush;
		column.__stroke = hitBrush;
		column.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
	}
	,
	renderOverride: function (context, isHitContext) {
		$.ig.AnchoredCategorySeriesView.prototype.renderOverride.call(this, context, isHitContext);
		if (context.shouldRender()) {
			for (var i = 0; i < this.visibleColumns().count(); i++) {
				var column = this.visibleColumns().__inner[i];
				this.setupItemAppearance(column, i, isHitContext);
				context.renderRectangle(column);
			}
		}
	}
	,
	index: function () {
		var parentSeries = this.columnFragmentModel().parentSeries();
		var fragmentCount = parentSeries.series().count();
		var actualIndex = parentSeries.series().indexOf(this.columnFragmentModel().logicalSeriesLink());
		var reverseIndex = (fragmentCount - 1) - actualIndex;
		var parentIndex = parentSeries.view().index();
		return parentIndex + reverseIndex;
	}
	,
	exportViewShapes: function (svd) {
		$.ig.AnchoredCategorySeriesView.prototype.exportViewShapes.call(this, svd);
		var i = 0;
		var toSort = new $.ig.List$1($.ig.Rectangle.prototype.$type, 0);
		var en = this.columns().active().getEnumerator();
		while (en.moveNext()) {
			var column = en.current();
			toSort.add(column);
		}
		toSort.sort2(function (c1, c2) {
			if (c1.canvasLeft() < c2.canvasLeft()) {
				return -1;
			} else if (c1.canvasLeft() > c2.canvasLeft()) {
				return 1;
			} else {
				return 0;
			}
		});
		var en1 = toSort.getEnumerator();
		while (en1.moveNext()) {
			var column1 = en1.current();
			var rvd = new $.ig.RectangleVisualData(1, "column" + i, column1);
			rvd.tags().add("Main");
			svd.shapes().add(rvd);
		}
		i++;
	}
	,
	getDefaultTooltipTemplate: function () {
		var tooltipTemplate = "<div class='ui-chart-default-tooltip-content'>";
		var axis = null;
		if (this.columnFragmentModel().getCategoryAxis().isCategory()) {
			axis = this.columnFragmentModel().xAxis();
		} else if (this.columnFragmentModel().yAxis().isCategory()) {
			axis = this.columnFragmentModel().yAxis();
		}
		var dateTimeAxis = $.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, axis);
		if (dateTimeAxis != null) {
			tooltipTemplate += "<span>${item." + dateTimeAxis.dateTimeMemberPath() + "}</span><br/>";
		}
		if (axis != null && axis.label() != null) {
			tooltipTemplate += "<span>${item." + axis.label() + "}</span><br/>";
		}
		tooltipTemplate += "<span";
		var nonTransparentOutline = this.model().actualOutline() != null && $.ig.Color.prototype.l_op_Inequality_Lifted($.ig.util.toNullable($.ig.Color.prototype.$type, this.model().actualOutline().color()), $.ig.util.toNullable($.ig.Color.prototype.$type, null)) && this.model().actualOutline().color().a() > 0;
		if (nonTransparentOutline) {
			tooltipTemplate += " style='color:" + this.model().actualOutline().__fill + "'";
		}
		tooltipTemplate += ">" + this.columnFragmentModel().title() + ": </span><span class='ui-priority-primary'>" + "${item." + this.columnFragmentModel().valueMemberPath() + "}</span></div>";
		return tooltipTemplate;
	}
	,
	$type: new $.ig.Type('ColumnFragmentView', $.ig.AnchoredCategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('LineFragmentView', 'AnchoredCategorySeriesView', {
	_lineFragmentModel: null,
	lineFragmentModel: function (value) {
		if (arguments.length === 1) {
			this._lineFragmentModel = value;
			return value;
		} else {
			return this._lineFragmentModel;
		}
	}
	,
	init: function (model) {
		this._polyline0 = new $.ig.Path();
		this._polygon01 = new $.ig.Path();
		this._polyline1 = new $.ig.Path();
		$.ig.AnchoredCategorySeriesView.prototype.init.call(this, model);
		this.lineFragmentModel(model);
	},
	_polyline0: null,
	_polygon01: null,
	_polyline1: null,
	clearLine: function () {
		this._polygon01.data(null);
		this._polyline0.data(null);
		this._polyline1.data(null);
	}
	,
	createBucketCalculator: function () {
		return new $.ig.LineFragmentBucketCalculator(this);
	}
	,
	setupAppearanceOverride: function () {
		$.ig.AnchoredCategorySeriesView.prototype.setupAppearanceOverride.call(this);
		this._polyline0.__stroke = this.model().actualBrush();
		this._polyline0.strokeThickness(this.model().thickness());
		this._polyline0.strokeDashArray(this.model().dashArray());
		this._polyline0.strokeDashCap(this.model().dashCap());
		this._polyline1.__stroke = this.model().actualBrush();
		this._polyline1.strokeThickness(this.model().thickness());
		this._polyline1.strokeDashArray(this.model().dashArray());
		this._polyline1.strokeDashCap(this.model().dashCap());
		this._polygon01.__fill = this.model().actualBrush();
		this._polygon01.__opacity = 0.75;
	}
	,
	setupHitAppearanceOverride: function () {
		$.ig.AnchoredCategorySeriesView.prototype.setupHitAppearanceOverride.call(this);
		var hitBrush = this.getHitBrush();
		this._polyline0.__stroke = hitBrush;
		this._polyline0.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polyline1.__stroke = hitBrush;
		this._polyline1.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polygon01.__fill = hitBrush;
		this._polygon01.__opacity = 1;
	}
	,
	renderOverride: function (context, isHitContext) {
		$.ig.AnchoredCategorySeriesView.prototype.renderOverride.call(this, context, isHitContext);
		if (context.shouldRender()) {
			context.renderPath(this._polygon01);
			context.renderPath(this._polyline0);
			context.renderPath(this._polyline1);
		}
	}
	,
	index: function () {
		var parentSeries = this.lineFragmentModel().parentSeries();
		var fragmentCount = parentSeries.series().count();
		var actualIndex = parentSeries.series().indexOf(this.lineFragmentModel().logicalSeriesLink());
		var reverseIndex = (fragmentCount - 1) - actualIndex;
		var parentIndex = parentSeries.view().index();
		return parentIndex + reverseIndex;
	}
	,
	exportViewShapes: function (svd) {
		$.ig.AnchoredCategorySeriesView.prototype.exportViewShapes.call(this, svd);
		var lowerShape = new $.ig.PathVisualData(1, "lowerShape", this._polyline0);
		lowerShape.tags().add("Lower");
		lowerShape.tags().add("Main");
		var upperShape = new $.ig.PathVisualData(1, "upperShape", this._polyline1);
		upperShape.tags().add("Upper");
		var translucent = new $.ig.PathVisualData(1, "translucentShape", this._polygon01);
		translucent.tags().add("Translucent");
		svd.shapes().add(lowerShape);
		svd.shapes().add(upperShape);
		svd.shapes().add(translucent);
	}
	,
	$type: new $.ig.Type('LineFragmentView', $.ig.AnchoredCategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('SplineAreaFragmentView', 'SplineSeriesBaseView', {
	_splineAreaFragmentModel: null,
	splineAreaFragmentModel: function (value) {
		if (arguments.length === 1) {
			this._splineAreaFragmentModel = value;
			return value;
		} else {
			return this._splineAreaFragmentModel;
		}
	}
	,
	onInit: function () {
		$.ig.SplineSeriesBaseView.prototype.onInit.call(this);
		if (!this.isThumbnailView()) {
			this.model().legendItemBadgeTemplate((function () {
				var $ret = new $.ig.DataTemplate();
				$ret.render($.ig.LegendTemplates.prototype.rectBadgeTemplate);
				$ret.measure($.ig.LegendTemplates.prototype.legendItemBadgeMeasure);
				return $ret;
			}()));
		}
	}
	,
	init: function (model) {
		this._polygon0 = new $.ig.Path();
		this._polyline0 = new $.ig.Path();
		this._polygon1 = new $.ig.Path();
		this._polyline1 = new $.ig.Path();
		$.ig.SplineSeriesBaseView.prototype.init.call(this, model);
		this.splineAreaFragmentModel(model);
	},
	_polygon0: null,
	_polyline0: null,
	_polygon1: null,
	_polyline1: null,
	clearRendering: function () {
		this._polygon0.data(null);
		this._polygon1.data(null);
		this._polyline0.data(null);
		this._polyline1.data(null);
	}
	,
	setupAppearanceOverride: function () {
		$.ig.SplineSeriesBaseView.prototype.setupAppearanceOverride.call(this);
		this._polygon0.__fill = this.model().actualBrush();
		this._polygon1.__fill = this.model().actualBrush();
		this._polygon0.__opacity = this.model().actualAreaFillOpacity();
		this._polygon1.__opacity = 0.5 * this.model().actualAreaFillOpacity();
		this._polyline0.__stroke = this.model().actualOutline();
		this._polyline0.strokeThickness(this.model().thickness());
		this._polyline0.strokeDashArray(this.model().dashArray());
		this._polyline0.strokeDashCap(this.model().dashCap());
		this._polyline1.__stroke = this.model().actualOutline();
		this._polyline1.strokeThickness(this.model().thickness());
		this._polyline1.strokeDashArray(this.model().dashArray());
		this._polyline1.strokeDashCap(this.model().dashCap());
	}
	,
	setupHitAppearanceOverride: function () {
		$.ig.SplineSeriesBaseView.prototype.setupHitAppearanceOverride.call(this);
		var hitBrush = this.getHitBrush();
		this._polygon0.__fill = hitBrush;
		this._polygon1.__fill = hitBrush;
		this._polygon1.__opacity = 1;
		this._polygon0.__opacity = 1;
		this._polyline0.__stroke = hitBrush;
		this._polyline0.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polyline1.__stroke = hitBrush;
		this._polyline1.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
	}
	,
	renderOverride: function (context, isHitContext) {
		$.ig.SplineSeriesBaseView.prototype.renderOverride.call(this, context, isHitContext);
		if (context.shouldRender()) {
			context.renderPath(this._polygon0);
			context.renderPath(this._polygon1);
			context.renderPath(this._polyline0);
			context.renderPath(this._polyline1);
		}
	}
	,
	index: function () {
		var parentSeries = this.splineAreaFragmentModel().parentSeries();
		var fragmentCount = parentSeries.series().count();
		var actualIndex = parentSeries.series().indexOf(this.splineAreaFragmentModel().logicalSeriesLink());
		var reverseIndex = (fragmentCount - 1) - actualIndex;
		var parentIndex = parentSeries.view().index();
		return parentIndex + reverseIndex;
	}
	,
	exportViewShapes: function (svd) {
		$.ig.SplineSeriesBaseView.prototype.exportViewShapes.call(this, svd);
		var lowerShape = new $.ig.PathVisualData(1, "lowerShape", this._polyline0);
		lowerShape.tags().add("Lower");
		var upperShape = new $.ig.PathVisualData(1, "upperShape", this._polyline1);
		upperShape.tags().add("Upper");
		upperShape.tags().add("Main");
		var translucent = new $.ig.PathVisualData(1, "translucentShape", this._polygon0);
		translucent.tags().add("Translucent");
		var fill = new $.ig.PathVisualData(1, "fillShape", this._polygon1);
		fill.tags().add("Fill");
		svd.shapes().add(lowerShape);
		svd.shapes().add(upperShape);
		svd.shapes().add(translucent);
		svd.shapes().add(fill);
	}
	,
	$type: new $.ig.Type('SplineAreaFragmentView', $.ig.SplineSeriesBaseView.prototype.$type)
}, true);

$.ig.util.defType('SplineFragmentView', 'SplineSeriesBaseView', {
	_splineFragmentModel: null,
	splineFragmentModel: function (value) {
		if (arguments.length === 1) {
			this._splineFragmentModel = value;
			return value;
		} else {
			return this._splineFragmentModel;
		}
	}
	,
	init: function (model) {
		this._polyline0 = new $.ig.Path();
		this._polygon01 = new $.ig.Path();
		this._polyline1 = new $.ig.Path();
		$.ig.SplineSeriesBaseView.prototype.init.call(this, model);
		this.splineFragmentModel(model);
	},
	createBucketCalculator: function () {
		return new $.ig.SplineFragmentBucketCalculator(this);
	}
	,
	_polyline0: null,
	_polygon01: null,
	_polyline1: null,
	clearRendering: function () {
		this._polygon01.data(null);
		this._polyline0.data(null);
		this._polyline1.data(null);
	}
	,
	setupAppearanceOverride: function () {
		$.ig.SplineSeriesBaseView.prototype.setupAppearanceOverride.call(this);
		this._polyline0.__stroke = this.model().actualBrush();
		this._polyline0.strokeThickness(this.model().thickness());
		this._polyline0.strokeDashArray(this.model().dashArray());
		this._polyline0.strokeDashCap(this.model().dashCap());
		this._polyline1.__stroke = this.model().actualBrush();
		this._polyline1.strokeThickness(this.model().thickness());
		this._polyline1.strokeDashArray(this.model().dashArray());
		this._polyline1.strokeDashCap(this.model().dashCap());
		this._polygon01.__fill = this.model().actualBrush();
		this._polygon01.__opacity = 0.75;
	}
	,
	setupHitAppearanceOverride: function () {
		$.ig.SplineSeriesBaseView.prototype.setupHitAppearanceOverride.call(this);
		var hitBrush = this.getHitBrush();
		this._polyline0.__stroke = hitBrush;
		this._polyline0.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polyline1.__stroke = hitBrush;
		this._polyline1.strokeThickness(this.model().thickness() + $.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT);
		this._polygon01.__fill = hitBrush;
		this._polygon01.__opacity = 0.75;
	}
	,
	renderOverride: function (context, isHitContext) {
		$.ig.SplineSeriesBaseView.prototype.renderOverride.call(this, context, isHitContext);
		if (context.shouldRender()) {
			context.renderPath(this._polygon01);
			context.renderPath(this._polyline0);
			context.renderPath(this._polyline1);
		}
	}
	,
	index: function () {
		var parentSeries = this.splineFragmentModel().parentSeries();
		var fragmentCount = parentSeries.series().count();
		var actualIndex = parentSeries.series().indexOf(this.splineFragmentModel().logicalSeriesLink());
		var reverseIndex = (fragmentCount - 1) - actualIndex;
		var parentIndex = parentSeries.view().index();
		return parentIndex + reverseIndex;
	}
	,
	exportViewShapes: function (svd) {
		$.ig.SplineSeriesBaseView.prototype.exportViewShapes.call(this, svd);
		var lowerShape = new $.ig.PathVisualData(1, "lowerShape", this._polyline0);
		lowerShape.tags().add("Lower");
		lowerShape.tags().add("Main");
		var upperShape = new $.ig.PathVisualData(1, "upperShape", this._polyline1);
		upperShape.tags().add("Upper");
		var translucent = new $.ig.PathVisualData(1, "translucentShape", this._polygon01);
		translucent.tags().add("Translucent");
		svd.shapes().add(lowerShape);
		svd.shapes().add(upperShape);
		svd.shapes().add(translucent);
	}
	,
	$type: new $.ig.Type('SplineFragmentView', $.ig.SplineSeriesBaseView.prototype.$type)
}, true);

$.ig.util.defType('StackedSeriesView', 'CategorySeriesView', {
	_stackedModel: null,
	stackedModel: function (value) {
		if (arguments.length === 1) {
			this._stackedModel = value;
			return value;
		} else {
			return this._stackedModel;
		}
	}
	,
	__plotArea: null,
	plotArea: function () {
		return this.__plotArea;
	}
	,
	__seriesPanel: null,
	seriesPanel: function () {
		return this.__seriesPanel;
	}
	,
	init: function (model) {
		this.__plotArea = new $.ig.Canvas();
		this.__seriesPanel = new $.ig.Panel();
		$.ig.CategorySeriesView.prototype.init.call(this, model);
		this.stackedModel(model);
	},
	createBucketCalculator: function () {
		return new $.ig.StackedBucketCalculator(this);
	}
	,
	onInit: function () {
		$.ig.CategorySeriesView.prototype.onInit.call(this);
	}
	,
	hideTooltip: function () {
		$.ig.CategorySeriesView.prototype.hideTooltip.call(this);
		for (var i = 0; i < this.stackedModel().stackedSeriesManager().seriesVisual().count(); i++) {
			this.stackedModel().stackedSeriesManager().seriesVisual().__inner[i].view().hideTooltip();
		}
	}
	,
	onContextProvided: function (context, hitContext) {
		$.ig.CategorySeriesView.prototype.onContextProvided.call(this, context, hitContext);
		var en = this.stackedModel().series().getEnumerator();
		while (en.moveNext()) {
			var fragment = en.current();
			fragment.visualSeriesLink().view().onContextProvided(context, hitContext);
		}
	}
	,
	applyDropShadowDefaultSettings: function () {
		var colorString = "rgba(95,95,95,0.5)";
		var useSingleShadow = true;
		var blur = 5, offsetX = 5, offsetY = 5;
		var model = this.model();
		if ($.ig.util.cast($.ig.StackedAreaSeries.prototype.$type, model) !== null || $.ig.util.cast($.ig.StackedSplineAreaSeries.prototype.$type, model) !== null) {
			offsetX = 1;
			offsetY = -3;
		} else if ($.ig.util.cast($.ig.StackedLineSeries.prototype.$type, model) !== null || $.ig.util.cast($.ig.StackedSplineSeries.prototype.$type, model) !== null) {
			blur = 3;
			offsetX = 1;
			offsetY = 4;
			useSingleShadow = false;
		} else if ($.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, model) !== null) {
			offsetX = 5;
			offsetY = 0;
		}
		var color = new $.ig.Color();
		color.colorString(colorString);
		model.shadowColor(color);
		model.shadowBlur(blur);
		model.shadowOffsetX(offsetX);
		model.shadowOffsetY(offsetY);
		model.useSingleShadow(useSingleShadow);
	}
	,
	$type: new $.ig.Type('StackedSeriesView', $.ig.CategorySeriesView.prototype.$type)
}, true);

$.ig.util.defType('StackedBarSeriesView', 'StackedSeriesView', {
	_stackedBarModel: null,
	stackedBarModel: function (value) {
		if (arguments.length === 1) {
			this._stackedBarModel = value;
			return value;
		} else {
			return this._stackedBarModel;
		}
	}
	,
	init: function (model) {
		$.ig.StackedSeriesView.prototype.init.call(this, model);
		this.stackedBarModel(model);
	},
	createBucketCalculator: function () {
		return new $.ig.StackedBarBucketCalculator(this);
	}
	,
	$type: new $.ig.Type('StackedBarSeriesView', $.ig.StackedSeriesView.prototype.$type)
}, true);

$.ig.util.defType('StackedColumnSeriesView', 'StackedSeriesView', {
	init: function (model) {
		$.ig.StackedSeriesView.prototype.init.call(this, model);
	},
	createBucketCalculator: function () {
		return new $.ig.StackedColumnBucketCalculator(this);
	}
	,
	$type: new $.ig.Type('StackedColumnSeriesView', $.ig.StackedSeriesView.prototype.$type)
}, true);

$.ig.util.defType('StackedSeriesManager', 'Object', {
	init: function (parent) {
		var $self = this;
		$.ig.Object.prototype.init.call(this);
		if (parent == null) {
			return;
		}
		this.parentSeries(parent);
		this.seriesVisual(new $.ig.ObservableCollection$1($.ig.AnchoredCategorySeries.prototype.$type, 0));
		this.seriesLogical(new $.ig.StackedSeriesCollection());
		this.positiveSeries(new $.ig.ObservableCollection$1($.ig.AnchoredCategorySeries.prototype.$type, 0));
		this.negativeSeries(new $.ig.ObservableCollection$1($.ig.AnchoredCategorySeries.prototype.$type, 0));
		this.plotArea(this.parentSeries().stackedView().plotArea());
		this.seriesPanel(this.parentSeries().stackedView().seriesPanel());
		var $t = this.seriesLogical();
		$t.collectionChanged = $.ig.Delegate.prototype.combine($t.collectionChanged, function (o, e) {
			if (e.oldItems() != null) {
				var en = e.oldItems().getEnumerator();
				while (en.moveNext()) {
					var logicalSeries = en.current();
					if ($self.seriesVisual().contains(logicalSeries.visualSeriesLink())) {
						$self.seriesVisual().remove(logicalSeries.visualSeriesLink());
					}
				}
			}
			if (e.newItems() != null) {
				var counter = e.newStartingIndex();
				var en1 = e.newItems().getEnumerator();
				while (en1.moveNext()) {
					var logicalSeries1 = en1.current();
					var series = $self.createSeries(logicalSeries1);
					$self.seriesVisual().insert(counter, series);
					counter++;
				}
			}
		});
		var $t1 = this.seriesVisual();
		$t1.collectionChanged = $.ig.Delegate.prototype.combine($t1.collectionChanged, function (o, e) {
			if (e.oldItems() != null) {
				var en = e.oldItems().getEnumerator();
				while (en.moveNext()) {
					var visualSeries = en.current();
					visualSeries.clearRendering(true, visualSeries.view());
					visualSeries.seriesViewer(null);
					visualSeries.syncLink(null);
					visualSeries.itemsSource(null);
					visualSeries.legend(null);
					if ($self.seriesPanel() != null && $self.seriesPanel().children().contains(visualSeries)) {
						$self.seriesPanel().children().remove(visualSeries);
					}
					if ($self.parentSeries().seriesViewer() != null) {
						$self.parentSeries().seriesViewer().removeSeries(visualSeries);
					}
				}
			}
			if (e.newItems() != null) {
				var en1 = e.newItems().getEnumerator();
				while (en1.moveNext()) {
					var visualSeries1 = en1.current();
					visualSeries1.seriesViewer($self.parentSeries().seriesViewer());
					visualSeries1.syncLink($self.parentSeries().syncLink());
					if (!$self.seriesPanel().children().contains(visualSeries1)) {
						$self.seriesPanel().children().add(visualSeries1);
					}
					if ($self.parentSeries().seriesViewer() != null) {
						$self.parentSeries().seriesViewer().attachSeries(visualSeries1);
					}
				}
			}
			$self.renderSeries();
		});
	},
	_parentSeries: null,
	parentSeries: function (value) {
		if (arguments.length === 1) {
			this._parentSeries = value;
			return value;
		} else {
			return this._parentSeries;
		}
	}
	,
	_seriesVisual: null,
	seriesVisual: function (value) {
		if (arguments.length === 1) {
			this._seriesVisual = value;
			return value;
		} else {
			return this._seriesVisual;
		}
	}
	,
	_seriesLogical: null,
	seriesLogical: function (value) {
		if (arguments.length === 1) {
			this._seriesLogical = value;
			return value;
		} else {
			return this._seriesLogical;
		}
	}
	,
	_positiveSeries: null,
	positiveSeries: function (value) {
		if (arguments.length === 1) {
			this._positiveSeries = value;
			return value;
		} else {
			return this._positiveSeries;
		}
	}
	,
	_negativeSeries: null,
	negativeSeries: function (value) {
		if (arguments.length === 1) {
			this._negativeSeries = value;
			return value;
		} else {
			return this._negativeSeries;
		}
	}
	,
	_plotArea: null,
	plotArea: function (value) {
		if (arguments.length === 1) {
			this._plotArea = value;
			return value;
		} else {
			return this._plotArea;
		}
	}
	,
	_seriesPanel: null,
	seriesPanel: function (value) {
		if (arguments.length === 1) {
			this._seriesPanel = value;
			return value;
		} else {
			return this._seriesPanel;
		}
	}
	,
	createSeries: function (seriesFragment) {
		if ($.ig.util.cast($.ig.StackedLineSeries.prototype.$type, this.parentSeries()) !== null) {
			var series = new $.ig.LineFragment();
			series.parentSeries(this.parentSeries());
			seriesFragment.visualSeriesLink(series);
			series.logicalSeriesLink(seriesFragment);
			series.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series, seriesFragment);
			return series;
		}
		if ($.ig.util.cast($.ig.StackedColumnSeries.prototype.$type, this.parentSeries()) !== null) {
			var series1 = new $.ig.ColumnFragment();
			series1.parentSeries(this.parentSeries());
			seriesFragment.visualSeriesLink(series1);
			series1.logicalSeriesLink(seriesFragment);
			series1.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series1, seriesFragment);
			return series1;
		}
		if ($.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.parentSeries()) !== null) {
			var series2 = new $.ig.BarFragment();
			series2.parentSeries($.ig.util.cast($.ig.StackedBarSeries.prototype.$type, this.parentSeries()));
			seriesFragment.visualSeriesLink(series2);
			series2.logicalSeriesLink(seriesFragment);
			series2.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series2, seriesFragment);
			return series2;
		}
		if ($.ig.util.cast($.ig.StackedAreaSeries.prototype.$type, this.parentSeries()) !== null) {
			var series3 = new $.ig.AreaFragment();
			series3.parentSeries(this.parentSeries());
			seriesFragment.visualSeriesLink(series3);
			series3.logicalSeriesLink(seriesFragment);
			series3.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series3, seriesFragment);
			return series3;
		}
		if ($.ig.util.cast($.ig.StackedSplineSeries.prototype.$type, this.parentSeries()) !== null) {
			var series4 = new $.ig.SplineFragment();
			series4.parentSeries(this.parentSeries());
			seriesFragment.visualSeriesLink(series4);
			series4.logicalSeriesLink(seriesFragment);
			series4.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series4, seriesFragment);
			return series4;
		}
		if ($.ig.util.cast($.ig.StackedSplineAreaSeries.prototype.$type, this.parentSeries()) !== null) {
			var series5 = new $.ig.SplineAreaFragment();
			series5.parentSeries(this.parentSeries());
			seriesFragment.visualSeriesLink(series5);
			series5.logicalSeriesLink(seriesFragment);
			series5.view().viewport(this.parentSeries().view().viewport());
			this.setSeriesBindings(series5, seriesFragment);
			return series5;
		}
		return null;
	}
	,
	setSeriesBindings: function (visualSeries, logicalSeries) {
		visualSeries.brush(logicalSeries.parentOrLocalBrush());
		visualSeries.dashArray(logicalSeries.actualDashArray());
		visualSeries.dashCap(logicalSeries.actualDashCap());
		visualSeries.endCap(logicalSeries.actualEndCap());
		visualSeries.itemsSource(this.parentSeries().itemsSource());
		visualSeries.legend(this.parentSeries().actualLegend());
		visualSeries.legendItemTemplate(logicalSeries.actualLegendItemTemplate());
		visualSeries.legendItemVisibility(logicalSeries.actualLegendItemVisibility());
		visualSeries.markerBrush(logicalSeries.actualMarkerBrush());
		visualSeries.markerOutline(logicalSeries.actualMarkerOutline());
		visualSeries.markerStyle(logicalSeries.actualMarkerStyle());
		visualSeries.markerTemplate(logicalSeries.actualMarkerTemplate());
		visualSeries.markerType(logicalSeries.actualMarkerType());
		visualSeries.miterLimit(this.parentSeries().miterLimit());
		visualSeries.__opacity = logicalSeries.opacity();
		visualSeries.outline(logicalSeries.actualOutline());
		visualSeries.resolution(this.parentSeries().resolution());
		visualSeries.startCap(logicalSeries.actualStartCap());
		visualSeries.thickness(logicalSeries.actualThickness());
		visualSeries.title(logicalSeries.title());
		visualSeries.useLightweightMarkers(logicalSeries.actualUseLightweightMarkers());
		visualSeries.valueMemberPath(logicalSeries.valueMemberPath());
		visualSeries.__visibility = logicalSeries.actualVisibility();
		var areaFragment = $.ig.util.cast($.ig.AreaFragment.prototype.$type, visualSeries);
		if (areaFragment != null) {
			areaFragment.actualAreaFillOpacity(logicalSeries.actualAreaFillOpacity());
		}
		var splineAreaFragment = $.ig.util.cast($.ig.SplineAreaFragment.prototype.$type, visualSeries);
		if (splineAreaFragment != null) {
			splineAreaFragment.actualAreaFillOpacity(logicalSeries.actualAreaFillOpacity());
		}
		var columnFragment = $.ig.util.cast($.ig.ColumnFragment.prototype.$type, visualSeries);
		if (columnFragment != null) {
			columnFragment.radiusX(logicalSeries.actualRadiusX());
			columnFragment.radiusY(logicalSeries.actualRadiusY());
		}
		var barFragment = $.ig.util.cast($.ig.BarFragment.prototype.$type, visualSeries);
		if (barFragment != null) {
			barFragment.radiusX(logicalSeries.actualRadiusX());
			barFragment.radiusY(logicalSeries.actualRadiusY());
		}
		visualSeries.toolTip(logicalSeries.toolTip());
		visualSeries.isDropShadowEnabled(logicalSeries.actualIsDropShadowEnabled());
		visualSeries.useSingleShadow(logicalSeries.actualUseSingleShadow());
		logicalSeries.updateShadowBlur();
		logicalSeries.updateShadowColor();
		logicalSeries.updateShadowOffsetX();
		logicalSeries.updateShadowOffsetY();
	}
	,
	renderSeries: function () {
		this.positiveSeries().clear();
		this.negativeSeries().clear();
		var en = this.seriesVisual().getEnumerator();
		while (en.moveNext()) {
			var series = en.current();
			series.thumbnailDirty(true);
			series.seriesViewer(this.parentSeries().seriesViewer());
			series.syncLink(this.parentSeries().syncLink());
			series.index(this.parentSeries().getFragmentSeriesIndex(this.seriesLogical().__inner[this.seriesVisual().indexOf(series)]));
			if (this.seriesLogical().__inner[this.seriesVisual().indexOf(series)].positive()) {
				this.positiveSeries().add(series);
			} else {
				this.negativeSeries().add(series);
			}
			if ($.ig.util.cast($.ig.StackedLineSeries.prototype.$type, this.parentSeries()) !== null || $.ig.util.cast($.ig.StackedAreaSeries.prototype.$type, this.parentSeries()) !== null || $.ig.util.cast($.ig.StackedSplineSeries.prototype.$type, this.parentSeries()) !== null || $.ig.util.cast($.ig.StackedSplineAreaSeries.prototype.$type, this.parentSeries()) !== null) {
				series.setXAxis(this.parentSeries().getXAxis());
				series.setYAxis(this.parentSeries().getYAxis());
			}
			series.renderSeries(false);
		}
	}
	,
	$type: new $.ig.Type('StackedSeriesManager', $.ig.Object.prototype.$type)
}, true);

$.ig.util.defType('ChartContentManager___InOrder__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	__ofType_5_0: null,
	_itemEnumerator: null,
	__item_5_1: null,
	_itemEnumerator0: null,
	__item_5_2: null,
	_itemEnumerator1: null,
	__item_5_3: null,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._itemEnumerator != null) {
			this._itemEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = -1;
		if (this._itemEnumerator0 != null) {
			this._itemEnumerator0.dispose();
		}
	}
	,
	_m_Finally2: function () {
		this.__1__state = -1;
		if (this._itemEnumerator1 != null) {
			this._itemEnumerator1.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__ofType_5_0 = null;
						this.__ofType_5_0 = this.__4__this.__content.item($.ig.ChartContentType.prototype.axis);
						this.__1__state = 1;
						this._itemEnumerator = (this.__ofType_5_0.values()).getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						{
							this.__1__state = 1;
							if (this._itemEnumerator.moveNext()) {
								this.__item_5_1 = this._itemEnumerator.current();
								this.__2__current = this.__item_5_1;
								this.__1__state = 2;
								return true;
							}
							this._m_Finally0();
							this.__ofType_5_0 = this.__4__this.__content.item($.ig.ChartContentType.prototype.series);
							var contentList = new $.ig.List$1($.ig.ContentInfo.prototype.$type, 0);
							var en = this.__4__this.seriesList().getEnumerator();
							while (en.moveNext()) {
								var series = en.current();
								if (!series.isAnnotationLayer()) {
									contentList.add(this.__ofType_5_0.item(series));
								}
							}
							var en1 = this.__4__this.seriesList().getEnumerator();
							while (en1.moveNext()) {
								var series1 = en1.current();
								if (series1.isAnnotationLayer()) {
									contentList.add(this.__ofType_5_0.item(series1));
								}
							}
							this.__1__state = 3;
							this._itemEnumerator0 = contentList.getEnumerator();
							this.__1__state = 4;
							break;
						}
					case 4:
						this.__1__state = 3;
						if (this._itemEnumerator0.moveNext()) {
							this.__item_5_2 = this._itemEnumerator0.current();
							this.__2__current = this.__item_5_2;
							this.__1__state = 4;
							return true;
						}
						this._m_Finally1();
						this.__ofType_5_0 = this.__4__this.__content.item($.ig.ChartContentType.prototype.background);
						this.__1__state = 5;
						this._itemEnumerator1 = (this.__ofType_5_0.values()).getEnumerator();
						this.__1__state = 6;
						break;
					case 6:
						this.__1__state = 5;
						if (this._itemEnumerator1.moveNext()) {
							this.__item_5_3 = this._itemEnumerator1.current();
							this.__2__current = this.__item_5_3;
							this.__1__state = 6;
							return true;
						}
						this._m_Finally2();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.ChartContentManager___InOrder__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				this._m_Finally1();
				break;
			case 5:
			case 6:
				this._m_Finally2();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('ChartContentManager___InOrder__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.ContentInfo.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.ContentInfo.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('CategoryAxisBase___RelatedAxes__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	__dataChart_5_0: null,
	_chartEnumerator: null,
	__chart_5_1: null,
	__otherChart_5_2: null,
	_axisEnumerator: null,
	__axis_5_3: null,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._chartEnumerator != null) {
			this._chartEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = 1;
		if (this._axisEnumerator != null) {
			this._axisEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						this.__dataChart_5_0 = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.__4__this.seriesViewer());
						if (this.__dataChart_5_0 != null && this.__dataChart_5_0.isSyncReady() && this.__4__this.shouldShareMode(this.__dataChart_5_0)) {
							this.__1__state = 1;
							this._chartEnumerator = this.__dataChart_5_0.synchronizedCharts().getEnumerator();
							this.__1__state = 2;
							break;
						}
						break;
					case 2:
						this.__1__state = 1;
						if (this._chartEnumerator.moveNext()) {
							this.__chart_5_1 = this._chartEnumerator.current();
							if (this.__chart_5_1 != this.__4__this.seriesViewer()) {
								this.__otherChart_5_2 = $.ig.util.cast($.ig.XamDataChart.prototype.$type, this.__chart_5_1);
								if (this.__otherChart_5_2 != null) {
									this.__1__state = 3;
									this._axisEnumerator = (this.__otherChart_5_2.axes()).getEnumerator();
									this.__1__state = 4;
									break;
								}
							}
							this.__1__state = 2;
							break;
						}
						this._m_Finally0();
						break;
					case 4:
						this.__1__state = 3;
						if (this._axisEnumerator.moveNext()) {
							this.__axis_5_3 = this._axisEnumerator.current();
							if ($.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.__axis_5_3) !== null) {
								this.__2__current = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, this.__axis_5_3);
								this.__1__state = 4;
								return true;
							}
							this.__1__state = 4;
							break;
						}
						this._m_Finally1();
						this.__1__state = 2;
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.CategoryAxisBase___RelatedAxes__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				try {
					this._m_Finally1();
				}
				finally {
					this._m_Finally0();
				}
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('CategoryAxisBase___RelatedAxes__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.CategoryAxisBase.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.CategoryAxisBase.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('AxisLabelPanelBase___GetLabels__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	_eleEnumerator: null,
	__ele_5_0: null,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._eleEnumerator != null) {
			this._eleEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._eleEnumerator = (this.__4__this.children()).getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._eleEnumerator.moveNext()) {
							this.__ele_5_0 = this._eleEnumerator.current();
							if (this.__ele_5_0 != this.__4__this.axis().titleTextBlock() && this.__ele_5_0 != this.__4__this.view().ticks()) {
								this.__2__current = this.__ele_5_0;
								this.__1__state = 2;
								return true;
							}
							this.__1__state = 2;
							break;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.AxisLabelPanelBase___GetLabels__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('AxisLabelPanelBase___GetLabels__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Object.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Object.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('AxisLabelPanelBase___GetTextBlocks__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	__i_5_0: 0,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this.__4__this.axis().textBlocks().count()) {
						this.__2__current = this.__4__this.axis().textBlocks().item(this.__i_5_0);
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.AxisLabelPanelBase___GetTextBlocks__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('AxisLabelPanelBase___GetTextBlocks__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Object.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Object.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Series___ToEnumerableRange__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__i_5_0: 0,
	_expression: null,
	__3__expression: null,
	_start: 0,
	__3__start: 0,
	_length: 0,
	__3__length: 0,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = this._start;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this._length) {
						this.__2__current = this._expression(this.__i_5_0);
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Series___ToEnumerableRange__IteratorClass(0);
		}
		d__._expression = this.__3__expression;
		d__._start = this.__3__start;
		d__._length = this.__3__length;
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('Series___ToEnumerableRange__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('Axis___DirectSeries__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	__i_5_0: 0,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this.__4__this.series().count()) {
						var currentSeries = this.__4__this.series().__inner[this.__i_5_0];
						this.__2__current = currentSeries;
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.Axis___DirectSeries__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('Axis___DirectSeries__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Series.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Series.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('SeriesViewer___SynchronizedCharts__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	_chartEnumerator: null,
	__chart_5_0: null,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._chartEnumerator != null) {
			this._chartEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						if (this.__4__this.actualSyncLink() == null) {
							return false;
						}
						this.__1__state = 1;
						this._chartEnumerator = (this.__4__this.actualSyncLink().charts()).getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._chartEnumerator.moveNext()) {
							this.__chart_5_0 = this._chartEnumerator.current();
							this.__2__current = this.__chart_5_0;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.SeriesViewer___SynchronizedCharts__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('SeriesViewer___SynchronizedCharts__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.SeriesViewer.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.SeriesViewer.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('SortedListView___GetEnumerator__IteratorClass1$1', 'Object', {
	$t: null,
	__1__state: 0,
	__2__current: null,
	__i_5_0: 0,
	__4__this: null,
	init: function ($t, _1__state) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this.__4__this.count()) {
						this.__2__current = this.__4__this.item(this.__i_5_0);
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return $.ig.util.getBoxIfEnum(this.$t, this.__2__current);
	}
	,
	$type: new $.ig.Type('SortedListView___GetEnumerator__IteratorClass1$1', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize(0), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('SortedListView___GetEnumerator__IteratorClass$1', 'Object', {
	$t: null,
	__1__state: 0,
	__2__current: null,
	__i_5_0: 0,
	__4__this: null,
	init: function ($t, _1__state) {
		this.$t = $t;
		this.$type = this.$type.specialize(this.$t);
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this.__4__this.count()) {
						this.__2__current = $.ig.util.getBoxIfEnum(this.$t, this.__4__this.item(this.__i_5_0));
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('SortedListView___GetEnumerator__IteratorClass$1', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize($.ig.Object.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('SafeSortedReadOnlyDoubleCollection___GetEnumerator__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	__i_5_0: 0,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	moveNext: function () {
		while (this.__1__state >= 0) {
			switch (this.__1__state) {
				case 0:
					this.__1__state = -1;
					this.__i_5_0 = 0;
					this.__1__state = 1;
					break;
				case 1:
					this.__1__state = -1;
					if (this.__i_5_0 < this.__4__this.__target.count()) {
						this.__2__current = this.__4__this.item(this.__i_5_0);
						this.__1__state = 2;
						return true;
					}
					break;
				case 2:
					this.__1__state = -1;
					this.__i_5_0++;
					this.__1__state = 1;
					break;
			}
		}
		return false;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('SafeSortedReadOnlyDoubleCollection___GetEnumerator__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('SafeEnumerable___MakeSafe__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: 0,
	_valueEnumerator: null,
	__value_5_0: 0,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._valueEnumerator != null) {
			this._valueEnumerator.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = -1;
						if (this.__4__this.__target == null) {
							return false;
						}
						this.__1__state = 1;
						this._valueEnumerator = this.__4__this.__target.getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._valueEnumerator.moveNext()) {
							this.__value_5_0 = this._valueEnumerator.current();
							this.__2__current = this.__4__this.makeSafe1(this.__value_5_0);
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.SafeEnumerable___MakeSafe__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('SafeEnumerable___MakeSafe__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize(Number), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize(Number), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.util.defType('CategoryAxisBase___RelatedSeries__IteratorClass', 'Object', {
	__1__state: 0,
	__2__current: null,
	_currentSeriesEnumerator: null,
	__currentSeries_5_0: null,
	_chartEnumerator: null,
	__chart_5_1: null,
	_currentSeriesEnumerator0: null,
	__currentSeries_5_2: null,
	__4__this: null,
	init: function (_1__state) {
		$.ig.Object.prototype.init.call(this);
		this.__1__state = _1__state;
	},
	_m_Finally0: function () {
		this.__1__state = -1;
		if (this._currentSeriesEnumerator != null) {
			this._currentSeriesEnumerator.dispose();
		}
	}
	,
	_m_Finally1: function () {
		this.__1__state = -1;
		if (this._chartEnumerator != null) {
			this._chartEnumerator.dispose();
		}
	}
	,
	_m_Finally2: function () {
		this.__1__state = 3;
		if (this._currentSeriesEnumerator0 != null) {
			this._currentSeriesEnumerator0.dispose();
		}
	}
	,
	moveNext: function () {
		var __hasError__ = false;
		try {
			while (this.__1__state >= 0) {
				switch (this.__1__state) {
					case 0:
						this.__1__state = 1;
						this._currentSeriesEnumerator = this.__4__this.series().getEnumerator();
						this.__1__state = 2;
						break;
					case 2:
						this.__1__state = 1;
						if (this._currentSeriesEnumerator.moveNext()) {
							this.__currentSeries_5_0 = this._currentSeriesEnumerator.current();
							this.__2__current = this.__currentSeries_5_0;
							this.__1__state = 2;
							return true;
						}
						this._m_Finally0();
						if (this.__4__this.seriesViewer() != null && this.__4__this.seriesViewer().isSyncReady() && this.__4__this.shouldShareMode(this.__4__this.seriesViewer())) {
							this.__1__state = 3;
							this._chartEnumerator = this.__4__this.seriesViewer().synchronizedCharts().getEnumerator();
							this.__1__state = 4;
							break;
						}
						break;
					case 4:
						this.__1__state = 3;
						if (this._chartEnumerator.moveNext()) {
							this.__chart_5_1 = this._chartEnumerator.current();
							if (this.__chart_5_1 != this.__4__this.seriesViewer()) {
								this.__1__state = 5;
								this._currentSeriesEnumerator0 = (this.__chart_5_1.series()).getEnumerator();
								this.__1__state = 6;
								break;
							}
							this.__1__state = 4;
							break;
						}
						this._m_Finally1();
						break;
					case 6:
						this.__1__state = 5;
						if (this._currentSeriesEnumerator0.moveNext()) {
							this.__currentSeries_5_2 = this._currentSeriesEnumerator0.current();
							this.__2__current = this.__currentSeries_5_2;
							this.__1__state = 6;
							return true;
						}
						this._m_Finally2();
						this.__1__state = 4;
						break;
				}
			}
		}
		catch (e) {
			__hasError__ = true;
			throw e;
		}
		finally {
			if (__hasError__) {
				(this).dispose();
			}
		}
		return false;
	}
	,
	getEnumerator: function () {
		var d__;
		if (this.__1__state == -2) {
			this.__1__state = 0;
			d__ = this;
		} else {
			d__ = new $.ig.CategoryAxisBase___RelatedSeries__IteratorClass(0);
			d__.__4__this = this.__4__this;
		}
		return d__;
	}
	,
	reset: function () {
		throw new $.ig.NotSupportedException(1);
	}
	,
	dispose: function () {
		switch (this.__1__state) {
			case 1:
			case 2:
				this._m_Finally0();
				break;
			case 3:
			case 4:
				this._m_Finally1();
				break;
			case 5:
			case 6:
				try {
					this._m_Finally2();
				}
				finally {
					this._m_Finally1();
				}
				break;
		}
	}
	,
	current: function () {
		return this.__2__current;
	}
	,
	current1: function () {
		return this.__2__current;
	}
	,
	$type: new $.ig.Type('CategoryAxisBase___RelatedSeries__IteratorClass', $.ig.Object.prototype.$type, [$.ig.IEnumerable$1.prototype.$type.specialize($.ig.Series.prototype.$type), $.ig.IEnumerable.prototype.$type, $.ig.IEnumerator$1.prototype.$type.specialize($.ig.Series.prototype.$type), $.ig.IEnumerator.prototype.$type, $.ig.IDisposable.prototype.$type])
}, true);

$.ig.TransitionInSpeedType.prototype.auto = 0;
$.ig.TransitionInSpeedType.prototype.normal = 1;
$.ig.TransitionInSpeedType.prototype.valueScaled = 2;
$.ig.TransitionInSpeedType.prototype.indexScaled = 3;
$.ig.TransitionInSpeedType.prototype.random = 4;

$.ig.HighlightingState.prototype.outward = 0;
$.ig.HighlightingState.prototype.inward = 1;
$.ig.HighlightingState.prototype.$static = 2;

$.ig.SeriesHitTestMode.prototype.auto = 0;
$.ig.SeriesHitTestMode.prototype.computational = 1;
$.ig.SeriesHitTestMode.prototype.colorEncoded = 2;

$.ig.ChartHitTestMode.prototype.auto = 0;
$.ig.ChartHitTestMode.prototype.computational = 1;
$.ig.ChartHitTestMode.prototype.colorEncoded = 2;
$.ig.ChartHitTestMode.prototype.mixed = 3;
$.ig.ChartHitTestMode.prototype.mixedFavoringComputational = 4;

$.ig.MarkerType.prototype.unset = 0;
$.ig.MarkerType.prototype.none = 1;
$.ig.MarkerType.prototype.automatic = 2;
$.ig.MarkerType.prototype.circle = 3;
$.ig.MarkerType.prototype.triangle = 4;
$.ig.MarkerType.prototype.pyramid = 5;
$.ig.MarkerType.prototype.square = 6;
$.ig.MarkerType.prototype.diamond = 7;
$.ig.MarkerType.prototype.pentagon = 8;
$.ig.MarkerType.prototype.hexagon = 9;
$.ig.MarkerType.prototype.tetragram = 10;
$.ig.MarkerType.prototype.pentagram = 11;
$.ig.MarkerType.prototype.hexagram = 12;

$.ig.CategoryTransitionInMode.prototype.auto = 0;
$.ig.CategoryTransitionInMode.prototype.fromZero = 1;
$.ig.CategoryTransitionInMode.prototype.sweepFromLeft = 2;
$.ig.CategoryTransitionInMode.prototype.sweepFromRight = 3;
$.ig.CategoryTransitionInMode.prototype.sweepFromTop = 4;
$.ig.CategoryTransitionInMode.prototype.sweepFromBottom = 5;
$.ig.CategoryTransitionInMode.prototype.sweepFromCenter = 6;
$.ig.CategoryTransitionInMode.prototype.accordionFromLeft = 7;
$.ig.CategoryTransitionInMode.prototype.accordionFromRight = 8;
$.ig.CategoryTransitionInMode.prototype.accordionFromTop = 9;
$.ig.CategoryTransitionInMode.prototype.accordionFromBottom = 10;
$.ig.CategoryTransitionInMode.prototype.expand = 11;
$.ig.CategoryTransitionInMode.prototype.sweepFromCategoryAxisMinimum = 12;
$.ig.CategoryTransitionInMode.prototype.sweepFromCategoryAxisMaximum = 13;
$.ig.CategoryTransitionInMode.prototype.sweepFromValueAxisMinimum = 14;
$.ig.CategoryTransitionInMode.prototype.sweepFromValueAxisMaximum = 15;
$.ig.CategoryTransitionInMode.prototype.accordionFromCategoryAxisMinimum = 16;
$.ig.CategoryTransitionInMode.prototype.accordionFromCategoryAxisMaximum = 17;
$.ig.CategoryTransitionInMode.prototype.accordionFromValueAxisMinimum = 18;
$.ig.CategoryTransitionInMode.prototype.accordionFromValueAxisMaximum = 19;

$.ig.WindowResponse.prototype.deferred = 0;
$.ig.WindowResponse.prototype.immediate = 1;

$.ig.TimeAxisDisplayType.prototype.continuous = 0;
$.ig.TimeAxisDisplayType.prototype.discrete = 1;

$.ig.SplineType.prototype.natural = 0;
$.ig.SplineType.prototype.clamped = 1;

$.ig.OthersCategoryType.prototype.number = 0;
$.ig.OthersCategoryType.prototype.percent = 1;

$.ig.LabelsPosition.prototype.none = 0;
$.ig.LabelsPosition.prototype.center = 1;
$.ig.LabelsPosition.prototype.insideEnd = 2;
$.ig.LabelsPosition.prototype.outsideEnd = 3;
$.ig.LabelsPosition.prototype.bestFit = 4;

$.ig.ViewerSurfaceUsage.prototype.normal = 0;
$.ig.ViewerSurfaceUsage.prototype.minimal = 1;

$.ig.GridMode.prototype.none = 0;
$.ig.GridMode.prototype.beforeSeries = 1;
$.ig.GridMode.prototype.behindSeries = 2;

$.ig.AxisOrientation.prototype.horizontal = 0;
$.ig.AxisOrientation.prototype.vertical = 1;
$.ig.AxisOrientation.prototype.angular = 2;
$.ig.AxisOrientation.prototype.radial = 3;

$.ig.CategoryMode.prototype.mode0 = 0;
$.ig.CategoryMode.prototype.mode1 = 1;
$.ig.CategoryMode.prototype.mode2 = 2;

$.ig.AxisLabelsLocation.prototype.outsideTop = 0;
$.ig.AxisLabelsLocation.prototype.outsideBottom = 1;
$.ig.AxisLabelsLocation.prototype.outsideLeft = 2;
$.ig.AxisLabelsLocation.prototype.outsideRight = 3;
$.ig.AxisLabelsLocation.prototype.insideTop = 4;
$.ig.AxisLabelsLocation.prototype.insideBottom = 5;
$.ig.AxisLabelsLocation.prototype.insideLeft = 6;
$.ig.AxisLabelsLocation.prototype.insideRight = 7;

$.ig.ChartContentType.prototype.series = 0;
$.ig.ChartContentType.prototype.axis = 1;
$.ig.ChartContentType.prototype.background = 2;

$.ig.LeaderLineType.prototype.straight = 0;
$.ig.LeaderLineType.prototype.arc = 1;
$.ig.LeaderLineType.prototype.spline = 2;

$.ig.AxisTitlePosition.prototype.auto = 0;
$.ig.AxisTitlePosition.prototype.left = 1;
$.ig.AxisTitlePosition.prototype.right = 2;
$.ig.AxisTitlePosition.prototype.top = 3;
$.ig.AxisTitlePosition.prototype.bottom = 4;

$.ig.CategorySeriesMarkerCollisionAvoidance.prototype.none = 0;
$.ig.CategorySeriesMarkerCollisionAvoidance.prototype.omit = 1;

$.ig.NumericScaleMode.prototype.linear = 0;
$.ig.NumericScaleMode.prototype.logarithmic = 1;

$.ig.SmartAxisLabelDisplayType.prototype.wrap = 0;
$.ig.SmartAxisLabelDisplayType.prototype.stagger = 1;
$.ig.SmartAxisLabelDisplayType.prototype.rotate = 2;

$.ig.AxisExtentType.prototype.pixel = 0;
$.ig.AxisExtentType.prototype.percent = 1;

$.ig.Series.prototype.mouseOverVisualStateName = "MouseOver";
$.ig.Series.prototype.normalVisualStateName = "Normal";
$.ig.Series.prototype.visibilityProxyPropertyName = "VisibilityProxy";
$.ig.Series.prototype._rootCanvasName = "RootCanvas";
$.ig.Series.prototype._cLOSENESS_FACTOR = 1E-07;
$.ig.Series.prototype.syncLinkPropertyName = "SyncLink";
$.ig.Series.prototype.seriesViewerPropertyName = "SeriesViewer";
$.ig.Series.prototype.itemsSourcePropertyName = "ItemsSource";
$.ig.Series.prototype.fastItemsSourcePropertyName = "FastItemsSource";
$.ig.Series.prototype.legendItemPropertyName = "LegendItem";
$.ig.Series.prototype.actualLegendPropertyName = "ActualLegend";
$.ig.Series.prototype.legendItemVisibilityPropertyName = "LegendItemVisibility";
$.ig.Series.prototype.legendItemBadgeTemplatePropertyName = "LegendItemBadgeTemplate";
$.ig.Series.prototype.legendItemTemplatePropertyName = "LegendItemTemplate";
$.ig.Series.prototype.discreteLegendItemTemplatePropertyName = "DiscreteLegendItemTemplate";
$.ig.Series.prototype.indexPropertyName = "Index";
$.ig.Series.prototype.transitionEasingFunctionPropertyName = "TransitionEasingFunction";
$.ig.Series.prototype.transitionInEasingFunctionPropertyName = "TransitionInEasingFunction";
$.ig.Series.prototype.transitionDurationPropertyName = "TransitionDuration";
$.ig.Series.prototype.transitionProgressPropertyName = "TransitionProgress";
$.ig.Series.prototype._animationTickMilliseconds = 10;
$.ig.Series.prototype._useDispatcherTimer = false;
$.ig.Series.prototype.resolutionPropertyName = "Resolution";
$.ig.Series.prototype.titlePropertyName = "Title";
$.ig.Series.prototype.brushPropertyName = "Brush";
$.ig.Series.prototype.actualBrushPropertyName = "ActualBrush";
$.ig.Series.prototype.outlinePropertyName = "Outline";
$.ig.Series.prototype.actualOutlinePropertyName = "ActualOutline";
$.ig.Series.prototype.lineJoinPropertyName = "LineJoin";
$.ig.Series.prototype.miterLimitPropertyName = "MiterLimit";
$.ig.Series.prototype.thicknessPropertyName = "Thickness";
$.ig.Series.prototype.dashCapPropertyName = "DashCap";
$.ig.Series.prototype.dashArrayPropertyName = "DashArray";
$.ig.Series.prototype.toolTipPropertyName = "ToolTip";
$.ig.Series.prototype.isHighlightingEnabledPropertyName = "IsHighlightingEnabled";
$.ig.Series.prototype.isDropShadowEnabledPropertyName = "IsDropShadowEnabled";
$.ig.Series.prototype.shadowBlurPropertyName = "ShadowBlur";
$.ig.Series.prototype.shadowColorPropertyName = "ShadowColor";
$.ig.Series.prototype.useSingleShadowPropertyName = "UseSingleShadow";
$.ig.Series.prototype.shadowOffsetXPropertyName = "ShadowOffsetX";
$.ig.Series.prototype.shadowOffsetYPropertyName = "ShadowOffsetY";
$.ig.Series.prototype._areaFillOpacityPropertyName = "AreaFillOpacity";
$.ig.Series.prototype._actualAreaFillOpacityPropertyName = "ActualAreaFillOpacity";
$.ig.Series.prototype.transitionInDurationPropertyName = "TransitionInDuration";
$.ig.Series.prototype.transitionInSpeedTypePropertyName = "TransitionInSpeedType";
$.ig.Series.prototype.startCapPropertyName = "StartCap";
$.ig.Series.prototype.endCapPropertyName = "EndCap";
$.ig.Series.prototype.hitTestModePropertyName = "HitTestMode";
$.ig.Series.prototype.actualHitTestModePropertyName = "ActualHitTestMode";
$.ig.Series.prototype.trendLineDashArrayPropertyName = "TrendLineDashArray";
$.ig.Series.prototype.trendLineTypePropertyName = "TrendLineType";
$.ig.Series.prototype.trendLinePeriodPropertyName = "TrendLinePeriod";
$.ig.Series.prototype.trendLineBrushPropertyName = "TrendLineBrush";
$.ig.Series.prototype.trendLineActualBrushPropertyName = "ActualTrendLineBrush";
$.ig.Series.prototype.trendLineThicknessPropertyName = "TrendLineThickness";
$.ig.Series.prototype.trendLineDashCapPropertyName = "TrendLineDashCap";
$.ig.Series.prototype.trendLineZIndexPropertyName = "TrendLineZIndex";
$.ig.Series.prototype.__currentUniqueIndex = 0;
$.ig.Series.prototype._visibilityProxyProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.visibilityProxyPropertyName, $.ig.Visibility.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.visibilityProxyPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.itemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.itemsSourcePropertyName, $.ig.IEnumerable.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	if (series.syncLink() != null) {
		(series.syncLink()).releaseFastItemsSource(e.oldValue());
	}
	(sender).raisePropertyChanged($.ig.Series.prototype.itemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.fastItemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.fastItemsSourcePropertyName, $.ig.IFastItemsSource.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.fastItemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.legendProperty = $.ig.DependencyProperty.prototype.register("Legend", $.ig.LegendBase.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	series.raisePropertyChanged($.ig.XamDataChart.prototype.legendPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.legendItemVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.legendItemVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.legendItemVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.legendItemBadgeTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.legendItemBadgeTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	series.raisePropertyChanged($.ig.Series.prototype.legendItemBadgeTemplatePropertyName, e.oldValue(), e.newValue());
	series.legendItem(series.getLegendItem());
}));
$.ig.Series.prototype.legendItemTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.legendItemTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	series.raisePropertyChanged($.ig.Series.prototype.legendItemTemplatePropertyName, e.oldValue(), e.newValue());
	series.legendItem(series.getLegendItem());
}));
$.ig.Series.prototype.discreteLegendItemTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.discreteLegendItemTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	series.raisePropertyChanged($.ig.Series.prototype.discreteLegendItemTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.indexProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.indexPropertyName, $.ig.Number.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, -1, function (sender, e) {
	var series = $.ig.util.cast($.ig.Series.prototype.$type, sender);
	series.raisePropertyChanged($.ig.Series.prototype.indexPropertyName, e.oldValue(), e.newValue());
	series.legendItem(series.getLegendItem());
}));
$.ig.Series.prototype.transitionEasingFunctionProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionEasingFunctionPropertyName, $.ig.EasingFunctionHandler.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionEasingFunctionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.transitionInEasingFunctionProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionInEasingFunctionPropertyName, $.ig.EasingFunctionHandler.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionInEasingFunctionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.transitionDurationProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionDurationPropertyName, $.ig.Number.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionDurationPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.transitionProgressProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionProgressPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionProgressPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.resolutionProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.resolutionPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.resolutionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.titleProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.titlePropertyName, $.ig.Object.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, "Series Title", function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.titlePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.brushProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.brushPropertyName, $.ig.Brush.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.brushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.actualBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.actualBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.actualBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.outlineProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.outlinePropertyName, $.ig.Brush.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.outlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.actualOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.actualOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.actualOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.miterLimitProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.miterLimitPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.miterLimitPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.thicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.thicknessPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 1.5, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.thicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.dashCapProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.dashCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.flat), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.dashCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.dashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.dashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.dashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.toolTipProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.toolTipPropertyName, $.ig.Object.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.toolTipPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.isHighlightingEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.isHighlightingEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.isHighlightingEnabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.isDropShadowEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.isDropShadowEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.isDropShadowEnabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.shadowBlurProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.shadowBlurPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.shadowBlurPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.shadowColorProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.shadowColorPropertyName, $.ig.Color.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.shadowColorPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.useSingleShadowProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.useSingleShadowPropertyName, $.ig.Boolean.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.useSingleShadowPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.shadowOffsetXProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.shadowOffsetXPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.shadowOffsetXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.shadowOffsetYProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.shadowOffsetYPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.shadowOffsetYPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.areaFillOpacityProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype._areaFillOpacityPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype._areaFillOpacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.actualAreaFillOpacityProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype._actualAreaFillOpacityPropertyName, Number, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype._actualAreaFillOpacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.transitionInDurationProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionInDurationPropertyName, $.ig.Number.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, 1000, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionInDurationPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.transitionInSpeedTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.transitionInSpeedTypePropertyName, $.ig.TransitionInSpeedType.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.TransitionInSpeedType.prototype.getBox($.ig.TransitionInSpeedType.prototype.auto), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.transitionInSpeedTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.startCapProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.startCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.startCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Series.prototype.endCapProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.endCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.Series.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.endCapPropertyName, e.oldValue(), e.newValue());
}));

$.ig.AxisLabelSettings.prototype.textStylePropertyName = "TextStyle";
$.ig.AxisLabelSettings.prototype.textColorPropertyName = "TextColor";
$.ig.AxisLabelSettings.prototype.locationPropertyName = "Location";
$.ig.AxisLabelSettings.prototype.visibilityPropertyName = "Visibility";
$.ig.AxisLabelSettings.prototype.showFirstLabelPropertyName = "ShowFirstLabel";
$.ig.AxisLabelSettings.prototype.anglePropertyName = "Angle";
$.ig.AxisLabelSettings.prototype.extentPropertyName = "Extent";
$.ig.AxisLabelSettings.prototype.marginPropertyName = "Margin";
$.ig.AxisLabelSettings.prototype.leftMarginPropertyName = "LeftMargin";
$.ig.AxisLabelSettings.prototype.rightMarginPropertyName = "RightMargin";
$.ig.AxisLabelSettings.prototype.topMarginPropertyName = "TopMargin";
$.ig.AxisLabelSettings.prototype.bottomMarginPropertyName = "BottomMargin";
$.ig.AxisLabelSettings.prototype.horizontalAlignmentPropertyName = "HorizontalAlignment";
$.ig.AxisLabelSettings.prototype.verticalAlignmentPropertyName = "VerticalAlignment";
$.ig.AxisLabelSettings.prototype.extentPropertyDefault = 50;

$.ig.TitleSettings.prototype.axisTitlePositionPropertyName = "AxisTitlePosition";

$.ig.Axis.prototype.formatLabelPropertyName = "FormatLabel";
$.ig.Axis.prototype._rootCanvasName = "RootCanvas";
$.ig.Axis.prototype.fastItemsSourceProviderPropertyName = "FastItemsSourceProvider";
$.ig.Axis.prototype.seriesViewerPropertyName = "SeriesViewer";
$.ig.Axis.prototype.titlePropertyName = "Title";
$.ig.Axis.prototype.strokePropertyName = "Stroke";
$.ig.Axis.prototype.actualStrokePropertyName = "ActualStroke";
$.ig.Axis.prototype.strokeThicknessPropertyName = "StrokeThickness";
$.ig.Axis.prototype.strokeDashArrayPropertyName = "StrokeDashArray";
$.ig.Axis.prototype.stripPropertyName = "Strip";
$.ig.Axis.prototype.majorStrokePropertyName = "MajorStroke";
$.ig.Axis.prototype.actualMajorStrokePropertyName = "ActualMajorStroke";
$.ig.Axis.prototype.majorStrokeThicknessPropertyName = "MajorStrokeThickness";
$.ig.Axis.prototype.majorStrokeDashArrayPropertyName = "MajorStrokeDashArray";
$.ig.Axis.prototype.minorStrokePropertyName = "MinorStroke";
$.ig.Axis.prototype.actualMinorStrokePropertyName = "ActualMinorStroke";
$.ig.Axis.prototype.minorStrokeThicknessPropertyName = "MinorStrokeThickness";
$.ig.Axis.prototype.minorStrokeDashArrayPropertyName = "MinorStrokeDashArray";
$.ig.Axis.prototype.tickStrokePropertyName = "TickStroke";
$.ig.Axis.prototype.tickStrokeThicknessPropertyName = "TickStrokeThickness";
$.ig.Axis.prototype.tickStrokeDashArrayPropertyName = "TickStrokeDashArray";
$.ig.Axis.prototype.tickLengthPropertyName = "TickLength";
$.ig.Axis.prototype.isDisabledPropertyName = "IsDisabled";
$.ig.Axis.prototype.isInvertedPropertyName = "IsInverted";
$.ig.Axis.prototype.useEnchancedIntervalManagementPropertyName = "UseEnhancedIntervalManagement";
$.ig.Axis.prototype.enhancedIntervalMinimumCharactersPropertyName = "EnhancedIntervalMinimumCharacters";
$.ig.Axis.prototype.labelSettingsPropertyName = "LabelSettings";
$.ig.Axis.prototype.labelPanelStylePropertyName = "LabelPanelStyle";
$.ig.Axis.prototype.crossingAxisPropertyName = "CrossingAxis";
$.ig.Axis.prototype.crossingValuePropertyName = "CrossingValue";
$.ig.Axis.prototype.titleSettingsPropertyName = "TitleSettings";
$.ig.Axis.prototype.labelPropertyName = "Label";
$.ig.Axis.prototype.formatLabelProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.formatLabelPropertyName, $.ig.AxisFormatLabelHandler.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.formatLabelPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.titleProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.titlePropertyName, String, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.titlePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.strokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.strokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.strokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.actualStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.actualStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.actualStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.strokeThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.strokeThicknessPropertyName, Number, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.strokeThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.strokeDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.strokeDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.strokeDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.stripProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.stripPropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.stripPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.majorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.majorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.majorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.actualMajorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.actualMajorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.actualMajorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.majorStrokeThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.majorStrokeThicknessPropertyName, Number, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.majorStrokeThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.majorStrokeDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.majorStrokeDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.majorStrokeDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.minorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.minorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.minorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.actualMinorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.actualMinorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.actualMinorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.minorStrokeThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.minorStrokeThicknessPropertyName, Number, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.minorStrokeThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.minorStrokeDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.minorStrokeDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.minorStrokeDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.tickStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.tickStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.tickStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.tickStrokeThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.tickStrokeThicknessPropertyName, Number, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.tickStrokeThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.tickStrokeDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.tickStrokeDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.tickStrokeDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.tickLengthProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.tickLengthPropertyName, Number, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.tickLengthPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.isDisabledProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.isDisabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.isDisabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.isInvertedProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.isInvertedPropertyName, $.ig.Boolean.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.isInvertedPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.useEnhancedIntervalManagementProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.useEnchancedIntervalManagementPropertyName, $.ig.Boolean.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.useEnchancedIntervalManagementPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.enhancedIntervalMinimumCharactersProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.enhancedIntervalMinimumCharactersPropertyName, $.ig.Number.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, -1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.enhancedIntervalMinimumCharactersPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.labelSettingsProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.labelSettingsPropertyName, $.ig.AxisLabelSettings.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.labelSettingsPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.labelPanelStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.labelPanelStylePropertyName, $.ig.Style.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.labelPanelStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.crossingAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.crossingAxisPropertyName, $.ig.Axis.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.crossingAxisPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.crossingValueProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.crossingValuePropertyName, $.ig.Object.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.crossingValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.titleSettingsProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.titleSettingsPropertyName, $.ig.TitleSettings.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.titleSettingsPropertyName, e.oldValue(), e.newValue());
}));
$.ig.Axis.prototype.minHeuristicResolution = 7;
$.ig.Axis.prototype.labelProperty = $.ig.DependencyProperty.prototype.register($.ig.Axis.prototype.labelPropertyName, $.ig.Object.prototype.$type, $.ig.Axis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Axis.prototype.labelPropertyName, e.oldValue(), e.newValue());
}));

$.ig.SeriesView.prototype.iTEM_ALLOCATION = 1000;
$.ig.SeriesView.prototype.hIT_THICKNESS_AUGMENT = 3;
$.ig.SeriesView.prototype.tOUCH_HIT_THICKNESS_AUGMENT = 10;

$.ig.AxisLabelPanelBase.prototype.extentPropertyName = "Extent";
$.ig.AxisLabelPanelBase.prototype.extentProperty = $.ig.DependencyProperty.prototype.register($.ig.AxisLabelPanelBase.prototype.extentPropertyName, Number, $.ig.AxisLabelPanelBase.prototype.$type, new $.ig.PropertyMetadata(2, 50, function (sender, e) {
	(sender)._actualExtent = e.newValue();
}));

$.ig.PieChartBaseView.prototype.tEXT_MARGIN = 0;

$.ig.NumericAxisBase.prototype.minimumValuePropertyName = "MinimumValue";
$.ig.NumericAxisBase.prototype.actualMinimumValuePropertyName = "ActualMinimumValue";
$.ig.NumericAxisBase.prototype.actualVisibleMinimumValuePropertyName = "ActualVisibleMinimumValue";
$.ig.NumericAxisBase.prototype.maximumValuePropertyName = "MaximumValue";
$.ig.NumericAxisBase.prototype.actualMaximumValuePropertyName = "ActualMaximumValue";
$.ig.NumericAxisBase.prototype.actualVisibleMaximumValuePropertyName = "ActualVisibleMaximumValue";
$.ig.NumericAxisBase.prototype.intervalPropertyName = "Interval";
$.ig.NumericAxisBase.prototype.actualIntervalPropertyName = "ActualInterval";
$.ig.NumericAxisBase.prototype.minorIntervalPropertyName = "MinorInterval";
$.ig.NumericAxisBase.prototype.actualMinorIntervalPropertyName = "ActualMinorInterval";
$.ig.NumericAxisBase.prototype.referenceValuePropertyName = "ReferenceValue";
$.ig.NumericAxisBase.prototype.isLogarithmicPropertyName = "IsLogarithmic";
$.ig.NumericAxisBase.prototype._actualIsLogarithmicPropertyName = "ActualIsLogarithmic";
$.ig.NumericAxisBase.prototype.logarithmBasePropertyName = "LogarithmBase";
$.ig.NumericAxisBase.prototype._tickmarkValuesPropertyName = "TickmarkValues";
$.ig.NumericAxisBase.prototype._actualTickmarkValuesPropertyName = "ActualTickmarkValues";
$.ig.NumericAxisBase.prototype.minimumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.minimumValuePropertyName, Number, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.minimumValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.maximumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.maximumValuePropertyName, Number, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.maximumValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.intervalProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.intervalPropertyName, Number, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.intervalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.minorIntervalProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.minorIntervalPropertyName, Number, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	($.ig.util.cast($.ig.NumericAxisBase.prototype.$type, sender)).raisePropertyChanged($.ig.NumericAxisBase.prototype.minorIntervalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.referenceValueProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.referenceValuePropertyName, Number, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.referenceValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.isLogarithmicProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.isLogarithmicPropertyName, $.ig.Boolean.prototype.$type, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.isLogarithmicPropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.logarithmBaseProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype.logarithmBasePropertyName, $.ig.Number.prototype.$type, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, 10, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype.logarithmBasePropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericAxisBase.prototype.tickmarkValuesProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericAxisBase.prototype._tickmarkValuesPropertyName, $.ig.TickmarkValues.prototype.$type, $.ig.NumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.NumericAxisBase.prototype._tickmarkValuesPropertyName, e.oldValue(), e.newValue());
}));

$.ig.StraightNumericAxisBase.prototype.scaleModePropertyName = "ScaleMode";
$.ig.StraightNumericAxisBase.prototype.scalerPropertyName = "Scaler";
$.ig.StraightNumericAxisBase.prototype._actualScalerPropertyName = "ActualScaler";
$.ig.StraightNumericAxisBase.prototype.scaleModeProperty = $.ig.DependencyProperty.prototype.register($.ig.StraightNumericAxisBase.prototype.scaleModePropertyName, $.ig.NumericScaleMode.prototype.$type, $.ig.StraightNumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.NumericScaleMode.prototype.getBox($.ig.NumericScaleMode.prototype.linear), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StraightNumericAxisBase.prototype.scaleModePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StraightNumericAxisBase.prototype.scalerProperty = $.ig.DependencyProperty.prototype.register($.ig.StraightNumericAxisBase.prototype.scalerPropertyName, $.ig.NumericScaler.prototype.$type, $.ig.StraightNumericAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, null, $.ig.StraightNumericAxisBase.prototype.onScalerPropertyChanged));

$.ig.SeriesViewerSurfaceViewer.prototype._zoomLevelPropertyName = "ZoomLevel";
$.ig.SeriesViewerSurfaceViewer.prototype._zoomLevelDisplayTextPropertyName = "ZoomLevelDisplayText";
$.ig.SeriesViewerSurfaceViewer.prototype.zoomLevelProperty = $.ig.DependencyProperty.prototype.register("ZoomLevel", Number, $.ig.SeriesViewerSurfaceViewer.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).onPropertyChanged($.ig.SeriesViewerSurfaceViewer.prototype._zoomLevelPropertyName, e.oldValue(), e.newValue());
}));

$.ig.CategoryAxisBase.prototype.fastItemsSourcePropertyName = "FastItemsSource";
$.ig.CategoryAxisBase.prototype.itemsSourcePropertyName = "ItemsSource";
$.ig.CategoryAxisBase.prototype.itemsCountPropertyName = "ItemsCount";
$.ig.CategoryAxisBase.prototype.categoryModePropertyName = "CategoryMode";
$.ig.CategoryAxisBase.prototype.gapPropertyName = "Gap";
$.ig.CategoryAxisBase.prototype.overlapPropertyName = "Overlap";
$.ig.CategoryAxisBase.prototype.useClusteringModePropertyName = "UseClusteringMode";
$.ig.CategoryAxisBase.prototype.groupCountPropertyName = "GroupCount";
$.ig.CategoryAxisBase.prototype.fastItemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryAxisBase.prototype.fastItemsSourcePropertyName, $.ig.IFastItemsSource.prototype.$type, $.ig.CategoryAxisBase.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryAxisBase.prototype.fastItemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryAxisBase.prototype.itemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryAxisBase.prototype.itemsSourcePropertyName, $.ig.IEnumerable.prototype.$type, $.ig.CategoryAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var axis = $.ig.util.cast($.ig.CategoryAxisBase.prototype.$type, sender);
	if (axis.fastItemsSourceProvider() != null) {
		axis.fastItemsSourceProvider().releaseFastItemsSource(e.oldValue());
	}
	(sender).raisePropertyChanged($.ig.CategoryAxisBase.prototype.itemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryAxisBase.prototype.gapProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryAxisBase.prototype.gapPropertyName, Number, $.ig.CategoryAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, 0.2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryAxisBase.prototype.gapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryAxisBase.prototype.overlapProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryAxisBase.prototype.overlapPropertyName, Number, $.ig.CategoryAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryAxisBase.prototype.overlapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryAxisBase.prototype.useClusteringModeProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryAxisBase.prototype.useClusteringModePropertyName, $.ig.Boolean.prototype.$type, $.ig.CategoryAxisBase.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryAxisBase.prototype.useClusteringModePropertyName, e.oldValue(), e.newValue());
}));

$.ig.CategoryDateTimeXAxis.prototype.displayTypePropertyName = "DisplayType";
$.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedPropertyName = "IsDataPreSorted";
$.ig.CategoryDateTimeXAxis.prototype.minimumValuePropertyName = "MinimumValue";
$.ig.CategoryDateTimeXAxis.prototype.maximumValuePropertyName = "MaximumValue";
$.ig.CategoryDateTimeXAxis.prototype.intervalPropertyName = "Interval";
$.ig.CategoryDateTimeXAxis.prototype.actualIntervalPropertyName = "ActualInterval";
$.ig.CategoryDateTimeXAxis.prototype._minorIntervalPropertyName = "MinorInterval";
$.ig.CategoryDateTimeXAxis.prototype.actualMinorIntervalPropertyName = "ActualMinorInterval";
$.ig.CategoryDateTimeXAxis.prototype._actualMinimumValuePropertyName = "ActualMinimumValue";
$.ig.CategoryDateTimeXAxis.prototype._actualMaximumValuePropertyName = "ActualMaximumValue";
$.ig.CategoryDateTimeXAxis.prototype._dateTimeMemberPathPropertyName = "DateTimeMemberPath";
$.ig.CategoryDateTimeXAxis.prototype.dateTimeColumnPropertyName = "DateTimeColumn";
$.ig.CategoryDateTimeXAxis.prototype.displayTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype.displayTypePropertyName, $.ig.TimeAxisDisplayType.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.TimeAxisDisplayType.prototype.getBox($.ig.TimeAxisDisplayType.prototype.continuous), function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.displayTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedPropertyName, $.ig.Boolean.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.isDataPreSortedPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryDateTimeXAxis.prototype.minimumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype.minimumValuePropertyName, $.ig.Date.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.minimumValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryDateTimeXAxis.prototype.maximumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype.maximumValuePropertyName, $.ig.Date.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.maximumValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryDateTimeXAxis.prototype.intervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype.intervalPropertyName, $.ig.Number.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype.intervalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategoryDateTimeXAxis.prototype.minorIntervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype._minorIntervalPropertyName, $.ig.Number.prototype.$type, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (sender, e) {
	($.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, sender)).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype._minorIntervalPropertyName, e.oldValue(), e.newValue());
	($.ig.util.cast($.ig.CategoryDateTimeXAxis.prototype.$type, sender)).renderAxis1(false);
}));
$.ig.CategoryDateTimeXAxis.prototype.dateTimeMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryDateTimeXAxis.prototype._dateTimeMemberPathPropertyName, String, $.ig.CategoryDateTimeXAxis.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryDateTimeXAxis.prototype._dateTimeMemberPathPropertyName, e.oldValue(), e.newValue());
}));

$.ig.CategoryXAxis.prototype._intervalPropertyName = "Interval";
$.ig.CategoryXAxis.prototype.actualIntervalPropertyName = "ActualInterval";
$.ig.CategoryXAxis.prototype._minorIntervalPropertyName = "MinorInterval";
$.ig.CategoryXAxis.prototype.actualMinorIntervalPropertyName = "ActualMinorInterval";
$.ig.CategoryXAxis.prototype.intervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryXAxis.prototype._intervalPropertyName, Number, $.ig.CategoryXAxis.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryXAxis.prototype._intervalPropertyName, e.oldValue(), e.newValue());
	(sender).renderAxis1(false);
}));
$.ig.CategoryXAxis.prototype.minorIntervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryXAxis.prototype._minorIntervalPropertyName, Number, $.ig.CategoryXAxis.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	($.ig.util.cast($.ig.CategoryXAxis.prototype.$type, sender)).raisePropertyChanged($.ig.CategoryXAxis.prototype._minorIntervalPropertyName, e.oldValue(), e.newValue());
	($.ig.util.cast($.ig.CategoryXAxis.prototype.$type, sender)).renderAxis1(false);
}));

$.ig.CategoryYAxis.prototype._intervalPropertyName = "Interval";
$.ig.CategoryYAxis.prototype.actualIntervalPropertyName = "ActualInterval";
$.ig.CategoryYAxis.prototype._minorIntervalPropertyName = "MinorInterval";
$.ig.CategoryYAxis.prototype.actualMinorIntervalPropertyName = "ActualMinorInterval";
$.ig.CategoryYAxis.prototype.intervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryYAxis.prototype._intervalPropertyName, Number, $.ig.CategoryYAxis.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategoryYAxis.prototype._intervalPropertyName, e.oldValue(), e.newValue());
	(sender).renderAxis1(false);
}));
$.ig.CategoryYAxis.prototype.minorIntervalProperty = $.ig.DependencyProperty.prototype.register($.ig.CategoryYAxis.prototype._minorIntervalPropertyName, Number, $.ig.CategoryYAxis.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	($.ig.util.cast($.ig.CategoryYAxis.prototype.$type, sender)).raisePropertyChanged($.ig.CategoryYAxis.prototype._minorIntervalPropertyName, e.oldValue(), e.newValue());
	($.ig.util.cast($.ig.CategoryYAxis.prototype.$type, sender)).renderAxis1(false);
}));

$.ig.NumericScaler.prototype.actualMinimumValuePropertyName = "ActualMinimumValue";
$.ig.NumericScaler.prototype.actualMaximumValuePropertyName = "ActualMaximumValue";
$.ig.NumericScaler.prototype.unitRect = new $.ig.Rect(0, 0, 0, 1, 1);
$.ig.NumericScaler.prototype.actualMinimumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericScaler.prototype.actualMinimumValuePropertyName, Number, $.ig.NumericScaler.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).onPropertyChanged($.ig.NumericScaler.prototype.actualMinimumValuePropertyName, e.oldValue(), e.newValue());
}));
$.ig.NumericScaler.prototype.actualMaximumValueProperty = $.ig.DependencyProperty.prototype.register($.ig.NumericScaler.prototype.actualMaximumValuePropertyName, Number, $.ig.NumericScaler.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).onPropertyChanged($.ig.NumericScaler.prototype.actualMaximumValuePropertyName, e.oldValue(), e.newValue());
}));

$.ig.LogarithmicTickmarkValues.prototype._mINIMUM_VALUE_GREATER_THAN_ZERO = 4.94065645841247E-324;
$.ig.LogarithmicTickmarkValues.prototype._logarithmBasePropertyName = "LogarithmBase";
$.ig.LogarithmicTickmarkValues.prototype.logarithmBaseProperty = $.ig.DependencyProperty.prototype.register($.ig.LogarithmicTickmarkValues.prototype._logarithmBasePropertyName, $.ig.Number.prototype.$type, $.ig.LogarithmicTickmarkValues.prototype.$type, new $.ig.PropertyMetadata(2, 10, function (sender, e) {
}));

$.ig.TrendLineManagerBase$1.prototype.trendLineDashArrayPropertyName = "TrendLineDashArray";
$.ig.TrendLineManagerBase$1.prototype.trendLineTypePropertyName = "TrendLineType";
$.ig.TrendLineManagerBase$1.prototype.trendLinePeriodPropertyName = "TrendLinePeriod";
$.ig.TrendLineManagerBase$1.prototype.trendLineBrushPropertyName = "TrendLineBrush";
$.ig.TrendLineManagerBase$1.prototype.trendLineActualBrushPropertyName = "ActualTrendLineBrush";
$.ig.TrendLineManagerBase$1.prototype.trendLineThicknessPropertyName = "TrendLineThickness";
$.ig.TrendLineManagerBase$1.prototype.trendLineDashCapPropertyName = "TrendLineDashCap";
$.ig.TrendLineManagerBase$1.prototype.trendLineZIndexPropertyName = "TrendLineZIndex";

$.ig.MarkerSeries.prototype.markerTypePropertyName = "MarkerType";
$.ig.MarkerSeries.prototype.markerTemplatePropertyName = "MarkerTemplate";
$.ig.MarkerSeries.prototype.actualMarkerTemplatePropertyName = "ActualMarkerTemplate";
$.ig.MarkerSeries.prototype.markerBrushPropertyName = "MarkerBrush";
$.ig.MarkerSeries.prototype.actualMarkerBrushPropertyName = "ActualMarkerBrush";
$.ig.MarkerSeries.prototype.markerOutlinePropertyName = "MarkerOutline";
$.ig.MarkerSeries.prototype.actualMarkerOutlinePropertyName = "ActualMarkerOutline";
$.ig.MarkerSeries.prototype.markerStylePropertyName = "MarkerStyle";
$.ig.MarkerSeries.prototype.useLightweightMarkersPropertyName = "UseLightweightMarkers";
$.ig.MarkerSeries.prototype.markerThicknessDefault = 0.5;
$.ig.MarkerSeries.prototype.markerTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.markerTypePropertyName, $.ig.MarkerType.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.MarkerType.prototype.getBox($.ig.MarkerType.prototype.none), function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.markerTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.markerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.markerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.markerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.actualMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.actualMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.actualMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.__nullMarkerTemplate = null;
$.ig.MarkerSeries.prototype.markerBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.markerBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	var markerSeries = ($.ig.util.cast($.ig.MarkerSeries.prototype.$type, sender));
	markerSeries.raisePropertyChanged($.ig.MarkerSeries.prototype.markerBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.actualMarkerBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.actualMarkerBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.actualMarkerBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.markerOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.markerOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.markerOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.actualMarkerOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.actualMarkerOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.actualMarkerOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.markerStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.markerStylePropertyName, $.ig.Style.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.markerStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.MarkerSeries.prototype.useLightweightMarkersProperty = $.ig.DependencyProperty.prototype.register($.ig.MarkerSeries.prototype.useLightweightMarkersPropertyName, $.ig.Boolean.prototype.$type, $.ig.MarkerSeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.MarkerSeries.prototype.useLightweightMarkersPropertyName, e.oldValue(), e.newValue());
}));

$.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedPropertyName = "IsCustomCategoryStyleAllowed";
$.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedPropertyName = "IsCustomCategoryMarkerStyleAllowed";
$.ig.CategorySeries.prototype.errorBarSettingsPropertyName = "ErrorBarSettings";
$.ig.CategorySeries.prototype.useHighMarkerFidelityPropertyName = "UseHighMarkerFidelity";
$.ig.CategorySeries.prototype.transitionInModePropertyName = "TransitionInMode";
$.ig.CategorySeries.prototype.isTransitionInEnabledPropertyName = "IsTransitionInEnabled";
$.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedProperty = $.ig.DependencyProperty.prototype.register($.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedPropertyName, $.ig.Boolean.prototype.$type, $.ig.CategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategorySeries.prototype.isCustomCategoryStyleAllowedPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedProperty = $.ig.DependencyProperty.prototype.register($.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedPropertyName, $.ig.Boolean.prototype.$type, $.ig.CategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategorySeries.prototype.isCustomCategoryMarkerStyleAllowedPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategorySeries.prototype.useHighMarkerFidelityProperty = $.ig.DependencyProperty.prototype.register($.ig.CategorySeries.prototype.useHighMarkerFidelityPropertyName, $.ig.Boolean.prototype.$type, $.ig.CategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategorySeries.prototype.useHighMarkerFidelityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategorySeries.prototype.transitionInModeProperty = $.ig.DependencyProperty.prototype.register($.ig.CategorySeries.prototype.transitionInModePropertyName, $.ig.CategoryTransitionInMode.prototype.$type, $.ig.CategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.CategoryTransitionInMode.prototype.getBox($.ig.CategoryTransitionInMode.prototype.auto), function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategorySeries.prototype.transitionInModePropertyName, e.oldValue(), e.newValue());
}));
$.ig.CategorySeries.prototype.isTransitionInEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.CategorySeries.prototype.isTransitionInEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.CategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.CategorySeries.prototype.isTransitionInEnabledPropertyName, e.oldValue(), e.newValue());
}));

$.ig.AnchoredCategorySeries.prototype.valueMemberPathPropertyName = "ValueMemberPath";
$.ig.AnchoredCategorySeries.prototype.valueColumnPropertyName = "ValueColumn";
$.ig.AnchoredCategorySeries.prototype._markerCollisionAvoidancePropertyName = "MarkerCollisionAvoidance";
$.ig.AnchoredCategorySeries.prototype.valueMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.AnchoredCategorySeries.prototype.valueMemberPathPropertyName, String, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.AnchoredCategorySeries.prototype.valueMemberPathPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineTypePropertyName, $.ig.TrendLineType.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.TrendLineType.prototype.getBox($.ig.TrendLineType.prototype.none), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.actualTrendLineBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineActualBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineActualBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineThicknessPropertyName, Number, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, 1.5, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineDashCapProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineDashCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.flat), function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineDashCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLinePeriodProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLinePeriodPropertyName, $.ig.Number.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, 7, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLinePeriodPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.trendLineZIndexProperty = $.ig.DependencyProperty.prototype.register($.ig.Series.prototype.trendLineZIndexPropertyName, $.ig.Number.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, 1001, function (sender, e) {
	(sender).raisePropertyChanged($.ig.Series.prototype.trendLineZIndexPropertyName, e.oldValue(), e.newValue());
}));
$.ig.AnchoredCategorySeries.prototype.markerCollisionAvoidanceProperty = $.ig.DependencyProperty.prototype.register($.ig.AnchoredCategorySeries.prototype._markerCollisionAvoidancePropertyName, $.ig.CategorySeriesMarkerCollisionAvoidance.prototype.$type, $.ig.AnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.CategorySeriesMarkerCollisionAvoidance.prototype.getBox($.ig.CategorySeriesMarkerCollisionAvoidance.prototype.omit), function (oo, ee) {
	(oo).raisePropertyChanged($.ig.AnchoredCategorySeries.prototype._markerCollisionAvoidancePropertyName, ee.oldValue(), ee.newValue());
}));

$.ig.HorizontalAnchoredCategorySeries.prototype.xAxisPropertyName = "XAxis";
$.ig.HorizontalAnchoredCategorySeries.prototype.yAxisPropertyName = "YAxis";
$.ig.HorizontalAnchoredCategorySeries.prototype.xAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.HorizontalAnchoredCategorySeries.prototype.xAxisPropertyName, $.ig.CategoryAxisBase.prototype.$type, $.ig.HorizontalAnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.HorizontalAnchoredCategorySeries.prototype.xAxisPropertyName, e.oldValue(), e.newValue());
}));
$.ig.HorizontalAnchoredCategorySeries.prototype.yAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.HorizontalAnchoredCategorySeries.prototype.yAxisPropertyName, $.ig.NumericYAxis.prototype.$type, $.ig.HorizontalAnchoredCategorySeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.HorizontalAnchoredCategorySeries.prototype.yAxisPropertyName, e.oldValue(), e.newValue());
}));

$.ig.SeriesViewer.prototype.crosshairPointPropertyName = "CrosshairPoint";
$.ig.SeriesViewer.prototype.legendPropertyName = "Legend";
$.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesPropertyName = "AnimateSeriesWhenAxisRangeChanges";
$.ig.SeriesViewer.prototype.windowRectPropertyName = "WindowRect";
$.ig.SeriesViewer.prototype.useTiledZoomingPropertyName = "UseTiledZooming";
$.ig.SeriesViewer.prototype.preferHigherResolutionTilesPropertyName = "PreferHigherResolutionTiles";
$.ig.SeriesViewer.prototype.defaultZoomCacheSize = 30;
$.ig.SeriesViewer.prototype.zoomTileCacheSizePropertyName = "ZoomTileCacheSize";
$.ig.SeriesViewer.prototype.highlightingTransitionDurationPropertyName = "HighlightingTransitionDuration";
$.ig.SeriesViewer.prototype.isPagePanningAllowedPropertyName = "IsPagePanningAllowed";
$.ig.SeriesViewer.prototype.contentHitTestModePropertyName = "ContentHitTestMode";
$.ig.SeriesViewer.prototype.actualContentHitTestModePropertyName = "ActualContentHitTestMode";
$.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledPropertyName = "IsSurfaceInteractionDisabled";
$.ig.SeriesViewer.prototype.dRAG_DISTANCE = 10;
$.ig.SeriesViewer.prototype.dRAG_DISTANCE_NEAR = 2;
$.ig.SeriesViewer.prototype._windowResponsePropertyName = "WindowResponse";
$.ig.SeriesViewer.prototype.windowRectMinWidthPropertyName = "WindowRectMinWidth";
$.ig.SeriesViewer.prototype.actualSyncLinkPropertyName = "ActualSyncLink";
$.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityPropertyName = "OverviewPlusDetailPaneVisibility";
$.ig.SeriesViewer.prototype.crosshairVisibilityPropertyName = "CrosshairVisibility";
$.ig.SeriesViewer.prototype.isDragCrosshairEnabledPropertyName = "IsDragCrosshairEnabled";
$.ig.SeriesViewer.prototype.plotAreaBorderBrushPropertyName = "PlotAreaBorderBrush";
$.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushPropertyName = "ActualPlotAreaBorderBrush";
$.ig.SeriesViewer.prototype.plotAreaBorderThicknessPropertyName = "PlotAreaBorderThickness";
$.ig.SeriesViewer.prototype.plotAreaBackgroundPropertyName = "PlotAreaBackground";
$.ig.SeriesViewer.prototype.plotAreaMinWidthPropertyName = "PlotAreaMinWidth";
$.ig.SeriesViewer.prototype.plotAreaMinHeightPropertyName = "PlotAreaMinHeight";
$.ig.SeriesViewer.prototype.defaultInteractionPropertyName = "DefaultInteraction";
$.ig.SeriesViewer.prototype.dragModifierPropertyName = "DragModifier";
$.ig.SeriesViewer.prototype.panModifierPropertyName = "PanModifier";
$.ig.SeriesViewer.prototype.windowPositionHorizontalPropertyName = "WindowPositionHorizontal";
$.ig.SeriesViewer.prototype.windowPositionVerticalPropertyName = "WindowPositionVertical";
$.ig.SeriesViewer.prototype._contentPresenterName = "ContentPresenter";
$.ig.SeriesViewer.prototype.crosshairLineStylePropertyName = "CrosshairLineStyle";
$.ig.SeriesViewer.prototype.idleVisualStateName = "Idle";
$.ig.SeriesViewer.prototype.draggingVisualStateName = "Dragging";
$.ig.SeriesViewer.prototype.panningVisualStateName = "Panning";
$.ig.SeriesViewer.prototype.inkingVisualStateName = "Inking";
$.ig.SeriesViewer.prototype.erasingVisualStateName = "Erasing";
$.ig.SeriesViewer.prototype.previewPathStylePropertyName = "PreviewPathStyle";
$.ig.SeriesViewer.prototype.zoombarStylePropertyName = "ZoombarStyle";
$.ig.SeriesViewer.prototype.circleMarkerTemplatePropertyName = "CircleMarkerTemplate";
$.ig.SeriesViewer.prototype.triangleMarkerTemplatePropertyName = "TriangleMarkerTemplate";
$.ig.SeriesViewer.prototype.pyramidMarkerTemplatePropertyName = "PyramidMarkerTemplate";
$.ig.SeriesViewer.prototype.squareMarkerTemplatePropertyName = "SquareMarkerTemplate";
$.ig.SeriesViewer.prototype.diamondMarkerTemplatePropertyName = "DiamondMarkerTemplate";
$.ig.SeriesViewer.prototype.pentagonMarkerTemplatePropertyName = "PentagonMarkerTemplate";
$.ig.SeriesViewer.prototype.hexagonMarkerTemplatePropertyName = "HexagonMarkerTemplate";
$.ig.SeriesViewer.prototype.tetragramMarkerTemplatePropertyName = "TetragramMarkerTemplate";
$.ig.SeriesViewer.prototype.pentagramMarkerTemplatePropertyName = "PentagramMarkerTemplate";
$.ig.SeriesViewer.prototype.hexagramMarkerTemplatePropertyName = "HexagramMarkerTemplate";
$.ig.SeriesViewer.prototype.titlePropertyName = "Title";
$.ig.SeriesViewer.prototype.titleHorizontalAlignmentPropertyName = "TitleHorizontalAlignment";
$.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentPropertyName = "SubtitleHorizontalAlignment";
$.ig.SeriesViewer.prototype.titleTextStylePropertyName = "TitleTextStyle";
$.ig.SeriesViewer.prototype.subtitleTextStylePropertyName = "SubtitleTextStyle";
$.ig.SeriesViewer.prototype.titleTextColorPropertyName = "TitleTextColor";
$.ig.SeriesViewer.prototype.subtitleTextColorPropertyName = "SubtitleTextColor";
$.ig.SeriesViewer.prototype.titleTopMarginPropertyName = "TitleTopMargin";
$.ig.SeriesViewer.prototype.titleLeftMarginPropertyName = "TitleLeftMargin";
$.ig.SeriesViewer.prototype.titleRightMarginPropertyName = "TitleRightMargin";
$.ig.SeriesViewer.prototype.titleBottomMarginPropertyName = "TitleBottomMargin";
$.ig.SeriesViewer.prototype.subtitleTopMarginPropertyName = "SubtitleTopMargin";
$.ig.SeriesViewer.prototype.subtitleLeftMarginPropertyName = "SubtitleLeftMargin";
$.ig.SeriesViewer.prototype.subtitleRightMarginPropertyName = "SubtitleRightMargin";
$.ig.SeriesViewer.prototype.subtitleBottomMarginPropertyName = "SubtitleBottomMargin";
$.ig.SeriesViewer.prototype.subtitlePropertyName = "Subtitle";
$.ig.SeriesViewer.prototype.pixelScalingRatioPropertyName = "PixelScalingRatio";
$.ig.SeriesViewer.prototype.actualPixelScalingRatioPropertyName = "ActualPixelScalingRatio";
$.ig.SeriesViewer.prototype.actualWindowRectPropertyName = "ActualWindowRect";
$.ig.SeriesViewer.prototype.actualWindowPositionHorizontalPropertyName = "ActualWindowPositionHorizontal";
$.ig.SeriesViewer.prototype.actualWindowPositionVerticalPropertyName = "ActualWindowPositionVertical";
$.ig.SeriesViewer.prototype.legendProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.legendPropertyName, $.ig.LegendBase.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	var chart = $.ig.util.cast($.ig.SeriesViewer.prototype.$type, sender);
	chart.raisePropertyChanged($.ig.SeriesViewer.prototype.legendPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	var chart = $.ig.util.cast($.ig.SeriesViewer.prototype.$type, sender);
	chart.raisePropertyChanged($.ig.SeriesViewer.prototype.animateSeriesWhenAxisRangeChangesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.windowRectProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.windowRectPropertyName, $.ig.Rect.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, new $.ig.Rect(0, 0, 0, 1, 1), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.windowRectPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.useTiledZoomingProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.useTiledZoomingPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.useTiledZoomingPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.preferHigherResolutionTilesProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.preferHigherResolutionTilesPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.preferHigherResolutionTilesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.zoomTileCacheSizeProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.zoomTileCacheSizePropertyName, $.ig.Number.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.SeriesViewer.prototype.defaultZoomCacheSize, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.zoomTileCacheSizePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.highlightingTransitionDurationProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.highlightingTransitionDurationPropertyName, $.ig.Number.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, 300, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.highlightingTransitionDurationPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.isPagePanningAllowedProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.isPagePanningAllowedPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.isPagePanningAllowedPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.isSurfaceInteractionDisabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.windowResponseProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype._windowResponsePropertyName, $.ig.WindowResponse.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.WindowResponse.prototype.getBox($.ig.WindowResponse.prototype.deferred), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype._windowResponsePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.windowRectMinWidthProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.windowRectMinWidthPropertyName, Number, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, 0.0001, function (o, e) { (o).raisePropertyChanged($.ig.SeriesViewer.prototype.windowRectMinWidthPropertyName, e.oldValue(), e.newValue()); }));
$.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.collapsed), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.overviewPlusDetailPaneVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.crosshairVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.crosshairVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.crosshairVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.isDragCrosshairEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.isDragCrosshairEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.isDragCrosshairEnabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.plotAreaBorderBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.plotAreaBorderBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.plotAreaBorderBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.actualPlotAreaBorderBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.plotAreaBackgroundProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.plotAreaBackgroundPropertyName, $.ig.Brush.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.plotAreaBackgroundPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.plotAreaMinWidthProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.plotAreaMinWidthPropertyName, Number, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, 50, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.plotAreaMinWidthPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.plotAreaMinHeightProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.plotAreaMinHeightPropertyName, Number, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, 50, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.plotAreaMinHeightPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.defaultInteractionProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.defaultInteractionPropertyName, $.ig.InteractionState.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.InteractionState.prototype.getBox($.ig.InteractionState.prototype.auto), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.defaultInteractionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.dragModifierProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.dragModifierPropertyName, $.ig.ModifierKeys.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.ModifierKeys.prototype.getBox($.ig.ModifierKeys.prototype.none), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.dragModifierPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.panModifierProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.panModifierPropertyName, $.ig.ModifierKeys.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.ModifierKeys.prototype.getBox($.ig.ModifierKeys.prototype.shift), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.panModifierPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.windowPositionHorizontalProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.windowPositionHorizontalPropertyName, Number, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.windowPositionHorizontalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.windowPositionVerticalProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.windowPositionVerticalPropertyName, Number, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.windowPositionVerticalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.crosshairLineStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.crosshairLineStylePropertyName, $.ig.Style.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.crosshairLineStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.previewPathStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.previewPathStylePropertyName, $.ig.Style.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.previewPathStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.standardRect = $.ig.Rect.prototype.empty();
$.ig.SeriesViewer.prototype.zoombarStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.zoombarStylePropertyName, $.ig.Style.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.zoombarStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.circleMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.circleMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.circleMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.triangleMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.triangleMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.triangleMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.pyramidMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.pyramidMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.pyramidMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.squareMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.squareMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.squareMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.diamondMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.diamondMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.diamondMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.pentagonMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.pentagonMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.pentagonMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.hexagonMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.hexagonMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.hexagonMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.tetragramMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.tetragramMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.tetragramMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.pentagramMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.pentagramMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.pentagramMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.hexagramMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.hexagramMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.hexagramMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.titleProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.titlePropertyName, String, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.titlePropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.titleHorizontalAlignmentProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.titleHorizontalAlignmentPropertyName, $.ig.HorizontalAlignment.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.HorizontalAlignment.prototype.getBox($.ig.HorizontalAlignment.prototype.center), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.titleHorizontalAlignmentPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentPropertyName, $.ig.HorizontalAlignment.prototype.$type, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.HorizontalAlignment.prototype.getBox($.ig.HorizontalAlignment.prototype.center), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.subtitleHorizontalAlignmentPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SeriesViewer.prototype.subtitleProperty = $.ig.DependencyProperty.prototype.register($.ig.SeriesViewer.prototype.subtitlePropertyName, String, $.ig.SeriesViewer.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.SeriesViewer.prototype.subtitlePropertyName, e.oldValue(), e.newValue());
}));
if ($.ig.SeriesViewer.prototype.staticInit && !$.ig.SeriesViewer.prototype.seriesViewerStaticInitCalled) { $.ig.SeriesViewer.prototype.staticInit(); $.ig.SeriesViewer.prototype.seriesViewerStaticInitCalled = true; }

$.ig.XamDataChart.prototype.isSquarePropertyName = "IsSquare";
$.ig.XamDataChart.prototype.windowScaleHorizontalPropertyName = "WindowScaleHorizontal";
$.ig.XamDataChart.prototype.windowScaleVerticalPropertyName = "WindowScaleVertical";
$.ig.XamDataChart.prototype.actualWindowScaleHorizontalPropertyName = "ActualWindowScaleHorizontal";
$.ig.XamDataChart.prototype.actualWindowScaleVerticalPropertyName = "ActualWindowScaleVertical";
$.ig.XamDataChart.prototype.horizontalZoomablePropertyName = "HorizontalZoomable";
$.ig.XamDataChart.prototype.verticalZoomablePropertyName = "VerticalZoomable";
$.ig.XamDataChart.prototype.horizontalZoombarVisibilityPropertyName = "HorizontalZoombarVisibility";
$.ig.XamDataChart.prototype.verticalZoombarVisibilityPropertyName = "VerticalZoombarVisibility";
$.ig.XamDataChart.prototype.gridModePropertyName = "GridMode";
$.ig.XamDataChart.prototype.alignsGridLinesToPixelsPropertyName = "AlignsGridLinesToPixels";
$.ig.XamDataChart.prototype.shouldClipGridlinesPropertyName = "ShouldClipGridlines";
$.ig.XamDataChart.prototype.brushesPropertyName = "Brushes";
$.ig.XamDataChart.prototype.markerBrushesPropertyName = "MarkerBrushes";
$.ig.XamDataChart.prototype.outlinesPropertyName = "Outlines";
$.ig.XamDataChart.prototype.markerOutlinesPropertyName = "MarkerOutlines";
$.ig.XamDataChart.prototype.defaultAxisStrokePropertyName = "DefaultAxisStroke";
$.ig.XamDataChart.prototype.defaultAxisMajorStrokePropertyName = "DefaultAxisMajorStroke";
$.ig.XamDataChart.prototype.defaultAxisMinorStrokePropertyName = "DefaultAxisMinorStroke";
$.ig.XamDataChart.prototype.plotAreaBackgroundContentPropertyName = "PlotAreaBackgroundContent";
$.ig.XamDataChart.prototype.decimalMinimumValueAsDouble = 0;
$.ig.XamDataChart.prototype.decimalMaximumValueAsDouble = 0;
$.ig.XamDataChart.prototype.isSquareProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.isSquarePropertyName, $.ig.Boolean.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.isSquarePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.windowScaleHorizontalProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.windowScaleHorizontalPropertyName, Number, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.windowScaleHorizontalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.windowScaleVerticalProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.windowScaleVerticalPropertyName, Number, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.windowScaleVerticalPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.horizontalZoomableProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.horizontalZoomablePropertyName, $.ig.Boolean.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.horizontalZoomablePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.verticalZoomableProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.verticalZoomablePropertyName, $.ig.Boolean.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.verticalZoomablePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.horizontalZoombarVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.horizontalZoombarVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.collapsed), function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.horizontalZoombarVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.verticalZoombarVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.verticalZoombarVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.collapsed), function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.verticalZoombarVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.gridModeProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.gridModePropertyName, $.ig.GridMode.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.GridMode.prototype.getBox($.ig.GridMode.prototype.behindSeries), function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.gridModePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.alignsGridLinesToPixelsProperty = $.ig.DependencyProperty.prototype.register("AlignsGridLinesToPixels", $.ig.Boolean.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.alignsGridLinesToPixelsPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.shouldClipGridlinesProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.shouldClipGridlinesPropertyName, $.ig.Boolean.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.shouldClipGridlinesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.brushesProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.brushesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.brushesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.markerBrushesProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.markerBrushesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.markerBrushesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.outlinesProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.outlinesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.outlinesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.markerOutlinesProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.markerOutlinesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.markerOutlinesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.defaultAxisStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.defaultAxisStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.defaultAxisStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.defaultAxisMajorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.defaultAxisMajorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.defaultAxisMajorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.defaultAxisMinorStrokeProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.defaultAxisMinorStrokePropertyName, $.ig.Brush.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.defaultAxisMinorStrokePropertyName, e.oldValue(), e.newValue());
}));
$.ig.XamDataChart.prototype.plotAreaBackgroundContentProperty = $.ig.DependencyProperty.prototype.register($.ig.XamDataChart.prototype.plotAreaBackgroundContentPropertyName, $.ig.FrameworkElement.prototype.$type, $.ig.XamDataChart.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.XamDataChart.prototype.plotAreaBackgroundContentPropertyName, e.oldValue(), e.newValue());
}));
if ($.ig.XamDataChart.prototype.staticInit && !$.ig.XamDataChart.prototype.xamDataChartStaticInitCalled) { $.ig.XamDataChart.prototype.staticInit(); $.ig.XamDataChart.prototype.xamDataChartStaticInitCalled = true; }

$.ig.PieChartBase.prototype._contentPresenterName = "ContentPresenter";
$.ig.PieChartBase.prototype.fastItemsSourcePropertyName = "FastItemsSource";
$.ig.PieChartBase.prototype.valueColumnPropertyName = "ValueColumn";
$.ig.PieChartBase.prototype.leaderLinePathControlPointOffset = 30;
$.ig.PieChartBase.prototype.itemsSourcePropertyName = "ItemsSource";
$.ig.PieChartBase.prototype.innerExtentPropertyName = "InnerExtent";
$.ig.PieChartBase.prototype.valueMemberPathPropertyName = "ValueMemberPath";
$.ig.PieChartBase.prototype.labelMemberPathPropertyName = "LabelMemberPath";
$.ig.PieChartBase.prototype.legendLabelMemberPathPropertyName = "LegendLabelMemberPath";
$.ig.PieChartBase.prototype.labelColumnPropertyName = "LabelColumn";
$.ig.PieChartBase.prototype.legendLabelColumnPropertyName = "LegendLabelColumn";
$.ig.PieChartBase.prototype.labelsPositionPropertyName = "LabelsPosition";
$.ig.PieChartBase.prototype.leaderLineVisibilityPropertyName = "LeaderLineVisibility";
$.ig.PieChartBase.prototype.leaderLineStylePropertyName = "LeaderLineStyle";
$.ig.PieChartBase.prototype.leaderLineTypePropertyName = "LeaderLineType";
$.ig.PieChartBase.prototype.leaderLineMarginPropertyName = "LeaderLineMargin";
$.ig.PieChartBase.prototype.toolTipPropertyName = "ToolTip";
$.ig.PieChartBase.prototype.othersCategoryThresholdPropertyName = "OthersCategoryThreshold";
$.ig.PieChartBase.prototype.othersCategoryTypePropertyName = "OthersCategoryType";
$.ig.PieChartBase.prototype.othersCategoryTextPropertyName = "OthersCategoryText";
$.ig.PieChartBase.prototype.explodedRadiusPropertyName = "ExplodedRadius";
$.ig.PieChartBase.prototype.radiusFactorPropertyName = "RadiusFactor";
$.ig.PieChartBase.prototype.allowSliceSelectionPropertyName = "AllowSliceSelection";
$.ig.PieChartBase.prototype.allowSliceExplosionPropertyName = "AllowSliceExplosion";
$.ig.PieChartBase.prototype.legendPropertyName = "Legend";
$.ig.PieChartBase.prototype.labelExtentPropertyName = "LabelExtent";
$.ig.PieChartBase.prototype.startAnglePropertyName = "StartAngle";
$.ig.PieChartBase.prototype.sweepDirectionPropertyName = "SweepDirection";
$.ig.PieChartBase.prototype.othersCategoryStylePropertyName = "OthersCategoryStyle";
$.ig.PieChartBase.prototype.selectedStylePropertyName = "SelectedStyle";
$.ig.PieChartBase.prototype.toolTipStylePropertyName = "ToolTipStyle";
$.ig.PieChartBase.prototype.brushesPropertyName = "Brushes";
$.ig.PieChartBase.prototype.outlinesPropertyName = "Outlines";
$.ig.PieChartBase.prototype.legendItemTemplatePropertyName = "LegendItemTemplate";
$.ig.PieChartBase.prototype.legendItemBadgeTemplatePropertyName = "LegendItemBadgeTemplate";
$.ig.PieChartBase.prototype._labelTemplatePropertyName = "LabelTemplate";
$.ig.PieChartBase.prototype.isSurfaceInteractionDisabledPropertyName = "IsSurfaceInteractionDisabled";
$.ig.PieChartBase.prototype.formatLabelPropertyName = "FormatLabel";
$.ig.PieChartBase.prototype.formatLegendLabelPropertyName = "FormatLegendLabel";
$.ig.PieChartBase.prototype.textStylePropertyName = "TextStyle";
$.ig.PieChartBase.prototype.fastItemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.fastItemsSourcePropertyName, $.ig.FastItemsSource.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.fastItemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.itemsSourceProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.itemsSourcePropertyName, $.ig.IEnumerable.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.itemsSourcePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.innerExtentProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.innerExtentPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.innerExtentPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.valueMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.valueMemberPathPropertyName, String, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.valueMemberPathPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.labelMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.labelMemberPathPropertyName, String, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.labelMemberPathPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.legendLabelMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.legendLabelMemberPathPropertyName, String, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	($.ig.util.cast($.ig.PieChartBase.prototype.$type, o)).raisePropertyChanged($.ig.PieChartBase.prototype.legendLabelMemberPathPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.labelsPositionProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.labelsPositionPropertyName, $.ig.LabelsPosition.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.LabelsPosition.prototype.getBox($.ig.LabelsPosition.prototype.center), function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.labelsPositionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.leaderLineVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.leaderLineVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.leaderLineVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.leaderLineStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.leaderLineStylePropertyName, $.ig.Style.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.leaderLineStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.leaderLineTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.leaderLineTypePropertyName, $.ig.LeaderLineType.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.LeaderLineType.prototype.getBox($.ig.LeaderLineType.prototype.straight), function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.leaderLineTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.leaderLineMarginProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.leaderLineMarginPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 6, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.leaderLineMarginPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.toolTipProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.toolTipPropertyName, $.ig.Object.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.toolTipPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.othersCategoryThresholdProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.othersCategoryThresholdPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 3, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.othersCategoryThresholdPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.othersCategoryTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.othersCategoryTypePropertyName, $.ig.OthersCategoryType.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.OthersCategoryType.prototype.getBox($.ig.OthersCategoryType.prototype.percent), function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.othersCategoryTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.othersCategoryTextProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.othersCategoryTextPropertyName, String, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, "Others", function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.othersCategoryTextPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.explodedRadiusProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.explodedRadiusPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 0.2, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.explodedRadiusPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.radiusFactorProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.radiusFactorPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 0.9, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.radiusFactorPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.allowSliceSelectionProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.allowSliceSelectionPropertyName, $.ig.Boolean.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.allowSliceSelectionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.allowSliceExplosionProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.allowSliceExplosionPropertyName, $.ig.Boolean.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.allowSliceExplosionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.legendProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.legendPropertyName, $.ig.LegendBase.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.legendPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.labelExtentProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.labelExtentPropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 10, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.labelExtentPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.startAngleProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.startAnglePropertyName, Number, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.startAnglePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.sweepDirectionProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.sweepDirectionPropertyName, $.ig.SweepDirection.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.SweepDirection.prototype.getBox($.ig.SweepDirection.prototype.clockwise), function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.sweepDirectionPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.othersCategoryStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.othersCategoryStylePropertyName, $.ig.Style.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.othersCategoryStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.selectedStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.selectedStylePropertyName, $.ig.Style.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.selectedStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.toolTipStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.toolTipStylePropertyName, $.ig.Style.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.PieChartBase.prototype.toolTipStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.brushesProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.brushesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.brushesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.outlinesProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.outlinesPropertyName, $.ig.BrushCollection.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.outlinesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.legendItemTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.legendItemTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.legendItemTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.legendItemBadgeTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.legendItemBadgeTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.legendItemBadgeTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.labelTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype._labelTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype._labelTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.isSurfaceInteractionDisabledProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.isSurfaceInteractionDisabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.isSurfaceInteractionDisabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.formatLabelProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.formatLabelPropertyName, $.ig.PieChartFormatLabelHandler.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.PieChartBase.prototype.formatLabelPropertyName, e.oldValue(), e.newValue());
}));
$.ig.PieChartBase.prototype.formatLegendLabelProperty = $.ig.DependencyProperty.prototype.register($.ig.PieChartBase.prototype.formatLegendLabelPropertyName, $.ig.PieChartFormatLabelHandler.prototype.$type, $.ig.PieChartBase.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	($.ig.util.cast($.ig.PieChartBase.prototype.$type, sender)).raisePropertyChanged($.ig.PieChartBase.prototype.formatLegendLabelPropertyName, e.oldValue(), e.newValue());
}));

$.ig.Slice.prototype.startAnglePropertyName = "StartAngle";
$.ig.Slice.prototype.endAnglePropertyName = "EndAngle";
$.ig.Slice.prototype.innerExtentStartPropertyName = "InnerExtentStart";
$.ig.Slice.prototype.innerExtentEndPropertyName = "InnerExtentEnd";
$.ig.Slice.prototype.isSelectedPropertyName = "IsSelected";
$.ig.Slice.prototype.isExplodedPropertyName = "IsExploded";
$.ig.Slice.prototype.isOtherSlicePropertyName = "IsOtherSlice";
$.ig.Slice.prototype.originPropertyName = "Origin";
$.ig.Slice.prototype.explodedOriginPropertyName = "ExplodedOrigin";
$.ig.Slice.prototype.radiusPropertyName = "Radius";
$.ig.Slice.prototype.explodedRadiusPropertyName = "ExplodedRadius";
$.ig.Slice.prototype.indexPropertyName = "Index";
$.ig.Slice.prototype.strokeThicknessPropertyName = "StrokeThickness";
$.ig.Slice.prototype.startAngleProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.startAnglePropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.endAngleProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.endAnglePropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.innerExtentStartProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.innerExtentStartPropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.innerExtentEndProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.innerExtentEndPropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.isSelectedProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.isSelectedPropertyName, $.ig.Boolean.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, false, function (o, e) {
	var slice = $.ig.util.cast($.ig.Slice.prototype.$type, o);
	var shouldSelect = e.newValue();
	if (slice.owner() != null) {
		slice.owner().selectSlice(slice, shouldSelect);
	}
}));
$.ig.Slice.prototype.isExplodedProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.isExplodedPropertyName, $.ig.Boolean.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, false, function (o, e) {
	var slice = $.ig.util.cast($.ig.Slice.prototype.$type, o);
	var explode = e.newValue();
	if (slice.owner() != null) {
		slice.owner().explodeSlice(slice, explode);
	}
}));
$.ig.Slice.prototype.isOtherSliceProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.isOtherSlicePropertyName, $.ig.Boolean.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, false, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.originProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.originPropertyName, $.ig.Point.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, new $.ig.Point(0), function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.explodedOriginProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.explodedOriginPropertyName, $.ig.Point.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, new $.ig.Point(0), function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.radiusProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.radiusPropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.explodedRadiusProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.explodedRadiusPropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.indexProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.indexPropertyName, $.ig.Number.prototype.$type, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, -1, function (o, e) { (o).createShape(); }));
$.ig.Slice.prototype.strokeThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.Slice.prototype.strokeThicknessPropertyName, Number, $.ig.Slice.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) { (o).createShape(); }));

$.ig.SyncSettings.prototype.syncChannelPropertyName = "SyncChannel";
$.ig.SyncSettings.prototype.synchronizeVerticallyPropertyName = "SynchronizeVertically";
$.ig.SyncSettings.prototype.synchronizeHorizontallyPropertyName = "SynchronizeHorizontally";
$.ig.SyncSettings.prototype.syncChannelProperty = $.ig.DependencyProperty.prototype.register($.ig.SyncSettings.prototype.syncChannelPropertyName, String, $.ig.SyncSettings.prototype.$type, new $.ig.PropertyMetadata(2, null, function (o, e) {
	(o).raisePropertyChanged($.ig.SyncSettings.prototype.syncChannelPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SyncSettings.prototype.synchronizeVerticallyProperty = $.ig.DependencyProperty.prototype.register($.ig.SyncSettings.prototype.synchronizeVerticallyPropertyName, $.ig.Boolean.prototype.$type, $.ig.SyncSettings.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.SyncSettings.prototype.synchronizeVerticallyPropertyName, e.oldValue(), e.newValue());
}));
$.ig.SyncSettings.prototype.synchronizeHorizontallyProperty = $.ig.DependencyProperty.prototype.register($.ig.SyncSettings.prototype.synchronizeHorizontallyPropertyName, $.ig.Boolean.prototype.$type, $.ig.SyncSettings.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.SyncSettings.prototype.synchronizeHorizontallyPropertyName, e.oldValue(), e.newValue());
}));

$.ig.SyncLinkManager.prototype.__instance = null;

if ($.ig.NonCollisionAvoider.prototype.staticInit && !$.ig.NonCollisionAvoider.prototype.nonCollisionAvoiderStaticInitCalled) { $.ig.NonCollisionAvoider.prototype.staticInit(); $.ig.NonCollisionAvoider.prototype.nonCollisionAvoiderStaticInitCalled = true; }

$.ig.CategoryFrame.prototype._categoryFrameVersion = 0;

$.ig.SplineSeriesBase.prototype._splineTypePropertyName = "SplineType";
$.ig.SplineSeriesBase.prototype.splineTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.SplineSeriesBase.prototype._splineTypePropertyName, $.ig.SplineType.prototype.$type, $.ig.SplineSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.SplineType.prototype.getBox($.ig.SplineType.prototype.natural), function (sender, e) {
	(sender).raisePropertyChanged($.ig.SplineSeriesBase.prototype._splineTypePropertyName, e.oldValue(), e.newValue());
}));

$.ig.TileZoomManager.prototype.tileSize = 512;
$.ig.TileZoomManager.prototype._maxAllowedSkew = 3;

$.ig.StackedSeriesBase.prototype.autoGenerateSeriesPropertyName = "AutoGenerateSeries";
$.ig.StackedSeriesBase.prototype.reverseLegendOrderPropertyName = "ReverseLegendOrder";
$.ig.StackedSeriesBase.prototype.seriesVisibilityPropertyName = "SeriesVisibility";
$.ig.StackedSeriesBase.prototype.autoGenerateSeriesProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedSeriesBase.prototype.autoGenerateSeriesPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, false, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedSeriesBase.prototype.autoGenerateSeriesPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedSeriesBase.prototype.reverseLegendOrderProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedSeriesBase.prototype.reverseLegendOrderPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedSeriesBase.prototype.reverseLegendOrderPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedSeriesBase.prototype.seriesVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedSeriesBase.prototype.seriesVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.StackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedSeriesBase.prototype.seriesVisibilityPropertyName, e.oldValue(), e.newValue());
}));

$.ig.VerticalStackedSeriesBase.prototype.xAxisPropertyName = "XAxis";
$.ig.VerticalStackedSeriesBase.prototype.yAxisPropertyName = "YAxis";
$.ig.VerticalStackedSeriesBase.prototype.xAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.VerticalStackedSeriesBase.prototype.xAxisPropertyName, $.ig.NumericXAxis.prototype.$type, $.ig.VerticalStackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.VerticalStackedSeriesBase.prototype.xAxisPropertyName, e.oldValue(), e.newValue());
}));
$.ig.VerticalStackedSeriesBase.prototype.yAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.VerticalStackedSeriesBase.prototype.yAxisPropertyName, $.ig.CategoryYAxis.prototype.$type, $.ig.VerticalStackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.VerticalStackedSeriesBase.prototype.yAxisPropertyName, e.oldValue(), e.newValue());
}));

$.ig.StackedBarSeries.prototype.radiusXPropertyName = "RadiusX";
$.ig.StackedBarSeries.prototype.radiusYPropertyName = "RadiusY";
$.ig.StackedBarSeries.prototype.radiusXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedBarSeries.prototype.radiusXPropertyName, Number, $.ig.StackedBarSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedBarSeries.prototype.radiusXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedBarSeries.prototype.radiusYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedBarSeries.prototype.radiusYPropertyName, Number, $.ig.StackedBarSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedBarSeries.prototype.radiusYPropertyName, e.oldValue(), e.newValue());
}));

$.ig.ColumnFragment.prototype.radiusXPropertyName = "RadiusX";
$.ig.ColumnFragment.prototype.radiusYPropertyName = "RadiusY";
$.ig.ColumnFragment.prototype.radiusXProperty = $.ig.DependencyProperty.prototype.register($.ig.ColumnFragment.prototype.radiusXPropertyName, Number, $.ig.ColumnFragment.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.ColumnFragment.prototype.radiusXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.ColumnFragment.prototype.radiusYProperty = $.ig.DependencyProperty.prototype.register($.ig.ColumnFragment.prototype.radiusYPropertyName, Number, $.ig.ColumnFragment.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.ColumnFragment.prototype.radiusYPropertyName, e.oldValue(), e.newValue());
}));

$.ig.HorizontalStackedSeriesBase.prototype.xAxisPropertyName = "XAxis";
$.ig.HorizontalStackedSeriesBase.prototype.yAxisPropertyName = "YAxis";
$.ig.HorizontalStackedSeriesBase.prototype.xAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.HorizontalStackedSeriesBase.prototype.xAxisPropertyName, $.ig.CategoryAxisBase.prototype.$type, $.ig.HorizontalStackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.HorizontalStackedSeriesBase.prototype.xAxisPropertyName, e.oldValue(), e.newValue());
}));
$.ig.HorizontalStackedSeriesBase.prototype.yAxisProperty = $.ig.DependencyProperty.prototype.register($.ig.HorizontalStackedSeriesBase.prototype.yAxisPropertyName, $.ig.NumericYAxis.prototype.$type, $.ig.HorizontalStackedSeriesBase.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.HorizontalStackedSeriesBase.prototype.yAxisPropertyName, e.oldValue(), e.newValue());
}));

$.ig.StackedColumnSeries.prototype.radiusXPropertyName = "RadiusX";
$.ig.StackedColumnSeries.prototype.radiusYPropertyName = "RadiusY";
$.ig.StackedColumnSeries.prototype.radiusXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedColumnSeries.prototype.radiusXPropertyName, Number, $.ig.StackedColumnSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedColumnSeries.prototype.radiusXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedColumnSeries.prototype.radiusYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedColumnSeries.prototype.radiusYPropertyName, Number, $.ig.StackedColumnSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedColumnSeries.prototype.radiusYPropertyName, e.oldValue(), e.newValue());
}));

$.ig.StackedFragmentSeries.prototype.brushPropertyName = "Brush";
$.ig.StackedFragmentSeries.prototype.actualBrushPropertyName = "ActualBrush";
$.ig.StackedFragmentSeries.prototype.dashArrayPropertyName = "DashArray";
$.ig.StackedFragmentSeries.prototype.actualDashArrayPropertyName = "ActualDashArray";
$.ig.StackedFragmentSeries.prototype.dashCapPropertyName = "DashCap";
$.ig.StackedFragmentSeries.prototype.actualDashCapPropertyName = "ActualDashCap";
$.ig.StackedFragmentSeries.prototype.isDropShadowEnabledPropertyName = "IsDropShadowEnabled";
$.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledPropertyName = "ActualIsDropShadowEnabled";
$.ig.StackedFragmentSeries.prototype.shadowBlurPropertyName = "ShadowBlur";
$.ig.StackedFragmentSeries.prototype.actualShadowBlurPropertyName = "ActualShadowBlur";
$.ig.StackedFragmentSeries.prototype.shadowColorPropertyName = "ShadowColor";
$.ig.StackedFragmentSeries.prototype.actualShadowColorPropertyName = "ActualShadowColor";
$.ig.StackedFragmentSeries.prototype.useSingleShadowPropertyName = "UseSingleShadow";
$.ig.StackedFragmentSeries.prototype.actualUseSingleShadowPropertyName = "ActualUseSingleShadow";
$.ig.StackedFragmentSeries.prototype.shadowOffsetXPropertyName = "ShadowOffsetX";
$.ig.StackedFragmentSeries.prototype.actualShadowOffsetXPropertyName = "ActualShadowOffsetX";
$.ig.StackedFragmentSeries.prototype.shadowOffsetYPropertyName = "ShadowOffsetY";
$.ig.StackedFragmentSeries.prototype.actualShadowOffsetYPropertyName = "ActualShadowOffsetY";
$.ig.StackedFragmentSeries.prototype.endCapPropertyName = "EndCap";
$.ig.StackedFragmentSeries.prototype.actualEndCapPropertyName = "ActualEndCap";
$.ig.StackedFragmentSeries.prototype.isHitTestVisiblePropertyName = "IsHitTestVisible";
$.ig.StackedFragmentSeries.prototype.actualIsHitTestVisiblePropertyName = "ActualIsHitTestVisible";
$.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplatePropertyName = "LegendItemBadgeTemplate";
$.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplatePropertyName = "ActualLegendItemBadgeTemplate";
$.ig.StackedFragmentSeries.prototype.legendItemTemplatePropertyName = "LegendItemTemplate";
$.ig.StackedFragmentSeries.prototype.actualLegendItemTemplatePropertyName = "ActualLegendItemTemplate";
$.ig.StackedFragmentSeries.prototype.legendItemVisibilityPropertyName = "LegendItemVisibility";
$.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityPropertyName = "ActualLegendItemVisibility";
$.ig.StackedFragmentSeries.prototype.markerBrushPropertyName = "MarkerBrush";
$.ig.StackedFragmentSeries.prototype.actualMarkerBrushPropertyName = "ActualMarkerBrush";
$.ig.StackedFragmentSeries.prototype.markerOutlinePropertyName = "MarkerOutline";
$.ig.StackedFragmentSeries.prototype.actualMarkerOutlinePropertyName = "ActualMarkerOutline";
$.ig.StackedFragmentSeries.prototype.markerStylePropertyName = "MarkerStyle";
$.ig.StackedFragmentSeries.prototype.actualMarkerStylePropertyName = "ActualMarkerStyle";
$.ig.StackedFragmentSeries.prototype.markerTemplatePropertyName = "MarkerTemplate";
$.ig.StackedFragmentSeries.prototype.actualMarkerTemplatePropertyName = "ActualMarkerTemplate";
$.ig.StackedFragmentSeries.prototype.markerTypePropertyName = "MarkerType";
$.ig.StackedFragmentSeries.prototype.actualMarkerTypePropertyName = "ActualMarkerType";
$.ig.StackedFragmentSeries.prototype.namePropertyName = "Name";
$.ig.StackedFragmentSeries.prototype.opacityPropertyName = "Opacity";
$.ig.StackedFragmentSeries.prototype.actualOpacityPropertyName = "ActualOpacity";
$.ig.StackedFragmentSeries.prototype.opacityMaskPropertyName = "OpacityMask";
$.ig.StackedFragmentSeries.prototype.actualOpacityMaskPropertyName = "ActualOpacityMask";
$.ig.StackedFragmentSeries.prototype.outlinePropertyName = "Outline";
$.ig.StackedFragmentSeries.prototype.actualOutlinePropertyName = "ActualOutline";
$.ig.StackedFragmentSeries.prototype.areaFillOpacityPropertyName = "AreaFillOpacity";
$.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityPropertyName = "ActualAreaFillOpacity";
$.ig.StackedFragmentSeries.prototype.radiusXPropertyName = "RadiusX";
$.ig.StackedFragmentSeries.prototype.actualRadiusXPropertyName = "ActualRadiusX";
$.ig.StackedFragmentSeries.prototype.radiusYPropertyName = "RadiusY";
$.ig.StackedFragmentSeries.prototype.actualRadiusYPropertyName = "ActualRadiusY";
$.ig.StackedFragmentSeries.prototype.startCapPropertyName = "StartCap";
$.ig.StackedFragmentSeries.prototype.actualStartCapPropertyName = "ActualStartCap";
$.ig.StackedFragmentSeries.prototype.thicknessPropertyName = "Thickness";
$.ig.StackedFragmentSeries.prototype.actualThicknessPropertyName = "ActualThickness";
$.ig.StackedFragmentSeries.prototype.titlePropertyName = "Title";
$.ig.StackedFragmentSeries.prototype.toolTipPropertyName = "ToolTip";
$.ig.StackedFragmentSeries.prototype.actualToolTipPropertyName = "ActualToolTip";
$.ig.StackedFragmentSeries.prototype.useLightweightMarkersPropertyName = "UseLightweightMarkers";
$.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersPropertyName = "ActualUseLightweightMarkers";
$.ig.StackedFragmentSeries.prototype.valueMemberPathPropertyName = "ValueMemberPath";
$.ig.StackedFragmentSeries.prototype.visibilityPropertyName = "Visibility";
$.ig.StackedFragmentSeries.prototype.actualVisibilityPropertyName = "ActualVisibility";
$.ig.StackedFragmentSeries.prototype.parentOrLocalBrushPropertyName = "ParentOrLocalBrush";
$.ig.StackedFragmentSeries.prototype.brushProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.brushPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.brushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.dashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.dashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.dashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualDashArrayProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualDashArrayPropertyName, $.ig.DoubleCollection.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualDashArrayPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.dashCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.dashCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.flat), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.dashCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualDashCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualDashCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.flat), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualDashCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.isDropShadowEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.isDropShadowEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.isDropShadowEnabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualIsDropShadowEnabledPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.shadowBlurProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.shadowBlurPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.shadowBlurPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualShadowBlurProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualShadowBlurPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualShadowBlurPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.shadowColorProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.shadowColorPropertyName, $.ig.Color.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.shadowColorPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualShadowColorProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualShadowColorPropertyName, $.ig.Color.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualShadowColorPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.useSingleShadowProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.useSingleShadowPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.useSingleShadowPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualUseSingleShadowProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualUseSingleShadowPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, true, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualUseSingleShadowPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.shadowOffsetXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.shadowOffsetXPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.shadowOffsetXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualShadowOffsetXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualShadowOffsetXPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualShadowOffsetXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.shadowOffsetYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.shadowOffsetYPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.shadowOffsetYPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualShadowOffsetYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualShadowOffsetYPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualShadowOffsetYPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.endCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.endCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.endCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualEndCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualEndCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualEndCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.isHitTestVisibleProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.isHitTestVisiblePropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.isHitTestVisiblePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualIsHitTestVisibleProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualIsHitTestVisiblePropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, true, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualIsHitTestVisiblePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.legendItemBadgeTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualLegendItemBadgeTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.legendItemTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.legendItemTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.legendItemTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualLegendItemTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualLegendItemTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualLegendItemTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.legendItemVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.legendItemVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.legendItemVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualLegendItemVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.markerBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.markerBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.markerBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualMarkerBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualMarkerBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualMarkerBrushPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.markerOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.markerOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.markerOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualMarkerOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualMarkerOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualMarkerOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.markerStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.markerStylePropertyName, $.ig.Style.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.markerStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualMarkerStyleProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualMarkerStylePropertyName, $.ig.Style.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualMarkerStylePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.markerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.markerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.markerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualMarkerTemplateProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualMarkerTemplatePropertyName, $.ig.DataTemplate.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualMarkerTemplatePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.markerTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.markerTypePropertyName, $.ig.MarkerType.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.MarkerType.prototype.getBox($.ig.MarkerType.prototype.unset), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.markerTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualMarkerTypeProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualMarkerTypePropertyName, $.ig.MarkerType.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.MarkerType.prototype.getBox($.ig.MarkerType.prototype.none), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualMarkerTypePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.nameProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.namePropertyName, String, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.namePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.opacityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.opacityPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.opacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualOpacityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualOpacityPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualOpacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.opacityMaskProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.opacityMaskPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.opacityMaskPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualOpacityMaskProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualOpacityMaskPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualOpacityMaskPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.outlineProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.outlinePropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.outlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualOutlineProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualOutlinePropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualOutlinePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.areaFillOpacityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.areaFillOpacityPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, NaN, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.areaFillOpacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualAreaFillOpacityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.radiusXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.radiusXPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.radiusXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualRadiusXProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualRadiusXPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualRadiusXPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.radiusYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.radiusYPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 2, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.radiusYPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualRadiusYProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualRadiusYPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 0, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualRadiusYPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.startCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.startCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.startCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualStartCapProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualStartCapPropertyName, $.ig.PenLineCap.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.PenLineCap.prototype.getBox($.ig.PenLineCap.prototype.round), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualStartCapPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.thicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.thicknessPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 1.5, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.thicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualThicknessProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualThicknessPropertyName, Number, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, 1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualThicknessPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.titleProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.titlePropertyName, $.ig.Object.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, "Series Title", function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.titlePropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.toolTipProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.toolTipPropertyName, $.ig.Object.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.toolTipPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualToolTipProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualToolTipPropertyName, $.ig.Object.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualToolTipPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.useLightweightMarkersProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.useLightweightMarkersPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.useLightweightMarkersPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersPropertyName, $.ig.Boolean.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, false, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualUseLightweightMarkersPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.valueMemberPathProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.valueMemberPathPropertyName, String, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, null, function (sender, e) {
	(sender).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.valueMemberPathPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.visibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.visibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.visibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.actualVisibilityProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.actualVisibilityPropertyName, $.ig.Visibility.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(2, $.ig.Visibility.prototype.getBox($.ig.Visibility.prototype.visible), function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.actualVisibilityPropertyName, e.oldValue(), e.newValue());
}));
$.ig.StackedFragmentSeries.prototype.parentOrLocalBrushProperty = $.ig.DependencyProperty.prototype.register($.ig.StackedFragmentSeries.prototype.parentOrLocalBrushPropertyName, $.ig.Brush.prototype.$type, $.ig.StackedFragmentSeries.prototype.$type, new $.ig.PropertyMetadata(1, function (o, e) {
	(o).raisePropertyChanged($.ig.StackedFragmentSeries.prototype.parentOrLocalBrushPropertyName, e.oldValue(), e.newValue());
}));

} (jQuery));



(function ($) {
$.ig = $.ig || {};
var $$t = {}
$.ig.$currDefinitions = $$t;
$.ig.util.bulkDefine(["SeriesView:b", 
"Object:c", 
"Type:d", 
"Boolean:e", 
"ValueType:f", 
"Void:g", 
"IConvertible:h", 
"IFormatProvider:i", 
"Number:j", 
"String:k", 
"IComparable:l", 
"Number:m", 
"IComparable$1:n", 
"IEquatable$1:o", 
"Number:p", 
"Number:q", 
"Number:r", 
"NumberStyles:s", 
"Enum:t", 
"Array:u", 
"IList:v", 
"ICollection:w", 
"IEnumerable:x", 
"IEnumerator:y", 
"NotSupportedException:z", 
"Error:aa", 
"Number:ab", 
"String:ac", 
"StringComparison:ad", 
"RegExp:ae", 
"CultureInfo:af", 
"DateTimeFormatInfo:ag", 
"Calendar:ah", 
"Date:ai", 
"Number:aj", 
"DayOfWeek:ak", 
"DateTimeKind:al", 
"CalendarWeekRule:am", 
"NumberFormatInfo:an", 
"CompareInfo:ao", 
"CompareOptions:ap", 
"IEnumerable$1:aq", 
"IEnumerator$1:ar", 
"IDisposable:as", 
"StringSplitOptions:at", 
"Number:au", 
"Number:av", 
"Number:aw", 
"Number:ax", 
"Number:ay", 
"Number:az", 
"Assembly:a0", 
"Stream:a1", 
"SeekOrigin:a2", 
"RuntimeTypeHandle:a3", 
"MethodInfo:a4", 
"MethodBase:a5", 
"MemberInfo:a6", 
"ParameterInfo:a7", 
"TypeCode:a8", 
"ConstructorInfo:a9", 
"PropertyInfo:ba", 
"ISchedulableRender:bb", 
"IProvidesViewport:bc", 
"Rect:bd", 
"Size:be", 
"Point:bf", 
"Math:bg", 
"Series:bh", 
"Control:bi", 
"FrameworkElement:bj", 
"UIElement:bk", 
"DependencyObject:bl", 
"Dictionary:bm", 
"DependencyProperty:bn", 
"PropertyMetadata:bo", 
"PropertyChangedCallback:bp", 
"MulticastDelegate:bq", 
"IntPtr:br", 
"DependencyPropertyChangedEventArgs:bs", 
"DependencyPropertiesCollection:bt", 
"UnsetValue:bu", 
"Script:bv", 
"Binding:bw", 
"PropertyPath:bx", 
"Transform:by", 
"Visibility:bz", 
"Style:b0", 
"Thickness:b1", 
"HorizontalAlignment:b2", 
"VerticalAlignment:b3", 
"INotifyPropertyChanged:b4", 
"PropertyChangedEventHandler:b5", 
"PropertyChangedEventArgs:b6", 
"DoubleAnimator:b7", 
"EasingFunctionHandler:b8", 
"Action$1:b9", 
"Callback:ca", 
"Delegate:cb", 
"Interlocked:cc", 
"Canvas:cd", 
"Panel:ce", 
"UIElementCollection:cf", 
"ObservableCollection$1:cg", 
"List$1:ch", 
"IList$1:ci", 
"ICollection$1:cj", 
"IArray:ck", 
"IArrayList:cl", 
"Array:cm", 
"CompareCallback:cn", 
"Func$3:co", 
"Comparer$1:cp", 
"IComparer:cq", 
"IComparer$1:cr", 
"DefaultComparer$1:cs", 
"Comparison$1:ct", 
"ReadOnlyCollection$1:cu", 
"Predicate$1:cv", 
"NotImplementedException:cw", 
"INotifyCollectionChanged:cx", 
"NotifyCollectionChangedEventHandler:cy", 
"NotifyCollectionChangedEventArgs:cz", 
"EventArgs:c0", 
"NotifyCollectionChangedAction:c1", 
"Dictionary$2:c2", 
"IDictionary$2:c3", 
"IDictionary:c4", 
"Func$2:c5", 
"KeyValuePair$2:c6", 
"Enumerable:c7", 
"Thread:c8", 
"ThreadStart:c9", 
"IOrderedEnumerable$1:da", 
"SortedList$1:db", 
"ArgumentNullException:dc", 
"IEqualityComparer$1:dd", 
"EqualityComparer$1:de", 
"IEqualityComparer:df", 
"DefaultEqualityComparer$1:dg", 
"InvalidOperationException:dh", 
"ArgumentException:di", 
"ContentInfo:dj", 
"Axis:dk", 
"AxisView:dl", 
"Path:dm", 
"Shape:dn", 
"Brush:dp", 
"Color:dq", 
"DoubleCollection:dr", 
"Geometry:ds", 
"GeometryType:dt", 
"SeriesViewer:du", 
"SeriesViewerView:dv", 
"CanvasRenderScheduler:dw", 
"window:dx", 
"RenderingContext:dy", 
"IRenderer:dz", 
"Rectangle:d0", 
"TextBlock:d1", 
"Polygon:d2", 
"PointCollection:d3", 
"Polyline:d4", 
"DataTemplateRenderInfo:d5", 
"DataTemplatePassInfo:d6", 
"ContentControl:d7", 
"DataTemplate:d8", 
"DataTemplateRenderHandler:d9", 
"DataTemplateMeasureHandler:ea", 
"DataTemplateMeasureInfo:eb", 
"DataTemplatePassHandler:ec", 
"Line:ed", 
"FontInfo:ee", 
"XamOverviewPlusDetailPane:ef", 
"XamOverviewPlusDetailPaneView:eg", 
"XamOverviewPlusDetailPaneViewManager:eh", 
"JQueryObject:ei", 
"Element:ej", 
"ElementAttributeCollection:ek", 
"ElementCollection:el", 
"WebStyle:em", 
"ElementNodeType:en", 
"Document:eo", 
"EventListener:ep", 
"IElementEventHandler:eq", 
"ElementEventHandler:er", 
"ElementAttribute:es", 
"JQueryPosition:et", 
"JQueryCallback:eu", 
"JQueryEvent:ev", 
"JQueryUICallback:ew", 
"EventProxy:ex", 
"ModifierKeys:ey", 
"MouseWheelHandler:ez", 
"GestureHandler:e0", 
"ZoomGestureHandler:e1", 
"FlingGestureHandler:e2", 
"ContactHandler:e3", 
"TouchHandler:e4", 
"MouseOverHandler:e5", 
"MouseHandler:e6", 
"KeyHandler:e7", 
"Key:e8", 
"JQuery:e9", 
"JQueryDeferred:fa", 
"JQueryPromise:fb", 
"Action:fc", 
"CanvasViewRenderer:fd", 
"CanvasContext2D:fe", 
"CanvasContext:ff", 
"TextMetrics:fg", 
"ImageData:fh", 
"CanvasElement:fi", 
"Gradient:fj", 
"LinearGradientBrush:fk", 
"GradientStop:fl", 
"GeometryGroup:fm", 
"GeometryCollection:fn", 
"FillRule:fo", 
"PathGeometry:fp", 
"PathFigureCollection:fq", 
"LineGeometry:fr", 
"RectangleGeometry:fs", 
"EllipseGeometry:ft", 
"ArcSegment:fu", 
"PathSegment:fv", 
"PathSegmentType:fw", 
"SweepDirection:fx", 
"PathFigure:fy", 
"PathSegmentCollection:fz", 
"LineSegment:f0", 
"PolyLineSegment:f1", 
"BezierSegment:f2", 
"PolyBezierSegment:f3", 
"GeometryUtil:f4", 
"Tuple$2:f5", 
"TransformGroup:f6", 
"TransformCollection:f7", 
"TranslateTransform:f8", 
"RotateTransform:f9", 
"ScaleTransform:ga", 
"DivElement:gb", 
"BaseDOMEventProxy:gc", 
"DOMEventProxy:gd", 
"MSGesture:ge", 
"MouseEventArgs:gf", 
"ImageElement:gg", 
"RectUtil:gh", 
"MathUtil:gi", 
"RuntimeHelpers:gj", 
"RuntimeFieldHandle:gk", 
"PropertyChangedEventArgs$1:gl", 
"InteractionState:gm", 
"OverviewPlusDetailPaneMode:gn", 
"IOverviewPlusDetailControl:go", 
"EventHandler$1:gp", 
"OverviewPlusDetailViewportHost:gq", 
"XamDataChart:gr", 
"GridMode:gs", 
"BrushCollection:gt", 
"InterpolationMode:gu", 
"Random:gv", 
"ColorUtil:gw", 
"AxisCollection:gx", 
"XamDataChartView:gy", 
"SeriesViewerViewManager:gz", 
"AxisTitlePosition:g0", 
"PointerTooltipStyle:g1", 
"CanvasGestureDOMEventProxy:g2", 
"TouchPointInfo:g3", 
"DOMExecutionContext:g4", 
"IExecutionContext:g5", 
"ExecutionContextExecuteCallback:g6", 
"TouchGestureRecognizer:g7", 
"TouchGestureState:g8", 
"TouchVelocityTracker:g9", 
"TouchHistoryItem:ha", 
"TouchVelocityReading:hb", 
"TouchGestureEventHandler:hc", 
"TouchGestureEventArgs:hd", 
"CancelableTouchGestureEventHandler:he", 
"CssHelper:hf", 
"CssGradientUtil:hg", 
"FontUtil:hh", 
"TileZoomTile:hi", 
"TileZoomTileInfo:hj", 
"TileZoomTileCache:hk", 
"TileZoomManager:hl", 
"RectChangedEventHandler:hm", 
"RectChangedEventArgs:hn", 
"Debug:ho", 
"TileZoomInfo:hp", 
"LinkedList$1:hq", 
"LinkedListNode$1:hr", 
"RenderSurface:hs", 
"FragmentBase:ht", 
"HorizontalAnchoredCategorySeries:hu", 
"AnchoredCategorySeries:hv", 
"CategorySeries:hw", 
"MarkerSeries:hx", 
"MarkerSeriesView:hy", 
"Marker:hz", 
"DataContext:h0", 
"MarkerTemplates:h1", 
"HashPool$2:h2", 
"IHashPool$2:h3", 
"IPool$1:h4", 
"Func$1:h5", 
"Pool$1:h6", 
"IIndexedPool$1:h7", 
"MarkerType:h8", 
"SeriesVisualData:h9", 
"PrimitiveVisualDataList:ia", 
"IVisualData:ib", 
"PrimitiveVisualData:ic", 
"PrimitiveAppearanceData:id", 
"BrushAppearanceData:ie", 
"StringBuilder:ig", 
"Environment:ih", 
"AppearanceHelper:ii", 
"LinearGradientBrushAppearanceData:ij", 
"GradientStopAppearanceData:ik", 
"SolidBrushAppearanceData:il", 
"GeometryData:im", 
"GetPointsSettings:io", 
"EllipseGeometryData:ip", 
"RectangleGeometryData:iq", 
"LineGeometryData:ir", 
"PathGeometryData:is", 
"PathFigureData:it", 
"SegmentData:iu", 
"LineSegmentData:iv", 
"PolylineSegmentData:iw", 
"ArcSegmentData:ix", 
"PolyBezierSegmentData:iy", 
"BezierSegmentData:iz", 
"LabelAppearanceData:i0", 
"ShapeTags:i1", 
"PointerTooltipVisualDataList:i2", 
"MarkerVisualDataList:i3", 
"MarkerVisualData:i4", 
"PointerTooltipVisualData:i5", 
"RectangleVisualData:i6", 
"PolygonVisualData:i7", 
"PolyLineVisualData:i8", 
"IFastItemsSource:i9", 
"IFastItemColumn$1:ja", 
"IFastItemColumnPropertyName:jb", 
"FastItemsSourceEventArgs:jc", 
"FastItemsSourceEventAction:jd", 
"IHasCategoryModePreference:je", 
"IHasCategoryAxis:jf", 
"CategoryAxisBase:jg", 
"ICategoryScaler:jh", 
"IScaler:ji", 
"ScalerParams:jj", 
"CategoryMode:jk", 
"CategoryAxisBaseView:jl", 
"IFastItemsSourceProvider:jm", 
"AxisRangeChangedEventArgs:jn", 
"AxisLabelSettings:jo", 
"AxisLabelsLocation:jp", 
"PropertyUpdatedEventHandler:jq", 
"PropertyUpdatedEventArgs:jr", 
"ISupportsErrorBars:js", 
"CategoryFramePreparer:jt", 
"CategoryFramePreparerBase:ju", 
"FramePreparer:jv", 
"ISupportsMarkers:jw", 
"DefaultSupportsMarkers:jx", 
"DefaultProvidesViewport:jy", 
"DefaultSupportsErrorBars:jz", 
"Frame:j0", 
"BrushUtil:j1", 
"IBucketizer:j2", 
"IIsCategoryBased:j3", 
"IDetectsCollisions:j4", 
"CategoryFrame:j5", 
"PreparationParams:j6", 
"ISortingAxis:j7", 
"CategoryYAxis:j8", 
"CategoryYAxisView:j9", 
"AxisOrientation:ka", 
"NumericScaler:kb", 
"NumericAxisBase:kc", 
"NumericAxisBaseView:kd", 
"NumericAxisRenderer:ke", 
"AxisRendererBase:kf", 
"ShouldRenderHandler:kg", 
"ScaleValueHandler:kh", 
"AxisRenderingParametersBase:ki", 
"RangeInfo:kj", 
"TickmarkValues:kk", 
"TickmarkValuesInitializationParameters:kl", 
"Func$4:km", 
"GetGroupCenterHandler:kn", 
"GetUnscaledGroupCenterHandler:ko", 
"PathRenderingInfo:kp", 
"RenderStripHandler:kq", 
"RenderLineHandler:kr", 
"ShouldRenderLinesHandler:ks", 
"ShouldRenderContentHandler:kt", 
"RenderAxisLineHandler:ku", 
"DetermineCrossingValueHandler:kv", 
"ShouldRenderLabelHandler:kw", 
"GetLabelLocationHandler:kx", 
"LabelPosition:ky", 
"TransformToLabelValueHandler:kz", 
"AxisLabelManager:k0", 
"AxisLabelPanelBase:k1", 
"AxisLabelPanelBaseView:k2", 
"TitleSettings:k3", 
"GetLabelForItemHandler:k4", 
"CreateRenderingParamsHandler:k5", 
"SnapMajorValueHandler:k6", 
"AdjustMajorValueHandler:k7", 
"CategoryAxisRenderingParameters:k8", 
"LogarithmicTickmarkValues:k9", 
"LogarithmicNumericSnapper:la", 
"Snapper:lb", 
"LinearTickmarkValues:lc", 
"LinearNumericSnapper:ld", 
"AxisRange:le", 
"AutoRangeCalculator:lf", 
"NumericYAxis:lg", 
"StraightNumericAxisBase:lh", 
"StraightNumericAxisBaseView:li", 
"NumericScaleMode:lj", 
"LogarithmicScaler:lk", 
"NumericXAxis:ll", 
"NumericXAxisView:lm", 
"HorizontalSmartAxisLabelPanel:ln", 
"HorizontalAxisLabelPanelBase:lo", 
"HorizontalAxisLabelPanelBaseView:lp", 
"AxisExtentType:lq", 
"SmartAxisLabelDisplayType:lr", 
"HorizontalSmartAxisLabelPanelView:ls", 
"FontMappingInfo:lt", 
"CategoryDateTimeXAxis:lu", 
"CategoryDateTimeXAxisView:lv", 
"TimeAxisDisplayType:lw", 
"FastItemDateTimeColumn:lx", 
"IFastItemColumnInternal:ly", 
"FastItemColumn:lz", 
"FastReflectionHelper:l0", 
"HorizontalAxisLabelPanel:l1", 
"CoercionInfo:l2", 
"SortedListView$1:l3", 
"ArrayUtil:l4", 
"NumericAxisRenderingParameters:l5", 
"HorizontalLogarithmicScaler:l6", 
"HorizontalLinearScaler:l7", 
"LinearScaler:l8", 
"NumericYAxisView:l9", 
"VerticalAxisLabelPanel:ma", 
"VerticalAxisLabelPanelView:mb", 
"VerticalLogarithmicScaler:mc", 
"VerticalLinearScaler:md", 
"NumericRadiusAxis:me", 
"NumericRadiusAxisView:mf", 
"NumericAngleAxis:mg", 
"IAngleScaler:mh", 
"NumericAngleAxisView:mi", 
"PolarAxisRenderingManager:mj", 
"ViewportUtils:mk", 
"PolarAxisRenderingParameters:ml", 
"IPolarRadialRenderingParameters:mm", 
"RadialAxisRenderingParameters:mn", 
"AngleAxisLabelPanel:mo", 
"AngleAxisLabelPanelView:mp", 
"Extensions:mq", 
"CategoryAngleAxis:mr", 
"CategoryAngleAxisView:ms", 
"CategoryAxisRenderer:mt", 
"LinearCategorySnapper:mu", 
"CategoryTickmarkValues:mv", 
"RadialAxisLabelPanel:mw", 
"RadialAxisLabelPanelView:mx", 
"SyncSettings:my", 
"ValuesHolder:mz", 
"LineSeries:m0", 
"LineSeriesView:m1", 
"AnchoredCategorySeriesView:m2", 
"CategorySeriesView:m3", 
"CategoryBucketCalculator:m4", 
"CategoryTrendLineManagerBase:m5", 
"TrendLineManagerBase$1:m6", 
"TrendLineType:m7", 
"Clipper:m8", 
"EdgeClipper:m9", 
"LeftClipper:na", 
"BottomClipper:nb", 
"RightClipper:nc", 
"TopClipper:nd", 
"TrendResolutionParams:ne", 
"Flattener:nf", 
"Stack$1:ng", 
"ReverseArrayEnumerator$1:nh", 
"SpiralTodo:ni", 
"FlattenerSettings:nj", 
"IPreparesCategoryTrendline:nk", 
"SortingTrendLineManager:nl", 
"TrendFitCalculator:nm", 
"LeastSquaresFit:nn", 
"Numeric:no", 
"TrendAverageCalculator:np", 
"CategoryTrendLineManager:nq", 
"AnchoredCategoryBucketCalculator:nr", 
"UnknownValuePlotting:ns", 
"CategoryLineRasterizer:nt", 
"Action$5:nu", 
"PathVisualData:nv", 
"CategorySeriesRenderManager:nw", 
"AssigningCategoryStyleEventArgs:nx", 
"AssigningCategoryStyleEventArgsBase:ny", 
"GetCategoryItemsHandler:nz", 
"HighlightingInfo:n0", 
"HighlightingState:n1", 
"PenLineCap:n2", 
"AssigningCategoryMarkerStyleEventArgs:n3", 
"HighlightingManager:n4", 
"SplineSeriesBase:n5", 
"SplineSeriesBaseView:n6", 
"SplineType:n7", 
"CollisionAvoider:n8", 
"SafeSortedReadOnlyDoubleCollection:n9", 
"SafeReadOnlyDoubleCollection:oa", 
"SafeEnumerable:ob", 
"AreaSeries:oc", 
"AreaSeriesView:od", 
"LegendTemplates:oe", 
"PieChartBase:of", 
"PieChartBaseView:og", 
"PieChartViewManager:oh", 
"PieChartVisualData:oi", 
"PieSliceVisualDataList:oj", 
"PieSliceVisualData:ok", 
"PieSliceDataContext:ol", 
"Slice:om", 
"SliceView:on", 
"PieLabel:oo", 
"LabelsPosition:op", 
"MouseButtonEventArgs:oq", 
"FastItemsSource:or", 
"ColumnReference:os", 
"FastItemObjectColumn:ot", 
"FastItemIntColumn:ou", 
"LeaderLineType:ov", 
"OthersCategoryType:ow", 
"IndexCollection:ox", 
"LegendBase:oy", 
"LegendBaseView:oz", 
"LegendBaseViewManager:o0", 
"GradientData:o1", 
"GradientStopData:o2", 
"DataChartLegendMouseButtonEventArgs:o3", 
"DataChartMouseButtonEventArgs:o4", 
"ChartLegendMouseEventArgs:o5", 
"ChartMouseEventArgs:o6", 
"DataChartLegendMouseButtonEventHandler:o7", 
"DataChartLegendMouseEventHandler:o8", 
"LegendVisualData:o9", 
"LegendVisualDataList:pa", 
"LegendItemVisualData:pb", 
"FunnelSliceDataContext:pc", 
"PieChartFormatLabelHandler:pd", 
"LabelClickEventHandler:pe", 
"LabelClickEventArgs:pf", 
"SliceClickEventHandler:pg", 
"SliceClickEventArgs:ph", 
"ItemLegend:pi", 
"ItemLegendView:pj", 
"LegendItemInfo:pk", 
"BubbleSeries:pl", 
"ScatterBase:pm", 
"ScatterBaseView:pn", 
"MarkerManagerBase:po", 
"OwnedPoint:pp", 
"MarkerManagerBucket:pq", 
"ScatterTrendLineManager:pr", 
"NumericMarkerManager:ps", 
"CollisionAvoidanceType:pt", 
"SmartPlacer:pu", 
"ISmartPlaceable:pv", 
"SmartPosition:pw", 
"SmartPlaceableWrapper$1:px", 
"ScatterAxisInfoCache:py", 
"ScatterErrorBarSettings:pz", 
"ErrorBarSettingsBase:p0", 
"EnableErrorBars:p1", 
"ErrorBarCalculatorReference:p2", 
"IErrorBarCalculator:p3", 
"ErrorBarCalculatorType:p4", 
"ScatterFrame:p5", 
"ScatterFrameBase$1:p6", 
"DictInterpolator$3:p7", 
"Action$6:p8", 
"SeriesHitTestMode:p9", 
"SyncLink:qa", 
"ChartCollection:qb", 
"FastItemsSourceReference:qc", 
"SyncManager:qd", 
"SyncLinkManager:qe", 
"ErrorBarsHelper:qf", 
"BubbleSeriesView:qg", 
"BubbleMarkerManager:qh", 
"SizeScale:qi", 
"BrushScale:qj", 
"ScaleLegend:qk", 
"ScaleLegendView:ql", 
"CustomPaletteBrushScale:qm", 
"BrushSelectionMode:qn", 
"ValueBrushScale:qo", 
"RingSeriesBase:qp", 
"XamDoughnutChart:qq", 
"RingCollection:qr", 
"Ring:qs", 
"RingControl:qt", 
"RingControlView:qu", 
"Arc:qv", 
"ArcView:qw", 
"ArcItem:qx", 
"SliceItem:qy", 
"RingSeriesBaseView:qz", 
"Nullable$1:q0", 
"RingSeriesCollection:q1", 
"SliceCollection:q2", 
"XamDoughnutChartView:q3", 
"Action$2:q4", 
"DoughnutChartVisualData:q5", 
"RingSeriesVisualDataList:q6", 
"RingSeriesVisualData:q7", 
"RingVisualDataList:q8", 
"RingVisualData:q9", 
"ArcVisualDataList:ra", 
"ArcVisualData:rb", 
"SliceVisualDataList:rc", 
"SliceVisualData:rd", 
"DoughnutChartLabelVisualData:re", 
"HoleDimensionsChangedEventHandler:rf", 
"HoleDimensionsChangedEventArgs:rg", 
"XamFunnelChart:rh", 
"IItemProvider:ri", 
"MessageHandler:rj", 
"MessageHandlerEventHandler:rk", 
"Message:rl", 
"ServiceProvider:rm", 
"MessageChannel:rn", 
"MessageEventHandler:ro", 
"Queue$1:rp", 
"XamFunnelConnector:rq", 
"XamFunnelController:rr", 
"SliceInfoList:rs", 
"SliceInfo:rt", 
"SliceAppearance:ru", 
"PointList:rv", 
"FunnelSliceVisualData:rw", 
"PointData:rx", 
"SliceInfoUnaryComparison:ry", 
"Bezier:rz", 
"BezierPoint:r0", 
"BezierOp:r1", 
"BezierPointComparison:r2", 
"DoubleColumn:r3", 
"ObjectColumn:r4", 
"XamFunnelView:r5", 
"IOuterLabelWidthDecider:r6", 
"IFunnelLabelSizeDecider:r7", 
"MouseLeaveMessage:r8", 
"InteractionMessage:r9", 
"MouseMoveMessage:sa", 
"MouseButtonMessage:sb", 
"MouseButtonAction:sc", 
"MouseButtonType:sd", 
"SetAreaSizeMessage:se", 
"RenderingMessage:sf", 
"RenderSliceMessage:sg", 
"RenderOuterLabelMessage:sh", 
"TooltipValueChangedMessage:si", 
"TooltipUpdateMessage:sj", 
"FunnelDataContext:sk", 
"PropertyChangedMessage:sl", 
"ConfigurationMessage:sm", 
"ClearMessage:sn", 
"ClearTooltipMessage:so", 
"ContainerSizeChangedMessage:sp", 
"ViewportChangedMessage:sq", 
"ViewPropertyChangedMessage:sr", 
"OuterLabelAlignment:ss", 
"FunnelSliceDisplay:st", 
"SliceSelectionManager:su", 
"DataUpdatedMessage:sv", 
"ItemsSourceAction:sw", 
"FunnelFrame:sx", 
"UserSelectedItemsChangedMessage:sy", 
"LabelSizeChangedMessage:sz", 
"FrameRenderCompleteMessage:s0", 
"IntColumn:s1", 
"IntColumnComparison:s2", 
"Convert:s3", 
"SelectedItemsChangedMessage:s4", 
"ModelUpdateMessage:s5", 
"SliceClickedMessage:s6", 
"FunnelSliceClickedEventHandler:s7", 
"FunnelSliceClickedEventArgs:s8", 
"FunnelChartVisualData:s9", 
"FunnelSliceVisualDataList:ta", 
"RingSeries:tb", 
"WaterfallSeries:tc", 
"WaterfallSeriesView:td", 
"CategoryTransitionInMode:te", 
"FinancialSeries:tf", 
"FinancialSeriesView:tg", 
"FinancialBucketCalculator:th", 
"CategoryTransitionSourceFramePreparer:ti", 
"TransitionInSpeedType:tj", 
"FinancialCalculationDataSource:tk", 
"CalculatedColumn:tl", 
"FinancialEventArgs:tm", 
"FinancialCalculationSupportingCalculations:tn", 
"ColumnSupportingCalculation:to", 
"SupportingCalculation$1:tp", 
"SupportingCalculationStrategy:tq", 
"DataSourceSupportingCalculation:tr", 
"ProvideColumnValuesStrategy:ts", 
"AssigningCategoryStyleEventHandler:tt", 
"FinancialValueList:tu", 
"CategoryXAxis:tv", 
"CategoryXAxisView:tw", 
"FinancialEventHandler:tx", 
"StepLineSeries:ty", 
"StepLineSeriesView:tz", 
"StepAreaSeries:t0", 
"StepAreaSeriesView:t1", 
"RangeAreaSeries:t2", 
"HorizontalRangeCategorySeries:t3", 
"RangeCategorySeries:t4", 
"IHasHighLowValueCategory:t5", 
"RangeCategorySeriesView:t6", 
"RangeCategoryBucketCalculator:t7", 
"RangeCategoryFramePreparer:t8", 
"IHasCategoryTrendline:t9", 
"IHasTrendline:ua", 
"DefaultCategoryTrendlineHost:ub", 
"DefaultCategoryTrendlinePreparer:uc", 
"DefaultHighLowValueProvider:ud", 
"HighLowValuesHolder:ue", 
"CategoryMarkerManager:uf", 
"RangeValueList:ug", 
"RangeAreaSeriesView:uh", 
"LineFragment:ui", 
"LineFragmentView:uj", 
"StackedSeriesBase:uk", 
"StackedSeriesView:ul", 
"StackedBucketCalculator:um", 
"StackedSeriesManager:un", 
"StackedSeriesCollection:uo", 
"StackedFragmentSeries:up", 
"StackedAreaSeries:uq", 
"HorizontalStackedSeriesBase:ur", 
"StackedSplineAreaSeries:us", 
"AreaFragment:ut", 
"AreaFragmentView:uu", 
"AreaFragmentBucketCalculator:uv", 
"IStacked100Series:uw", 
"SplineAreaFragment:ux", 
"SplineFragmentBase:uy", 
"SplineAreaFragmentView:uz", 
"StackedColumnSeries:u0", 
"StackedColumnSeriesView:u1", 
"StackedColumnBucketCalculator:u2", 
"ColumnFragment:u3", 
"ColumnFragmentView:u4", 
"StackedBarSeries:u5", 
"VerticalStackedSeriesBase:u6", 
"IBarSeries:u7", 
"StackedBarSeriesView:u8", 
"StackedBarBucketCalculator:u9", 
"BarFragment:va", 
"StackedLineSeries:vb", 
"StackedSplineSeries:vc", 
"SplineFragment:vd", 
"SplineFragmentView:ve", 
"SplineFragmentBucketCalculator:vf", 
"StackedSeriesFramePreparer:vg", 
"SingleValuesHolder:vh", 
"IHasSingleValueCategory:vi", 
"StackedSeriesCreatedEventHandler:vj", 
"StackedSeriesCreatedEventArgs:vk", 
"StackedSeriesVisualData:vl", 
"SeriesVisualDataList:vm", 
"LineFragmentBucketCalculator:vn", 
"DefaultSingleValueProvider:vo", 
"AssigningCategoryMarkerStyleEventHandler:vp", 
"SeriesComponentsForView:vq", 
"CategorySeriesMarkerCollisionAvoidance:vr", 
"NonCollisionAvoider:vs", 
"AxisRangeChangedEventHandler:vt", 
"DataChartAxisRangeChangedEventHandler:vu", 
"ChartAxisRangeChangedEventArgs:vv", 
"ChartVisualData:vw", 
"AxisVisualDataList:vx", 
"ChartTitleVisualData:vy", 
"VisualDataSerializer:vz", 
"AxisVisualData:v0", 
"AxisLabelVisualDataList:v1", 
"AxisLabelVisualData:v2", 
"RadialBase:v3", 
"RadialBaseView:v4", 
"RadialBucketCalculator:v5", 
"SeriesRenderer$2:v6", 
"SeriesRenderingArguments:v7", 
"RadialFrame:v8", 
"RadialAxes:v9", 
"PolarBase:wa", 
"PolarBaseView:wb", 
"PolarTrendLineManager:wc", 
"PolarLinePlanner:wd", 
"AngleRadiusPair:we", 
"PolarAxisInfoCache:wf", 
"PolarFrame:wg", 
"PolarAxes:wh", 
"SeriesCollection:wi", 
"SeriesViewerComponentsFromView:wj", 
"SeriesViewerSurfaceViewer:wk", 
"ChartContentManager:wl", 
"ChartContentType:wm", 
"LabelPanelArranger:wn", 
"LabelPanelsArrangeState:wo", 
"VisualExportHelper:wp", 
"ChartHitTestMode:wq", 
"WindowResponse:wr", 
"ViewerSurfaceUsage:ws", 
"SeriesViewerComponentsForView:wt", 
"DataChartCursorEventHandler:wu", 
"ChartCursorEventArgs:wv", 
"DataChartMouseButtonEventHandler:ww", 
"DataChartMouseEventHandler:wx", 
"AnnotationLayer:wy", 
"AnnotationLayerView:wz", 
"RenderRequestedEventArgs:w0", 
"RefreshCompletedEventHandler:w1", 
"AxisComponentsForView:w2", 
"AxisComponentsFromView:w3", 
"AxisFormatLabelHandler:w4", 
"LabelFontHeuristics:w5", 
"PolygonUtil:w6", 
"TrendCalculators:w7", 
"SeriesComponentsFromView:w8", 
"EasingFunctions:w9", 
"AbstractEnumerable:aar", 
"AbstractEnumerator:aas", 
"GenericEnumerable$1:aat", 
"GenericEnumerator$1:aau"]);


} (jQuery));


